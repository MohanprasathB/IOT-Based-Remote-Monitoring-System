
Mongoose_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024e54  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .iram         000007ac  080250f4  080250f4  000260f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000fe84  080258a0  080258a0  000268a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08035724  08035724  00037a2c  2**0
                  CONTENTS
  5 .ARM          00000008  08035724  08035724  00036724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0803572c  0803572c  00037a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0803572c  0803572c  0003672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08035730  08035730  00036730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000096c  24000000  08035734  00037000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxDecripSection 00000060  2400096c  080360a0  0003796c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .TxDecripSection 00000060  240009cc  08036100  000379cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000036a4  24000a30  08036160  00037a30  2**3
                  ALLOC
 13 ._user_heap_stack 00000604  240040d4  08036160  000380d4  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00037a2c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002c461  00000000  00000000  00037a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000037a8  00000000  00000000  00063ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002068  00000000  00000000  00067668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001acf  00000000  00000000  000696d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003d4fc  00000000  00000000  0006b19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00026334  00000000  00000000  000a869b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018a3b3  00000000  00000000  000ce9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00258d82  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a934  00000000  00000000  00258dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000065  00000000  00000000  002636fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000a30 	.word	0x24000a30
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080250dc 	.word	0x080250dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000a34 	.word	0x24000a34
 80002dc:	080250dc 	.word	0x080250dc

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c24 <SystemInit+0xfc>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b32:	4a3c      	ldr	r2, [pc, #240]	@ (8000c24 <SystemInit+0xfc>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000b3c:	4b39      	ldr	r3, [pc, #228]	@ (8000c24 <SystemInit+0xfc>)
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	4a38      	ldr	r2, [pc, #224]	@ (8000c24 <SystemInit+0xfc>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b48:	4b37      	ldr	r3, [pc, #220]	@ (8000c28 <SystemInit+0x100>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	2b06      	cmp	r3, #6
 8000b52:	d807      	bhi.n	8000b64 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b54:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <SystemInit+0x100>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f023 030f 	bic.w	r3, r3, #15
 8000b5c:	4a32      	ldr	r2, [pc, #200]	@ (8000c28 <SystemInit+0x100>)
 8000b5e:	f043 0307 	orr.w	r3, r3, #7
 8000b62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b64:	4b31      	ldr	r3, [pc, #196]	@ (8000c2c <SystemInit+0x104>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a30      	ldr	r2, [pc, #192]	@ (8000c2c <SystemInit+0x104>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b70:	4b2e      	ldr	r3, [pc, #184]	@ (8000c2c <SystemInit+0x104>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b76:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <SystemInit+0x104>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	492c      	ldr	r1, [pc, #176]	@ (8000c2c <SystemInit+0x104>)
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c30 <SystemInit+0x108>)
 8000b7e:	4013      	ands	r3, r2
 8000b80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b82:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <SystemInit+0x100>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d007      	beq.n	8000b9e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b8e:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <SystemInit+0x100>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f023 030f 	bic.w	r3, r3, #15
 8000b96:	4a24      	ldr	r2, [pc, #144]	@ (8000c28 <SystemInit+0x100>)
 8000b98:	f043 0307 	orr.w	r3, r3, #7
 8000b9c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b9e:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <SystemInit+0x104>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <SystemInit+0x104>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <SystemInit+0x104>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <SystemInit+0x104>)
 8000bb2:	4a20      	ldr	r2, [pc, #128]	@ (8000c34 <SystemInit+0x10c>)
 8000bb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <SystemInit+0x104>)
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <SystemInit+0x110>)
 8000bba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <SystemInit+0x104>)
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8000c3c <SystemInit+0x114>)
 8000bc0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <SystemInit+0x104>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <SystemInit+0x104>)
 8000bca:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <SystemInit+0x114>)
 8000bcc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <SystemInit+0x104>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <SystemInit+0x104>)
 8000bd6:	4a19      	ldr	r2, [pc, #100]	@ (8000c3c <SystemInit+0x114>)
 8000bd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <SystemInit+0x104>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <SystemInit+0x104>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a11      	ldr	r2, [pc, #68]	@ (8000c2c <SystemInit+0x104>)
 8000be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <SystemInit+0x104>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <SystemInit+0x118>)
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <SystemInit+0x118>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <SystemInit+0x11c>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <SystemInit+0x120>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c0a:	d202      	bcs.n	8000c12 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <SystemInit+0x124>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <SystemInit+0x128>)
 8000c14:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c18:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00
 8000c28:	52002000 	.word	0x52002000
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c34:	02020200 	.word	0x02020200
 8000c38:	01ff0000 	.word	0x01ff0000
 8000c3c:	01010280 	.word	0x01010280
 8000c40:	580000c0 	.word	0x580000c0
 8000c44:	5c001000 	.word	0x5c001000
 8000c48:	ffff0000 	.word	0xffff0000
 8000c4c:	51008108 	.word	0x51008108
 8000c50:	52004000 	.word	0x52004000

08000c54 <ModbusMaster_CalculateCRC>:
    }
}

/* Calculate CRC for Modbus frame */
unsigned short ModbusMaster_CalculateCRC(unsigned char *buffer, unsigned short length)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000c60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c64:	81fb      	strh	r3, [r7, #14]
    for (unsigned short pos = 0; pos < length; pos++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	81bb      	strh	r3, [r7, #12]
 8000c6a:	e022      	b.n	8000cb2 <ModbusMaster_CalculateCRC+0x5e>
    {
        crc ^= buffer[pos];
 8000c6c:	89bb      	ldrh	r3, [r7, #12]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	4053      	eors	r3, r2
 8000c7a:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	e011      	b.n	8000ca6 <ModbusMaster_CalculateCRC+0x52>
        {
            if (crc & 1)
 8000c82:	89fb      	ldrh	r3, [r7, #14]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <ModbusMaster_CalculateCRC+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <ModbusMaster_CalculateCRC+0x74>)
 8000c94:	4053      	eors	r3, r2
 8000c96:	81fb      	strh	r3, [r7, #14]
 8000c98:	e002      	b.n	8000ca0 <ModbusMaster_CalculateCRC+0x4c>
            else
                crc >>= 1;
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	085b      	lsrs	r3, r3, #1
 8000c9e:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	ddea      	ble.n	8000c82 <ModbusMaster_CalculateCRC+0x2e>
    for (unsigned short pos = 0; pos < length; pos++)
 8000cac:	89bb      	ldrh	r3, [r7, #12]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	81bb      	strh	r3, [r7, #12]
 8000cb2:	89ba      	ldrh	r2, [r7, #12]
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d3d8      	bcc.n	8000c6c <ModbusMaster_CalculateCRC+0x18>
        }
    }
    return crc;
 8000cba:	89fb      	ldrh	r3, [r7, #14]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	ffffa001 	.word	0xffffa001

08000ccc <ModbusMaster_SendRequest>:

/* Send a Modbus request */
void ModbusMaster_SendRequest(unsigned char slave_id, unsigned char function_code, unsigned short start_address, unsigned short data_length, unsigned short *data)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4623      	mov	r3, r4
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71bb      	strb	r3, [r7, #6]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	80bb      	strh	r3, [r7, #4]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	807b      	strh	r3, [r7, #2]
    ModbusMaster_Tx_index = 0;
 8000cea:	4b4b      	ldr	r3, [pc, #300]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	801a      	strh	r2, [r3, #0]

    /* Construct the Modbus frame */
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = slave_id;
 8000cf0:	4b49      	ldr	r3, [pc, #292]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	b291      	uxth	r1, r2
 8000cf8:	4a47      	ldr	r2, [pc, #284]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000cfa:	8011      	strh	r1, [r2, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4a47      	ldr	r2, [pc, #284]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	5453      	strb	r3, [r2, r1]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = function_code;
 8000d04:	4b44      	ldr	r3, [pc, #272]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	b291      	uxth	r1, r2
 8000d0c:	4a42      	ldr	r2, [pc, #264]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d0e:	8011      	strh	r1, [r2, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	4a42      	ldr	r2, [pc, #264]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d14:	79bb      	ldrb	r3, [r7, #6]
 8000d16:	5453      	strb	r3, [r2, r1]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = (start_address >> 8) & 0xFF;
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	0a1b      	lsrs	r3, r3, #8
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	b290      	uxth	r0, r2
 8000d26:	4a3c      	ldr	r2, [pc, #240]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d28:	8010      	strh	r0, [r2, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	b2c9      	uxtb	r1, r1
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d30:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = start_address & 0xFF;
 8000d32:	4b39      	ldr	r3, [pc, #228]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	b291      	uxth	r1, r2
 8000d3a:	4a37      	ldr	r2, [pc, #220]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d3c:	8011      	strh	r1, [r2, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	b2d9      	uxtb	r1, r3
 8000d44:	4b35      	ldr	r3, [pc, #212]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d46:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = (data_length >> 8) & 0xFF;
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	b299      	uxth	r1, r3
 8000d4e:	4b32      	ldr	r3, [pc, #200]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	b290      	uxth	r0, r2
 8000d56:	4a30      	ldr	r2, [pc, #192]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d58:	8010      	strh	r0, [r2, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	b2c9      	uxtb	r1, r1
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d60:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = data_length & 0xFF;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	b291      	uxth	r1, r2
 8000d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d6c:	8011      	strh	r1, [r2, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	b2d9      	uxtb	r1, r3
 8000d74:	4b29      	ldr	r3, [pc, #164]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d76:	5499      	strb	r1, [r3, r2]

    /* Calculate CRC */
    unsigned short crc = ModbusMaster_CalculateCRC(ModbusMaster_outbox, ModbusMaster_Tx_index);
 8000d78:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4827      	ldr	r0, [pc, #156]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d80:	f7ff ff68 	bl	8000c54 <ModbusMaster_CalculateCRC>
 8000d84:	4603      	mov	r3, r0
 8000d86:	817b      	strh	r3, [r7, #10]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = crc & 0xFF;
 8000d88:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	b291      	uxth	r1, r2
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000d92:	8011      	strh	r1, [r2, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	897b      	ldrh	r3, [r7, #10]
 8000d98:	b2d9      	uxtb	r1, r3
 8000d9a:	4b20      	ldr	r3, [pc, #128]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000d9c:	5499      	strb	r1, [r3, r2]
    ModbusMaster_outbox[ModbusMaster_Tx_index++] = (crc >> 8) & 0xFF;
 8000d9e:	897b      	ldrh	r3, [r7, #10]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	b299      	uxth	r1, r3
 8000da4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	b290      	uxth	r0, r2
 8000dac:	4a1a      	ldr	r2, [pc, #104]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000dae:	8010      	strh	r0, [r2, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	b2c9      	uxtb	r1, r1
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000db6:	5499      	strb	r1, [r3, r2]

    // Debug
    printf("Modbus Request: ");
 8000db8:	4819      	ldr	r0, [pc, #100]	@ (8000e20 <ModbusMaster_SendRequest+0x154>)
 8000dba:	f020 fe45 	bl	8021a48 <iprintf>
    for (int i = 0; i < ModbusMaster_Tx_index; i++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	e00a      	b.n	8000dda <ModbusMaster_SendRequest+0x10e>
    {
        printf("%02X ", ModbusMaster_outbox[i]);
 8000dc4:	4a15      	ldr	r2, [pc, #84]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4815      	ldr	r0, [pc, #84]	@ (8000e24 <ModbusMaster_SendRequest+0x158>)
 8000dd0:	f020 fe3a 	bl	8021a48 <iprintf>
    for (int i = 0; i < ModbusMaster_Tx_index; i++)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4293      	cmp	r3, r2
 8000de4:	dbee      	blt.n	8000dc4 <ModbusMaster_SendRequest+0xf8>
    }
    printf("\n");
 8000de6:	200a      	movs	r0, #10
 8000de8:	f020 fe40 	bl	8021a6c <putchar>

    /* Enable TX and send the frame */
    RS485_TX_ENABLE();
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	480d      	ldr	r0, [pc, #52]	@ (8000e28 <ModbusMaster_SendRequest+0x15c>)
 8000df2:	f01b fb49 	bl	801c488 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart2, ModbusMaster_outbox, ModbusMaster_Tx_index, HAL_MAX_DELAY);
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <ModbusMaster_SendRequest+0x14c>)
 8000df8:	881a      	ldrh	r2, [r3, #0]
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	4907      	ldr	r1, [pc, #28]	@ (8000e1c <ModbusMaster_SendRequest+0x150>)
 8000e00:	480a      	ldr	r0, [pc, #40]	@ (8000e2c <ModbusMaster_SendRequest+0x160>)
 8000e02:	f01e facf 	bl	801f3a4 <HAL_UART_Transmit>
    RS485_RX_ENABLE();
 8000e06:	2200      	movs	r2, #0
 8000e08:	2110      	movs	r1, #16
 8000e0a:	4807      	ldr	r0, [pc, #28]	@ (8000e28 <ModbusMaster_SendRequest+0x15c>)
 8000e0c:	f01b fb3c 	bl	801c488 <HAL_GPIO_WritePin>
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	24000a4c 	.word	0x24000a4c
 8000e1c:	24000a54 	.word	0x24000a54
 8000e20:	080258c0 	.word	0x080258c0
 8000e24:	080258d4 	.word	0x080258d4
 8000e28:	58020c00 	.word	0x58020c00
 8000e2c:	24000c50 	.word	0x24000c50

08000e30 <ModbusMaster_ReceiveResponse>:

unsigned short ModbusMaster_ReceiveResponse(unsigned char *buffer, unsigned short length)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
    if (HAL_UART_Receive(&huart2, buffer, length, MODBUS_MASTER_TIMEOUT_MS) == HAL_OK)
 8000e3c:	887a      	ldrh	r2, [r7, #2]
 8000e3e:	2364      	movs	r3, #100	@ 0x64
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	4827      	ldr	r0, [pc, #156]	@ (8000ee0 <ModbusMaster_ReceiveResponse+0xb0>)
 8000e44:	f01e fb3c 	bl	801f4c0 <HAL_UART_Receive>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d13f      	bne.n	8000ece <ModbusMaster_ReceiveResponse+0x9e>
    {
        // Debug: Print the received buffer
        printf("Received Buffer: ");
 8000e4e:	4825      	ldr	r0, [pc, #148]	@ (8000ee4 <ModbusMaster_ReceiveResponse+0xb4>)
 8000e50:	f020 fdfa 	bl	8021a48 <iprintf>
        for (int i = 0; i < length; i++) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	e00a      	b.n	8000e70 <ModbusMaster_ReceiveResponse+0x40>
            printf("%02X ", buffer[i]);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	4820      	ldr	r0, [pc, #128]	@ (8000ee8 <ModbusMaster_ReceiveResponse+0xb8>)
 8000e66:	f020 fdef 	bl	8021a48 <iprintf>
        for (int i = 0; i < length; i++) {
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbf0      	blt.n	8000e5a <ModbusMaster_ReceiveResponse+0x2a>
        }
        printf("\n");
 8000e78:	200a      	movs	r0, #10
 8000e7a:	f020 fdf7 	bl	8021a6c <putchar>

        // Validate CRC
        unsigned short crc_received = (buffer[length - 1] << 8) | buffer[length - 2];
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	440b      	add	r3, r1
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	817b      	strh	r3, [r7, #10]
        unsigned short crc_calculated = ModbusMaster_CalculateCRC(buffer, length - 2);
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	3b02      	subs	r3, #2
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fed4 	bl	8000c54 <ModbusMaster_CalculateCRC>
 8000eac:	4603      	mov	r3, r0
 8000eae:	813b      	strh	r3, [r7, #8]

        // Debug: Print the CRC values
        printf("CRC Received: 0x%04X, CRC Calculated: 0x%04X\n", crc_received, crc_calculated);
 8000eb0:	897b      	ldrh	r3, [r7, #10]
 8000eb2:	893a      	ldrh	r2, [r7, #8]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <ModbusMaster_ReceiveResponse+0xbc>)
 8000eb8:	f020 fdc6 	bl	8021a48 <iprintf>

        if (crc_received == crc_calculated)
 8000ebc:	897a      	ldrh	r2, [r7, #10]
 8000ebe:	893b      	ldrh	r3, [r7, #8]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d104      	bne.n	8000ece <ModbusMaster_ReceiveResponse+0x9e>
        {
            ModbusMaster_FrameComplete_Flag = 1;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <ModbusMaster_ReceiveResponse+0xc0>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	801a      	strh	r2, [r3, #0]
            return length;
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	e003      	b.n	8000ed6 <ModbusMaster_ReceiveResponse+0xa6>
        }
    }

    ModbusMaster_TimeoutFlag = 1;
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <ModbusMaster_ReceiveResponse+0xc4>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	801a      	strh	r2, [r3, #0]
    return 0;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	24000c50 	.word	0x24000c50
 8000ee4:	080258dc 	.word	0x080258dc
 8000ee8:	080258d4 	.word	0x080258d4
 8000eec:	080258f0 	.word	0x080258f0
 8000ef0:	24000a50 	.word	0x24000a50
 8000ef4:	24000a4e 	.word	0x24000a4e

08000ef8 <ModbusMaster_ReadInputRegisters>:

/* Read Input Registers */
void ModbusMaster_ReadInputRegisters(unsigned char slave_id, unsigned short start_address, unsigned short data_length)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	460b      	mov	r3, r1
 8000f04:	80bb      	strh	r3, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	807b      	strh	r3, [r7, #2]
     ModbusMaster_SendRequest(slave_id, MODBUS_FC_READ_INPUT_REGISTERS, start_address, data_length, NULL);
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	88ba      	ldrh	r2, [r7, #4]
 8000f0e:	79f8      	ldrb	r0, [r7, #7]
 8000f10:	2100      	movs	r1, #0
 8000f12:	9100      	str	r1, [sp, #0]
 8000f14:	2104      	movs	r1, #4
 8000f16:	f7ff fed9 	bl	8000ccc <ModbusMaster_SendRequest>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <mg_random>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool mg_random(void *buf, size_t len) {  // Use on-board RNG
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	e01a      	b.n	8000f6a <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4810      	ldr	r0, [pc, #64]	@ (8000f7c <mg_random+0x58>)
 8000f3c:	f01e f98c 	bl	801f258 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	18d0      	adds	r0, r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d203      	bcs.n	8000f58 <mg_random+0x34>
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	e000      	b.n	8000f5a <mg_random+0x36>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	f107 0108 	add.w	r1, r7, #8
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f021 f835 	bl	8021fce <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3304      	adds	r3, #4
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3e0      	bcc.n	8000f34 <mg_random+0x10>
  }
  return true; // TODO(): ensure successful RNG init, then return on false above
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	24000c3c 	.word	0x24000c3c

08000f80 <mg_millis>:

uint64_t mg_millis(void) {
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000f84:	f01a fb60 	bl	801b648 <HAL_GetTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	461c      	mov	r4, r3
 8000f8e:	4615      	mov	r5, r2
 8000f90:	4622      	mov	r2, r4
 8000f92:	462b      	mov	r3, r5
}
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f9c <_write>:

int _write(int fd, unsigned char *buf, int len) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d002      	beq.n	8000fb4 <_write+0x18>
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d107      	bne.n	8000fc4 <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);  // Print to the UART
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <_write+0x34>)
 8000fc0:	f01e f9f0 	bl	801f3a4 <HAL_UART_Transmit>
  }
  return len;
 8000fc4:	687b      	ldr	r3, [r7, #4]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000ce4 	.word	0x24000ce4

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af04      	add	r7, sp, #16
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fda:	f01a faaf 	bl	801b53c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fde:	f000 f821 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe2:	f000 f999 	bl	8001318 <MX_GPIO_Init>
  MX_ETH_Init();
 8000fe6:	f000 f899 	bl	800111c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fea:	f000 f949 	bl	8001280 <MX_USART3_UART_Init>
  MX_RNG_Init();
 8000fee:	f000 f8e1 	bl	80011b4 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8000ff2:	f000 f8f5 	bl	80011e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  mongoose_init();
 8000ff6:	f019 fec7 	bl	801ad88 <mongoose_init>
  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, modbus_handler, NULL);
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <main+0x48>)
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	2301      	movs	r3, #1
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	4804      	ldr	r0, [pc, #16]	@ (8001020 <main+0x4c>)
 8001010:	f008 fd62 	bl	8009ad8 <mg_timer_add>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mongoose_poll();
 8001014:	f019 ff78 	bl	801af08 <mongoose_poll>
 8001018:	e7fc      	b.n	8001014 <main+0x40>
 800101a:	bf00      	nop
 800101c:	080013c5 	.word	0x080013c5
 8001020:	24003f1c 	.word	0x24003f1c

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b09c      	sub	sp, #112	@ 0x70
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102e:	224c      	movs	r2, #76	@ 0x4c
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f020 fed6 	bl	8021de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2220      	movs	r2, #32
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f020 fed0 	bl	8021de4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001044:	2004      	movs	r0, #4
 8001046:	f01b fa39 	bl	801c4bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104a:	2300      	movs	r3, #0
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <SystemClock_Config+0xf0>)
 8001050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001052:	4a30      	ldr	r2, [pc, #192]	@ (8001114 <SystemClock_Config+0xf0>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800105a:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <SystemClock_Config+0xf0>)
 800105c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	4b2c      	ldr	r3, [pc, #176]	@ (8001118 <SystemClock_Config+0xf4>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a2b      	ldr	r2, [pc, #172]	@ (8001118 <SystemClock_Config+0xf4>)
 800106a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <SystemClock_Config+0xf4>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800107c:	bf00      	nop
 800107e:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <SystemClock_Config+0xf4>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800108a:	d1f8      	bne.n	800107e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800108c:	2321      	movs	r3, #33	@ 0x21
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001090:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001096:	2301      	movs	r3, #1
 8001098:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109e:	2302      	movs	r3, #2
 80010a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010a6:	2364      	movs	r3, #100	@ 0x64
 80010a8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010b6:	230c      	movs	r3, #12
 80010b8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c6:	4618      	mov	r0, r3
 80010c8:	f01b fa52 	bl	801c570 <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010d2:	f000 f9d1 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	233f      	movs	r3, #63	@ 0x3f
 80010d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2303      	movs	r3, #3
 80010dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010e2:	2308      	movs	r3, #8
 80010e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010e6:	2340      	movs	r3, #64	@ 0x40
 80010e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010ea:	2340      	movs	r3, #64	@ 0x40
 80010ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010f4:	2340      	movs	r3, #64	@ 0x40
 80010f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2102      	movs	r1, #2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f01b fe91 	bl	801ce24 <HAL_RCC_ClockConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001108:	f000 f9b6 	bl	8001478 <Error_Handler>
  }
}
 800110c:	bf00      	nop
 800110e:	3770      	adds	r7, #112	@ 0x70
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	58000400 	.word	0x58000400
 8001118:	58024800 	.word	0x58024800

0800111c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <MX_ETH_Init+0x80>)
 8001122:	4a1f      	ldr	r2, [pc, #124]	@ (80011a0 <MX_ETH_Init+0x84>)
 8001124:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001126:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <MX_ETH_Init+0x88>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800112c:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <MX_ETH_Init+0x88>)
 800112e:	2280      	movs	r2, #128	@ 0x80
 8001130:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001132:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <MX_ETH_Init+0x88>)
 8001134:	22e1      	movs	r2, #225	@ 0xe1
 8001136:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001138:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <MX_ETH_Init+0x88>)
 800113a:	2200      	movs	r2, #0
 800113c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800113e:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <MX_ETH_Init+0x88>)
 8001140:	2200      	movs	r2, #0
 8001142:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001144:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <MX_ETH_Init+0x88>)
 8001146:	2200      	movs	r2, #0
 8001148:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800114a:	4b14      	ldr	r3, [pc, #80]	@ (800119c <MX_ETH_Init+0x80>)
 800114c:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <MX_ETH_Init+0x88>)
 800114e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <MX_ETH_Init+0x80>)
 8001152:	2201      	movs	r2, #1
 8001154:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <MX_ETH_Init+0x80>)
 8001158:	4a13      	ldr	r2, [pc, #76]	@ (80011a8 <MX_ETH_Init+0x8c>)
 800115a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800115c:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <MX_ETH_Init+0x80>)
 800115e:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <MX_ETH_Init+0x90>)
 8001160:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <MX_ETH_Init+0x80>)
 8001164:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001168:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800116a:	480c      	ldr	r0, [pc, #48]	@ (800119c <MX_ETH_Init+0x80>)
 800116c:	f01a fba8 	bl	801b8c0 <HAL_ETH_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001176:	f000 f97f 	bl	8001478 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800117a:	2238      	movs	r2, #56	@ 0x38
 800117c:	2100      	movs	r1, #0
 800117e:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <MX_ETH_Init+0x94>)
 8001180:	f020 fe30 	bl	8021de4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001184:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <MX_ETH_Init+0x94>)
 8001186:	2221      	movs	r2, #33	@ 0x21
 8001188:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_ETH_Init+0x94>)
 800118c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001190:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001192:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <MX_ETH_Init+0x94>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	24000b8c 	.word	0x24000b8c
 80011a0:	40028000 	.word	0x40028000
 80011a4:	24000d7c 	.word	0x24000d7c
 80011a8:	240009cc 	.word	0x240009cc
 80011ac:	2400096c 	.word	0x2400096c
 80011b0:	24000b54 	.word	0x24000b54

080011b4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <MX_RNG_Init+0x24>)
 80011ba:	4a08      	ldr	r2, [pc, #32]	@ (80011dc <MX_RNG_Init+0x28>)
 80011bc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_RNG_Init+0x24>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <MX_RNG_Init+0x24>)
 80011c6:	f01d ffe5 	bl	801f194 <HAL_RNG_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80011d0:	f000 f952 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	24000c3c 	.word	0x24000c3c
 80011dc:	48021800 	.word	0x48021800

080011e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e4:	4b24      	ldr	r3, [pc, #144]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 80011e6:	4a25      	ldr	r2, [pc, #148]	@ (800127c <MX_USART2_UART_Init+0x9c>)
 80011e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ea:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 80011ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001204:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 8001206:	220c      	movs	r2, #12
 8001208:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001210:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001216:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800121c:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001228:	2300      	movs	r3, #0
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	4812      	ldr	r0, [pc, #72]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 8001230:	f01f f996 	bl	8020560 <HAL_RS485Ex_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 800123a:	f000 f91d 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123e:	2100      	movs	r1, #0
 8001240:	480d      	ldr	r0, [pc, #52]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 8001242:	f01f fa30 	bl	80206a6 <HAL_UARTEx_SetTxFifoThreshold>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 800124c:	f000 f914 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001250:	2100      	movs	r1, #0
 8001252:	4809      	ldr	r0, [pc, #36]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 8001254:	f01f fa65 	bl	8020722 <HAL_UARTEx_SetRxFifoThreshold>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 800125e:	f000 f90b 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_USART2_UART_Init+0x98>)
 8001264:	f01f f9e6 	bl	8020634 <HAL_UARTEx_DisableFifoMode>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 800126e:	f000 f903 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	24000c50 	.word	0x24000c50
 800127c:	40004400 	.word	0x40004400

08001280 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001284:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 8001286:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <MX_USART3_UART_Init+0x94>)
 8001288:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c8:	4811      	ldr	r0, [pc, #68]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012ca:	f01e f81b 	bl	801f304 <HAL_UART_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012d4:	f000 f8d0 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	480d      	ldr	r0, [pc, #52]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012dc:	f01f f9e3 	bl	80206a6 <HAL_UARTEx_SetTxFifoThreshold>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012e6:	f000 f8c7 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4808      	ldr	r0, [pc, #32]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012ee:	f01f fa18 	bl	8020722 <HAL_UARTEx_SetRxFifoThreshold>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012f8:	f000 f8be 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_USART3_UART_Init+0x90>)
 80012fe:	f01f f999 	bl	8020634 <HAL_UARTEx_DisableFifoMode>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001308:	f000 f8b6 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	24000ce4 	.word	0x24000ce4
 8001314:	40004800 	.word	0x40004800

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 8001320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001324:	4a26      	ldr	r2, [pc, #152]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 8001330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001342:	4a1f      	ldr	r2, [pc, #124]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134c:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001360:	4a17      	ldr	r2, [pc, #92]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 800137a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137e:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 8001380:	f043 0308 	orr.w	r3, r3, #8
 8001384:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139c:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 800139e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_GPIO_Init+0xa8>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b4:	bf00      	nop
 80013b6:	371c      	adds	r7, #28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	58024400 	.word	0x58024400

080013c4 <modbus_handler>:
//  for (;;) {                // Infinite event loop
//    mg_mgr_poll(&mgr, 0);   // Process network events
//  }
//  mg_mgr_free(&mgr);
//}
void modbus_handler(void *arg) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
    (void)arg;  // Unused parameter
    ModbusMaster_ReadInputRegisters(1, 2058, 1);
 80013cc:	2201      	movs	r2, #1
 80013ce:	f640 010a 	movw	r1, #2058	@ 0x80a
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff fd90 	bl	8000ef8 <ModbusMaster_ReadInputRegisters>
    uint8_t responseBuffer[7];
    unsigned short responseLength = ModbusMaster_ReceiveResponse(responseBuffer, sizeof(responseBuffer));
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2107      	movs	r1, #7
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fd26 	bl	8000e30 <ModbusMaster_ReceiveResponse>
 80013e4:	4603      	mov	r3, r0
 80013e6:	82fb      	strh	r3, [r7, #22]
    if (ModbusMaster_FrameComplete_Flag) {
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <modbus_handler+0x98>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d022      	beq.n	8001436 <modbus_handler+0x72>
        uint16_t registerValue = (responseBuffer[3] << 8) | responseBuffer[4];
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	7c3b      	ldrb	r3, [r7, #16]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	82bb      	strh	r3, [r7, #20]
        scaledValue = registerValue * scaling_factor;
 8001400:	8abb      	ldrh	r3, [r7, #20]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001460 <modbus_handler+0x9c>
 800140e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <modbus_handler+0xa0>)
 8001414:	edc3 7a00 	vstr	s15, [r3]
        printf("Input Register Raw: %u, Scaled: %.2f\r\n", registerValue, scaledValue);
 8001418:	8ab9      	ldrh	r1, [r7, #20]
 800141a:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <modbus_handler+0xa0>)
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001424:	ec53 2b17 	vmov	r2, r3, d7
 8001428:	480f      	ldr	r0, [pc, #60]	@ (8001468 <modbus_handler+0xa4>)
 800142a:	f020 fb0d 	bl	8021a48 <iprintf>
        ModbusMaster_FrameComplete_Flag = 0;
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <modbus_handler+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	801a      	strh	r2, [r3, #0]
        printf("Modbus Timeout!\r\n");
        ModbusMaster_TimeoutFlag = 0;
    } else {
        printf("Invalid Response (CRC Error)\r\n");
    }
}
 8001434:	e00d      	b.n	8001452 <modbus_handler+0x8e>
    } else if (ModbusMaster_TimeoutFlag) {
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <modbus_handler+0xa8>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <modbus_handler+0x88>
        printf("Modbus Timeout!\r\n");
 800143e:	480c      	ldr	r0, [pc, #48]	@ (8001470 <modbus_handler+0xac>)
 8001440:	f020 fb72 	bl	8021b28 <puts>
        ModbusMaster_TimeoutFlag = 0;
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <modbus_handler+0xa8>)
 8001446:	2200      	movs	r2, #0
 8001448:	801a      	strh	r2, [r3, #0]
}
 800144a:	e002      	b.n	8001452 <modbus_handler+0x8e>
        printf("Invalid Response (CRC Error)\r\n");
 800144c:	4809      	ldr	r0, [pc, #36]	@ (8001474 <modbus_handler+0xb0>)
 800144e:	f020 fb6b 	bl	8021b28 <puts>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	24000a50 	.word	0x24000a50
 8001460:	3c23d70a 	.word	0x3c23d70a
 8001464:	24000d78 	.word	0x24000d78
 8001468:	08025920 	.word	0x08025920
 800146c:	24000a4e 	.word	0x24000a4e
 8001470:	08025948 	.word	0x08025948
 8001474:	0802595c 	.word	0x0802595c

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <Error_Handler+0x8>

08001484 <mg_base64_decode_single>:
  } else {
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b40      	cmp	r3, #64	@ 0x40
 8001490:	dd05      	ble.n	800149e <mg_base64_decode_single+0x1a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b5a      	cmp	r3, #90	@ 0x5a
 8001496:	dc02      	bgt.n	800149e <mg_base64_decode_single+0x1a>
    return c - 'A';
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b41      	subs	r3, #65	@ 0x41
 800149c:	e022      	b.n	80014e4 <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b60      	cmp	r3, #96	@ 0x60
 80014a2:	dd05      	ble.n	80014b0 <mg_base64_decode_single+0x2c>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b7a      	cmp	r3, #122	@ 0x7a
 80014a8:	dc02      	bgt.n	80014b0 <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3b47      	subs	r3, #71	@ 0x47
 80014ae:	e019      	b.n	80014e4 <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80014b4:	dd05      	ble.n	80014c2 <mg_base64_decode_single+0x3e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b39      	cmp	r3, #57	@ 0x39
 80014ba:	dc02      	bgt.n	80014c2 <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3304      	adds	r3, #4
 80014c0:	e010      	b.n	80014e4 <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b2b      	cmp	r3, #43	@ 0x2b
 80014c6:	d101      	bne.n	80014cc <mg_base64_decode_single+0x48>
    return 62;
 80014c8:	233e      	movs	r3, #62	@ 0x3e
 80014ca:	e00b      	b.n	80014e4 <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80014d0:	d101      	bne.n	80014d6 <mg_base64_decode_single+0x52>
    return 63;
 80014d2:	233f      	movs	r3, #63	@ 0x3f
 80014d4:	e006      	b.n	80014e4 <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b3d      	cmp	r3, #61	@ 0x3d
 80014da:	d101      	bne.n	80014e0 <mg_base64_decode_single+0x5c>
    return 64;
 80014dc:	2340      	movs	r3, #64	@ 0x40
 80014de:	e001      	b.n	80014e4 <mg_base64_decode_single+0x60>
  } else {
    return -1;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <mg_base64_decode>:
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
  len = mg_base64_final(to, len);
  return len;
}

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <mg_base64_decode+0x1c>
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	4413      	add	r3, r2
 800150a:	e000      	b.n	800150e <mg_base64_decode+0x1e>
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	089a      	lsrs	r2, r3, #2
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	3301      	adds	r3, #1
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d375      	bcc.n	8001612 <mg_base64_decode+0x122>
  while (src != NULL && src + 3 < end) {
 8001526:	e065      	b.n	80015f4 <mg_base64_decode+0x104>
    int a = mg_base64_decode_single(src[0]),
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ffa9 	bl	8001484 <mg_base64_decode_single>
 8001532:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ffa2 	bl	8001484 <mg_base64_decode_single>
 8001540:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3302      	adds	r3, #2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff9b 	bl	8001484 <mg_base64_decode_single>
 800154e:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3303      	adds	r3, #3
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff94 	bl	8001484 <mg_base64_decode_single>
 800155c:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	2b40      	cmp	r3, #64	@ 0x40
 8001562:	d058      	beq.n	8001616 <mg_base64_decode+0x126>
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db55      	blt.n	8001616 <mg_base64_decode+0x126>
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	2b40      	cmp	r3, #64	@ 0x40
 800156e:	d052      	beq.n	8001616 <mg_base64_decode+0x126>
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db4f      	blt.n	8001616 <mg_base64_decode+0x126>
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db4c      	blt.n	8001616 <mg_base64_decode+0x126>
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db49      	blt.n	8001616 <mg_base64_decode+0x126>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	b25a      	sxtb	r2, r3
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	111b      	asrs	r3, r3, #4
 800158c:	b25b      	sxtb	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	b259      	sxtb	r1, r3
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	627a      	str	r2, [r7, #36]	@ 0x24
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	b2ca      	uxtb	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3302      	adds	r3, #2
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b3d      	cmp	r3, #61	@ 0x3d
 80015a8:	d021      	beq.n	80015ee <mg_base64_decode+0xfe>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	109b      	asrs	r3, r3, #2
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b259      	sxtb	r1, r3
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	627a      	str	r2, [r7, #36]	@ 0x24
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	b2ca      	uxtb	r2, r1
 80015c6:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3303      	adds	r3, #3
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b3d      	cmp	r3, #61	@ 0x3d
 80015d0:	d00d      	beq.n	80015ee <mg_base64_decode+0xfe>
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	019b      	lsls	r3, r3, #6
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b259      	sxtb	r1, r3
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	b2ca      	uxtb	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3304      	adds	r3, #4
 80015f2:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <mg_base64_decode+0x114>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3303      	adds	r3, #3
 80015fe:	6a3a      	ldr	r2, [r7, #32]
 8001600:	429a      	cmp	r2, r3
 8001602:	d891      	bhi.n	8001528 <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	4413      	add	r3, r2
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
  return len;
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	e009      	b.n	8001626 <mg_base64_decode+0x136>
  if (dl < n / 4 * 3 + 1) goto fail;
 8001612:	bf00      	nop
 8001614:	e000      	b.n	8001618 <mg_base64_decode+0x128>
      goto fail;
 8001616:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <mg_base64_decode+0x134>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
  return 0;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <mg_flash_next>:
// | 32-bit size | 32-bit KEY | ..data.. | ..pad.. | 32-bit size | ......
//
// In order to get to the next object, read its size, then align up.

// Traverse the list of saved objects
size_t mg_flash_next(char *p, char *end, uint32_t *key, size_t *size) {
 800162e:	b580      	push	{r7, lr}
 8001630:	b08a      	sub	sp, #40	@ 0x28
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	603b      	str	r3, [r7, #0]
  size_t aligned_size = 0, align = mg_flash_write_align(), left = end - p;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001640:	f023 fde1 	bl	8025206 <mg_flash_write_align>
 8001644:	6238      	str	r0, [r7, #32]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	61fb      	str	r3, [r7, #28]
  uint32_t *p32 = (uint32_t *) p, min_size = sizeof(uint32_t) * 2;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	2308      	movs	r3, #8
 8001654:	617b      	str	r3, [r7, #20]
  if (p32[0] != 0xffffffff && left > MG_ROUND_UP(min_size, align)) {
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165e:	d038      	beq.n	80016d2 <mg_flash_next+0xa4>
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00a      	beq.n	800167c <mg_flash_next+0x4e>
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	4413      	add	r3, r2
 800166c:	1e5a      	subs	r2, r3, #1
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	fbb2 f3f3 	udiv	r3, r2, r3
 8001674:	6a3a      	ldr	r2, [r7, #32]
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	e000      	b.n	800167e <mg_flash_next+0x50>
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	4293      	cmp	r3, r2
 8001682:	d226      	bcs.n	80016d2 <mg_flash_next+0xa4>
    if (size) *size = (size_t) p32[0];
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <mg_flash_next+0x64>
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	601a      	str	r2, [r3, #0]
    if (key) *key = p32[1];
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <mg_flash_next+0x72>
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	601a      	str	r2, [r3, #0]
    aligned_size = MG_ROUND_UP(p32[0] + sizeof(uint32_t) * 2, align);
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d103      	bne.n	80016ae <mg_flash_next+0x80>
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3308      	adds	r3, #8
 80016ac:	e00a      	b.n	80016c4 <mg_flash_next+0x96>
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	4413      	add	r3, r2
 80016b6:	1dda      	adds	r2, r3, #7
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	6a3a      	ldr	r2, [r7, #32]
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (left < aligned_size) aligned_size = 0;  // Out of bounds, fail
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d201      	bcs.n	80016d2 <mg_flash_next+0xa4>
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return aligned_size;
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <flash_last_sector>:

// Return the last sector of Bank 2
static char *flash_last_sector(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
  size_t ss = mg_flash_sector_size(), size = mg_flash_size();
 80016e2:	f023 fd87 	bl	80251f4 <mg_flash_sector_size>
 80016e6:	60b8      	str	r0, [r7, #8]
 80016e8:	f023 fd77 	bl	80251da <mg_flash_size>
 80016ec:	6078      	str	r0, [r7, #4]
  char *base = (char *) mg_flash_start(), *last = base + size - ss;
 80016ee:	f023 fd6b 	bl	80251c8 <mg_flash_start>
 80016f2:	6038      	str	r0, [r7, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
  if (mg_flash_bank() == 2) last -= size / 2;
 8001700:	f023 fd89 	bl	8025216 <mg_flash_bank>
 8001704:	4603      	mov	r3, r0
 8001706:	2b02      	cmp	r3, #2
 8001708:	d105      	bne.n	8001716 <flash_last_sector+0x3a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	425b      	negs	r3, r3
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  return last;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <mg_flash_load>:

// Find a saved object with a given key
bool mg_flash_load(void *sector, uint32_t key, void *buf, size_t len) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	@ 0x38
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
  char *base = (char *) mg_flash_start(), *s = (char *) sector, *res = NULL;
 800172e:	f023 fd4b 	bl	80251c8 <mg_flash_start>
 8001732:	6238      	str	r0, [r7, #32]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	637b      	str	r3, [r7, #52]	@ 0x34
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	@ 0x30
  size_t ss = mg_flash_sector_size(), ofs = 0, n, sz;
 800173c:	f023 fd5a 	bl	80251f4 <mg_flash_sector_size>
 8001740:	61f8      	str	r0, [r7, #28]
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  bool ok = false;
 8001746:	2300      	movs	r3, #0
 8001748:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (s == NULL) s = flash_last_sector();
 800174c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <mg_flash_load+0x38>
 8001752:	f7ff ffc3 	bl	80016dc <flash_last_sector>
 8001756:	6378      	str	r0, [r7, #52]	@ 0x34
  if (s < base || s >= base + mg_flash_size()) {
 8001758:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	429a      	cmp	r2, r3
 800175e:	d307      	bcc.n	8001770 <mg_flash_load+0x50>
 8001760:	f023 fd3b 	bl	80251da <mg_flash_size>
 8001764:	4602      	mov	r2, r0
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	4413      	add	r3, r2
 800176a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800176c:	429a      	cmp	r2, r3
 800176e:	d30f      	bcc.n	8001790 <mg_flash_load+0x70>
    MG_ERROR(("%p is outsize of flash", sector));
 8001770:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <mg_flash_load+0x134>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	dd67      	ble.n	8001848 <mg_flash_load+0x128>
 8001778:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <mg_flash_load+0x138>)
 800177a:	f240 1219 	movw	r2, #281	@ 0x119
 800177e:	4937      	ldr	r1, [pc, #220]	@ (800185c <mg_flash_load+0x13c>)
 8001780:	2001      	movs	r0, #1
 8001782:	f006 fbd5 	bl	8007f30 <mg_log_prefix>
 8001786:	68f9      	ldr	r1, [r7, #12]
 8001788:	4835      	ldr	r0, [pc, #212]	@ (8001860 <mg_flash_load+0x140>)
 800178a:	f006 fc21 	bl	8007fd0 <mg_log>
 800178e:	e05b      	b.n	8001848 <mg_flash_load+0x128>
  } else if (((s - base) % ss) != 0) {
 8001790:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	fbb3 f2f2 	udiv	r2, r3, r2
 800179c:	69f9      	ldr	r1, [r7, #28]
 800179e:	fb01 f202 	mul.w	r2, r1, r2
 80017a2:	1a9b      	subs	r3, r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00f      	beq.n	80017c8 <mg_flash_load+0xa8>
    MG_ERROR(("%p is not a sector boundary", sector));
 80017a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <mg_flash_load+0x134>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	dd4b      	ble.n	8001848 <mg_flash_load+0x128>
 80017b0:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <mg_flash_load+0x138>)
 80017b2:	f240 121b 	movw	r2, #283	@ 0x11b
 80017b6:	4929      	ldr	r1, [pc, #164]	@ (800185c <mg_flash_load+0x13c>)
 80017b8:	2001      	movs	r0, #1
 80017ba:	f006 fbb9 	bl	8007f30 <mg_log_prefix>
 80017be:	68f9      	ldr	r1, [r7, #12]
 80017c0:	4828      	ldr	r0, [pc, #160]	@ (8001864 <mg_flash_load+0x144>)
 80017c2:	f006 fc05 	bl	8007fd0 <mg_log>
 80017c6:	e03f      	b.n	8001848 <mg_flash_load+0x128>
  } else {
    uint32_t k, scanned = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((n = mg_flash_next(s + ofs, s + ss, &k, &sz)) > 0) {
 80017cc:	e01b      	b.n	8001806 <mg_flash_load+0xe6>
      // MG_DEBUG((" > obj %lu, ofs %lu, key %x/%x", scanned, ofs, k, key));
      // mg_hexdump(s + ofs, n);
      if (k == key && sz == len) {
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d110      	bne.n	80017f8 <mg_flash_load+0xd8>
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d10c      	bne.n	80017f8 <mg_flash_load+0xd8>
        res = s + ofs + sizeof(uint32_t) * 2;
 80017de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e0:	3308      	adds	r3, #8
 80017e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017e4:	4413      	add	r3, r2
 80017e6:	633b      	str	r3, [r7, #48]	@ 0x30
        memcpy(buf, res, len);  // Copy object
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f020 fbee 	bl	8021fce <memcpy>
        ok = true;              // Keep scanning for the newer versions of it
 80017f2:	2301      	movs	r3, #1
 80017f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      }
      ofs += n, scanned++;
 80017f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4413      	add	r3, r2
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	3301      	adds	r3, #1
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((n = mg_flash_next(s + ofs, s + ss, &k, &sz)) > 0) {
 8001806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800180a:	18d0      	adds	r0, r2, r3
 800180c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	18d1      	adds	r1, r2, r3
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	f107 0210 	add.w	r2, r7, #16
 800181a:	f7ff ff08 	bl	800162e <mg_flash_next>
 800181e:	61b8      	str	r0, [r7, #24]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1d3      	bne.n	80017ce <mg_flash_load+0xae>
    }
    MG_DEBUG(("Scanned %u objects, key %x is @ %p", scanned, key, res));
 8001826:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <mg_flash_load+0x134>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b02      	cmp	r3, #2
 800182c:	dd0c      	ble.n	8001848 <mg_flash_load+0x128>
 800182e:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <mg_flash_load+0x138>)
 8001830:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8001834:	4909      	ldr	r1, [pc, #36]	@ (800185c <mg_flash_load+0x13c>)
 8001836:	2003      	movs	r0, #3
 8001838:	f006 fb7a 	bl	8007f30 <mg_log_prefix>
 800183c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001842:	4809      	ldr	r0, [pc, #36]	@ (8001868 <mg_flash_load+0x148>)
 8001844:	f006 fbc4 	bl	8007fd0 <mg_log>
  }
  return ok;
 8001848:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800184c:	4618      	mov	r0, r3
 800184e:	3738      	adds	r7, #56	@ 0x38
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	24000240 	.word	0x24000240
 8001858:	08028e98 	.word	0x08028e98
 800185c:	0802597c 	.word	0x0802597c
 8001860:	08025a08 	.word	0x08025a08
 8001864:	08025a20 	.word	0x08025a20
 8001868:	08025a3c 	.word	0x08025a3c

0800186c <mg_flash_sector_cleanup>:

// For all saved objects in the sector, delete old versions of objects
static void mg_flash_sector_cleanup(char *sector) {
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b091      	sub	sp, #68	@ 0x44
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  // Buffer all saved objects into an IO buffer (backed by RAM)
  // erase sector, and re-save them.
  struct mg_iobuf io = {0, 0, 0, 2048};
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001884:	623b      	str	r3, [r7, #32]
  size_t ss = mg_flash_sector_size();
 8001886:	f023 fcb5 	bl	80251f4 <mg_flash_sector_size>
 800188a:	6378      	str	r0, [r7, #52]	@ 0x34
  size_t n, size, size2, ofs = 0, hs = sizeof(uint32_t) * 2;
 800188c:	2300      	movs	r3, #0
 800188e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001890:	2308      	movs	r3, #8
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t key;
  // Traverse all objects
  MG_DEBUG(("Cleaning up sector %p", sector));
 8001894:	4b43      	ldr	r3, [pc, #268]	@ (80019a4 <mg_flash_sector_cleanup+0x138>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b02      	cmp	r3, #2
 800189a:	dd41      	ble.n	8001920 <mg_flash_sector_cleanup+0xb4>
 800189c:	4b42      	ldr	r3, [pc, #264]	@ (80019a8 <mg_flash_sector_cleanup+0x13c>)
 800189e:	f44f 729b 	mov.w	r2, #310	@ 0x136
 80018a2:	4942      	ldr	r1, [pc, #264]	@ (80019ac <mg_flash_sector_cleanup+0x140>)
 80018a4:	2003      	movs	r0, #3
 80018a6:	f006 fb43 	bl	8007f30 <mg_log_prefix>
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4840      	ldr	r0, [pc, #256]	@ (80019b0 <mg_flash_sector_cleanup+0x144>)
 80018ae:	f006 fb8f 	bl	8007fd0 <mg_log>
  while ((n = mg_flash_next(sector + ofs, sector + ss, &key, &size)) > 0) {
 80018b2:	e035      	b.n	8001920 <mg_flash_sector_cleanup+0xb4>
    // Delete an old copy of this object in the cache
    for (size_t o = 0; o < io.len; o += size2 + hs) {
 80018b4:	2300      	movs	r3, #0
 80018b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018b8:	e01e      	b.n	80018f8 <mg_flash_sector_cleanup+0x8c>
      uint32_t k = *(uint32_t *) (io.buf + o + sizeof(uint32_t));
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018be:	3304      	adds	r3, #4
 80018c0:	4413      	add	r3, r2
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      size2 = *(uint32_t *) (io.buf + o);
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ca:	4413      	add	r3, r2
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
      if (k == key) {
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d109      	bne.n	80018ec <mg_flash_sector_cleanup+0x80>
        mg_iobuf_del(&io, o, size2 + hs);
 80018d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018dc:	441a      	add	r2, r3
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80018e4:	4618      	mov	r0, r3
 80018e6:	f005 fc33 	bl	8007150 <mg_iobuf_del>
        break;
 80018ea:	e009      	b.n	8001900 <mg_flash_sector_cleanup+0x94>
    for (size_t o = 0; o < io.len; o += size2 + hs) {
 80018ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018f0:	4413      	add	r3, r2
 80018f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018f4:	4413      	add	r3, r2
 80018f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3dc      	bcc.n	80018ba <mg_flash_sector_cleanup+0x4e>
      }
    }
    // And add the new copy
    mg_iobuf_add(&io, io.len, sector + ofs, size + hs);
 8001900:	69f9      	ldr	r1, [r7, #28]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001906:	18d4      	adds	r4, r2, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800190c:	4413      	add	r3, r2
 800190e:	f107 0014 	add.w	r0, r7, #20
 8001912:	4622      	mov	r2, r4
 8001914:	f005 fbca 	bl	80070ac <mg_iobuf_add>
    ofs += n;
 8001918:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800191a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191c:	4413      	add	r3, r2
 800191e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while ((n = mg_flash_next(sector + ofs, sector + ss, &key, &size)) > 0) {
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001924:	18d0      	adds	r0, r2, r3
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800192a:	18d1      	adds	r1, r2, r3
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	f107 020c 	add.w	r2, r7, #12
 8001934:	f7ff fe7b 	bl	800162e <mg_flash_next>
 8001938:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800193a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1b9      	bne.n	80018b4 <mg_flash_sector_cleanup+0x48>
  }
  // All objects are cached in RAM now
  if (mg_flash_erase(sector)) {  // Erase sector. If successful,
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f023 fd57 	bl	80253f4 <mg_flash_erase>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d022      	beq.n	8001992 <mg_flash_sector_cleanup+0x126>
    for (ofs = 0; ofs < io.len; ofs += size + hs) {  // Traverse cached objects
 800194c:	2300      	movs	r3, #0
 800194e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001950:	e01b      	b.n	800198a <mg_flash_sector_cleanup+0x11e>
      size = *(uint32_t *) (io.buf + ofs);
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001956:	4413      	add	r3, r2
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	613b      	str	r3, [r7, #16]
      key = *(uint32_t *) (io.buf + ofs + sizeof(uint32_t));
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001960:	3304      	adds	r3, #4
 8001962:	4413      	add	r3, r2
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]
      mg_flash_save(sector, key, io.buf + ofs + hs, size);  // Save to flash
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800196e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001970:	440b      	add	r3, r1
 8001972:	441a      	add	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4601      	mov	r1, r0
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f81b 	bl	80019b4 <mg_flash_save>
    for (ofs = 0; ofs < io.len; ofs += size + hs) {  // Traverse cached objects
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001982:	4413      	add	r3, r2
 8001984:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001986:	4413      	add	r3, r2
 8001988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800198e:	429a      	cmp	r2, r3
 8001990:	d3df      	bcc.n	8001952 <mg_flash_sector_cleanup+0xe6>
    }
  }
  mg_iobuf_free(&io);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4618      	mov	r0, r3
 8001998:	f005 fc25 	bl	80071e6 <mg_iobuf_free>
}
 800199c:	bf00      	nop
 800199e:	3744      	adds	r7, #68	@ 0x44
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd90      	pop	{r4, r7, pc}
 80019a4:	24000240 	.word	0x24000240
 80019a8:	08028ea8 	.word	0x08028ea8
 80019ac:	0802597c 	.word	0x0802597c
 80019b0:	08025a60 	.word	0x08025a60

080019b4 <mg_flash_save>:

// Save an object with a given key - append to the end of an object list
bool mg_flash_save(void *sector, uint32_t key, const void *buf, size_t len) {
 80019b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b8:	b094      	sub	sp, #80	@ 0x50
 80019ba:	af02      	add	r7, sp, #8
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	603b      	str	r3, [r7, #0]
  char *base = (char *) mg_flash_start(), *s = (char *) sector;
 80019c4:	f023 fc00 	bl	80251c8 <mg_flash_start>
 80019c8:	6338      	str	r0, [r7, #48]	@ 0x30
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	647b      	str	r3, [r7, #68]	@ 0x44
  size_t ss = mg_flash_sector_size(), ofs = 0, n;
 80019ce:	f023 fc11 	bl	80251f4 <mg_flash_sector_size>
 80019d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80019d4:	2300      	movs	r3, #0
 80019d6:	643b      	str	r3, [r7, #64]	@ 0x40
  bool ok = false;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (s == NULL) s = flash_last_sector();
 80019de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <mg_flash_save+0x36>
 80019e4:	f7ff fe7a 	bl	80016dc <flash_last_sector>
 80019e8:	6478      	str	r0, [r7, #68]	@ 0x44
  if (s < base || s >= base + mg_flash_size()) {
 80019ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d307      	bcc.n	8001a02 <mg_flash_save+0x4e>
 80019f2:	f023 fbf2 	bl	80251da <mg_flash_size>
 80019f6:	4602      	mov	r2, r0
 80019f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019fa:	4413      	add	r3, r2
 80019fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d310      	bcc.n	8001a24 <mg_flash_save+0x70>
    MG_ERROR(("%p is outsize of flash", sector));
 8001a02:	4b82      	ldr	r3, [pc, #520]	@ (8001c0c <mg_flash_save+0x258>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f340 81af 	ble.w	8001d6a <mg_flash_save+0x3b6>
 8001a0c:	4b80      	ldr	r3, [pc, #512]	@ (8001c10 <mg_flash_save+0x25c>)
 8001a0e:	f240 1257 	movw	r2, #343	@ 0x157
 8001a12:	4980      	ldr	r1, [pc, #512]	@ (8001c14 <mg_flash_save+0x260>)
 8001a14:	2001      	movs	r0, #1
 8001a16:	f006 fa8b 	bl	8007f30 <mg_log_prefix>
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	487e      	ldr	r0, [pc, #504]	@ (8001c18 <mg_flash_save+0x264>)
 8001a1e:	f006 fad7 	bl	8007fd0 <mg_log>
 8001a22:	e1a2      	b.n	8001d6a <mg_flash_save+0x3b6>
  } else if (((s - base) % ss) != 0) {
 8001a24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a32:	fb01 f202 	mul.w	r2, r1, r2
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d010      	beq.n	8001a5e <mg_flash_save+0xaa>
    MG_ERROR(("%p is not a sector boundary", sector));
 8001a3c:	4b73      	ldr	r3, [pc, #460]	@ (8001c0c <mg_flash_save+0x258>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f340 8192 	ble.w	8001d6a <mg_flash_save+0x3b6>
 8001a46:	4b72      	ldr	r3, [pc, #456]	@ (8001c10 <mg_flash_save+0x25c>)
 8001a48:	f240 1259 	movw	r2, #345	@ 0x159
 8001a4c:	4971      	ldr	r1, [pc, #452]	@ (8001c14 <mg_flash_save+0x260>)
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f006 fa6e 	bl	8007f30 <mg_log_prefix>
 8001a54:	68f9      	ldr	r1, [r7, #12]
 8001a56:	4871      	ldr	r0, [pc, #452]	@ (8001c1c <mg_flash_save+0x268>)
 8001a58:	f006 faba 	bl	8007fd0 <mg_log>
 8001a5c:	e185      	b.n	8001d6a <mg_flash_save+0x3b6>
  } else {
 8001a5e:	466b      	mov	r3, sp
 8001a60:	461d      	mov	r5, r3
    char ab[mg_flash_write_align()];  // Aligned write block
 8001a62:	f023 fbd0 	bl	8025206 <mg_flash_write_align>
 8001a66:	4604      	mov	r4, r0
 8001a68:	4623      	mov	r3, r4
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a6e:	2300      	movs	r3, #0
 8001a70:	46a2      	mov	sl, r4
 8001a72:	469b      	mov	fp, r3
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	46a0      	mov	r8, r4
 8001a8c:	4699      	mov	r9, r3
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aa2:	1de3      	adds	r3, r4, #7
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	ebad 0d03 	sub.w	sp, sp, r3
 8001aac:	ab02      	add	r3, sp, #8
 8001aae:	3300      	adds	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t hdr[2] = {(uint32_t) len, key};
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	617b      	str	r3, [r7, #20]
    size_t needed = sizeof(hdr) + len;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3308      	adds	r3, #8
 8001abe:	623b      	str	r3, [r7, #32]
    size_t needed_aligned = MG_ROUND_UP(needed, sizeof(ab));
 8001ac0:	2c00      	cmp	r4, #0
 8001ac2:	d101      	bne.n	8001ac8 <mg_flash_save+0x114>
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	e006      	b.n	8001ad6 <mg_flash_save+0x122>
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	4423      	add	r3, r4
 8001acc:	3b01      	subs	r3, #1
 8001ace:	fbb3 f3f4 	udiv	r3, r3, r4
 8001ad2:	fb04 f303 	mul.w	r3, r4, r3
 8001ad6:	61fb      	str	r3, [r7, #28]
    while ((n = mg_flash_next(s + ofs, s + ss, NULL, NULL)) > 0) ofs += n;
 8001ad8:	e003      	b.n	8001ae2 <mg_flash_save+0x12e>
 8001ada:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ade:	4413      	add	r3, r2
 8001ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae6:	18d0      	adds	r0, r2, r3
 8001ae8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aec:	18d1      	adds	r1, r2, r3
 8001aee:	2300      	movs	r3, #0
 8001af0:	2200      	movs	r2, #0
 8001af2:	f7ff fd9c 	bl	800162e <mg_flash_next>
 8001af6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1ed      	bne.n	8001ada <mg_flash_save+0x126>

    // If there is not enough space left, cleanup sector and re-eval ofs
    if (ofs + needed_aligned >= ss) {
 8001afe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	4413      	add	r3, r2
 8001b04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d817      	bhi.n	8001b3a <mg_flash_save+0x186>
      mg_flash_sector_cleanup(s);
 8001b0a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b0c:	f7ff feae 	bl	800186c <mg_flash_sector_cleanup>
      ofs = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	643b      	str	r3, [r7, #64]	@ 0x40
      while ((n = mg_flash_next(s + ofs, s + ss, NULL, NULL)) > 0) ofs += n;
 8001b14:	e003      	b.n	8001b1e <mg_flash_save+0x16a>
 8001b16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b1a:	4413      	add	r3, r2
 8001b1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b22:	18d0      	adds	r0, r2, r3
 8001b24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b28:	18d1      	adds	r1, r2, r3
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f7ff fd7e 	bl	800162e <mg_flash_next>
 8001b32:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ed      	bne.n	8001b16 <mg_flash_save+0x162>
    }

    if (ofs + needed_aligned <= ss) {
 8001b3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	4413      	add	r3, r2
 8001b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b42:	429a      	cmp	r2, r3
 8001b44:	f0c0 8102 	bcc.w	8001d4c <mg_flash_save+0x398>
      // Enough space to save this object
      if (sizeof(ab) < sizeof(hdr)) {
 8001b48:	2c07      	cmp	r4, #7
 8001b4a:	d81a      	bhi.n	8001b82 <mg_flash_save+0x1ce>
        // Flash write granularity is 32 bit or less, write with no buffering
        ok = mg_flash_write(s + ofs, hdr, sizeof(hdr));
 8001b4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b50:	4413      	add	r3, r2
 8001b52:	f107 0110 	add.w	r1, r7, #16
 8001b56:	2208      	movs	r2, #8
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f023 fd33 	bl	80255c4 <mg_flash_write>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (ok) mg_flash_write(s + ofs + sizeof(hdr), buf, len);
 8001b64:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80c1 	beq.w	8001cf0 <mg_flash_save+0x33c>
 8001b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b70:	3308      	adds	r3, #8
 8001b72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b74:	4413      	add	r3, r2
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f023 fd22 	bl	80255c4 <mg_flash_write>
 8001b80:	e0b6      	b.n	8001cf0 <mg_flash_save+0x33c>
      } else {
        // Flash granularity is sizeof(hdr) or more. We need to save in
        // 3 chunks: initial block, bulk, rest. This is because we have
        // two memory chunks to write: hdr and buf, on aligned boundaries.
        n = sizeof(ab) - sizeof(hdr);      // Initial chunk that we write
 8001b82:	f1a4 0308 	sub.w	r3, r4, #8
 8001b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (n > len) n = len;              // is
 8001b88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d901      	bls.n	8001b94 <mg_flash_save+0x1e0>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        memset(ab, 0xff, sizeof(ab));      // initialized to all-one
 8001b94:	4622      	mov	r2, r4
 8001b96:	21ff      	movs	r1, #255	@ 0xff
 8001b98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b9a:	f020 f923 	bl	8021de4 <memset>
        memcpy(ab, hdr, sizeof(hdr));      // contains the header (key + size)
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ba8:	f020 fa11 	bl	8021fce <memcpy>
        memcpy(ab + sizeof(hdr), buf, n);  // and an initial part of buf
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	3308      	adds	r3, #8
 8001bb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f020 fa0a 	bl	8021fce <memcpy>
        MG_INFO(("saving initial block of %lu", sizeof(ab)));
 8001bba:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <mg_flash_save+0x258>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	dd0a      	ble.n	8001bd8 <mg_flash_save+0x224>
 8001bc2:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <mg_flash_save+0x25c>)
 8001bc4:	f240 1277 	movw	r2, #375	@ 0x177
 8001bc8:	4912      	ldr	r1, [pc, #72]	@ (8001c14 <mg_flash_save+0x260>)
 8001bca:	2002      	movs	r0, #2
 8001bcc:	f006 f9b0 	bl	8007f30 <mg_log_prefix>
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	4813      	ldr	r0, [pc, #76]	@ (8001c20 <mg_flash_save+0x26c>)
 8001bd4:	f006 f9fc 	bl	8007fd0 <mg_log>
        ok = mg_flash_write(s + ofs, ab, sizeof(ab));
 8001bd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bdc:	4413      	add	r3, r2
 8001bde:	4622      	mov	r2, r4
 8001be0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001be2:	4618      	mov	r0, r3
 8001be4:	f023 fcee 	bl	80255c4 <mg_flash_write>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (ok && len > n) {
 8001bee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d07c      	beq.n	8001cf0 <mg_flash_save+0x33c>
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d978      	bls.n	8001cf0 <mg_flash_save+0x33c>
          size_t n2 = MG_ROUND_DOWN(len - n, sizeof(ab));
 8001bfe:	2c00      	cmp	r4, #0
 8001c00:	d110      	bne.n	8001c24 <mg_flash_save+0x270>
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	e013      	b.n	8001c32 <mg_flash_save+0x27e>
 8001c0a:	bf00      	nop
 8001c0c:	24000240 	.word	0x24000240
 8001c10:	08028ec0 	.word	0x08028ec0
 8001c14:	0802597c 	.word	0x0802597c
 8001c18:	08025a08 	.word	0x08025a08
 8001c1c:	08025a20 	.word	0x08025a20
 8001c20:	08025a78 	.word	0x08025a78
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	fbb3 f3f4 	udiv	r3, r3, r4
 8001c2e:	fb04 f303 	mul.w	r3, r4, r3
 8001c32:	61bb      	str	r3, [r7, #24]
          if (n2 > 0) {
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d01c      	beq.n	8001c74 <mg_flash_save+0x2c0>
            MG_INFO(("saving bulk, %lu", n2));
 8001c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d78 <mg_flash_save+0x3c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	dd0a      	ble.n	8001c58 <mg_flash_save+0x2a4>
 8001c42:	4b4e      	ldr	r3, [pc, #312]	@ (8001d7c <mg_flash_save+0x3c8>)
 8001c44:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8001c48:	494d      	ldr	r1, [pc, #308]	@ (8001d80 <mg_flash_save+0x3cc>)
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	f006 f970 	bl	8007f30 <mg_log_prefix>
 8001c50:	69b9      	ldr	r1, [r7, #24]
 8001c52:	484c      	ldr	r0, [pc, #304]	@ (8001d84 <mg_flash_save+0x3d0>)
 8001c54:	f006 f9bc 	bl	8007fd0 <mg_log>
            ok = mg_flash_write(s + ofs + sizeof(ab), (char *) buf + n, n2);
 8001c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c5a:	4423      	add	r3, r4
 8001c5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c5e:	18d0      	adds	r0, r2, r3
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c64:	4413      	add	r3, r2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f023 fcab 	bl	80255c4 <mg_flash_write>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          }
          if (ok && len > n) {
 8001c74:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d039      	beq.n	8001cf0 <mg_flash_save+0x33c>
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d935      	bls.n	8001cf0 <mg_flash_save+0x33c>
            size_t n3 = len - n - n2;
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c88:	1ad2      	subs	r2, r2, r3
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	637b      	str	r3, [r7, #52]	@ 0x34
            if (n3 > sizeof(ab)) n3 = sizeof(ab);
 8001c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c92:	429c      	cmp	r4, r3
 8001c94:	d200      	bcs.n	8001c98 <mg_flash_save+0x2e4>
 8001c96:	637c      	str	r4, [r7, #52]	@ 0x34
            memset(ab, 0xff, sizeof(ab));
 8001c98:	4622      	mov	r2, r4
 8001c9a:	21ff      	movs	r1, #255	@ 0xff
 8001c9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c9e:	f020 f8a1 	bl	8021de4 <memset>
            memcpy(ab, (char *) buf + n + n2, n3);
 8001ca2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cb2:	f020 f98c 	bl	8021fce <memcpy>
            MG_INFO(("saving rest, %lu", n3));
 8001cb6:	4b30      	ldr	r3, [pc, #192]	@ (8001d78 <mg_flash_save+0x3c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	dd0a      	ble.n	8001cd4 <mg_flash_save+0x320>
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <mg_flash_save+0x3c8>)
 8001cc0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8001cc4:	492e      	ldr	r1, [pc, #184]	@ (8001d80 <mg_flash_save+0x3cc>)
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f006 f932 	bl	8007f30 <mg_log_prefix>
 8001ccc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001cce:	482e      	ldr	r0, [pc, #184]	@ (8001d88 <mg_flash_save+0x3d4>)
 8001cd0:	f006 f97e 	bl	8007fd0 <mg_log>
            ok = mg_flash_write(s + ofs + sizeof(ab) + n2, ab, sizeof(ab));
 8001cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd6:	18e2      	adds	r2, r4, r3
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	4413      	add	r3, r2
 8001cdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001cde:	4413      	add	r3, r2
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f023 fc6d 	bl	80255c4 <mg_flash_write>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          }
        }
      }
      MG_DEBUG(("Saved %lu/%lu bytes @ %p, key %x: %d", len, needed_aligned,
 8001cf0:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <mg_flash_save+0x3c4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	dd14      	ble.n	8001d22 <mg_flash_save+0x36e>
 8001cf8:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <mg_flash_save+0x3c8>)
 8001cfa:	f240 1289 	movw	r2, #393	@ 0x189
 8001cfe:	4920      	ldr	r1, [pc, #128]	@ (8001d80 <mg_flash_save+0x3cc>)
 8001d00:	2003      	movs	r0, #3
 8001d02:	f006 f915 	bl	8007f30 <mg_log_prefix>
 8001d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d0a:	441a      	add	r2, r3
 8001d0c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4613      	mov	r3, r2
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	6839      	ldr	r1, [r7, #0]
 8001d1c:	481b      	ldr	r0, [pc, #108]	@ (8001d8c <mg_flash_save+0x3d8>)
 8001d1e:	f006 f957 	bl	8007fd0 <mg_log>
                s + ofs, key, ok));
      MG_DEBUG(("Sector space left: %lu bytes", ss - ofs - needed_aligned));
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <mg_flash_save+0x3c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	dd1e      	ble.n	8001d68 <mg_flash_save+0x3b4>
 8001d2a:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <mg_flash_save+0x3c8>)
 8001d2c:	f240 128b 	movw	r2, #395	@ 0x18b
 8001d30:	4913      	ldr	r1, [pc, #76]	@ (8001d80 <mg_flash_save+0x3cc>)
 8001d32:	2003      	movs	r0, #3
 8001d34:	f006 f8fc 	bl	8007f30 <mg_log_prefix>
 8001d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d3c:	1ad2      	subs	r2, r2, r3
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	4619      	mov	r1, r3
 8001d44:	4812      	ldr	r0, [pc, #72]	@ (8001d90 <mg_flash_save+0x3dc>)
 8001d46:	f006 f943 	bl	8007fd0 <mg_log>
 8001d4a:	e00d      	b.n	8001d68 <mg_flash_save+0x3b4>
    } else {
      MG_ERROR(("Sector is full"));
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <mg_flash_save+0x3c4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	dd09      	ble.n	8001d68 <mg_flash_save+0x3b4>
 8001d54:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <mg_flash_save+0x3c8>)
 8001d56:	f240 128d 	movw	r2, #397	@ 0x18d
 8001d5a:	4909      	ldr	r1, [pc, #36]	@ (8001d80 <mg_flash_save+0x3cc>)
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f006 f8e7 	bl	8007f30 <mg_log_prefix>
 8001d62:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <mg_flash_save+0x3e0>)
 8001d64:	f006 f934 	bl	8007fd0 <mg_log>
 8001d68:	46ad      	mov	sp, r5
    }
  }
  return ok;
 8001d6a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3748      	adds	r7, #72	@ 0x48
 8001d72:	46bd      	mov	sp, r7
 8001d74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d78:	24000240 	.word	0x24000240
 8001d7c:	08028ec0 	.word	0x08028ec0
 8001d80:	0802597c 	.word	0x0802597c
 8001d84:	08025a94 	.word	0x08025a94
 8001d88:	08025aa8 	.word	0x08025aa8
 8001d8c:	08025abc 	.word	0x08025abc
 8001d90:	08025ae4 	.word	0x08025ae4
 8001d94:	08025b04 	.word	0x08025b04

08001d98 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	e002      	b.n	8001dae <mg_dns_free+0x16>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d1f7      	bne.n	8001da8 <mg_dns_free+0x10>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	601a      	str	r2, [r3, #0]
  free(d);
 8001dc0:	6838      	ldr	r0, [r7, #0]
 8001dc2:	f01e fd81 	bl	80208c8 <free>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	3330      	adds	r3, #48	@ 0x30
 8001ddc:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e00d      	b.n	8001e02 <mg_resolve_cancel+0x34>
    tmp = d->next;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d103      	bne.n	8001dfe <mg_resolve_cancel+0x30>
 8001df6:	6979      	ldr	r1, [r7, #20]
 8001df8:	6938      	ldr	r0, [r7, #16]
 8001dfa:	f7ff ffcd 	bl	8001d98 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ee      	bne.n	8001de6 <mg_resolve_cancel+0x18>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b08c      	sub	sp, #48	@ 0x30
 8001e16:	af04      	add	r7, sp, #16
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8001e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <mg_dns_parse_name_depth+0x24>
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <mg_dns_parse_name_depth+0x24>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8001e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	f340 8084 	ble.w	8001f46 <mg_dns_parse_name_depth+0x134>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e093      	b.n	8001f6a <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	4413      	add	r3, r2
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <mg_dns_parse_name_depth+0x4c>
      i++;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
      break;
 8001e5c:	e07b      	b.n	8001f56 <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d02f      	beq.n	8001ec8 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	440a      	add	r2, r1
 8001e76:	3201      	adds	r2, #1
 8001e78:	68f9      	ldr	r1, [r7, #12]
 8001e7a:	440a      	add	r2, r1
 8001e7c:	7812      	ldrb	r2, [r2, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d919      	bls.n	8001ec0 <mg_dns_parse_name_depth+0xae>
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d111      	bne.n	8001ec0 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	9302      	str	r3, [sp, #8]
 8001ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	68b9      	ldr	r1, [r7, #8]
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7ff ffae 	bl	8001e12 <mg_dns_parse_name_depth>
 8001eb6:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <mg_dns_parse_name_depth+0xae>
        return 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e054      	b.n	8001f6a <mg_dns_parse_name_depth+0x158>
      i += 2;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	61fb      	str	r3, [r7, #28]
      break;
 8001ec6:	e046      	b.n	8001f56 <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	441a      	add	r2, r3
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d801      	bhi.n	8001ede <mg_dns_parse_name_depth+0xcc>
 8001eda:	2300      	movs	r3, #0
 8001edc:	e045      	b.n	8001f6a <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8001ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00b      	beq.n	8001efc <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8001ee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d204      	bcs.n	8001ef6 <mg_dns_parse_name_depth+0xe4>
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef0:	4413      	add	r3, r2
 8001ef2:	222e      	movs	r2, #46	@ 0x2e
 8001ef4:	701a      	strb	r2, [r3, #0]
      j++;
 8001ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef8:	3301      	adds	r3, #1
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8001efc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4413      	add	r3, r2
 8001f02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d90c      	bls.n	8001f22 <mg_dns_parse_name_depth+0x110>
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f0c:	18d0      	adds	r0, r2, r3
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	4413      	add	r3, r2
 8001f14:	3301      	adds	r3, #1
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4413      	add	r3, r2
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f020 f856 	bl	8021fce <memcpy>
    j += n;
 8001f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	4413      	add	r3, r2
 8001f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	4413      	add	r3, r2
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8001f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d204      	bcs.n	8001f46 <mg_dns_parse_name_depth+0x134>
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f40:	4413      	add	r3, r2
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	f63f af76 	bhi.w	8001e42 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8001f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <mg_dns_parse_name_depth+0x156>
 8001f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
  return i;
 8001f68:	69fb      	ldr	r3, [r7, #28]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b088      	sub	sp, #32
 8001f76:	af04      	add	r7, sp, #16
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8001f80:	2300      	movs	r3, #0
 8001f82:	9302      	str	r3, [sp, #8]
 8001f84:	2300      	movs	r3, #0
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff ff3d 	bl	8001e12 <mg_dns_parse_name_depth>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b088      	sub	sp, #32
 8001fa6:	af02      	add	r7, sp, #8
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	6a38      	ldr	r0, [r7, #32]
 8001fc6:	f01f ff0d 	bl	8021de4 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b0b      	cmp	r3, #11
 8001fce:	d801      	bhi.n	8001fd4 <mg_dns_parse_rr+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e074      	b.n	80020be <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fda:	d901      	bls.n	8001fe0 <mg_dns_parse_rr+0x3e>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e06e      	b.n	80020be <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d301      	bcc.n	8001fec <mg_dns_parse_rr+0x4a>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e068      	b.n	80020be <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8001fec:	2300      	movs	r3, #0
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7ff ffbb 	bl	8001f72 <mg_dns_parse_name>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	801a      	strh	r2, [r3, #0]
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <mg_dns_parse_rr+0x6e>
    return 0;
 800200c:	2300      	movs	r3, #0
 800200e:	e056      	b.n	80020be <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	3304      	adds	r3, #4
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4413      	add	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d901      	bls.n	8002028 <mg_dns_parse_rr+0x86>
 8002024:	2300      	movs	r3, #0
 8002026:	e04a      	b.n	80020be <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3b04      	subs	r3, #4
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	b21a      	sxth	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3b03      	subs	r3, #3
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b21b      	sxth	r3, r3
 800203a:	4313      	orrs	r3, r2
 800203c:	b21b      	sxth	r3, r3
 800203e:	b29a      	uxth	r2, r3
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3b02      	subs	r3, #2
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	b21a      	sxth	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3b01      	subs	r3, #1
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b21b      	sxth	r3, r3
 8002056:	4313      	orrs	r3, r2
 8002058:	b21b      	sxth	r3, r3
 800205a:	b29a      	uxth	r2, r3
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <mg_dns_parse_rr+0xcc>
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	3304      	adds	r3, #4
 800206c:	e027      	b.n	80020be <mg_dns_parse_rr+0x11c>

  s += 6;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3306      	adds	r3, #6
 8002072:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	429a      	cmp	r2, r3
 800207a:	d901      	bls.n	8002080 <mg_dns_parse_rr+0xde>
 800207c:	2300      	movs	r3, #0
 800207e:	e01e      	b.n	80020be <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3b02      	subs	r3, #2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	b21a      	sxth	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3b01      	subs	r3, #1
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b21b      	sxth	r3, r3
 8002092:	4313      	orrs	r3, r2
 8002094:	b21b      	sxth	r3, r3
 8002096:	b29a      	uxth	r2, r3
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	88db      	ldrh	r3, [r3, #6]
 80020a0:	461a      	mov	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	4413      	add	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d201      	bcs.n	80020b0 <mg_dns_parse_rr+0x10e>
 80020ac:	2300      	movs	r3, #0
 80020ae:	e006      	b.n	80020be <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	88db      	ldrh	r3, [r3, #6]
 80020ba:	4413      	add	r3, r2
 80020bc:	330a      	adds	r3, #10
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08e      	sub	sp, #56	@ 0x38
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 80020d8:	230c      	movs	r3, #12
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 80020dc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80020e0:	2100      	movs	r1, #0
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f01f fe7e 	bl	8021de4 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b0b      	cmp	r3, #11
 80020ec:	d801      	bhi.n	80020f2 <mg_dns_parse+0x2a>
 80020ee:	2300      	movs	r3, #0
 80020f0:	e0aa      	b.n	8002248 <mg_dns_parse+0x180>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	889b      	ldrh	r3, [r3, #4]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f015 fc9d 	bl	8017a36 <mg_ntohs>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d901      	bls.n	8002106 <mg_dns_parse+0x3e>
 8002102:	2300      	movs	r3, #0
 8002104:	e0a0      	b.n	8002248 <mg_dns_parse+0x180>
  num_answers = mg_ntohs(h->num_answers);
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	88db      	ldrh	r3, [r3, #6]
 800210a:	4618      	mov	r0, r3
 800210c:	f015 fc93 	bl	8017a36 <mg_ntohs>
 8002110:	4603      	mov	r3, r0
 8002112:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8002114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002116:	2b0a      	cmp	r3, #10
 8002118:	d910      	bls.n	800213c <mg_dns_parse+0x74>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 800211a:	4b4d      	ldr	r3, [pc, #308]	@ (8002250 <mg_dns_parse+0x188>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b02      	cmp	r3, #2
 8002120:	dd0a      	ble.n	8002138 <mg_dns_parse+0x70>
 8002122:	4b4c      	ldr	r3, [pc, #304]	@ (8002254 <mg_dns_parse+0x18c>)
 8002124:	f240 524b 	movw	r2, #1355	@ 0x54b
 8002128:	494b      	ldr	r1, [pc, #300]	@ (8002258 <mg_dns_parse+0x190>)
 800212a:	2003      	movs	r0, #3
 800212c:	f005 ff00 	bl	8007f30 <mg_log_prefix>
 8002130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002132:	484a      	ldr	r0, [pc, #296]	@ (800225c <mg_dns_parse+0x194>)
 8002134:	f005 ff4c 	bl	8007fd0 <mg_log>
    num_answers = 10;  // Sanity cap
 8002138:	230a      	movs	r3, #10
 800213a:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f015 fc78 	bl	8017a36 <mg_ntohs>
 8002146:	4603      	mov	r3, r0
 8002148:	461a      	mov	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002152:	e015      	b.n	8002180 <mg_dns_parse+0xb8>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2301      	movs	r3, #1
 800215c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f7ff ff1e 	bl	8001fa2 <mg_dns_parse_rr>
 8002166:	61f8      	str	r0, [r7, #28]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <mg_dns_parse+0xaa>
 800216e:	2300      	movs	r3, #0
 8002170:	e06a      	b.n	8002248 <mg_dns_parse+0x180>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 8002172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	4413      	add	r3, r2
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 800217a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800217c:	3301      	adds	r3, #1
 800217e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	889b      	ldrh	r3, [r3, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	f015 fc56 	bl	8017a36 <mg_ntohs>
 800218a:	4603      	mov	r3, r0
 800218c:	461a      	mov	r2, r3
 800218e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002190:	4293      	cmp	r3, r2
 8002192:	d3df      	bcc.n	8002154 <mg_dns_parse+0x8c>
  }
  for (i = 0; i < num_answers; i++) {
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002198:	e051      	b.n	800223e <mg_dns_parse+0x176>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2300      	movs	r3, #0
 80021a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff fefb 	bl	8001fa2 <mg_dns_parse_rr>
 80021ac:	61f8      	str	r0, [r7, #28]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <mg_dns_parse+0xf0>
 80021b4:	2300      	movs	r3, #0
 80021b6:	e047      	b.n	8002248 <mg_dns_parse+0x180>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3318      	adds	r3, #24
 80021bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021c0:	9200      	str	r2, [sp, #0]
 80021c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f7ff fed3 	bl	8001f72 <mg_dns_parse_name>
    ofs += n;
 80021cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4413      	add	r3, r2
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80021d4:	8b7b      	ldrh	r3, [r7, #26]
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d114      	bne.n	8002204 <mg_dns_parse+0x13c>
 80021da:	8afb      	ldrh	r3, [r7, #22]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d111      	bne.n	8002204 <mg_dns_parse+0x13c>
 80021e0:	8b3b      	ldrh	r3, [r7, #24]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d10e      	bne.n	8002204 <mg_dns_parse+0x13c>
      dm->addr.is_ip6 = false;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f2:	3a04      	subs	r2, #4
 80021f4:	68f9      	ldr	r1, [r7, #12]
 80021f6:	440a      	add	r2, r1
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8002202:	e020      	b.n	8002246 <mg_dns_parse+0x17e>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8002204:	8b7b      	ldrh	r3, [r7, #26]
 8002206:	2b10      	cmp	r3, #16
 8002208:	d116      	bne.n	8002238 <mg_dns_parse+0x170>
 800220a:	8afb      	ldrh	r3, [r7, #22]
 800220c:	2b1c      	cmp	r3, #28
 800220e:	d113      	bne.n	8002238 <mg_dns_parse+0x170>
 8002210:	8b3b      	ldrh	r3, [r7, #24]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d110      	bne.n	8002238 <mg_dns_parse+0x170>
      dm->addr.is_ip6 = true;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	1d18      	adds	r0, r3, #4
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	3b10      	subs	r3, #16
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	2210      	movs	r2, #16
 800222a:	4619      	mov	r1, r3
 800222c:	f01f fecf 	bl	8021fce <memcpy>
      dm->resolved = true;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8002236:	e006      	b.n	8002246 <mg_dns_parse+0x17e>
  for (i = 0; i < num_answers; i++) {
 8002238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223a:	3301      	adds	r3, #1
 800223c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800223e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002242:	429a      	cmp	r2, r3
 8002244:	d3a9      	bcc.n	800219a <mg_dns_parse+0xd2>
    }
  }
  return true;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3730      	adds	r7, #48	@ 0x30
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	24000240 	.word	0x24000240
 8002254:	08028ef0 	.word	0x08028ef0
 8002258:	0802597c 	.word	0x0802597c
 800225c:	08025bd8 	.word	0x08025bd8

08002260 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b0d2      	sub	sp, #328	@ 0x148
 8002264:	af02      	add	r7, sp, #8
 8002266:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800226a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800226e:	6018      	str	r0, [r3, #0]
 8002270:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002274:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002278:	6019      	str	r1, [r3, #0]
 800227a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800227e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002282:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8002284:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002288:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	3330      	adds	r3, #48	@ 0x30
 8002292:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 8002296:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800229a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d12d      	bne.n	8002300 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 80022a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80022a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 80022b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80022c0:	e019      	b.n	80022f6 <dns_cb+0x96>
      tmp = d->next;
 80022c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 80022cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80022d0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80022d4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80022d8:	4290      	cmp	r0, r2
 80022da:	eb71 0303 	sbcs.w	r3, r1, r3
 80022de:	d206      	bcs.n	80022ee <dns_cb+0x8e>
 80022e0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4992      	ldr	r1, [pc, #584]	@ (8002530 <dns_cb+0x2d0>)
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fb37 	bl	800295c <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 80022ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80022f2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80022f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1e1      	bne.n	80022c2 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 80022fe:	e112      	b.n	8002526 <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 8002300:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002304:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b07      	cmp	r3, #7
 800230c:	f040 80e4 	bne.w	80024d8 <dns_cb+0x278>
    int resolved = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8002316:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800231a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002322:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002326:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f107 0210 	add.w	r2, r7, #16
 8002332:	4619      	mov	r1, r3
 8002334:	f7ff fec8 	bl	80020c8 <mg_dns_parse>
 8002338:	4603      	mov	r3, r0
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01e      	beq.n	8002382 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8002344:	4b7b      	ldr	r3, [pc, #492]	@ (8002534 <dns_cb+0x2d4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	dd09      	ble.n	8002360 <dns_cb+0x100>
 800234c:	4b7a      	ldr	r3, [pc, #488]	@ (8002538 <dns_cb+0x2d8>)
 800234e:	f240 5279 	movw	r2, #1401	@ 0x579
 8002352:	497a      	ldr	r1, [pc, #488]	@ (800253c <dns_cb+0x2dc>)
 8002354:	2001      	movs	r0, #1
 8002356:	f005 fdeb 	bl	8007f30 <mg_log_prefix>
 800235a:	4879      	ldr	r0, [pc, #484]	@ (8002540 <dns_cb+0x2e0>)
 800235c:	f005 fe38 	bl	8007fd0 <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8002360:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002364:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800236c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002370:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f005 fe5e 	bl	800803c <mg_hexdump>
 8002380:	e090      	b.n	80024a4 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 8002382:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800238c:	e085      	b.n	800249a <dns_cb+0x23a>
        tmp = d->next;
 800238e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 8002398:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800239c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80023a0:	881a      	ldrh	r2, [r3, #0]
 80023a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023a6:	8a1b      	ldrh	r3, [r3, #16]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d171      	bne.n	8002490 <dns_cb+0x230>
        if (d->c->is_resolving) {
 80023ac:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d04a      	beq.n	8002456 <dns_cb+0x1f6>
          if (dm.resolved) {
 80023c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023c4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80023c8:	789b      	ldrb	r3, [r3, #2]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d038      	beq.n	8002440 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 80023ce:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80023de:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 80023e0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80023ee:	f102 041c 	add.w	r4, r2, #28
 80023f2:	1d1d      	adds	r5, r3, #4
 80023f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f8:	682b      	ldr	r3, [r5, #0]
 80023fa:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 80023fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002534 <dns_cb+0x2d4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b02      	cmp	r3, #2
 8002402:	dd16      	ble.n	8002432 <dns_cb+0x1d2>
 8002404:	4b4c      	ldr	r3, [pc, #304]	@ (8002538 <dns_cb+0x2d8>)
 8002406:	f240 5285 	movw	r2, #1413	@ 0x585
 800240a:	494c      	ldr	r1, [pc, #304]	@ (800253c <dns_cb+0x2dc>)
 800240c:	2003      	movs	r0, #3
 800240e:	f005 fd8f 	bl	8007f30 <mg_log_prefix>
 8002412:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800241a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	331c      	adds	r3, #28
 8002422:	f107 0210 	add.w	r2, r7, #16
 8002426:	3218      	adds	r2, #24
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	4b46      	ldr	r3, [pc, #280]	@ (8002544 <dns_cb+0x2e4>)
 800242c:	4846      	ldr	r0, [pc, #280]	@ (8002548 <dns_cb+0x2e8>)
 800242e:	f005 fdcf 	bl	8007fd0 <mg_log>
            mg_connect_resolved(d->c);
 8002432:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4618      	mov	r0, r3
 800243a:	f00a fb3f 	bl	800cabc <mg_connect_resolved>
 800243e:	e01d      	b.n	800247c <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8002440:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002444:	6858      	ldr	r0, [r3, #4]
 8002446:	f107 0310 	add.w	r3, r7, #16
 800244a:	3318      	adds	r3, #24
 800244c:	461a      	mov	r2, r3
 800244e:	493f      	ldr	r1, [pc, #252]	@ (800254c <dns_cb+0x2ec>)
 8002450:	f000 fa84 	bl	800295c <mg_error>
 8002454:	e012      	b.n	800247c <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 8002456:	4b37      	ldr	r3, [pc, #220]	@ (8002534 <dns_cb+0x2d4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	dd0e      	ble.n	800247c <dns_cb+0x21c>
 800245e:	4b36      	ldr	r3, [pc, #216]	@ (8002538 <dns_cb+0x2d8>)
 8002460:	f240 5292 	movw	r2, #1426	@ 0x592
 8002464:	4935      	ldr	r1, [pc, #212]	@ (800253c <dns_cb+0x2dc>)
 8002466:	2001      	movs	r0, #1
 8002468:	f005 fd62 	bl	8007f30 <mg_log_prefix>
 800246c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002474:	4619      	mov	r1, r3
 8002476:	4836      	ldr	r0, [pc, #216]	@ (8002550 <dns_cb+0x2f0>)
 8002478:	f005 fdaa 	bl	8007fd0 <mg_log>
        mg_dns_free(head, d);
 800247c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002480:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8002484:	f7ff fc88 	bl	8001d98 <mg_dns_free>
        resolved = 1;
 8002488:	2301      	movs	r3, #1
 800248a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800248e:	e000      	b.n	8002492 <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 8002490:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 8002492:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002496:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800249a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f af75 	bne.w	800238e <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80024a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <dns_cb+0x268>
 80024ac:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <dns_cb+0x2d4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	dd09      	ble.n	80024c8 <dns_cb+0x268>
 80024b4:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <dns_cb+0x2d8>)
 80024b6:	f44f 62b3 	mov.w	r2, #1432	@ 0x598
 80024ba:	4920      	ldr	r1, [pc, #128]	@ (800253c <dns_cb+0x2dc>)
 80024bc:	2001      	movs	r0, #1
 80024be:	f005 fd37 	bl	8007f30 <mg_log_prefix>
 80024c2:	4824      	ldr	r0, [pc, #144]	@ (8002554 <dns_cb+0x2f4>)
 80024c4:	f005 fd84 	bl	8007fd0 <mg_log>
    c->recv.len = 0;
 80024c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80024cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80024d6:	e026      	b.n	8002526 <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 80024d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80024dc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b09      	cmp	r3, #9
 80024e4:	d11f      	bne.n	8002526 <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 80024e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80024f0:	e015      	b.n	800251e <dns_cb+0x2be>
      tmp = d->next;
 80024f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 80024fc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4915      	ldr	r1, [pc, #84]	@ (8002558 <dns_cb+0x2f8>)
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fa29 	bl	800295c <mg_error>
      mg_dns_free(head, d);
 800250a:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800250e:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8002512:	f7ff fc41 	bl	8001d98 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 8002516:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800251a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800251e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1e5      	bne.n	80024f2 <dns_cb+0x292>
}
 8002526:	bf00      	nop
 8002528:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800252c:	46bd      	mov	sp, r7
 800252e:	bdb0      	pop	{r4, r5, r7, pc}
 8002530:	08025c04 	.word	0x08025c04
 8002534:	24000240 	.word	0x24000240
 8002538:	08028f00 	.word	0x08028f00
 800253c:	0802597c 	.word	0x0802597c
 8002540:	08025c10 	.word	0x08025c10
 8002544:	0800d883 	.word	0x0800d883
 8002548:	08025c2c 	.word	0x08025c2c
 800254c:	08025c3c 	.word	0x08025c3c
 8002550:	08025c54 	.word	0x08025c54
 8002554:	08025c6c 	.word	0x08025c6c
 8002558:	08025c7c 	.word	0x08025c7c

0800255c <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b0cb      	sub	sp, #300	@ 0x12c
 8002560:	af00      	add	r7, sp, #0
 8002562:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8002566:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 800256a:	6020      	str	r0, [r4, #0]
 800256c:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8002570:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8002574:	6001      	str	r1, [r0, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800257c:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002586:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 800258a:	460a      	mov	r2, r1
 800258c:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f01f fc23 	bl	8021de4 <memset>
  pkt.header.txnid = mg_htons(txnid);
 800259e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80025a2:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f015 fa44 	bl	8017a36 <mg_ntohs>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80025b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025ba:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 80025bc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80025c0:	f015 fa39 	bl	8017a36 <mg_ntohs>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80025cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025d0:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f015 fa2f 	bl	8017a36 <mg_ntohs>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80025e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025e4:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80025ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80025f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80025f4:	e054      	b.n	80026a0 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 80025f6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80025fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002606:	4413      	add	r3, r2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b2e      	cmp	r3, #46	@ 0x2e
 800260c:	d009      	beq.n	8002622 <mg_dns_send+0xc6>
 800260e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002612:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800261e:	429a      	cmp	r2, r3
 8002620:	d32f      	bcc.n	8002682 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8002622:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002626:	b2da      	uxtb	r2, r3
 8002628:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800262c:	b2db      	uxtb	r3, r3
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	b2d9      	uxtb	r1, r3
 8002632:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002636:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800263a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800263e:	4413      	add	r3, r2
 8002640:	330c      	adds	r3, #12
 8002642:	460a      	mov	r2, r1
 8002644:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8002646:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800264a:	3301      	adds	r3, #1
 800264c:	f107 0214 	add.w	r2, r7, #20
 8002650:	3308      	adds	r3, #8
 8002652:	4413      	add	r3, r2
 8002654:	1d18      	adds	r0, r3, #4
 8002656:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800265a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002666:	18d1      	adds	r1, r2, r3
 8002668:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800266c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	461a      	mov	r2, r3
 8002674:	f01f fcab 	bl	8021fce <memcpy>
      n = i + 1;
 8002678:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800267c:	3301      	adds	r3, #1
 800267e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 8002682:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002686:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002692:	429a      	cmp	r2, r3
 8002694:	d209      	bcs.n	80026aa <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8002696:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800269a:	3301      	adds	r3, #1
 800269c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80026a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80026a4:	2bfa      	cmp	r3, #250	@ 0xfa
 80026a6:	d9a6      	bls.n	80025f6 <mg_dns_send+0x9a>
 80026a8:	e000      	b.n	80026ac <mg_dns_send+0x150>
    if (i >= name->len) break;
 80026aa:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 80026ac:	f107 0214 	add.w	r2, r7, #20
 80026b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80026b4:	3308      	adds	r3, #8
 80026b6:	4413      	add	r3, r2
 80026b8:	3304      	adds	r3, #4
 80026ba:	2205      	movs	r2, #5
 80026bc:	4916      	ldr	r1, [pc, #88]	@ (8002718 <mg_dns_send+0x1bc>)
 80026be:	4618      	mov	r0, r3
 80026c0:	f01f fc85 	bl	8021fce <memcpy>
  n += 5;
 80026c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80026c8:	3305      	adds	r3, #5
 80026ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 80026ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80026d2:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d009      	beq.n	80026f0 <mg_dns_send+0x194>
 80026dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80026e0:	3b03      	subs	r3, #3
 80026e2:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80026e6:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80026ea:	4413      	add	r3, r2
 80026ec:	221c      	movs	r2, #28
 80026ee:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 80026f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80026f4:	f103 020c 	add.w	r2, r3, #12
 80026f8:	f107 0114 	add.w	r1, r7, #20
 80026fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002700:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	f00a fc9d 	bl	800d044 <mg_send>
 800270a:	4603      	mov	r3, r0
}
 800270c:	4618      	mov	r0, r3
 800270e:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8002712:	46bd      	mov	sp, r7
 8002714:	bd90      	pop	{r4, r7, pc}
 8002716:	bf00      	nop
 8002718:	08025c88 	.word	0x08025c88

0800271c <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 800271c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002720:	b088      	sub	sp, #32
 8002722:	af02      	add	r7, sp, #8
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d104      	bne.n	8002742 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8002738:	494d      	ldr	r1, [pc, #308]	@ (8002870 <mg_sendnsreq+0x154>)
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f90e 	bl	800295c <mg_error>
 8002740:	e017      	b.n	8002772 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d113      	bne.n	8002772 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6858      	ldr	r0, [r3, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6819      	ldr	r1, [r3, #0]
 8002752:	2300      	movs	r3, #0
 8002754:	2200      	movs	r2, #0
 8002756:	f007 f88f 	bl	8009878 <mg_connect>
 800275a:	4602      	mov	r2, r0
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a41      	ldr	r2, [pc, #260]	@ (8002874 <mg_sendnsreq+0x158>)
 800276e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d104      	bne.n	8002784 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 800277a:	493f      	ldr	r1, [pc, #252]	@ (8002878 <mg_sendnsreq+0x15c>)
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f8ed 	bl	800295c <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 8002782:	e070      	b.n	8002866 <mg_sendnsreq+0x14a>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8002784:	2118      	movs	r1, #24
 8002786:	2001      	movs	r0, #1
 8002788:	f01e f87a 	bl	8020880 <calloc>
 800278c:	4603      	mov	r3, r0
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d104      	bne.n	80027a0 <mg_sendnsreq+0x84>
    mg_error(c, "resolve OOM");
 8002796:	4939      	ldr	r1, [pc, #228]	@ (800287c <mg_sendnsreq+0x160>)
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f8df 	bl	800295c <mg_error>
}
 800279e:	e062      	b.n	8002866 <mg_sendnsreq+0x14a>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <mg_sendnsreq+0x9c>
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	8a1b      	ldrh	r3, [r3, #16]
 80027b2:	3301      	adds	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	e000      	b.n	80027ba <mg_sendnsreq+0x9e>
 80027b8:	2201      	movs	r2, #1
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 80027d0:	f7fe fbd6 	bl	8000f80 <mg_millis>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	17c8      	asrs	r0, r1, #31
 80027dc:	460c      	mov	r4, r1
 80027de:	4605      	mov	r5, r0
 80027e0:	eb12 0804 	adds.w	r8, r2, r4
 80027e4:	eb43 0905 	adc.w	r9, r3, r5
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80027fa:	f043 0308 	orr.w	r3, r3, #8
 80027fe:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8002802:	4b1f      	ldr	r3, [pc, #124]	@ (8002880 <mg_sendnsreq+0x164>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b03      	cmp	r3, #3
 8002808:	dd18      	ble.n	800283c <mg_sendnsreq+0x120>
 800280a:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <mg_sendnsreq+0x168>)
 800280c:	f240 52d6 	movw	r2, #1494	@ 0x5d6
 8002810:	491d      	ldr	r1, [pc, #116]	@ (8002888 <mg_sendnsreq+0x16c>)
 8002812:	2004      	movs	r0, #4
 8002814:	f005 fb8c 	bl	8007f30 <mg_log_prefix>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	461c      	mov	r4, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	8a12      	ldrh	r2, [r2, #16]
 800282e:	9201      	str	r2, [sp, #4]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	4603      	mov	r3, r0
 8002834:	4622      	mov	r2, r4
 8002836:	4815      	ldr	r0, [pc, #84]	@ (800288c <mg_sendnsreq+0x170>)
 8002838:	f005 fbca 	bl	8007fd0 <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6858      	ldr	r0, [r3, #4]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	8a1a      	ldrh	r2, [r3, #16]
 8002844:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	f7ff fe87 	bl	800255c <mg_dns_send>
 800284e:	4603      	mov	r3, r0
 8002850:	f083 0301 	eor.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <mg_sendnsreq+0x14a>
      mg_error(dnsc->c, "DNS send");
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	490c      	ldr	r1, [pc, #48]	@ (8002890 <mg_sendnsreq+0x174>)
 8002860:	4618      	mov	r0, r3
 8002862:	f000 f87b 	bl	800295c <mg_error>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002870:	08025c90 	.word	0x08025c90
 8002874:	08002261 	.word	0x08002261
 8002878:	08025cbc 	.word	0x08025cbc
 800287c:	08025cc8 	.word	0x08025cc8
 8002880:	24000240 	.word	0x24000240
 8002884:	08028f08 	.word	0x08028f08
 8002888:	0802597c 	.word	0x0802597c
 800288c:	08025cd4 	.word	0x08025cd4
 8002890:	08025cf8 	.word	0x08025cf8

08002894 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af02      	add	r7, sp, #8
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 800289e:	f107 030c 	add.w	r3, r7, #12
 80028a2:	6839      	ldr	r1, [r7, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f014 ffb6 	bl	8017816 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 80028aa:	6838      	ldr	r0, [r7, #0]
 80028ac:	f014 ffe6 	bl	801787c <mg_url_port>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f015 f8bf 	bl	8017a36 <mg_ntohs>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	331c      	adds	r3, #28
 80028c4:	461a      	mov	r2, r3
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028ce:	f006 ff04 	bl	80096da <mg_aton>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f00a f8ef 	bl	800cabc <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 80028de:	e019      	b.n	8002914 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	7e1b      	ldrb	r3, [r3, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <mg_resolve+0x5e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	330c      	adds	r3, #12
 80028f0:	e002      	b.n	80028f8 <mg_resolve+0x64>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	7e1b      	ldrb	r3, [r3, #24]
 8002906:	f107 010c 	add.w	r1, r7, #12
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ff04 	bl	800271c <mg_sendnsreq>
}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <mg_call+0x24>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <mg_call+0x38>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	4798      	blx	r3
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 800295c:	b40e      	push	{r1, r2, r3}
 800295e:	b580      	push	{r7, lr}
 8002960:	b095      	sub	sp, #84	@ 0x54
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8002966:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800296a:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	f107 0010 	add.w	r0, r7, #16
 8002974:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002976:	2140      	movs	r1, #64	@ 0x40
 8002978:	f00a fe68 	bl	800d64c <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 800297c:	4b14      	ldr	r3, [pc, #80]	@ (80029d0 <mg_error+0x74>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	dd0f      	ble.n	80029a4 <mg_error+0x48>
 8002984:	4b13      	ldr	r3, [pc, #76]	@ (80029d4 <mg_error+0x78>)
 8002986:	f240 620b 	movw	r2, #1547	@ 0x60b
 800298a:	4913      	ldr	r1, [pc, #76]	@ (80029d8 <mg_error+0x7c>)
 800298c:	2001      	movs	r0, #1
 800298e:	f005 facf 	bl	8007f30 <mg_log_prefix>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	480f      	ldr	r0, [pc, #60]	@ (80029dc <mg_error+0x80>)
 80029a0:	f005 fb16 	bl	8007fd0 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80029aa:	f043 0320 	orr.w	r3, r3, #32
 80029ae:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 80029b2:	f107 0310 	add.w	r3, r7, #16
 80029b6:	461a      	mov	r2, r3
 80029b8:	2100      	movs	r1, #0
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffae 	bl	800291c <mg_call>
}
 80029c0:	bf00      	nop
 80029c2:	3754      	adds	r7, #84	@ 0x54
 80029c4:	46bd      	mov	sp, r7
 80029c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029ca:	b003      	add	sp, #12
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	24000240 	.word	0x24000240
 80029d4:	08028f18 	.word	0x08028f18
 80029d8:	0802597c 	.word	0x0802597c
 80029dc:	08025d04 	.word	0x08025d04

080029e0 <is_digit>:
#endif




static bool is_digit(int c) {
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80029ec:	dd04      	ble.n	80029f8 <is_digit+0x18>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b39      	cmp	r3, #57	@ 0x39
 80029f2:	dc01      	bgt.n	80029f8 <is_digit+0x18>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <is_digit+0x1a>
 80029f8:	2300      	movs	r3, #0
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	b2db      	uxtb	r3, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <addexp>:

static int addexp(char *buf, int e, int sign) {
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  int n = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	617a      	str	r2, [r7, #20]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	2265      	movs	r2, #101	@ 0x65
 8002a2a:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	617a      	str	r2, [r7, #20]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002a44:	dd01      	ble.n	8002a4a <addexp+0x3e>
 8002a46:	2300      	movs	r3, #0
 8002a48:	e057      	b.n	8002afa <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b09      	cmp	r3, #9
 8002a4e:	dc07      	bgt.n	8002a60 <addexp+0x54>
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	617a      	str	r2, [r7, #20]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	2230      	movs	r2, #48	@ 0x30
 8002a5e:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b63      	cmp	r3, #99	@ 0x63
 8002a64:	dd1c      	ble.n	8002aa0 <addexp+0x94>
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4a27      	ldr	r2, [pc, #156]	@ (8002b08 <addexp+0xfc>)
 8002a6a:	fb82 1203 	smull	r1, r2, r2, r3
 8002a6e:	1152      	asrs	r2, r2, #5
 8002a70:	17db      	asrs	r3, r3, #31
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	1c59      	adds	r1, r3, #1
 8002a7a:	6179      	str	r1, [r7, #20]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	440b      	add	r3, r1
 8002a82:	3230      	adds	r2, #48	@ 0x30
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b08 <addexp+0xfc>)
 8002a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a90:	1151      	asrs	r1, r2, #5
 8002a92:	17da      	asrs	r2, r3, #31
 8002a94:	1a8a      	subs	r2, r1, r2
 8002a96:	2164      	movs	r1, #100	@ 0x64
 8002a98:	fb01 f202 	mul.w	r2, r1, r2
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b09      	cmp	r3, #9
 8002aa4:	dd1d      	ble.n	8002ae2 <addexp+0xd6>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4a18      	ldr	r2, [pc, #96]	@ (8002b0c <addexp+0x100>)
 8002aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8002aae:	1092      	asrs	r2, r2, #2
 8002ab0:	17db      	asrs	r3, r3, #31
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	1c59      	adds	r1, r3, #1
 8002aba:	6179      	str	r1, [r7, #20]
 8002abc:	4619      	mov	r1, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3230      	adds	r2, #48	@ 0x30
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <addexp+0x100>)
 8002acc:	fb83 1302 	smull	r1, r3, r3, r2
 8002ad0:	1099      	asrs	r1, r3, #2
 8002ad2:	17d3      	asrs	r3, r2, #31
 8002ad4:	1ac9      	subs	r1, r1, r3
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	1c59      	adds	r1, r3, #1
 8002aea:	6179      	str	r1, [r7, #20]
 8002aec:	4619      	mov	r1, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	440b      	add	r3, r1
 8002af2:	3230      	adds	r2, #48	@ 0x30
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]
  return n;
 8002af8:	697b      	ldr	r3, [r7, #20]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	51eb851f 	.word	0x51eb851f
 8002b0c:	66666667 	.word	0x66666667

08002b10 <xisinf>:

static int xisinf(double x) {
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8002b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8002b22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	000a      	movs	r2, r1
 8002b30:	2300      	movs	r3, #0
 8002b32:	4613      	mov	r3, r2
 8002b34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b38:	4a08      	ldr	r2, [pc, #32]	@ (8002b5c <xisinf+0x4c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d106      	bne.n	8002b4c <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8002b3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b42:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <xisinf+0x3c>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <xisinf+0x3e>
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	7ff00000 	.word	0x7ff00000

08002b60 <xisnan>:

static int xisnan(double x) {
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8002b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8002b72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	000a      	movs	r2, r1
 8002b80:	2300      	movs	r3, #0
 8002b82:	4613      	mov	r3, r2
 8002b84:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8002b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8002b98:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8002b9a:	4a06      	ldr	r2, [pc, #24]	@ (8002bb4 <xisnan+0x54>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	bf8c      	ite	hi
 8002ba0:	2301      	movhi	r3, #1
 8002ba2:	2300      	movls	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	7ff00000 	.word	0x7ff00000

08002bb8 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b09e      	sub	sp, #120	@ 0x78
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	6178      	str	r0, [r7, #20]
 8002bc0:	6139      	str	r1, [r7, #16]
 8002bc2:	ed87 0b02 	vstr	d0, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bce:	2300      	movs	r3, #0
 8002bd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	663b      	str	r3, [r7, #96]	@ 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8002bd6:	ed97 7b02 	vldr	d7, [r7, #8]
 8002bda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be2:	d107      	bne.n	8002bf4 <mg_dtoa+0x3c>
 8002be4:	4bb1      	ldr	r3, [pc, #708]	@ (8002eac <mg_dtoa+0x2f4>)
 8002be6:	4ab2      	ldr	r2, [pc, #712]	@ (8002eb0 <mg_dtoa+0x2f8>)
 8002be8:	6939      	ldr	r1, [r7, #16]
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f00a fd56 	bl	800d69c <mg_snprintf>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	e266      	b.n	80030c2 <mg_dtoa+0x50a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8002bf4:	ed97 0b02 	vldr	d0, [r7, #8]
 8002bf8:	f7ff ff8a 	bl	8002b10 <xisinf>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d010      	beq.n	8002c24 <mg_dtoa+0x6c>
 8002c02:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	dd01      	ble.n	8002c14 <mg_dtoa+0x5c>
 8002c10:	4ba8      	ldr	r3, [pc, #672]	@ (8002eb4 <mg_dtoa+0x2fc>)
 8002c12:	e000      	b.n	8002c16 <mg_dtoa+0x5e>
 8002c14:	4ba8      	ldr	r3, [pc, #672]	@ (8002eb8 <mg_dtoa+0x300>)
 8002c16:	4aa6      	ldr	r2, [pc, #664]	@ (8002eb0 <mg_dtoa+0x2f8>)
 8002c18:	6939      	ldr	r1, [r7, #16]
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f00a fd3e 	bl	800d69c <mg_snprintf>
 8002c20:	4603      	mov	r3, r0
 8002c22:	e24e      	b.n	80030c2 <mg_dtoa+0x50a>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8002c24:	ed97 0b02 	vldr	d0, [r7, #8]
 8002c28:	f7ff ff9a 	bl	8002b60 <xisnan>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <mg_dtoa+0x8a>
 8002c32:	4ba2      	ldr	r3, [pc, #648]	@ (8002ebc <mg_dtoa+0x304>)
 8002c34:	4a9e      	ldr	r2, [pc, #632]	@ (8002eb0 <mg_dtoa+0x2f8>)
 8002c36:	6939      	ldr	r1, [r7, #16]
 8002c38:	6978      	ldr	r0, [r7, #20]
 8002c3a:	f00a fd2f 	bl	800d69c <mg_snprintf>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	e23f      	b.n	80030c2 <mg_dtoa+0x50a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8002c42:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4e:	d50d      	bpl.n	8002c6c <mg_dtoa+0xb4>
 8002c50:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c54:	eeb1 7b47 	vneg.f64	d7, d7
 8002c58:	ed87 7b02 	vstr	d7, [r7, #8]
 8002c5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002c62:	3370      	adds	r3, #112	@ 0x70
 8002c64:	443b      	add	r3, r7
 8002c66:	222d      	movs	r2, #45	@ 0x2d
 8002c68:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8002c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c70:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  mul = 1.0;
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	4b91      	ldr	r3, [pc, #580]	@ (8002ec0 <mg_dtoa+0x308>)
 8002c7a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8002c7e:	e007      	b.n	8002c90 <mg_dtoa+0xd8>
 8002c80:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002c84:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002c88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c8c:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8002c90:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c94:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002c98:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca0:	db0c      	blt.n	8002cbc <mg_dtoa+0x104>
 8002ca2:	ed97 5b02 	vldr	d5, [r7, #8]
 8002ca6:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002caa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002cae:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002cb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cba:	dae1      	bge.n	8002c80 <mg_dtoa+0xc8>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8002cbc:	e007      	b.n	8002cce <mg_dtoa+0x116>
 8002cbe:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002cc2:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002cc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002cca:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8002cce:	ed97 7b02 	vldr	d7, [r7, #8]
 8002cd2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002cd6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cde:	d80c      	bhi.n	8002cfa <mg_dtoa+0x142>
 8002ce0:	ed97 5b02 	vldr	d5, [r7, #8]
 8002ce4:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002ce8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002cec:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002cf0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf8:	d9e1      	bls.n	8002cbe <mg_dtoa+0x106>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cfe:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002d02:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8002d06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d0a:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8002d0e:	e00a      	b.n	8002d26 <mg_dtoa+0x16e>
 8002d10:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002d14:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002d18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d1c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8002d20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d22:	3301      	adds	r3, #1
 8002d24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	dbf0      	blt.n	8002d10 <mg_dtoa+0x158>
  d += t;
 8002d2e:	ed97 6b02 	vldr	d6, [r7, #8]
 8002d32:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002d36:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d3a:	ed87 7b02 	vstr	d7, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	4b5f      	ldr	r3, [pc, #380]	@ (8002ec0 <mg_dtoa+0x308>)
 8002d44:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8002d48:	e00a      	b.n	8002d60 <mg_dtoa+0x1a8>
 8002d4a:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002d4e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002d52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d56:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8002d5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d60:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d64:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002d68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d70:	db0c      	blt.n	8002d8c <mg_dtoa+0x1d4>
 8002d72:	ed97 5b02 	vldr	d5, [r7, #8]
 8002d76:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002d7a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002d7e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002d82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	dade      	bge.n	8002d4a <mg_dtoa+0x192>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8002d8c:	e00a      	b.n	8002da4 <mg_dtoa+0x1ec>
 8002d8e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002d92:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002d96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d9a:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8002d9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002da0:	3b01      	subs	r3, #1
 8002da2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002da4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002da8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002dac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	d50c      	bpl.n	8002dd0 <mg_dtoa+0x218>
 8002db6:	ed97 5b02 	vldr	d5, [r7, #8]
 8002dba:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002dbe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002dc2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002dc6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dce:	d4de      	bmi.n	8002d8e <mg_dtoa+0x1d6>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8002dd0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	db2d      	blt.n	8002e34 <mg_dtoa+0x27c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	dd2a      	ble.n	8002e34 <mg_dtoa+0x27c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8002dde:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8002de2:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002de6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f107 0018 	add.w	r0, r7, #24
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	eeb0 0b45 	vmov.f64	d0, d5
 8002df6:	2128      	movs	r1, #40	@ 0x28
 8002df8:	f7ff fede 	bl	8002bb8 <mg_dtoa>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8002e00:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002e02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e04:	4413      	add	r3, r2
 8002e06:	f107 0218 	add.w	r2, r7, #24
 8002e0a:	4413      	add	r3, r2
 8002e0c:	222b      	movs	r2, #43	@ 0x2b
 8002e0e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fdfb 	bl	8002a0c <addexp>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e1a:	4413      	add	r3, r2
 8002e1c:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8002e1e:	f107 0318 	add.w	r3, r7, #24
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e26:	4a27      	ldr	r2, [pc, #156]	@ (8002ec4 <mg_dtoa+0x30c>)
 8002e28:	6939      	ldr	r1, [r7, #16]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f00a fc36 	bl	800d69c <mg_snprintf>
 8002e30:	4603      	mov	r3, r0
 8002e32:	e146      	b.n	80030c2 <mg_dtoa+0x50a>
  } else if (e <= -width && width > 1) {
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	425b      	negs	r3, r3
 8002e38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	dc2e      	bgt.n	8002e9c <mg_dtoa+0x2e4>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	dd2b      	ble.n	8002e9c <mg_dtoa+0x2e4>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8002e44:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8002e48:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002e4c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f107 0018 	add.w	r0, r7, #24
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	eeb0 0b45 	vmov.f64	d0, d5
 8002e5c:	2128      	movs	r1, #40	@ 0x28
 8002e5e:	f7ff feab 	bl	8002bb8 <mg_dtoa>
 8002e62:	4603      	mov	r3, r0
 8002e64:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8002e66:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f107 0218 	add.w	r2, r7, #24
 8002e70:	18d0      	adds	r0, r2, r3
 8002e72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e74:	425b      	negs	r3, r3
 8002e76:	222d      	movs	r2, #45	@ 0x2d
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7ff fdc7 	bl	8002a0c <addexp>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e82:	4413      	add	r3, r2
 8002e84:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8002e86:	f107 0318 	add.w	r3, r7, #24
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec4 <mg_dtoa+0x30c>)
 8002e90:	6939      	ldr	r1, [r7, #16]
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f00a fc02 	bl	800d69c <mg_snprintf>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	e112      	b.n	80030c2 <mg_dtoa+0x50a>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ea0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ea4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002ea8:	e046      	b.n	8002f38 <mg_dtoa+0x380>
 8002eaa:	bf00      	nop
 8002eac:	08025d10 	.word	0x08025d10
 8002eb0:	08025d14 	.word	0x08025d14
 8002eb4:	08025d18 	.word	0x08025d18
 8002eb8:	08025d1c 	.word	0x08025d1c
 8002ebc:	08025d24 	.word	0x08025d24
 8002ec0:	3ff00000 	.word	0x3ff00000
 8002ec4:	08025d28 	.word	0x08025d28
      int ch = (int) (d / t);
 8002ec8:	ed97 5b02 	vldr	d5, [r7, #8]
 8002ecc:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002ed0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002ed4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002ed8:	ee17 3a90 	vmov	r3, s15
 8002edc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8002ede:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	dc02      	bgt.n	8002eea <mg_dtoa+0x332>
 8002ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	dd0c      	ble.n	8002f04 <mg_dtoa+0x34c>
 8002eea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ef0:	1c59      	adds	r1, r3, #1
 8002ef2:	6679      	str	r1, [r7, #100]	@ 0x64
 8002ef4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3230      	adds	r2, #48	@ 0x30
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	3370      	adds	r3, #112	@ 0x70
 8002efe:	443b      	add	r3, r7
 8002f00:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8002f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002f0e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002f12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002f16:	ed97 6b02 	vldr	d6, [r7, #8]
 8002f1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002f1e:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8002f22:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002f26:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002f2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002f2e:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8002f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f34:	3301      	adds	r3, #1
 8002f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f38:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002f3c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002f40:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f48:	db04      	blt.n	8002f54 <mg_dtoa+0x39c>
 8002f4a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002f4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f4e:	4413      	add	r3, r2
 8002f50:	2b27      	cmp	r3, #39	@ 0x27
 8002f52:	ddb9      	ble.n	8002ec8 <mg_dtoa+0x310>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8002f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d118      	bne.n	8002f8c <mg_dtoa+0x3d4>
 8002f5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002f60:	3370      	adds	r3, #112	@ 0x70
 8002f62:	443b      	add	r3, r7
 8002f64:	2230      	movs	r2, #48	@ 0x30
 8002f66:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8002f6a:	e00f      	b.n	8002f8c <mg_dtoa+0x3d4>
 8002f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f72:	3370      	adds	r3, #112	@ 0x70
 8002f74:	443b      	add	r3, r7
 8002f76:	2230      	movs	r2, #48	@ 0x30
 8002f78:	f803 2c58 	strb.w	r2, [r3, #-88]
 8002f7c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002f80:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002f84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002f88:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8002f8c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002f90:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002f94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9c:	db04      	blt.n	8002fa8 <mg_dtoa+0x3f0>
 8002f9e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002fa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fa2:	4413      	add	r3, r2
 8002fa4:	2b27      	cmp	r3, #39	@ 0x27
 8002fa6:	dde1      	ble.n	8002f6c <mg_dtoa+0x3b4>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8002fa8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002faa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fac:	4413      	add	r3, r2
 8002fae:	2b27      	cmp	r3, #39	@ 0x27
 8002fb0:	dc09      	bgt.n	8002fc6 <mg_dtoa+0x40e>
 8002fb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002fb8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002fba:	4413      	add	r3, r2
 8002fbc:	3370      	adds	r3, #112	@ 0x70
 8002fbe:	443b      	add	r3, r7
 8002fc0:	222e      	movs	r2, #46	@ 0x2e
 8002fc2:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fca:	a342      	add	r3, pc, #264	@ (adr r3, 80030d4 <mg_dtoa+0x51c>)
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002fd4:	e031      	b.n	800303a <mg_dtoa+0x482>
      int ch = (int) (d / t);
 8002fd6:	ed97 5b02 	vldr	d5, [r7, #8]
 8002fda:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002fde:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002fe2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002fe6:	ee17 3a90 	vmov	r3, s15
 8002fea:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 8002fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ff2:	1c59      	adds	r1, r3, #1
 8002ff4:	6679      	str	r1, [r7, #100]	@ 0x64
 8002ff6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3230      	adds	r2, #48	@ 0x30
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	3370      	adds	r3, #112	@ 0x70
 8003000:	443b      	add	r3, r7
 8003002:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8003006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003008:	ee07 3a90 	vmov	s15, r3
 800300c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003010:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8003014:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003018:	ed97 6b02 	vldr	d6, [r7, #8]
 800301c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003020:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8003024:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8003028:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800302c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003030:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8003034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003036:	3301      	adds	r3, #1
 8003038:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800303a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800303c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800303e:	4413      	add	r3, r2
 8003040:	2b27      	cmp	r3, #39	@ 0x27
 8003042:	dc07      	bgt.n	8003054 <mg_dtoa+0x49c>
 8003044:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	dbc4      	blt.n	8002fd6 <mg_dtoa+0x41e>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 800304c:	e002      	b.n	8003054 <mg_dtoa+0x49c>
 800304e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003050:	3b01      	subs	r3, #1
 8003052:	667b      	str	r3, [r7, #100]	@ 0x64
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00c      	beq.n	8003074 <mg_dtoa+0x4bc>
 800305a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800305c:	2b00      	cmp	r3, #0
 800305e:	dd09      	ble.n	8003074 <mg_dtoa+0x4bc>
 8003060:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003062:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003064:	4413      	add	r3, r2
 8003066:	3b01      	subs	r3, #1
 8003068:	3370      	adds	r3, #112	@ 0x70
 800306a:	443b      	add	r3, r7
 800306c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8003070:	2b30      	cmp	r3, #48	@ 0x30
 8003072:	d0ec      	beq.n	800304e <mg_dtoa+0x496>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8003074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003076:	2b00      	cmp	r3, #0
 8003078:	dd0c      	ble.n	8003094 <mg_dtoa+0x4dc>
 800307a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800307c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800307e:	4413      	add	r3, r2
 8003080:	3b01      	subs	r3, #1
 8003082:	3370      	adds	r3, #112	@ 0x70
 8003084:	443b      	add	r3, r7
 8003086:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800308a:	2b2e      	cmp	r3, #46	@ 0x2e
 800308c:	d102      	bne.n	8003094 <mg_dtoa+0x4dc>
 800308e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003090:	3b01      	subs	r3, #1
 8003092:	667b      	str	r3, [r7, #100]	@ 0x64
  n += s;
 8003094:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003096:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003098:	4413      	add	r3, r2
 800309a:	667b      	str	r3, [r7, #100]	@ 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 800309c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800309e:	2b27      	cmp	r3, #39	@ 0x27
 80030a0:	dd01      	ble.n	80030a6 <mg_dtoa+0x4ee>
 80030a2:	2327      	movs	r3, #39	@ 0x27
 80030a4:	667b      	str	r3, [r7, #100]	@ 0x64
  buf[n] = '\0';
 80030a6:	f107 0218 	add.w	r2, r7, #24
 80030aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030ac:	4413      	add	r3, r2
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 80030b2:	f107 0318 	add.w	r3, r7, #24
 80030b6:	4a06      	ldr	r2, [pc, #24]	@ (80030d0 <mg_dtoa+0x518>)
 80030b8:	6939      	ldr	r1, [r7, #16]
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f00a faee 	bl	800d69c <mg_snprintf>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3770      	adds	r7, #112	@ 0x70
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	f3af 8000 	nop.w
 80030d0:	08025d14 	.word	0x08025d14
 80030d4:	9999999a 	.word	0x9999999a
 80030d8:	3fb99999 	.word	0x3fb99999

080030dc <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 80030dc:	b5b0      	push	{r4, r5, r7, lr}
 80030de:	b08c      	sub	sp, #48	@ 0x30
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 80030e8:	4b53      	ldr	r3, [pc, #332]	@ (8003238 <mg_lld+0x15c>)
 80030ea:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 80030ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 80030f8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d012      	beq.n	8003126 <mg_lld+0x4a>
 8003100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003104:	2b00      	cmp	r3, #0
 8003106:	da0e      	bge.n	8003126 <mg_lld+0x4a>
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	627a      	str	r2, [r7, #36]	@ 0x24
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4413      	add	r3, r2
 8003112:	222d      	movs	r2, #45	@ 0x2d
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800311a:	2100      	movs	r1, #0
 800311c:	4254      	negs	r4, r2
 800311e:	eb61 0503 	sbc.w	r5, r1, r3
 8003122:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8003126:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800312a:	2b00      	cmp	r3, #0
 800312c:	d021      	beq.n	8003172 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
 8003132:	e019      	b.n	8003168 <mg_lld+0x8c>
 8003134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	441a      	add	r2, r3
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	1c59      	adds	r1, r3, #1
 8003142:	6239      	str	r1, [r7, #32]
 8003144:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003146:	440b      	add	r3, r1
 8003148:	68f9      	ldr	r1, [r7, #12]
 800314a:	440b      	add	r3, r1
 800314c:	7812      	ldrb	r2, [r2, #0]
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	0902      	lsrs	r2, r0, #4
 800315e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8003162:	090b      	lsrs	r3, r1, #4
 8003164:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8003168:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800316c:	4313      	orrs	r3, r2
 800316e:	d1e1      	bne.n	8003134 <mg_lld+0x58>
 8003170:	e025      	b.n	80031be <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8003172:	2300      	movs	r3, #0
 8003174:	623b      	str	r3, [r7, #32]
 8003176:	e01e      	b.n	80031b6 <mg_lld+0xda>
 8003178:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800317c:	f04f 020a 	mov.w	r2, #10
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	f7fd fb20 	bl	80007c8 <__aeabi_uldivmod>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	441a      	add	r2, r3
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	1c59      	adds	r1, r3, #1
 8003190:	6239      	str	r1, [r7, #32]
 8003192:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003194:	440b      	add	r3, r1
 8003196:	68f9      	ldr	r1, [r7, #12]
 8003198:	440b      	add	r3, r1
 800319a:	7812      	ldrb	r2, [r2, #0]
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031a2:	f04f 020a 	mov.w	r2, #10
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	f7fd fb0d 	bl	80007c8 <__aeabi_uldivmod>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80031b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031ba:	4313      	orrs	r3, r2
 80031bc:	d1dc      	bne.n	8003178 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e022      	b.n	800320a <mg_lld+0x12e>
    char t = buf[s + i];
 80031c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4413      	add	r3, r2
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 80031d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	441a      	add	r2, r3
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	441a      	add	r2, r3
 80031e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	440b      	add	r3, r1
 80031e8:	68f9      	ldr	r1, [r7, #12]
 80031ea:	440b      	add	r3, r1
 80031ec:	7812      	ldrb	r2, [r2, #0]
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	441a      	add	r2, r3
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	7dfa      	ldrb	r2, [r7, #23]
 8003202:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3301      	adds	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	429a      	cmp	r2, r3
 8003212:	d3d7      	bcc.n	80031c4 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8003214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003218:	4313      	orrs	r3, r2
 800321a:	d106      	bne.n	800322a <mg_lld+0x14e>
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	623a      	str	r2, [r7, #32]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4413      	add	r3, r2
 8003226:	2230      	movs	r2, #48	@ 0x30
 8003228:	701a      	strb	r2, [r3, #0]
  return n + s;
 800322a:	6a3a      	ldr	r2, [r7, #32]
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	4413      	add	r3, r2
}
 8003230:	4618      	mov	r0, r3
 8003232:	3730      	adds	r7, #48	@ 0x30
 8003234:	46bd      	mov	sp, r7
 8003236:	bdb0      	pop	{r4, r5, r7, pc}
 8003238:	08025d30 	.word	0x08025d30

0800323c <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 800324e:	e009      	b.n	8003264 <scpy+0x28>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	617a      	str	r2, [r7, #20]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	4610      	mov	r0, r2
 8003262:	4798      	blx	r3
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d205      	bcs.n	8003278 <scpy+0x3c>
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	4413      	add	r3, r2
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1eb      	bne.n	8003250 <scpy+0x14>
  return i;
 8003278:	697b      	ldr	r3, [r7, #20]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8003282:	b40c      	push	{r2, r3}
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8003292:	f107 031c 	add.w	r3, r7, #28
 8003296:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8003298:	f107 0308 	add.w	r3, r7, #8
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	6839      	ldr	r1, [r7, #0]
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f809 	bl	80032b8 <mg_vxprintf>
 80032a6:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80032a8:	68fb      	ldr	r3, [r7, #12]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032b4:	b002      	add	sp, #8
 80032b6:	4770      	bx	lr

080032b8 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 80032b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032bc:	b0a6      	sub	sp, #152	@ 0x98
 80032be:	af02      	add	r7, sp, #8
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80032ce:	2300      	movs	r3, #0
 80032d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 80032d4:	e383      	b.n	80039de <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032dc:	4413      	add	r3, r2
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b25      	cmp	r3, #37	@ 0x25
 80032e2:	f040 8369 	bne.w	80039b8 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80032e6:	2300      	movs	r3, #0
 80032e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032ea:	2300      	movs	r3, #0
 80032ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032ee:	2300      	movs	r3, #0
 80032f0:	677b      	str	r3, [r7, #116]	@ 0x74
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 80032f8:	2320      	movs	r3, #32
 80032fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8003304:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003308:	3301      	adds	r3, #1
 800330a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003314:	4413      	add	r3, r2
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 800331c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003320:	2b23      	cmp	r3, #35	@ 0x23
 8003322:	d10e      	bne.n	8003342 <mg_vxprintf+0x8a>
 8003324:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003326:	3301      	adds	r3, #1
 8003328:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800332a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800332e:	3301      	adds	r3, #1
 8003330:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800333a:	4413      	add	r3, r2
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 8003342:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003346:	2b2d      	cmp	r3, #45	@ 0x2d
 8003348:	d110      	bne.n	800336c <mg_vxprintf+0xb4>
 800334a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800334e:	3301      	adds	r3, #1
 8003350:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8003354:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003358:	3301      	adds	r3, #1
 800335a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003364:	4413      	add	r3, r2
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 800336c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003370:	2b30      	cmp	r3, #48	@ 0x30
 8003372:	d127      	bne.n	80033c4 <mg_vxprintf+0x10c>
 8003374:	2330      	movs	r3, #48	@ 0x30
 8003376:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800337a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800337e:	3301      	adds	r3, #1
 8003380:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800338a:	4413      	add	r3, r2
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8003392:	e017      	b.n	80033c4 <mg_vxprintf+0x10c>
 8003394:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	677b      	str	r3, [r7, #116]	@ 0x74
 80033a0:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80033a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033a6:	4413      	add	r3, r2
 80033a8:	3b30      	subs	r3, #48	@ 0x30
 80033aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80033ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033b0:	3301      	adds	r3, #1
 80033b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033bc:	4413      	add	r3, r2
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80033c4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fb09 	bl	80029e0 <is_digit>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1df      	bne.n	8003394 <mg_vxprintf+0xdc>
      if (c == '.') {
 80033d4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80033da:	d153      	bne.n	8003484 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 80033dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033e0:	3301      	adds	r3, #1
 80033e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ec:	4413      	add	r3, r2
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 80033f4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80033fa:	d113      	bne.n	8003424 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	1d19      	adds	r1, r3, #4
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	6011      	str	r1, [r2, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 800340a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800340e:	3301      	adds	r3, #1
 8003410:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800341a:	4413      	add	r3, r2
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8003422:	e02f      	b.n	8003484 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8003428:	e017      	b.n	800345a <mg_vxprintf+0x1a2>
 800342a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	673b      	str	r3, [r7, #112]	@ 0x70
 8003436:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800343a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800343c:	4413      	add	r3, r2
 800343e:	3b30      	subs	r3, #48	@ 0x30
 8003440:	673b      	str	r3, [r7, #112]	@ 0x70
 8003442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003446:	3301      	adds	r3, #1
 8003448:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003452:	4413      	add	r3, r2
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800345a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fabe 	bl	80029e0 <is_digit>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1df      	bne.n	800342a <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 800346a:	e00b      	b.n	8003484 <mg_vxprintf+0x1cc>
 800346c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003470:	3301      	adds	r3, #1
 8003472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800347c:	4413      	add	r3, r2
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8003484:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003488:	2b68      	cmp	r3, #104	@ 0x68
 800348a:	d0ef      	beq.n	800346c <mg_vxprintf+0x1b4>
      if (c == 'l') {
 800348c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003490:	2b6c      	cmp	r3, #108	@ 0x6c
 8003492:	d121      	bne.n	80034d8 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8003494:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003496:	3301      	adds	r3, #1
 8003498:	67bb      	str	r3, [r7, #120]	@ 0x78
 800349a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800349e:	3301      	adds	r3, #1
 80034a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034aa:	4413      	add	r3, r2
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 80034b2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034b6:	2b6c      	cmp	r3, #108	@ 0x6c
 80034b8:	d10e      	bne.n	80034d8 <mg_vxprintf+0x220>
 80034ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034bc:	3301      	adds	r3, #1
 80034be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034c4:	3301      	adds	r3, #1
 80034c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d0:	4413      	add	r3, r2
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 80034d8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034dc:	2b70      	cmp	r3, #112	@ 0x70
 80034de:	d103      	bne.n	80034e8 <mg_vxprintf+0x230>
 80034e0:	2301      	movs	r3, #1
 80034e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034e4:	2301      	movs	r3, #1
 80034e6:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 80034e8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034ec:	2b64      	cmp	r3, #100	@ 0x64
 80034ee:	d018      	beq.n	8003522 <mg_vxprintf+0x26a>
 80034f0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034f4:	2b75      	cmp	r3, #117	@ 0x75
 80034f6:	d014      	beq.n	8003522 <mg_vxprintf+0x26a>
 80034f8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034fc:	2b78      	cmp	r3, #120	@ 0x78
 80034fe:	d010      	beq.n	8003522 <mg_vxprintf+0x26a>
 8003500:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003504:	2b58      	cmp	r3, #88	@ 0x58
 8003506:	d00c      	beq.n	8003522 <mg_vxprintf+0x26a>
 8003508:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800350c:	2b70      	cmp	r3, #112	@ 0x70
 800350e:	d008      	beq.n	8003522 <mg_vxprintf+0x26a>
 8003510:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003514:	2b67      	cmp	r3, #103	@ 0x67
 8003516:	d004      	beq.n	8003522 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8003518:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800351c:	2b66      	cmp	r3, #102	@ 0x66
 800351e:	f040 816c 	bne.w	80037fa <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8003522:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003526:	2b64      	cmp	r3, #100	@ 0x64
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8003532:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003536:	2b78      	cmp	r3, #120	@ 0x78
 8003538:	d007      	beq.n	800354a <mg_vxprintf+0x292>
 800353a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800353e:	2b58      	cmp	r3, #88	@ 0x58
 8003540:	d003      	beq.n	800354a <mg_vxprintf+0x292>
 8003542:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003546:	2b70      	cmp	r3, #112	@ 0x70
 8003548:	d101      	bne.n	800354e <mg_vxprintf+0x296>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <mg_vxprintf+0x298>
 800354e:	2300      	movs	r3, #0
 8003550:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8003554:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8003560:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <mg_vxprintf+0x2b2>
 8003566:	2302      	movs	r3, #2
 8003568:	e000      	b.n	800356c <mg_vxprintf+0x2b4>
 800356a:	2300      	movs	r3, #0
 800356c:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 800356e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003572:	2b67      	cmp	r3, #103	@ 0x67
 8003574:	d003      	beq.n	800357e <mg_vxprintf+0x2c6>
 8003576:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800357a:	2b66      	cmp	r3, #102	@ 0x66
 800357c:	d124      	bne.n	80035c8 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3307      	adds	r3, #7
 8003584:	f023 0307 	bic.w	r3, r3, #7
 8003588:	f103 0108 	add.w	r1, r3, #8
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	6011      	str	r1, [r2, #0]
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8003598:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359e:	d101      	bne.n	80035a4 <mg_vxprintf+0x2ec>
 80035a0:	2306      	movs	r3, #6
 80035a2:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 80035a4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80035a6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80035aa:	2b67      	cmp	r3, #103	@ 0x67
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f107 0014 	add.w	r0, r7, #20
 80035b8:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80035bc:	2128      	movs	r1, #40	@ 0x28
 80035be:	f7ff fafb 	bl	8002bb8 <mg_dtoa>
 80035c2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 80035c6:	e069      	b.n	800369c <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 80035c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d11c      	bne.n	8003608 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3307      	adds	r3, #7
 80035d4:	f023 0307 	bic.w	r3, r3, #7
 80035d8:	f103 0108 	add.w	r1, r3, #8
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	6011      	str	r1, [r2, #0]
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 80035e8:	f107 0114 	add.w	r1, r7, #20
 80035ec:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035fc:	4608      	mov	r0, r1
 80035fe:	f7ff fd6d 	bl	80030dc <mg_lld>
 8003602:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8003606:	e049      	b.n	800369c <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8003608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800360a:	2b01      	cmp	r3, #1
 800360c:	d123      	bne.n	8003656 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	1d19      	adds	r1, r3, #4
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	6011      	str	r1, [r2, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 800361c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <mg_vxprintf+0x376>
 8003624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003626:	17da      	asrs	r2, r3, #31
 8003628:	461c      	mov	r4, r3
 800362a:	4615      	mov	r5, r2
 800362c:	e003      	b.n	8003636 <mg_vxprintf+0x37e>
 800362e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003630:	2200      	movs	r2, #0
 8003632:	461c      	mov	r4, r3
 8003634:	4615      	mov	r5, r2
 8003636:	f107 0114 	add.w	r1, r7, #20
 800363a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	4622      	mov	r2, r4
 8003648:	462b      	mov	r3, r5
 800364a:	4608      	mov	r0, r1
 800364c:	f7ff fd46 	bl	80030dc <mg_lld>
 8003650:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8003654:	e022      	b.n	800369c <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	1d19      	adds	r1, r3, #4
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	6011      	str	r1, [r2, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8003664:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003668:	2b00      	cmp	r3, #0
 800366a:	d004      	beq.n	8003676 <mg_vxprintf+0x3be>
 800366c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366e:	17da      	asrs	r2, r3, #31
 8003670:	4698      	mov	r8, r3
 8003672:	4691      	mov	r9, r2
 8003674:	e003      	b.n	800367e <mg_vxprintf+0x3c6>
 8003676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003678:	2200      	movs	r2, #0
 800367a:	4698      	mov	r8, r3
 800367c:	4691      	mov	r9, r2
 800367e:	f107 0114 	add.w	r1, r7, #20
 8003682:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	4642      	mov	r2, r8
 8003690:	464b      	mov	r3, r9
 8003692:	4608      	mov	r0, r1
 8003694:	f7ff fd22 	bl	80030dc <mg_lld>
 8003698:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036a2:	e007      	b.n	80036b4 <mg_vxprintf+0x3fc>
 80036a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036a6:	3b01      	subs	r3, #1
 80036a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80036aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ae:	3301      	adds	r3, #1
 80036b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80036b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d202      	bcs.n	80036c4 <mg_vxprintf+0x40c>
 80036be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ef      	bne.n	80036a4 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036ca:	e011      	b.n	80036f0 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 80036cc:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80036d0:	2301      	movs	r3, #1
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff fdb1 	bl	800323c <scpy>
 80036da:	4602      	mov	r2, r0
 80036dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036e0:	4413      	add	r3, r2
 80036e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80036e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ea:	3301      	adds	r3, #1
 80036ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d110      	bne.n	800371a <mg_vxprintf+0x462>
 80036f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10c      	bne.n	800371a <mg_vxprintf+0x462>
 8003700:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003704:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003706:	429a      	cmp	r2, r3
 8003708:	d207      	bcs.n	800371a <mg_vxprintf+0x462>
 800370a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800370e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003712:	4413      	add	r3, r2
 8003714:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003716:	429a      	cmp	r2, r3
 8003718:	d8d8      	bhi.n	80036cc <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 800371a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800371c:	4ab7      	ldr	r2, [pc, #732]	@ (80039fc <mg_vxprintf+0x744>)
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff fd8b 	bl	800323c <scpy>
 8003726:	4602      	mov	r2, r0
 8003728:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800372c:	4413      	add	r3, r2
 800372e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8003732:	2300      	movs	r3, #0
 8003734:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003738:	e011      	b.n	800375e <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 800373a:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800373e:	2301      	movs	r3, #1
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff fd7a 	bl	800323c <scpy>
 8003748:	4602      	mov	r2, r0
 800374a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800374e:	4413      	add	r3, r2
 8003750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8003754:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003758:	3301      	adds	r3, #1
 800375a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800375e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003762:	2b30      	cmp	r3, #48	@ 0x30
 8003764:	d10c      	bne.n	8003780 <mg_vxprintf+0x4c8>
 8003766:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800376a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800376c:	429a      	cmp	r2, r3
 800376e:	d207      	bcs.n	8003780 <mg_vxprintf+0x4c8>
 8003770:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003774:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003778:	4413      	add	r3, r2
 800377a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800377c:	429a      	cmp	r2, r3
 800377e:	d8dc      	bhi.n	800373a <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8003780:	f107 0214 	add.w	r2, r7, #20
 8003784:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f7ff fd56 	bl	800323c <scpy>
 8003790:	4602      	mov	r2, r0
 8003792:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003796:	4413      	add	r3, r2
 8003798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037a2:	e011      	b.n	80037c8 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 80037a4:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80037a8:	2301      	movs	r3, #1
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7ff fd45 	bl	800323c <scpy>
 80037b2:	4602      	mov	r2, r0
 80037b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037b8:	4413      	add	r3, r2
 80037ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80037be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037c2:	3301      	adds	r3, #1
 80037c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	f040 80ea 	bne.w	80039a6 <mg_vxprintf+0x6ee>
 80037d2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80e5 	beq.w	80039a6 <mg_vxprintf+0x6ee>
 80037dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037e2:	429a      	cmp	r2, r3
 80037e4:	f080 80df 	bcs.w	80039a6 <mg_vxprintf+0x6ee>
 80037e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80037ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037f0:	4413      	add	r3, r2
 80037f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d8d5      	bhi.n	80037a4 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 80037f8:	e0d5      	b.n	80039a6 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 80037fa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80037fe:	2b6d      	cmp	r3, #109	@ 0x6d
 8003800:	d003      	beq.n	800380a <mg_vxprintf+0x552>
 8003802:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003806:	2b4d      	cmp	r3, #77	@ 0x4d
 8003808:	d128      	bne.n	800385c <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	1d19      	adds	r1, r3, #4
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	6011      	str	r1, [r2, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8003818:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800381c:	2b6d      	cmp	r3, #109	@ 0x6d
 800381e:	d103      	bne.n	8003828 <mg_vxprintf+0x570>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	2022      	movs	r0, #34	@ 0x22
 8003826:	4798      	blx	r3
        n += f(out, param, ap);
 8003828:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	4798      	blx	r3
 8003832:	4602      	mov	r2, r0
 8003834:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003838:	4413      	add	r3, r2
 800383a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 800383e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003842:	2b6d      	cmp	r3, #109	@ 0x6d
 8003844:	f040 80b1 	bne.w	80039aa <mg_vxprintf+0x6f2>
 8003848:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800384c:	3302      	adds	r3, #2
 800384e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	2022      	movs	r0, #34	@ 0x22
 8003858:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 800385a:	e0a6      	b.n	80039aa <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 800385c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003860:	2b63      	cmp	r3, #99	@ 0x63
 8003862:	d112      	bne.n	800388a <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	1d19      	adds	r1, r3, #4
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	6011      	str	r1, [r2, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 8003872:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003874:	b2da      	uxtb	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	4610      	mov	r0, r2
 800387c:	4798      	blx	r3
        n++;
 800387e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003882:	3301      	adds	r3, #1
 8003884:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003888:	e090      	b.n	80039ac <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 800388a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800388e:	2b73      	cmp	r3, #115	@ 0x73
 8003890:	d16b      	bne.n	800396a <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	1d19      	adds	r1, r3, #4
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	6011      	str	r1, [r2, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80038a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a6:	d109      	bne.n	80038bc <mg_vxprintf+0x604>
 80038a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <mg_vxprintf+0x600>
 80038ae:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80038b0:	f7fc fd76 	bl	80003a0 <strlen>
 80038b4:	4603      	mov	r3, r0
 80038b6:	e000      	b.n	80038ba <mg_vxprintf+0x602>
 80038b8:	2300      	movs	r3, #0
 80038ba:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038c2:	e011      	b.n	80038e8 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 80038c4:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80038c8:	2301      	movs	r3, #1
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff fcb5 	bl	800323c <scpy>
 80038d2:	4602      	mov	r2, r0
 80038d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038d8:	4413      	add	r3, r2
 80038da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80038de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038e2:	3301      	adds	r3, #1
 80038e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <mg_vxprintf+0x64e>
 80038f0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80038f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d206      	bcs.n	8003906 <mg_vxprintf+0x64e>
 80038f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80038fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038fe:	4413      	add	r3, r2
 8003900:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003902:	429a      	cmp	r2, r3
 8003904:	d8de      	bhi.n	80038c4 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8003906:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003908:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7ff fc95 	bl	800323c <scpy>
 8003912:	4602      	mov	r2, r0
 8003914:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003918:	4413      	add	r3, r2
 800391a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003924:	e011      	b.n	800394a <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8003926:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800392a:	2301      	movs	r3, #1
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff fc84 	bl	800323c <scpy>
 8003934:	4602      	mov	r2, r0
 8003936:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800393a:	4413      	add	r3, r2
 800393c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8003940:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003944:	3301      	adds	r3, #1
 8003946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800394a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800394e:	2b00      	cmp	r3, #0
 8003950:	d02c      	beq.n	80039ac <mg_vxprintf+0x6f4>
 8003952:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003954:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003956:	429a      	cmp	r2, r3
 8003958:	d228      	bcs.n	80039ac <mg_vxprintf+0x6f4>
 800395a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800395e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003960:	4413      	add	r3, r2
 8003962:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003964:	429a      	cmp	r2, r3
 8003966:	d8de      	bhi.n	8003926 <mg_vxprintf+0x66e>
 8003968:	e020      	b.n	80039ac <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 800396a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800396e:	2b25      	cmp	r3, #37	@ 0x25
 8003970:	d109      	bne.n	8003986 <mg_vxprintf+0x6ce>
        out('%', param);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	2025      	movs	r0, #37	@ 0x25
 8003978:	4798      	blx	r3
        n++;
 800397a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800397e:	3301      	adds	r3, #1
 8003980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003984:	e012      	b.n	80039ac <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	2025      	movs	r0, #37	@ 0x25
 800398c:	4798      	blx	r3
        out(c, param);
 800398e:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	4610      	mov	r0, r2
 8003998:	4798      	blx	r3
        n += 2;
 800399a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800399e:	3302      	adds	r3, #2
 80039a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039a4:	e002      	b.n	80039ac <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 80039a6:	bf00      	nop
 80039a8:	e000      	b.n	80039ac <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 80039aa:	bf00      	nop
      }
      i++;
 80039ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b0:	3301      	adds	r3, #1
 80039b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80039b6:	e012      	b.n	80039de <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039be:	4413      	add	r3, r2
 80039c0:	781a      	ldrb	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	4610      	mov	r0, r2
 80039c8:	4798      	blx	r3
 80039ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039ce:	3301      	adds	r3, #1
 80039d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d8:	3301      	adds	r3, #1
 80039da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e4:	4413      	add	r3, r2
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f ac74 	bne.w	80032d6 <mg_vxprintf+0x1e>
    }
  }
  return n;
 80039ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3790      	adds	r7, #144	@ 0x90
 80039f6:	46bd      	mov	sp, r7
 80039f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039fc:	08025d44 	.word	0x08025d44

08003a00 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8003a0c:	2108      	movs	r1, #8
 8003a0e:	2001      	movs	r0, #1
 8003a10:	f01c ff36 	bl	8020880 <calloc>
 8003a14:	4603      	mov	r3, r0
 8003a16:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d013      	beq.n	8003a46 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	68b8      	ldr	r0, [r7, #8]
 8003a26:	4798      	blx	r3
 8003a28:	4602      	mov	r2, r0
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d104      	bne.n	8003a46 <mg_fs_open+0x46>
      free(fd);
 8003a3c:	6978      	ldr	r0, [r7, #20]
 8003a3e:	f01c ff43 	bl	80208c8 <free>
      fd = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8003a46:	697b      	ldr	r3, [r7, #20]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4798      	blx	r3
    free(fd);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f01c ff2b 	bl	80208c8 <free>
  }
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <is_dir_prefix>:
  size_t len = 0;
  const char *buf = mg_unpack(path, &len, NULL);
  return mg_str_n(buf, len);
}

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fc fc8a 	bl	80003a0 <strlen>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d219      	bcs.n	8003ac8 <is_dir_prefix+0x4e>
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f01e f9b8 	bl	8021e0e <strncmp>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d111      	bne.n	8003ac8 <is_dir_prefix+0x4e>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00c      	beq.n	8003ac4 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4413      	add	r3, r2
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b2f      	cmp	r3, #47	@ 0x2f
 8003ab4:	d006      	beq.n	8003ac4 <is_dir_prefix+0x4a>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b2f      	cmp	r3, #47	@ 0x2f
 8003ac2:	d101      	bne.n	8003ac8 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <is_dir_prefix+0x50>
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b088      	sub	sp, #32
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f7fc fc5e 	bl	80003a0 <strlen>
 8003ae4:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f014 fdf8 	bl	80186e0 <mg_unpack>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <packed_stat+0x28>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e017      	b.n	8003b2a <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e00c      	b.n	8003b1a <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	69b9      	ldr	r1, [r7, #24]
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f7ff ffb8 	bl	8003a7a <is_dir_prefix>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <packed_stat+0x42>
 8003b10:	2304      	movs	r3, #4
 8003b12:	e00a      	b.n	8003b2a <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	3301      	adds	r3, #1
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	69f8      	ldr	r0, [r7, #28]
 8003b1c:	f014 fdcc 	bl	80186b8 <mg_unlist>
 8003b20:	6178      	str	r0, [r7, #20]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1eb      	bne.n	8003b00 <packed_stat+0x2e>
  }
  return 0;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b0be      	sub	sp, #248	@ 0xf8
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7fc fc2d 	bl	80003a0 <strlen>
 8003b46:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  tmp[0] = '\0';  // Previously listed entry
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b54:	e05a      	b.n	8003c0c <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 8003b56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003b5a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7ff ff8b 	bl	8003a7a <is_dir_prefix>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d048      	beq.n	8003bfc <packed_list+0xc8>
    begin = &path[n + 1];
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b6e:	3301      	adds	r3, #1
 8003b70:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003b74:	4413      	add	r3, r2
 8003b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    end = strchr(begin, '/');
 8003b7a:	212f      	movs	r1, #47	@ 0x2f
 8003b7c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003b80:	f01e f938 	bl	8021df4 <strchr>
 8003b84:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    if (end == NULL) end = begin + strlen(begin);
 8003b88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <packed_list+0x70>
 8003b90:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003b94:	f7fc fc04 	bl	80003a0 <strlen>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8003ba4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bac:	1ad2      	subs	r2, r2, r3
 8003bae:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8003bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	4a1c      	ldr	r2, [pc, #112]	@ (8003c2c <packed_list+0xf8>)
 8003bbc:	2164      	movs	r1, #100	@ 0x64
 8003bbe:	f009 fd6d 	bl	800d69c <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8003bc8:	f107 0214 	add.w	r2, r7, #20
 8003bcc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc fb84 	bl	80002e0 <strcmp>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d010      	beq.n	8003c00 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 8003bde:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4610      	mov	r0, r2
 8003be8:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8003bea:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8003bee:	f107 0314 	add.w	r3, r7, #20
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f01e f9e2 	bl	8021fbe <strcpy>
 8003bfa:	e002      	b.n	8003c02 <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 8003bfc:	bf00      	nop
 8003bfe:	e000      	b.n	8003c02 <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 8003c00:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8003c02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003c06:	3301      	adds	r3, #1
 8003c08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c0c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8003c10:	f014 fd52 	bl	80186b8 <mg_unlist>
 8003c14:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d19a      	bne.n	8003b56 <packed_list+0x22>
  }
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	37f0      	adds	r7, #240	@ 0xf0
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	08025d28 	.word	0x08025d28

08003c30 <packed_open>:

static void *packed_open(const char *path, int flags) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 8003c3e:	f107 030c 	add.w	r3, r7, #12
 8003c42:	2200      	movs	r2, #0
 8003c44:	4619      	mov	r1, r3
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f014 fd4a 	bl	80186e0 <mg_unpack>
 8003c4c:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <packed_open+0x2c>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e016      	b.n	8003c8a <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <packed_open+0x3a>
 8003c66:	2300      	movs	r3, #0
 8003c68:	e00f      	b.n	8003c8a <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 8003c6a:	210c      	movs	r1, #12
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f01c fe07 	bl	8020880 <calloc>
 8003c72:	4603      	mov	r3, r0
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <packed_open+0x58>
    fp->size = size;
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	605a      	str	r2, [r3, #4]
    fp->data = data;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8003c88:	693b      	ldr	r3, [r7, #16]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <packed_close>:

static void packed_close(void *fp) {
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <packed_close+0x14>
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f01c fe11 	bl	80208c8 <free>
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	441a      	add	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d905      	bls.n	8003cda <packed_read+0x2c>
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	68b8      	ldr	r0, [r7, #8]
 8003cea:	f01e f970 	bl	8021fce <memcpy>
  fp->pos += len;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	441a      	add	r2, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	609a      	str	r2, [r3, #8]
  return len;
 8003cfa:	687b      	ldr	r3, [r7, #4]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d903      	bls.n	8003d46 <packed_seek+0x28>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	609a      	str	r2, [r3, #8]
  return fp->pos;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <packed_remove>:

static bool packed_remove(const char *path) {
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <p_open>:
static void *p_open(const char *path, int flags) {
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <p_close>:
static void p_close(void *fp) {
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8003e12:	b480      	push	{r7}
 8003e14:	b085      	sub	sp, #20
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <p_remove>:
static bool p_remove(const char *path) {
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <p_mkdir>:
static bool p_mkdir(const char *path) {
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8003e8a:	b480      	push	{r7}
 8003e8c:	b089      	sub	sp, #36	@ 0x24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d02d      	beq.n	8003efc <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	60fa      	str	r2, [r7, #12]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	60ba      	str	r2, [r7, #8]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b40      	cmp	r3, #64	@ 0x40
 8003eb8:	dd05      	ble.n	8003ec6 <mg_ncasecmp+0x3c>
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b5a      	cmp	r3, #90	@ 0x5a
 8003ebe:	dc02      	bgt.n	8003ec6 <mg_ncasecmp+0x3c>
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	3320      	adds	r3, #32
 8003ec4:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b40      	cmp	r3, #64	@ 0x40
 8003eca:	dd05      	ble.n	8003ed8 <mg_ncasecmp+0x4e>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b5a      	cmp	r3, #90	@ 0x5a
 8003ed0:	dc02      	bgt.n	8003ed8 <mg_ncasecmp+0x4e>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	3320      	adds	r3, #32
 8003ed6:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <mg_ncasecmp+0x72>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <mg_ncasecmp+0x72>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1d1      	bne.n	8003ea0 <mg_ncasecmp+0x16>
  return diff;
 8003efc:	69fb      	ldr	r3, [r7, #28]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3724      	adds	r7, #36	@ 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8003f0c:	b480      	push	{r7}
 8003f0e:	b08b      	sub	sp, #44	@ 0x2c
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	f107 0308 	add.w	r3, r7, #8
 8003f16:	e883 0003 	stmia.w	r3, {r0, r1}
 8003f1a:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f20:	f04f 33ff 	mov.w	r3, #4294967295
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	4a42      	ldr	r2, [pc, #264]	@ (8004034 <mg_to_size_t+0x128>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	08db      	lsrs	r3, r3, #3
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	2300      	movs	r3, #0
 8003f34:	623b      	str	r3, [r7, #32]
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8003f3a:	e002      	b.n	8003f42 <mg_to_size_t+0x36>
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	3301      	adds	r3, #1
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d20b      	bcs.n	8003f62 <mg_to_size_t+0x56>
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	4413      	add	r3, r2
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d0f2      	beq.n	8003f3c <mg_to_size_t+0x30>
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	4413      	add	r3, r2
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b09      	cmp	r3, #9
 8003f60:	d0ec      	beq.n	8003f3c <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d22b      	bcs.n	8003fc2 <mg_to_size_t+0xb6>
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	4413      	add	r3, r2
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b2d      	cmp	r3, #45	@ 0x2d
 8003f74:	d125      	bne.n	8003fc2 <mg_to_size_t+0xb6>
 8003f76:	2300      	movs	r3, #0
 8003f78:	e056      	b.n	8004028 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	4413      	add	r3, r2
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	3b30      	subs	r3, #48	@ 0x30
 8003f84:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 8003f86:	6a3a      	ldr	r2, [r7, #32]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d901      	bls.n	8003f92 <mg_to_size_t+0x86>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e04a      	b.n	8004028 <mg_to_size_t+0x11c>
    result *= 10;
 8003f92:	6a3a      	ldr	r2, [r7, #32]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d901      	bls.n	8003fae <mg_to_size_t+0xa2>
 8003faa:	2300      	movs	r3, #0
 8003fac:	e03c      	b.n	8004028 <mg_to_size_t+0x11c>
    result += digit;
 8003fae:	6a3a      	ldr	r2, [r7, #32]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	3301      	adds	r3, #1
 8003fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d20f      	bcs.n	8003fea <mg_to_size_t+0xde>
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	4413      	add	r3, r2
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b2f      	cmp	r3, #47	@ 0x2f
 8003fd4:	d909      	bls.n	8003fea <mg_to_size_t+0xde>
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fda:	4413      	add	r3, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b39      	cmp	r3, #57	@ 0x39
 8003fe0:	d9cb      	bls.n	8003f7a <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8003fe2:	e002      	b.n	8003fea <mg_to_size_t+0xde>
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d20b      	bcs.n	800400a <mg_to_size_t+0xfe>
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff6:	4413      	add	r3, r2
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d0f2      	beq.n	8003fe4 <mg_to_size_t+0xd8>
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	4413      	add	r3, r2
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b09      	cmp	r3, #9
 8004008:	d0ec      	beq.n	8003fe4 <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <mg_to_size_t+0x108>
 8004010:	2300      	movs	r3, #0
 8004012:	e009      	b.n	8004028 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <mg_to_size_t+0x114>
 800401c:	2300      	movs	r3, #0
 800401e:	e003      	b.n	8004028 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a3a      	ldr	r2, [r7, #32]
 8004024:	601a      	str	r2, [r3, #0]
  return true;
 8004026:	2301      	movs	r3, #1
}
 8004028:	4618      	mov	r0, r3
 800402a:	372c      	adds	r7, #44	@ 0x2c
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	cccccccd 	.word	0xcccccccd

08004038 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8004038:	b082      	sub	sp, #8
 800403a:	b580      	push	{r7, lr}
 800403c:	b08e      	sub	sp, #56	@ 0x38
 800403e:	af02      	add	r7, sp, #8
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	1d38      	adds	r0, r7, #4
 8004044:	e880 0006 	stmia.w	r0, {r1, r2}
 8004048:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 800404a:	f107 0310 	add.w	r3, r7, #16
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f00a fe51 	bl	800ecfa <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8004058:	e023      	b.n	80040a2 <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 800405a:	f107 0318 	add.w	r3, r7, #24
 800405e:	f107 0220 	add.w	r2, r7, #32
 8004062:	213d      	movs	r1, #61	@ 0x3d
 8004064:	9100      	str	r1, [sp, #0]
 8004066:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800406a:	c903      	ldmia	r1, {r0, r1}
 800406c:	f00b f826 	bl	800f0bc <mg_span>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d015      	beq.n	80040a2 <mg_http_var+0x6a>
 8004076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	429a      	cmp	r2, r3
 800407c:	d111      	bne.n	80040a2 <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 800407e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004080:	6a39      	ldr	r1, [r7, #32]
 8004082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ff00 	bl	8003e8a <mg_ncasecmp>
 800408a:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 800408c:	2b00      	cmp	r3, #0
 800408e:	d108      	bne.n	80040a2 <mg_http_var+0x6a>
      result = v;
 8004090:	f107 0310 	add.w	r3, r7, #16
 8004094:	f107 0218 	add.w	r2, r7, #24
 8004098:	e892 0003 	ldmia.w	r2, {r0, r1}
 800409c:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 80040a0:	e00b      	b.n	80040ba <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80040a8:	2126      	movs	r1, #38	@ 0x26
 80040aa:	9100      	str	r1, [sp, #0]
 80040ac:	1d39      	adds	r1, r7, #4
 80040ae:	c903      	ldmia	r1, {r0, r1}
 80040b0:	f00b f804 	bl	800f0bc <mg_span>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1cf      	bne.n	800405a <mg_http_var+0x22>
    }
  }
  return result;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	461a      	mov	r2, r3
 80040be:	f107 0310 	add.w	r3, r7, #16
 80040c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80040c6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	3730      	adds	r7, #48	@ 0x30
 80040ce:	46bd      	mov	sp, r7
 80040d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040d4:	b002      	add	sp, #8
 80040d6:	4770      	bx	lr

080040d8 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08c      	sub	sp, #48	@ 0x30
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <mg_http_get_var+0x20>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <mg_http_get_var+0x2c>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 8004104:	f06f 0301 	mvn.w	r3, #1
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
 800410a:	e033      	b.n	8004174 <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d006      	beq.n	8004122 <mg_http_get_var+0x4a>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <mg_http_get_var+0x4a>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d103      	bne.n	800412a <mg_http_get_var+0x52>
    len = -1;  // Bad source
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
 8004126:	627b      	str	r3, [r7, #36]	@ 0x24
 8004128:	e024      	b.n	8004174 <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 800412a:	f107 031c 	add.w	r3, r7, #28
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	4618      	mov	r0, r3
 8004132:	f00a fdc5 	bl	800ecc0 <mg_str_s>
 8004136:	f107 0014 	add.w	r0, r7, #20
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	ca06      	ldmia	r2, {r1, r2}
 8004144:	f7ff ff78 	bl	8004038 <mg_http_var>
    if (v.buf == NULL) {
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 800414e:	f06f 0303 	mvn.w	r3, #3
 8004152:	627b      	str	r3, [r7, #36]	@ 0x24
 8004154:	e00e      	b.n	8004174 <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8004156:	6978      	ldr	r0, [r7, #20]
 8004158:	69b9      	ldr	r1, [r7, #24]
 800415a:	2301      	movs	r3, #1
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	f000 f82e 	bl	80041c2 <mg_url_decode>
 8004166:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	2b00      	cmp	r3, #0
 800416c:	da02      	bge.n	8004174 <mg_http_get_var+0x9c>
 800416e:	f06f 0302 	mvn.w	r3, #2
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 8004174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004176:	4618      	mov	r0, r3
 8004178:	3728      	adds	r7, #40	@ 0x28
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <isx>:

static bool isx(int c) {
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b2f      	cmp	r3, #47	@ 0x2f
 800418a:	dd02      	ble.n	8004192 <isx+0x14>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b39      	cmp	r3, #57	@ 0x39
 8004190:	dd0b      	ble.n	80041aa <isx+0x2c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b60      	cmp	r3, #96	@ 0x60
 8004196:	dd02      	ble.n	800419e <isx+0x20>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b66      	cmp	r3, #102	@ 0x66
 800419c:	dd05      	ble.n	80041aa <isx+0x2c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b40      	cmp	r3, #64	@ 0x40
 80041a2:	dd04      	ble.n	80041ae <isx+0x30>
         (c >= 'A' && c <= 'F');
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b46      	cmp	r3, #70	@ 0x46
 80041a8:	dc01      	bgt.n	80041ae <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <isx+0x32>
 80041ae:	2300      	movs	r3, #0
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	b2db      	uxtb	r3, r3
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b08a      	sub	sp, #40	@ 0x28
 80041c6:	af02      	add	r7, sp, #8
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80041d0:	2300      	movs	r3, #0
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	e059      	b.n	800428e <mg_url_decode+0xcc>
    if (src[i] == '%') {
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b25      	cmp	r3, #37	@ 0x25
 80041e4:	d136      	bne.n	8004254 <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3302      	adds	r3, #2
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d92e      	bls.n	800424e <mg_url_decode+0x8c>
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	3301      	adds	r3, #1
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ffbf 	bl	800417e <isx>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d023      	beq.n	800424e <mg_url_decode+0x8c>
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	3302      	adds	r3, #2
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff ffb4 	bl	800417e <isx>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d018      	beq.n	800424e <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	3301      	adds	r3, #1
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	18d1      	adds	r1, r2, r3
 8004224:	f107 0310 	add.w	r3, r7, #16
 8004228:	2202      	movs	r2, #2
 800422a:	4618      	mov	r0, r3
 800422c:	f00a fd65 	bl	800ecfa <mg_str_n>
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	4413      	add	r3, r2
 8004236:	2201      	movs	r2, #1
 8004238:	9200      	str	r2, [sp, #0]
 800423a:	2210      	movs	r2, #16
 800423c:	f107 0110 	add.w	r1, r7, #16
 8004240:	c903      	ldmia	r1, {r0, r1}
 8004242:	f00a ff98 	bl	800f176 <mg_str_to_num>
        i += 2;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3302      	adds	r3, #2
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	e019      	b.n	8004282 <mg_url_decode+0xc0>
      } else {
        return -1;
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	e03a      	b.n	80042ca <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8004254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <mg_url_decode+0xb0>
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b2b      	cmp	r3, #43	@ 0x2b
 8004264:	d105      	bne.n	8004272 <mg_url_decode+0xb0>
      dst[j] = ' ';
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	4413      	add	r3, r2
 800426c:	2220      	movs	r2, #32
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	e007      	b.n	8004282 <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	441a      	add	r2, r3
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	440b      	add	r3, r1
 800427e:	7812      	ldrb	r2, [r2, #0]
 8004280:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3301      	adds	r3, #1
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	3301      	adds	r3, #1
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	429a      	cmp	r2, r3
 8004294:	d204      	bcs.n	80042a0 <mg_url_decode+0xde>
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	3301      	adds	r3, #1
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d89c      	bhi.n	80041da <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d204      	bcs.n	80042b2 <mg_url_decode+0xf0>
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	4413      	add	r3, r2
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d305      	bcc.n	80042c6 <mg_url_decode+0x104>
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d201      	bcs.n	80042c6 <mg_url_decode+0x104>
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	e001      	b.n	80042ca <mg_url_decode+0x108>
 80042c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <isok>:

static bool isok(uint8_t c) {
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	4603      	mov	r3, r0
 80042da:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	2b0a      	cmp	r3, #10
 80042e0:	d008      	beq.n	80042f4 <isok+0x22>
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	2b0d      	cmp	r3, #13
 80042e6:	d005      	beq.n	80042f4 <isok+0x22>
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	2b09      	cmp	r3, #9
 80042ec:	d002      	beq.n	80042f4 <isok+0x22>
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	2b1f      	cmp	r3, #31
 80042f2:	d901      	bls.n	80042f8 <isok+0x26>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <isok+0x28>
 80042f8:	2300      	movs	r3, #0
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	b2db      	uxtb	r3, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	e03c      	b.n	8004396 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4413      	add	r3, r2
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ffd4 	bl	80042d2 <isok>
 800432a:	4603      	mov	r3, r0
 800432c:	f083 0301 	eor.w	r3, r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <mg_http_get_request_len+0x30>
 8004336:	f04f 33ff 	mov.w	r3, #4294967295
 800433a:	e031      	b.n	80043a0 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00c      	beq.n	800435c <mg_http_get_request_len+0x50>
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b0a      	cmp	r3, #10
 800434c:	d106      	bne.n	800435c <mg_http_get_request_len+0x50>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3b01      	subs	r3, #1
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b0a      	cmp	r3, #10
 800435a:	d016      	beq.n	800438a <mg_http_get_request_len+0x7e>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b03      	cmp	r3, #3
 8004360:	d916      	bls.n	8004390 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b0a      	cmp	r3, #10
 800436c:	d110      	bne.n	8004390 <mg_http_get_request_len+0x84>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3b01      	subs	r3, #1
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	4413      	add	r3, r2
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b0d      	cmp	r3, #13
 800437a:	d109      	bne.n	8004390 <mg_http_get_request_len+0x84>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3b02      	subs	r3, #2
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	4413      	add	r3, r2
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b0a      	cmp	r3, #10
 8004388:	d102      	bne.n	8004390 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3301      	adds	r3, #1
 800438e:	e007      	b.n	80043a0 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3301      	adds	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d3be      	bcc.n	800431c <mg_http_get_request_len+0x10>
  }
  return 0;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 80043b2:	6838      	ldr	r0, [r7, #0]
 80043b4:	f7fb fff4 	bl	80003a0 <strlen>
 80043b8:	61b8      	str	r0, [r7, #24]
 80043ba:	231e      	movs	r3, #30
 80043bc:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	e01f      	b.n	8004404 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	3302      	adds	r3, #2
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	4413      	add	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	3328      	adds	r3, #40	@ 0x28
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d10b      	bne.n	80043fe <mg_http_get_header+0x56>
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	6839      	ldr	r1, [r7, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fd4b 	bl	8003e8a <mg_ncasecmp>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <mg_http_get_header+0x56>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	e010      	b.n	8004420 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3301      	adds	r3, #1
 8004402:	61fb      	str	r3, [r7, #28]
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	429a      	cmp	r2, r3
 800440a:	d208      	bcs.n	800441e <mg_http_get_header+0x76>
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	3302      	adds	r3, #2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	4413      	add	r3, r2
 8004416:	3304      	adds	r3, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1d2      	bne.n	80043c4 <mg_http_get_header+0x1c>
  }
  return NULL;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004438:	2b80      	cmp	r3, #128	@ 0x80
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	2b20      	cmp	r3, #32
 800446e:	d904      	bls.n	800447a <clen+0x2c>
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	2b7d      	cmp	r3, #125	@ 0x7d
 8004474:	d801      	bhi.n	800447a <clen+0x2c>
 8004476:	2301      	movs	r3, #1
 8004478:	e054      	b.n	8004524 <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 800447a:	7cfb      	ldrb	r3, [r7, #19]
 800447c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004480:	2bc0      	cmp	r3, #192	@ 0xc0
 8004482:	d10d      	bne.n	80044a0 <clen+0x52>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b01      	cmp	r3, #1
 8004488:	dd0a      	ble.n	80044a0 <clen+0x52>
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	3301      	adds	r3, #1
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff ffc9 	bl	8004428 <vcb>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <clen+0x52>
 800449c:	2302      	movs	r3, #2
 800449e:	e041      	b.n	8004524 <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 80044a0:	7cfb      	ldrb	r3, [r7, #19]
 80044a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044a6:	2be0      	cmp	r3, #224	@ 0xe0
 80044a8:	d116      	bne.n	80044d8 <clen+0x8a>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	dd13      	ble.n	80044d8 <clen+0x8a>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3301      	adds	r3, #1
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff ffb6 	bl	8004428 <vcb>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <clen+0x8a>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	3302      	adds	r3, #2
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ffad 	bl	8004428 <vcb>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <clen+0x8a>
 80044d4:	2303      	movs	r3, #3
 80044d6:	e025      	b.n	8004524 <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 80044d8:	7cfb      	ldrb	r3, [r7, #19]
 80044da:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80044de:	2bf0      	cmp	r3, #240	@ 0xf0
 80044e0:	d11f      	bne.n	8004522 <clen+0xd4>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	dd1c      	ble.n	8004522 <clen+0xd4>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	3301      	adds	r3, #1
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff ff9a 	bl	8004428 <vcb>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d013      	beq.n	8004522 <clen+0xd4>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	3302      	adds	r3, #2
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff ff91 	bl	8004428 <vcb>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <clen+0xd4>
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	3303      	adds	r3, #3
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff88 	bl	8004428 <vcb>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <clen+0xd4>
    return 4;
 800451e:	2304      	movs	r3, #4
 8004520:	e000      	b.n	8004524 <clen+0xd6>
  return 0;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 800453e:	e007      	b.n	8004550 <skiptorn+0x24>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3301      	adds	r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	605a      	str	r2, [r3, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	429a      	cmp	r2, r3
 8004556:	d207      	bcs.n	8004568 <skiptorn+0x3c>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b0a      	cmp	r3, #10
 800455e:	d003      	beq.n	8004568 <skiptorn+0x3c>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b0d      	cmp	r3, #13
 8004566:	d1eb      	bne.n	8004540 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	429a      	cmp	r2, r3
 800456e:	d208      	bcs.n	8004582 <skiptorn+0x56>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b0d      	cmp	r3, #13
 8004576:	d106      	bne.n	8004586 <skiptorn+0x5a>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3301      	adds	r3, #1
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b0a      	cmp	r3, #10
 8004580:	d001      	beq.n	8004586 <skiptorn+0x5a>
 8004582:	2300      	movs	r3, #0
 8004584:	e017      	b.n	80045b6 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	429a      	cmp	r2, r3
 800458c:	d206      	bcs.n	800459c <skiptorn+0x70>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b0d      	cmp	r3, #13
 8004594:	d102      	bne.n	800459c <skiptorn+0x70>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3301      	adds	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d205      	bcs.n	80045b0 <skiptorn+0x84>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	60fa      	str	r2, [r7, #12]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b0a      	cmp	r3, #10
 80045ae:	d001      	beq.n	80045b4 <skiptorn+0x88>
 80045b0:	2300      	movs	r3, #0
 80045b2:	e000      	b.n	80045b6 <skiptorn+0x8a>
  return s;
 80045b4:	68fb      	ldr	r3, [r7, #12]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b08a      	sub	sp, #40	@ 0x28
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 80045d0:	2300      	movs	r3, #0
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d4:	e09a      	b.n	800470c <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 80045d6:	2300      	movs	r3, #0
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d301      	bcc.n	80045f2 <mg_http_parse_headers+0x30>
 80045ee:	2300      	movs	r3, #0
 80045f0:	e092      	b.n	8004718 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b0a      	cmp	r3, #10
 80045f8:	f000 808d 	beq.w	8004716 <mg_http_parse_headers+0x154>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b0d      	cmp	r3, #13
 8004602:	d105      	bne.n	8004610 <mg_http_parse_headers+0x4e>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b0a      	cmp	r3, #10
 800460c:	f000 8083 	beq.w	8004716 <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8004614:	e007      	b.n	8004626 <mg_http_parse_headers+0x64>
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	4413      	add	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	4413      	add	r3, r2
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	d20b      	bcs.n	8004646 <mg_http_parse_headers+0x84>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b3a      	cmp	r3, #58	@ 0x3a
 8004634:	d007      	beq.n	8004646 <mg_http_parse_headers+0x84>
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f7ff ff08 	bl	800444e <clen>
 800463e:	6238      	str	r0, [r7, #32]
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e7      	bne.n	8004616 <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <mg_http_parse_headers+0x8e>
 800464c:	2300      	movs	r3, #0
 800464e:	e063      	b.n	8004718 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	429a      	cmp	r2, r3
 8004656:	d206      	bcs.n	8004666 <mg_http_parse_headers+0xa4>
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7ff fef7 	bl	800444e <clen>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <mg_http_parse_headers+0xa8>
 8004666:	2300      	movs	r3, #0
 8004668:	e056      	b.n	8004718 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	60fa      	str	r2, [r7, #12]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b3a      	cmp	r3, #58	@ 0x3a
 8004674:	d004      	beq.n	8004680 <mg_http_parse_headers+0xbe>
 8004676:	2300      	movs	r3, #0
 8004678:	e04e      	b.n	8004718 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3301      	adds	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	429a      	cmp	r2, r3
 8004686:	d207      	bcs.n	8004698 <mg_http_parse_headers+0xd6>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b20      	cmp	r3, #32
 800468e:	d0f4      	beq.n	800467a <mg_http_parse_headers+0xb8>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b09      	cmp	r3, #9
 8004696:	d0f0      	beq.n	800467a <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	461a      	mov	r2, r3
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7ff ff43 	bl	800452c <skiptorn>
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <mg_http_parse_headers+0xf6>
 80046ae:	2300      	movs	r3, #0
 80046b0:	e032      	b.n	8004718 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <mg_http_parse_headers+0x118>
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	4413      	add	r3, r2
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d0f2      	beq.n	80046b2 <mg_http_parse_headers+0xf0>
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	4413      	add	r3, r2
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b09      	cmp	r3, #9
 80046d8:	d0eb      	beq.n	80046b2 <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	461a      	mov	r2, r3
 80046e4:	f107 0318 	add.w	r3, r7, #24
 80046e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	4413      	add	r3, r2
 80046f8:	3308      	adds	r3, #8
 80046fa:	f107 0210 	add.w	r2, r7, #16
 80046fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004702:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	3301      	adds	r3, #1
 800470a:	627b      	str	r3, [r7, #36]	@ 0x24
 800470c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	f4ff af60 	bcc.w	80045d6 <mg_http_parse_headers+0x14>
  }
  return true;
 8004716:	2301      	movs	r3, #1
}
 8004718:	4618      	mov	r0, r3
 800471a:	3728      	adds	r7, #40	@ 0x28
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b090      	sub	sp, #64	@ 0x40
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff fdec 	bl	800430c <mg_http_get_request_len>
 8004734:	63f8      	str	r0, [r7, #60]	@ 0x3c
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <mg_http_parse+0x24>
 800473c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4413      	add	r3, r2
 8004742:	e000      	b.n	8004746 <mg_http_parse+0x26>
 8004744:	2300      	movs	r3, #0
 8004746:	63bb      	str	r3, [r7, #56]	@ 0x38
  const struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 8004748:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800474c:	2100      	movs	r1, #0
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f01d fb48 	bl	8021de4 <memset>
  if (req_len <= 0) return req_len;
 8004754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004756:	2b00      	cmp	r3, #0
 8004758:	dc01      	bgt.n	800475e <mg_http_parse+0x3e>
 800475a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800475c:	e13f      	b.n	80049de <mg_http_parse+0x2be>

  hm->message.buf = hm->head.buf = (char *) s;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004776:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 800477a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f04f 32ff 	mov.w	r2, #4294967295
 8004788:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 800479e:	e009      	b.n	80047b4 <mg_http_parse+0x94>
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a4:	4413      	add	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ae:	441a      	add	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	605a      	str	r2, [r3, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d20b      	bcs.n	80047d4 <mg_http_parse+0xb4>
 80047bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f7ff fe45 	bl	800444e <clen>
 80047c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80047c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e9      	bne.n	80047a0 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80047cc:	e002      	b.n	80047d4 <mg_http_parse+0xb4>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3301      	adds	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	429a      	cmp	r2, r3
 80047da:	d203      	bcs.n	80047e4 <mg_http_parse+0xc4>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d0f4      	beq.n	80047ce <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 80047ea:	e009      	b.n	8004800 <mg_http_parse+0xe0>
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f0:	4413      	add	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fa:	441a      	add	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60da      	str	r2, [r3, #12]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004804:	429a      	cmp	r2, r3
 8004806:	d20b      	bcs.n	8004820 <mg_http_parse+0x100>
 8004808:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff fe1f 	bl	800444e <clen>
 8004810:	6378      	str	r0, [r7, #52]	@ 0x34
 8004812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e9      	bne.n	80047ec <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8004818:	e002      	b.n	8004820 <mg_http_parse+0x100>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3301      	adds	r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004824:	429a      	cmp	r2, r3
 8004826:	d203      	bcs.n	8004830 <mg_http_parse+0x110>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b20      	cmp	r3, #32
 800482e:	d0f4      	beq.n	800481a <mg_http_parse+0xfa>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3318      	adds	r3, #24
 8004834:	461a      	mov	r2, r3
 8004836:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff fe77 	bl	800452c <skiptorn>
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <mg_http_parse+0x12a>
 8004846:	2300      	movs	r3, #0
 8004848:	e0c9      	b.n	80049de <mg_http_parse+0x2be>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6898      	ldr	r0, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	461a      	mov	r2, r3
 8004854:	213f      	movs	r1, #63	@ 0x3f
 8004856:	f7fb fd53 	bl	8000300 <memchr>
 800485a:	6338      	str	r0, [r7, #48]	@ 0x30
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	2b00      	cmp	r3, #0
 8004860:	d015      	beq.n	800488e <mg_http_parse+0x16e>
    hm->query.buf = (char *) qs + 1;
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	441a      	add	r2, r3
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	3301      	adds	r3, #1
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	461a      	mov	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	461a      	mov	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <mg_http_parse+0x17e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <mg_http_parse+0x184>
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	e09c      	b.n	80049de <mg_http_parse+0x2be>

  if (!mg_http_parse_headers(s, end, hm->headers,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f103 0220 	add.w	r2, r3, #32
 80048aa:	231e      	movs	r3, #30
 80048ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff fe87 	bl	80045c2 <mg_http_parse_headers>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f083 0301 	eor.w	r3, r3, #1
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <mg_http_parse+0x1a6>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 80048c0:	f04f 33ff 	mov.w	r3, #4294967295
 80048c4:	e08b      	b.n	80049de <mg_http_parse+0x2be>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80048c6:	4948      	ldr	r1, [pc, #288]	@ (80049e8 <mg_http_parse+0x2c8>)
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff fd6d 	bl	80043a8 <mg_http_get_header>
 80048ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80048d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d018      	beq.n	8004908 <mg_http_parse+0x1e8>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 80048dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048e2:	f7ff fb13 	bl	8003f0c <mg_to_size_t>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f083 0301 	eor.w	r3, r3, #1
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <mg_http_parse+0x1d8>
 80048f2:	f04f 33ff 	mov.w	r3, #4294967295
 80048f6:	e072      	b.n	80049de <mg_http_parse+0x2be>
    hm->message.len = (size_t) req_len + hm->body.len;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80048fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004900:	441a      	add	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2205      	movs	r2, #5
 800490e:	4937      	ldr	r1, [pc, #220]	@ (80049ec <mg_http_parse+0x2cc>)
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff faba 	bl	8003e8a <mg_ncasecmp>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d12a      	bne.n	8004986 <mg_http_parse+0x266>
 8004930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d127      	bne.n	8004986 <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8004936:	f107 0310 	add.w	r3, r7, #16
 800493a:	492d      	ldr	r1, [pc, #180]	@ (80049f0 <mg_http_parse+0x2d0>)
 800493c:	4618      	mov	r0, r3
 800493e:	f00a f9bf 	bl	800ecc0 <mg_str_s>
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	f107 0310 	add.w	r3, r7, #16
 8004948:	cb0c      	ldmia	r3, {r2, r3}
 800494a:	c903      	ldmia	r1, {r0, r1}
 800494c:	f00a fa7b 	bl	800ee46 <mg_strcasecmp>
 8004950:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8004952:	2b00      	cmp	r3, #0
 8004954:	d017      	beq.n	8004986 <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8004956:	f107 0318 	add.w	r3, r7, #24
 800495a:	4926      	ldr	r1, [pc, #152]	@ (80049f4 <mg_http_parse+0x2d4>)
 800495c:	4618      	mov	r0, r3
 800495e:	f00a f9af 	bl	800ecc0 <mg_str_s>
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	f107 0318 	add.w	r3, r7, #24
 8004968:	cb0c      	ldmia	r3, {r2, r3}
 800496a:	c903      	ldmia	r1, {r0, r1}
 800496c:	f00a fa6b 	bl	800ee46 <mg_strcasecmp>
 8004970:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <mg_http_parse+0x266>
    hm->body.len = 0;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 800497e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d11b      	bne.n	80049ca <mg_http_parse+0x2aa>
 8004992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	d018      	beq.n	80049ca <mg_http_parse+0x2aa>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8004998:	f107 0320 	add.w	r3, r7, #32
 800499c:	4916      	ldr	r1, [pc, #88]	@ (80049f8 <mg_http_parse+0x2d8>)
 800499e:	4618      	mov	r0, r3
 80049a0:	f00a f98e 	bl	800ecc0 <mg_str_s>
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	f107 0320 	add.w	r3, r7, #32
 80049aa:	cb0c      	ldmia	r3, {r2, r3}
 80049ac:	3108      	adds	r1, #8
 80049ae:	c903      	ldmia	r1, {r0, r1}
 80049b0:	f00a fa49 	bl	800ee46 <mg_strcasecmp>
 80049b4:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d107      	bne.n	80049ca <mg_http_parse+0x2aa>
    hm->body.len = 0;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80049c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80049d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d202      	bcs.n	80049dc <mg_http_parse+0x2bc>
 80049d6:	f04f 33ff 	mov.w	r3, #4294967295
 80049da:	e000      	b.n	80049de <mg_http_parse+0x2be>

  return req_len;
 80049dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3740      	adds	r7, #64	@ 0x40
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	08025da4 	.word	0x08025da4
 80049ec:	08025db4 	.word	0x08025db4
 80049f0:	08025dbc 	.word	0x08025dbc
 80049f4:	08025dc0 	.word	0x08025dc0
 80049f8:	08025dc8 	.word	0x08025dc8

080049fc <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3b64      	subs	r3, #100	@ 0x64
 8004a08:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	f200 8469 	bhi.w	80052e4 <mg_http_status_code_str+0x8e8>
 8004a12:	a101      	add	r1, pc, #4	@ (adr r1, 8004a18 <mg_http_status_code_str+0x1c>)
 8004a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a18:	080051e9 	.word	0x080051e9
 8004a1c:	080051ed 	.word	0x080051ed
 8004a20:	080051f1 	.word	0x080051f1
 8004a24:	080052e5 	.word	0x080052e5
 8004a28:	080052e5 	.word	0x080052e5
 8004a2c:	080052e5 	.word	0x080052e5
 8004a30:	080052e5 	.word	0x080052e5
 8004a34:	080052e5 	.word	0x080052e5
 8004a38:	080052e5 	.word	0x080052e5
 8004a3c:	080052e5 	.word	0x080052e5
 8004a40:	080052e5 	.word	0x080052e5
 8004a44:	080052e5 	.word	0x080052e5
 8004a48:	080052e5 	.word	0x080052e5
 8004a4c:	080052e5 	.word	0x080052e5
 8004a50:	080052e5 	.word	0x080052e5
 8004a54:	080052e5 	.word	0x080052e5
 8004a58:	080052e5 	.word	0x080052e5
 8004a5c:	080052e5 	.word	0x080052e5
 8004a60:	080052e5 	.word	0x080052e5
 8004a64:	080052e5 	.word	0x080052e5
 8004a68:	080052e5 	.word	0x080052e5
 8004a6c:	080052e5 	.word	0x080052e5
 8004a70:	080052e5 	.word	0x080052e5
 8004a74:	080052e5 	.word	0x080052e5
 8004a78:	080052e5 	.word	0x080052e5
 8004a7c:	080052e5 	.word	0x080052e5
 8004a80:	080052e5 	.word	0x080052e5
 8004a84:	080052e5 	.word	0x080052e5
 8004a88:	080052e5 	.word	0x080052e5
 8004a8c:	080052e5 	.word	0x080052e5
 8004a90:	080052e5 	.word	0x080052e5
 8004a94:	080052e5 	.word	0x080052e5
 8004a98:	080052e5 	.word	0x080052e5
 8004a9c:	080052e5 	.word	0x080052e5
 8004aa0:	080052e5 	.word	0x080052e5
 8004aa4:	080052e5 	.word	0x080052e5
 8004aa8:	080052e5 	.word	0x080052e5
 8004aac:	080052e5 	.word	0x080052e5
 8004ab0:	080052e5 	.word	0x080052e5
 8004ab4:	080052e5 	.word	0x080052e5
 8004ab8:	080052e5 	.word	0x080052e5
 8004abc:	080052e5 	.word	0x080052e5
 8004ac0:	080052e5 	.word	0x080052e5
 8004ac4:	080052e5 	.word	0x080052e5
 8004ac8:	080052e5 	.word	0x080052e5
 8004acc:	080052e5 	.word	0x080052e5
 8004ad0:	080052e5 	.word	0x080052e5
 8004ad4:	080052e5 	.word	0x080052e5
 8004ad8:	080052e5 	.word	0x080052e5
 8004adc:	080052e5 	.word	0x080052e5
 8004ae0:	080052e5 	.word	0x080052e5
 8004ae4:	080052e5 	.word	0x080052e5
 8004ae8:	080052e5 	.word	0x080052e5
 8004aec:	080052e5 	.word	0x080052e5
 8004af0:	080052e5 	.word	0x080052e5
 8004af4:	080052e5 	.word	0x080052e5
 8004af8:	080052e5 	.word	0x080052e5
 8004afc:	080052e5 	.word	0x080052e5
 8004b00:	080052e5 	.word	0x080052e5
 8004b04:	080052e5 	.word	0x080052e5
 8004b08:	080052e5 	.word	0x080052e5
 8004b0c:	080052e5 	.word	0x080052e5
 8004b10:	080052e5 	.word	0x080052e5
 8004b14:	080052e5 	.word	0x080052e5
 8004b18:	080052e5 	.word	0x080052e5
 8004b1c:	080052e5 	.word	0x080052e5
 8004b20:	080052e5 	.word	0x080052e5
 8004b24:	080052e5 	.word	0x080052e5
 8004b28:	080052e5 	.word	0x080052e5
 8004b2c:	080052e5 	.word	0x080052e5
 8004b30:	080052e5 	.word	0x080052e5
 8004b34:	080052e5 	.word	0x080052e5
 8004b38:	080052e5 	.word	0x080052e5
 8004b3c:	080052e5 	.word	0x080052e5
 8004b40:	080052e5 	.word	0x080052e5
 8004b44:	080052e5 	.word	0x080052e5
 8004b48:	080052e5 	.word	0x080052e5
 8004b4c:	080052e5 	.word	0x080052e5
 8004b50:	080052e5 	.word	0x080052e5
 8004b54:	080052e5 	.word	0x080052e5
 8004b58:	080052e5 	.word	0x080052e5
 8004b5c:	080052e5 	.word	0x080052e5
 8004b60:	080052e5 	.word	0x080052e5
 8004b64:	080052e5 	.word	0x080052e5
 8004b68:	080052e5 	.word	0x080052e5
 8004b6c:	080052e5 	.word	0x080052e5
 8004b70:	080052e5 	.word	0x080052e5
 8004b74:	080052e5 	.word	0x080052e5
 8004b78:	080052e5 	.word	0x080052e5
 8004b7c:	080052e5 	.word	0x080052e5
 8004b80:	080052e5 	.word	0x080052e5
 8004b84:	080052e5 	.word	0x080052e5
 8004b88:	080052e5 	.word	0x080052e5
 8004b8c:	080052e5 	.word	0x080052e5
 8004b90:	080052e5 	.word	0x080052e5
 8004b94:	080052e5 	.word	0x080052e5
 8004b98:	080052e5 	.word	0x080052e5
 8004b9c:	080052e5 	.word	0x080052e5
 8004ba0:	080052e5 	.word	0x080052e5
 8004ba4:	080052e5 	.word	0x080052e5
 8004ba8:	080051f5 	.word	0x080051f5
 8004bac:	080051f9 	.word	0x080051f9
 8004bb0:	080051fd 	.word	0x080051fd
 8004bb4:	08005201 	.word	0x08005201
 8004bb8:	08005205 	.word	0x08005205
 8004bbc:	08005209 	.word	0x08005209
 8004bc0:	0800520d 	.word	0x0800520d
 8004bc4:	08005211 	.word	0x08005211
 8004bc8:	08005215 	.word	0x08005215
 8004bcc:	080052e5 	.word	0x080052e5
 8004bd0:	080052e5 	.word	0x080052e5
 8004bd4:	080052e5 	.word	0x080052e5
 8004bd8:	080052e5 	.word	0x080052e5
 8004bdc:	080052e5 	.word	0x080052e5
 8004be0:	080052e5 	.word	0x080052e5
 8004be4:	080052e5 	.word	0x080052e5
 8004be8:	080052e5 	.word	0x080052e5
 8004bec:	080052e5 	.word	0x080052e5
 8004bf0:	080052e5 	.word	0x080052e5
 8004bf4:	080052e5 	.word	0x080052e5
 8004bf8:	080052e5 	.word	0x080052e5
 8004bfc:	080052e5 	.word	0x080052e5
 8004c00:	080052e5 	.word	0x080052e5
 8004c04:	080052e5 	.word	0x080052e5
 8004c08:	080052e5 	.word	0x080052e5
 8004c0c:	080052e5 	.word	0x080052e5
 8004c10:	08005219 	.word	0x08005219
 8004c14:	080052e5 	.word	0x080052e5
 8004c18:	080052e5 	.word	0x080052e5
 8004c1c:	080052e5 	.word	0x080052e5
 8004c20:	080052e5 	.word	0x080052e5
 8004c24:	080052e5 	.word	0x080052e5
 8004c28:	080052e5 	.word	0x080052e5
 8004c2c:	080052e5 	.word	0x080052e5
 8004c30:	080052e5 	.word	0x080052e5
 8004c34:	080052e5 	.word	0x080052e5
 8004c38:	080052e5 	.word	0x080052e5
 8004c3c:	080052e5 	.word	0x080052e5
 8004c40:	080052e5 	.word	0x080052e5
 8004c44:	080052e5 	.word	0x080052e5
 8004c48:	080052e5 	.word	0x080052e5
 8004c4c:	080052e5 	.word	0x080052e5
 8004c50:	080052e5 	.word	0x080052e5
 8004c54:	080052e5 	.word	0x080052e5
 8004c58:	080052e5 	.word	0x080052e5
 8004c5c:	080052e5 	.word	0x080052e5
 8004c60:	080052e5 	.word	0x080052e5
 8004c64:	080052e5 	.word	0x080052e5
 8004c68:	080052e5 	.word	0x080052e5
 8004c6c:	080052e5 	.word	0x080052e5
 8004c70:	080052e5 	.word	0x080052e5
 8004c74:	080052e5 	.word	0x080052e5
 8004c78:	080052e5 	.word	0x080052e5
 8004c7c:	080052e5 	.word	0x080052e5
 8004c80:	080052e5 	.word	0x080052e5
 8004c84:	080052e5 	.word	0x080052e5
 8004c88:	080052e5 	.word	0x080052e5
 8004c8c:	080052e5 	.word	0x080052e5
 8004c90:	080052e5 	.word	0x080052e5
 8004c94:	080052e5 	.word	0x080052e5
 8004c98:	080052e5 	.word	0x080052e5
 8004c9c:	080052e5 	.word	0x080052e5
 8004ca0:	080052e5 	.word	0x080052e5
 8004ca4:	080052e5 	.word	0x080052e5
 8004ca8:	080052e5 	.word	0x080052e5
 8004cac:	080052e5 	.word	0x080052e5
 8004cb0:	080052e5 	.word	0x080052e5
 8004cb4:	080052e5 	.word	0x080052e5
 8004cb8:	080052e5 	.word	0x080052e5
 8004cbc:	080052e5 	.word	0x080052e5
 8004cc0:	080052e5 	.word	0x080052e5
 8004cc4:	080052e5 	.word	0x080052e5
 8004cc8:	080052e5 	.word	0x080052e5
 8004ccc:	080052e5 	.word	0x080052e5
 8004cd0:	080052e5 	.word	0x080052e5
 8004cd4:	080052e5 	.word	0x080052e5
 8004cd8:	080052e5 	.word	0x080052e5
 8004cdc:	080052e5 	.word	0x080052e5
 8004ce0:	080052e5 	.word	0x080052e5
 8004ce4:	080052e5 	.word	0x080052e5
 8004ce8:	080052e5 	.word	0x080052e5
 8004cec:	080052e5 	.word	0x080052e5
 8004cf0:	080052e5 	.word	0x080052e5
 8004cf4:	080052e5 	.word	0x080052e5
 8004cf8:	080052e5 	.word	0x080052e5
 8004cfc:	080052e5 	.word	0x080052e5
 8004d00:	080052e5 	.word	0x080052e5
 8004d04:	080052e5 	.word	0x080052e5
 8004d08:	080052e5 	.word	0x080052e5
 8004d0c:	080052e5 	.word	0x080052e5
 8004d10:	080052e5 	.word	0x080052e5
 8004d14:	080052e5 	.word	0x080052e5
 8004d18:	080052e5 	.word	0x080052e5
 8004d1c:	080052e5 	.word	0x080052e5
 8004d20:	080052e5 	.word	0x080052e5
 8004d24:	080052e5 	.word	0x080052e5
 8004d28:	080052e5 	.word	0x080052e5
 8004d2c:	080052e5 	.word	0x080052e5
 8004d30:	080052e5 	.word	0x080052e5
 8004d34:	080052e5 	.word	0x080052e5
 8004d38:	0800521d 	.word	0x0800521d
 8004d3c:	08005221 	.word	0x08005221
 8004d40:	08005225 	.word	0x08005225
 8004d44:	08005229 	.word	0x08005229
 8004d48:	0800522d 	.word	0x0800522d
 8004d4c:	08005231 	.word	0x08005231
 8004d50:	080052e5 	.word	0x080052e5
 8004d54:	08005235 	.word	0x08005235
 8004d58:	08005239 	.word	0x08005239
 8004d5c:	080052e5 	.word	0x080052e5
 8004d60:	080052e5 	.word	0x080052e5
 8004d64:	080052e5 	.word	0x080052e5
 8004d68:	080052e5 	.word	0x080052e5
 8004d6c:	080052e5 	.word	0x080052e5
 8004d70:	080052e5 	.word	0x080052e5
 8004d74:	080052e5 	.word	0x080052e5
 8004d78:	080052e5 	.word	0x080052e5
 8004d7c:	080052e5 	.word	0x080052e5
 8004d80:	080052e5 	.word	0x080052e5
 8004d84:	080052e5 	.word	0x080052e5
 8004d88:	080052e5 	.word	0x080052e5
 8004d8c:	080052e5 	.word	0x080052e5
 8004d90:	080052e5 	.word	0x080052e5
 8004d94:	080052e5 	.word	0x080052e5
 8004d98:	080052e5 	.word	0x080052e5
 8004d9c:	080052e5 	.word	0x080052e5
 8004da0:	080052e5 	.word	0x080052e5
 8004da4:	080052e5 	.word	0x080052e5
 8004da8:	080052e5 	.word	0x080052e5
 8004dac:	080052e5 	.word	0x080052e5
 8004db0:	080052e5 	.word	0x080052e5
 8004db4:	080052e5 	.word	0x080052e5
 8004db8:	080052e5 	.word	0x080052e5
 8004dbc:	080052e5 	.word	0x080052e5
 8004dc0:	080052e5 	.word	0x080052e5
 8004dc4:	080052e5 	.word	0x080052e5
 8004dc8:	080052e5 	.word	0x080052e5
 8004dcc:	080052e5 	.word	0x080052e5
 8004dd0:	080052e5 	.word	0x080052e5
 8004dd4:	080052e5 	.word	0x080052e5
 8004dd8:	080052e5 	.word	0x080052e5
 8004ddc:	080052e5 	.word	0x080052e5
 8004de0:	080052e5 	.word	0x080052e5
 8004de4:	080052e5 	.word	0x080052e5
 8004de8:	080052e5 	.word	0x080052e5
 8004dec:	080052e5 	.word	0x080052e5
 8004df0:	080052e5 	.word	0x080052e5
 8004df4:	080052e5 	.word	0x080052e5
 8004df8:	080052e5 	.word	0x080052e5
 8004dfc:	080052e5 	.word	0x080052e5
 8004e00:	080052e5 	.word	0x080052e5
 8004e04:	080052e5 	.word	0x080052e5
 8004e08:	080052e5 	.word	0x080052e5
 8004e0c:	080052e5 	.word	0x080052e5
 8004e10:	080052e5 	.word	0x080052e5
 8004e14:	080052e5 	.word	0x080052e5
 8004e18:	080052e5 	.word	0x080052e5
 8004e1c:	080052e5 	.word	0x080052e5
 8004e20:	080052e5 	.word	0x080052e5
 8004e24:	080052e5 	.word	0x080052e5
 8004e28:	080052e5 	.word	0x080052e5
 8004e2c:	080052e5 	.word	0x080052e5
 8004e30:	080052e5 	.word	0x080052e5
 8004e34:	080052e5 	.word	0x080052e5
 8004e38:	080052e5 	.word	0x080052e5
 8004e3c:	080052e5 	.word	0x080052e5
 8004e40:	080052e5 	.word	0x080052e5
 8004e44:	080052e5 	.word	0x080052e5
 8004e48:	080052e5 	.word	0x080052e5
 8004e4c:	080052e5 	.word	0x080052e5
 8004e50:	080052e5 	.word	0x080052e5
 8004e54:	080052e5 	.word	0x080052e5
 8004e58:	080052e5 	.word	0x080052e5
 8004e5c:	080052e5 	.word	0x080052e5
 8004e60:	080052e5 	.word	0x080052e5
 8004e64:	080052e5 	.word	0x080052e5
 8004e68:	080052e5 	.word	0x080052e5
 8004e6c:	080052e5 	.word	0x080052e5
 8004e70:	080052e5 	.word	0x080052e5
 8004e74:	080052e5 	.word	0x080052e5
 8004e78:	080052e5 	.word	0x080052e5
 8004e7c:	080052e5 	.word	0x080052e5
 8004e80:	080052e5 	.word	0x080052e5
 8004e84:	080052e5 	.word	0x080052e5
 8004e88:	080052e5 	.word	0x080052e5
 8004e8c:	080052e5 	.word	0x080052e5
 8004e90:	080052e5 	.word	0x080052e5
 8004e94:	080052e5 	.word	0x080052e5
 8004e98:	080052e5 	.word	0x080052e5
 8004e9c:	080052e5 	.word	0x080052e5
 8004ea0:	080052e5 	.word	0x080052e5
 8004ea4:	080052e5 	.word	0x080052e5
 8004ea8:	080052e5 	.word	0x080052e5
 8004eac:	080052e5 	.word	0x080052e5
 8004eb0:	080052e5 	.word	0x080052e5
 8004eb4:	080052e5 	.word	0x080052e5
 8004eb8:	080052e5 	.word	0x080052e5
 8004ebc:	080052e5 	.word	0x080052e5
 8004ec0:	080052e5 	.word	0x080052e5
 8004ec4:	080052e5 	.word	0x080052e5
 8004ec8:	0800523d 	.word	0x0800523d
 8004ecc:	08005241 	.word	0x08005241
 8004ed0:	08005245 	.word	0x08005245
 8004ed4:	08005249 	.word	0x08005249
 8004ed8:	0800524d 	.word	0x0800524d
 8004edc:	08005251 	.word	0x08005251
 8004ee0:	08005255 	.word	0x08005255
 8004ee4:	08005259 	.word	0x08005259
 8004ee8:	0800525d 	.word	0x0800525d
 8004eec:	08005261 	.word	0x08005261
 8004ef0:	08005265 	.word	0x08005265
 8004ef4:	08005269 	.word	0x08005269
 8004ef8:	0800526d 	.word	0x0800526d
 8004efc:	08005271 	.word	0x08005271
 8004f00:	08005275 	.word	0x08005275
 8004f04:	08005279 	.word	0x08005279
 8004f08:	0800527d 	.word	0x0800527d
 8004f0c:	08005281 	.word	0x08005281
 8004f10:	08005285 	.word	0x08005285
 8004f14:	080052e5 	.word	0x080052e5
 8004f18:	080052e5 	.word	0x080052e5
 8004f1c:	08005289 	.word	0x08005289
 8004f20:	0800528d 	.word	0x0800528d
 8004f24:	08005291 	.word	0x08005291
 8004f28:	08005295 	.word	0x08005295
 8004f2c:	080052e5 	.word	0x080052e5
 8004f30:	08005299 	.word	0x08005299
 8004f34:	080052e5 	.word	0x080052e5
 8004f38:	0800529d 	.word	0x0800529d
 8004f3c:	080052a1 	.word	0x080052a1
 8004f40:	080052e5 	.word	0x080052e5
 8004f44:	080052a5 	.word	0x080052a5
 8004f48:	080052e5 	.word	0x080052e5
 8004f4c:	080052e5 	.word	0x080052e5
 8004f50:	080052e5 	.word	0x080052e5
 8004f54:	080052e5 	.word	0x080052e5
 8004f58:	080052e5 	.word	0x080052e5
 8004f5c:	080052e5 	.word	0x080052e5
 8004f60:	080052e5 	.word	0x080052e5
 8004f64:	080052e5 	.word	0x080052e5
 8004f68:	080052e5 	.word	0x080052e5
 8004f6c:	080052e5 	.word	0x080052e5
 8004f70:	080052e5 	.word	0x080052e5
 8004f74:	080052e5 	.word	0x080052e5
 8004f78:	080052a9 	.word	0x080052a9
 8004f7c:	080052e5 	.word	0x080052e5
 8004f80:	080052e5 	.word	0x080052e5
 8004f84:	080052e5 	.word	0x080052e5
 8004f88:	080052e5 	.word	0x080052e5
 8004f8c:	080052e5 	.word	0x080052e5
 8004f90:	080052e5 	.word	0x080052e5
 8004f94:	080052ad 	.word	0x080052ad
 8004f98:	080052e5 	.word	0x080052e5
 8004f9c:	080052e5 	.word	0x080052e5
 8004fa0:	080052e5 	.word	0x080052e5
 8004fa4:	080052e5 	.word	0x080052e5
 8004fa8:	080052e5 	.word	0x080052e5
 8004fac:	080052e5 	.word	0x080052e5
 8004fb0:	080052e5 	.word	0x080052e5
 8004fb4:	080052e5 	.word	0x080052e5
 8004fb8:	080052e5 	.word	0x080052e5
 8004fbc:	080052e5 	.word	0x080052e5
 8004fc0:	080052e5 	.word	0x080052e5
 8004fc4:	080052e5 	.word	0x080052e5
 8004fc8:	080052e5 	.word	0x080052e5
 8004fcc:	080052e5 	.word	0x080052e5
 8004fd0:	080052e5 	.word	0x080052e5
 8004fd4:	080052e5 	.word	0x080052e5
 8004fd8:	080052e5 	.word	0x080052e5
 8004fdc:	080052e5 	.word	0x080052e5
 8004fe0:	080052e5 	.word	0x080052e5
 8004fe4:	080052e5 	.word	0x080052e5
 8004fe8:	080052e5 	.word	0x080052e5
 8004fec:	080052e5 	.word	0x080052e5
 8004ff0:	080052e5 	.word	0x080052e5
 8004ff4:	080052e5 	.word	0x080052e5
 8004ff8:	080052e5 	.word	0x080052e5
 8004ffc:	080052e5 	.word	0x080052e5
 8005000:	080052e5 	.word	0x080052e5
 8005004:	080052e5 	.word	0x080052e5
 8005008:	080052e5 	.word	0x080052e5
 800500c:	080052e5 	.word	0x080052e5
 8005010:	080052e5 	.word	0x080052e5
 8005014:	080052e5 	.word	0x080052e5
 8005018:	080052e5 	.word	0x080052e5
 800501c:	080052e5 	.word	0x080052e5
 8005020:	080052e5 	.word	0x080052e5
 8005024:	080052e5 	.word	0x080052e5
 8005028:	080052e5 	.word	0x080052e5
 800502c:	080052e5 	.word	0x080052e5
 8005030:	080052e5 	.word	0x080052e5
 8005034:	080052e5 	.word	0x080052e5
 8005038:	080052e5 	.word	0x080052e5
 800503c:	080052e5 	.word	0x080052e5
 8005040:	080052e5 	.word	0x080052e5
 8005044:	080052e5 	.word	0x080052e5
 8005048:	080052e5 	.word	0x080052e5
 800504c:	080052e5 	.word	0x080052e5
 8005050:	080052e5 	.word	0x080052e5
 8005054:	080052b1 	.word	0x080052b1
 8005058:	080052b5 	.word	0x080052b5
 800505c:	080052b9 	.word	0x080052b9
 8005060:	080052bd 	.word	0x080052bd
 8005064:	080052c1 	.word	0x080052c1
 8005068:	080052c5 	.word	0x080052c5
 800506c:	080052c9 	.word	0x080052c9
 8005070:	080052cd 	.word	0x080052cd
 8005074:	080052d1 	.word	0x080052d1
 8005078:	080052d5 	.word	0x080052d5
 800507c:	080052e5 	.word	0x080052e5
 8005080:	080052d9 	.word	0x080052d9
 8005084:	080052dd 	.word	0x080052dd
 8005088:	080052e5 	.word	0x080052e5
 800508c:	080052e5 	.word	0x080052e5
 8005090:	080052e5 	.word	0x080052e5
 8005094:	080052e5 	.word	0x080052e5
 8005098:	080052e5 	.word	0x080052e5
 800509c:	080052e5 	.word	0x080052e5
 80050a0:	080052e5 	.word	0x080052e5
 80050a4:	080052e5 	.word	0x080052e5
 80050a8:	080052e5 	.word	0x080052e5
 80050ac:	080052e5 	.word	0x080052e5
 80050b0:	080052e5 	.word	0x080052e5
 80050b4:	080052e5 	.word	0x080052e5
 80050b8:	080052e5 	.word	0x080052e5
 80050bc:	080052e5 	.word	0x080052e5
 80050c0:	080052e5 	.word	0x080052e5
 80050c4:	080052e5 	.word	0x080052e5
 80050c8:	080052e5 	.word	0x080052e5
 80050cc:	080052e5 	.word	0x080052e5
 80050d0:	080052e5 	.word	0x080052e5
 80050d4:	080052e5 	.word	0x080052e5
 80050d8:	080052e5 	.word	0x080052e5
 80050dc:	080052e5 	.word	0x080052e5
 80050e0:	080052e5 	.word	0x080052e5
 80050e4:	080052e5 	.word	0x080052e5
 80050e8:	080052e5 	.word	0x080052e5
 80050ec:	080052e5 	.word	0x080052e5
 80050f0:	080052e5 	.word	0x080052e5
 80050f4:	080052e5 	.word	0x080052e5
 80050f8:	080052e5 	.word	0x080052e5
 80050fc:	080052e5 	.word	0x080052e5
 8005100:	080052e5 	.word	0x080052e5
 8005104:	080052e5 	.word	0x080052e5
 8005108:	080052e5 	.word	0x080052e5
 800510c:	080052e5 	.word	0x080052e5
 8005110:	080052e5 	.word	0x080052e5
 8005114:	080052e5 	.word	0x080052e5
 8005118:	080052e5 	.word	0x080052e5
 800511c:	080052e5 	.word	0x080052e5
 8005120:	080052e5 	.word	0x080052e5
 8005124:	080052e5 	.word	0x080052e5
 8005128:	080052e5 	.word	0x080052e5
 800512c:	080052e5 	.word	0x080052e5
 8005130:	080052e5 	.word	0x080052e5
 8005134:	080052e5 	.word	0x080052e5
 8005138:	080052e5 	.word	0x080052e5
 800513c:	080052e5 	.word	0x080052e5
 8005140:	080052e5 	.word	0x080052e5
 8005144:	080052e5 	.word	0x080052e5
 8005148:	080052e5 	.word	0x080052e5
 800514c:	080052e5 	.word	0x080052e5
 8005150:	080052e5 	.word	0x080052e5
 8005154:	080052e5 	.word	0x080052e5
 8005158:	080052e5 	.word	0x080052e5
 800515c:	080052e5 	.word	0x080052e5
 8005160:	080052e5 	.word	0x080052e5
 8005164:	080052e5 	.word	0x080052e5
 8005168:	080052e5 	.word	0x080052e5
 800516c:	080052e5 	.word	0x080052e5
 8005170:	080052e5 	.word	0x080052e5
 8005174:	080052e5 	.word	0x080052e5
 8005178:	080052e5 	.word	0x080052e5
 800517c:	080052e5 	.word	0x080052e5
 8005180:	080052e5 	.word	0x080052e5
 8005184:	080052e5 	.word	0x080052e5
 8005188:	080052e5 	.word	0x080052e5
 800518c:	080052e5 	.word	0x080052e5
 8005190:	080052e5 	.word	0x080052e5
 8005194:	080052e5 	.word	0x080052e5
 8005198:	080052e5 	.word	0x080052e5
 800519c:	080052e5 	.word	0x080052e5
 80051a0:	080052e5 	.word	0x080052e5
 80051a4:	080052e5 	.word	0x080052e5
 80051a8:	080052e5 	.word	0x080052e5
 80051ac:	080052e5 	.word	0x080052e5
 80051b0:	080052e5 	.word	0x080052e5
 80051b4:	080052e5 	.word	0x080052e5
 80051b8:	080052e5 	.word	0x080052e5
 80051bc:	080052e5 	.word	0x080052e5
 80051c0:	080052e5 	.word	0x080052e5
 80051c4:	080052e5 	.word	0x080052e5
 80051c8:	080052e5 	.word	0x080052e5
 80051cc:	080052e5 	.word	0x080052e5
 80051d0:	080052e5 	.word	0x080052e5
 80051d4:	080052e5 	.word	0x080052e5
 80051d8:	080052e5 	.word	0x080052e5
 80051dc:	080052e5 	.word	0x080052e5
 80051e0:	080052e5 	.word	0x080052e5
 80051e4:	080052e1 	.word	0x080052e1
    case 100: return "Continue";
 80051e8:	4b42      	ldr	r3, [pc, #264]	@ (80052f4 <mg_http_status_code_str+0x8f8>)
 80051ea:	e07c      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 80051ec:	4b42      	ldr	r3, [pc, #264]	@ (80052f8 <mg_http_status_code_str+0x8fc>)
 80051ee:	e07a      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 80051f0:	4b42      	ldr	r3, [pc, #264]	@ (80052fc <mg_http_status_code_str+0x900>)
 80051f2:	e078      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 80051f4:	4b42      	ldr	r3, [pc, #264]	@ (8005300 <mg_http_status_code_str+0x904>)
 80051f6:	e076      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 80051f8:	4b42      	ldr	r3, [pc, #264]	@ (8005304 <mg_http_status_code_str+0x908>)
 80051fa:	e074      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 80051fc:	4b42      	ldr	r3, [pc, #264]	@ (8005308 <mg_http_status_code_str+0x90c>)
 80051fe:	e072      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8005200:	4b42      	ldr	r3, [pc, #264]	@ (800530c <mg_http_status_code_str+0x910>)
 8005202:	e070      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8005204:	4b42      	ldr	r3, [pc, #264]	@ (8005310 <mg_http_status_code_str+0x914>)
 8005206:	e06e      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8005208:	4b42      	ldr	r3, [pc, #264]	@ (8005314 <mg_http_status_code_str+0x918>)
 800520a:	e06c      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 800520c:	4b42      	ldr	r3, [pc, #264]	@ (8005318 <mg_http_status_code_str+0x91c>)
 800520e:	e06a      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8005210:	4b42      	ldr	r3, [pc, #264]	@ (800531c <mg_http_status_code_str+0x920>)
 8005212:	e068      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8005214:	4b42      	ldr	r3, [pc, #264]	@ (8005320 <mg_http_status_code_str+0x924>)
 8005216:	e066      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8005218:	4b42      	ldr	r3, [pc, #264]	@ (8005324 <mg_http_status_code_str+0x928>)
 800521a:	e064      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 800521c:	4b42      	ldr	r3, [pc, #264]	@ (8005328 <mg_http_status_code_str+0x92c>)
 800521e:	e062      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8005220:	4b42      	ldr	r3, [pc, #264]	@ (800532c <mg_http_status_code_str+0x930>)
 8005222:	e060      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8005224:	4b42      	ldr	r3, [pc, #264]	@ (8005330 <mg_http_status_code_str+0x934>)
 8005226:	e05e      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8005228:	4b42      	ldr	r3, [pc, #264]	@ (8005334 <mg_http_status_code_str+0x938>)
 800522a:	e05c      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 800522c:	4b42      	ldr	r3, [pc, #264]	@ (8005338 <mg_http_status_code_str+0x93c>)
 800522e:	e05a      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8005230:	4b42      	ldr	r3, [pc, #264]	@ (800533c <mg_http_status_code_str+0x940>)
 8005232:	e058      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8005234:	4b42      	ldr	r3, [pc, #264]	@ (8005340 <mg_http_status_code_str+0x944>)
 8005236:	e056      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8005238:	4b42      	ldr	r3, [pc, #264]	@ (8005344 <mg_http_status_code_str+0x948>)
 800523a:	e054      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 800523c:	4b42      	ldr	r3, [pc, #264]	@ (8005348 <mg_http_status_code_str+0x94c>)
 800523e:	e052      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8005240:	4b42      	ldr	r3, [pc, #264]	@ (800534c <mg_http_status_code_str+0x950>)
 8005242:	e050      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8005244:	4b42      	ldr	r3, [pc, #264]	@ (8005350 <mg_http_status_code_str+0x954>)
 8005246:	e04e      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8005248:	4b42      	ldr	r3, [pc, #264]	@ (8005354 <mg_http_status_code_str+0x958>)
 800524a:	e04c      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 800524c:	4b42      	ldr	r3, [pc, #264]	@ (8005358 <mg_http_status_code_str+0x95c>)
 800524e:	e04a      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8005250:	4b42      	ldr	r3, [pc, #264]	@ (800535c <mg_http_status_code_str+0x960>)
 8005252:	e048      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8005254:	4b42      	ldr	r3, [pc, #264]	@ (8005360 <mg_http_status_code_str+0x964>)
 8005256:	e046      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8005258:	4b42      	ldr	r3, [pc, #264]	@ (8005364 <mg_http_status_code_str+0x968>)
 800525a:	e044      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 800525c:	4b42      	ldr	r3, [pc, #264]	@ (8005368 <mg_http_status_code_str+0x96c>)
 800525e:	e042      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8005260:	4b42      	ldr	r3, [pc, #264]	@ (800536c <mg_http_status_code_str+0x970>)
 8005262:	e040      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8005264:	4b42      	ldr	r3, [pc, #264]	@ (8005370 <mg_http_status_code_str+0x974>)
 8005266:	e03e      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8005268:	4b42      	ldr	r3, [pc, #264]	@ (8005374 <mg_http_status_code_str+0x978>)
 800526a:	e03c      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 800526c:	4b42      	ldr	r3, [pc, #264]	@ (8005378 <mg_http_status_code_str+0x97c>)
 800526e:	e03a      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8005270:	4b42      	ldr	r3, [pc, #264]	@ (800537c <mg_http_status_code_str+0x980>)
 8005272:	e038      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8005274:	4b42      	ldr	r3, [pc, #264]	@ (8005380 <mg_http_status_code_str+0x984>)
 8005276:	e036      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8005278:	4b42      	ldr	r3, [pc, #264]	@ (8005384 <mg_http_status_code_str+0x988>)
 800527a:	e034      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 800527c:	4b42      	ldr	r3, [pc, #264]	@ (8005388 <mg_http_status_code_str+0x98c>)
 800527e:	e032      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8005280:	4b42      	ldr	r3, [pc, #264]	@ (800538c <mg_http_status_code_str+0x990>)
 8005282:	e030      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 8005284:	4b42      	ldr	r3, [pc, #264]	@ (8005390 <mg_http_status_code_str+0x994>)
 8005286:	e02e      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8005288:	4b42      	ldr	r3, [pc, #264]	@ (8005394 <mg_http_status_code_str+0x998>)
 800528a:	e02c      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 800528c:	4b42      	ldr	r3, [pc, #264]	@ (8005398 <mg_http_status_code_str+0x99c>)
 800528e:	e02a      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8005290:	4b42      	ldr	r3, [pc, #264]	@ (800539c <mg_http_status_code_str+0x9a0>)
 8005292:	e028      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8005294:	4b42      	ldr	r3, [pc, #264]	@ (80053a0 <mg_http_status_code_str+0x9a4>)
 8005296:	e026      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8005298:	4b42      	ldr	r3, [pc, #264]	@ (80053a4 <mg_http_status_code_str+0x9a8>)
 800529a:	e024      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 800529c:	4b42      	ldr	r3, [pc, #264]	@ (80053a8 <mg_http_status_code_str+0x9ac>)
 800529e:	e022      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 80052a0:	4b42      	ldr	r3, [pc, #264]	@ (80053ac <mg_http_status_code_str+0x9b0>)
 80052a2:	e020      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 80052a4:	4b42      	ldr	r3, [pc, #264]	@ (80053b0 <mg_http_status_code_str+0x9b4>)
 80052a6:	e01e      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 80052a8:	4b42      	ldr	r3, [pc, #264]	@ (80053b4 <mg_http_status_code_str+0x9b8>)
 80052aa:	e01c      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 80052ac:	4b42      	ldr	r3, [pc, #264]	@ (80053b8 <mg_http_status_code_str+0x9bc>)
 80052ae:	e01a      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 80052b0:	4b42      	ldr	r3, [pc, #264]	@ (80053bc <mg_http_status_code_str+0x9c0>)
 80052b2:	e018      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 80052b4:	4b42      	ldr	r3, [pc, #264]	@ (80053c0 <mg_http_status_code_str+0x9c4>)
 80052b6:	e016      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 80052b8:	4b42      	ldr	r3, [pc, #264]	@ (80053c4 <mg_http_status_code_str+0x9c8>)
 80052ba:	e014      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 80052bc:	4b42      	ldr	r3, [pc, #264]	@ (80053c8 <mg_http_status_code_str+0x9cc>)
 80052be:	e012      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 80052c0:	4b42      	ldr	r3, [pc, #264]	@ (80053cc <mg_http_status_code_str+0x9d0>)
 80052c2:	e010      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 80052c4:	4b42      	ldr	r3, [pc, #264]	@ (80053d0 <mg_http_status_code_str+0x9d4>)
 80052c6:	e00e      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 80052c8:	4b42      	ldr	r3, [pc, #264]	@ (80053d4 <mg_http_status_code_str+0x9d8>)
 80052ca:	e00c      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 80052cc:	4b42      	ldr	r3, [pc, #264]	@ (80053d8 <mg_http_status_code_str+0x9dc>)
 80052ce:	e00a      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 80052d0:	4b42      	ldr	r3, [pc, #264]	@ (80053dc <mg_http_status_code_str+0x9e0>)
 80052d2:	e008      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 80052d4:	4b42      	ldr	r3, [pc, #264]	@ (80053e0 <mg_http_status_code_str+0x9e4>)
 80052d6:	e006      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 80052d8:	4b42      	ldr	r3, [pc, #264]	@ (80053e4 <mg_http_status_code_str+0x9e8>)
 80052da:	e004      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 80052dc:	4b42      	ldr	r3, [pc, #264]	@ (80053e8 <mg_http_status_code_str+0x9ec>)
 80052de:	e002      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 80052e0:	4b42      	ldr	r3, [pc, #264]	@ (80053ec <mg_http_status_code_str+0x9f0>)
 80052e2:	e000      	b.n	80052e6 <mg_http_status_code_str+0x8ea>
    default: return "";
 80052e4:	4b42      	ldr	r3, [pc, #264]	@ (80053f0 <mg_http_status_code_str+0x9f4>)
  }
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	08025de8 	.word	0x08025de8
 80052f8:	08025df4 	.word	0x08025df4
 80052fc:	08025e08 	.word	0x08025e08
 8005300:	08025e14 	.word	0x08025e14
 8005304:	08025e18 	.word	0x08025e18
 8005308:	08025e20 	.word	0x08025e20
 800530c:	08025e2c 	.word	0x08025e2c
 8005310:	08025e4c 	.word	0x08025e4c
 8005314:	08025e58 	.word	0x08025e58
 8005318:	08025e68 	.word	0x08025e68
 800531c:	08025e78 	.word	0x08025e78
 8005320:	08025e88 	.word	0x08025e88
 8005324:	08025e9c 	.word	0x08025e9c
 8005328:	08025ea4 	.word	0x08025ea4
 800532c:	08025eb8 	.word	0x08025eb8
 8005330:	08025ecc 	.word	0x08025ecc
 8005334:	08025ed4 	.word	0x08025ed4
 8005338:	08025ee0 	.word	0x08025ee0
 800533c:	08025ef0 	.word	0x08025ef0
 8005340:	08025efc 	.word	0x08025efc
 8005344:	08025f10 	.word	0x08025f10
 8005348:	08025f24 	.word	0x08025f24
 800534c:	08025f30 	.word	0x08025f30
 8005350:	08025f40 	.word	0x08025f40
 8005354:	08025f54 	.word	0x08025f54
 8005358:	08025f60 	.word	0x08025f60
 800535c:	08025f6c 	.word	0x08025f6c
 8005360:	08025f80 	.word	0x08025f80
 8005364:	08025f90 	.word	0x08025f90
 8005368:	08025fb0 	.word	0x08025fb0
 800536c:	08025fc0 	.word	0x08025fc0
 8005370:	08025fcc 	.word	0x08025fcc
 8005374:	08025fd4 	.word	0x08025fd4
 8005378:	08025fe4 	.word	0x08025fe4
 800537c:	08025ff8 	.word	0x08025ff8
 8005380:	0802600c 	.word	0x0802600c
 8005384:	08026024 	.word	0x08026024
 8005388:	0802603c 	.word	0x0802603c
 800538c:	0802605c 	.word	0x0802605c
 8005390:	08026070 	.word	0x08026070
 8005394:	08026080 	.word	0x08026080
 8005398:	08026094 	.word	0x08026094
 800539c:	080260ac 	.word	0x080260ac
 80053a0:	080260b4 	.word	0x080260b4
 80053a4:	080260c8 	.word	0x080260c8
 80053a8:	080260dc 	.word	0x080260dc
 80053ac:	080260f4 	.word	0x080260f4
 80053b0:	08026108 	.word	0x08026108
 80053b4:	08026128 	.word	0x08026128
 80053b8:	0802614c 	.word	0x0802614c
 80053bc:	0802616c 	.word	0x0802616c
 80053c0:	08026184 	.word	0x08026184
 80053c4:	0802619c 	.word	0x0802619c
 80053c8:	080261ac 	.word	0x080261ac
 80053cc:	080261b8 	.word	0x080261b8
 80053d0:	080261cc 	.word	0x080261cc
 80053d4:	080261dc 	.word	0x080261dc
 80053d8:	080261f8 	.word	0x080261f8
 80053dc:	08026210 	.word	0x08026210
 80053e0:	08026228 	.word	0x08026228
 80053e4:	08026238 	.word	0x08026238
 80053e8:	08026248 	.word	0x08026248
 80053ec:	08026268 	.word	0x08026268
 80053f0:	08026288 	.word	0x08026288

080053f4 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 80053f4:	b408      	push	{r3}
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b08b      	sub	sp, #44	@ 0x2c
 80053fa:	af02      	add	r7, sp, #8
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8005402:	68b8      	ldr	r0, [r7, #8]
 8005404:	f7ff fafa 	bl	80049fc <mg_http_status_code_str>
 8005408:	4602      	mov	r2, r0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <mg_http_reply+0x20>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	e000      	b.n	8005416 <mg_http_reply+0x22>
 8005414:	4b1f      	ldr	r3, [pc, #124]	@ (8005494 <mg_http_reply+0xa0>)
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	4613      	mov	r3, r2
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	491e      	ldr	r1, [pc, #120]	@ (8005498 <mg_http_reply+0xa4>)
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f003 ff08 	bl	8009234 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005428:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 800542a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800542e:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8005436:	f107 0314 	add.w	r3, r7, #20
 800543a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800543c:	4817      	ldr	r0, [pc, #92]	@ (800549c <mg_http_reply+0xa8>)
 800543e:	f7fd ff3b 	bl	80032b8 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005446:	2b10      	cmp	r3, #16
 8005448:	d916      	bls.n	8005478 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	3b0f      	subs	r3, #15
 8005452:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800545c:	4a10      	ldr	r2, [pc, #64]	@ (80054a0 <mg_http_reply+0xac>)
 800545e:	210b      	movs	r1, #11
 8005460:	f008 f91c 	bl	800d69c <mg_snprintf>
 8005464:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800546a:	69f9      	ldr	r1, [r7, #28]
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	440b      	add	r3, r1
 8005470:	3b0f      	subs	r3, #15
 8005472:	4413      	add	r3, r2
 8005474:	2220      	movs	r2, #32
 8005476:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800547e:	f36f 13c7 	bfc	r3, #7, #1
 8005482:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8005486:	bf00      	nop
 8005488:	3724      	adds	r7, #36	@ 0x24
 800548a:	46bd      	mov	sp, r7
 800548c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005490:	b001      	add	sp, #4
 8005492:	4770      	bx	lr
 8005494:	08026288 	.word	0x08026288
 8005498:	0802628c 	.word	0x0802628c
 800549c:	0800d62b 	.word	0x0800d62b
 80054a0:	080262c0 	.word	0x080262c0

080054a4 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe facc 	bl	8003a50 <mg_fs_close>
  c->pfn_data = NULL;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a07      	ldr	r2, [pc, #28]	@ (80054e0 <restore_http_cb+0x3c>)
 80054c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80054ce:	f36f 13c7 	bfc	r3, #7, #1
 80054d2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	08006815 	.word	0x08006815

080054e4 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 80054e4:	b5b0      	push	{r4, r5, r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af04      	add	r7, sp, #16
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	461c      	mov	r4, r3
 80054f6:	4615      	mov	r5, r2
 80054f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80054fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005500:	e9cd 2300 	strd	r2, r3, [sp]
 8005504:	4a04      	ldr	r2, [pc, #16]	@ (8005518 <mg_http_etag+0x34>)
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f008 f8c7 	bl	800d69c <mg_snprintf>
  return buf;
 800550e:	68fb      	ldr	r3, [r7, #12]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bdb0      	pop	{r4, r5, r7, pc}
 8005518:	080262c8 	.word	0x080262c8

0800551c <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	@ 0x28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b08      	cmp	r3, #8
 800552c:	d002      	beq.n	8005534 <static_cb+0x18>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d148      	bne.n	80055c6 <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800553a:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 800553c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005540:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	33a4      	adds	r3, #164	@ 0xa4
 8005546:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	429a      	cmp	r2, r3
 8005550:	d905      	bls.n	800555e <static_cb+0x42>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3348      	adds	r3, #72	@ 0x48
 8005556:	69f9      	ldr	r1, [r7, #28]
 8005558:	4618      	mov	r0, r3
 800555a:	f001 fd1b 	bl	8006f94 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005566:	429a      	cmp	r2, r3
 8005568:	d234      	bcs.n	80055d4 <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800557c:	429a      	cmp	r2, r3
 800557e:	d902      	bls.n	8005586 <static_cb+0x6a>
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	6a3a      	ldr	r2, [r7, #32]
 800558e:	6810      	ldr	r0, [r2, #0]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005598:	4411      	add	r1, r2
 800559a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800559c:	4798      	blx	r3
 800559e:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	441a      	add	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10c      	bne.n	80055d8 <static_cb+0xbc>
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff ff70 	bl	80054a4 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80055c4:	e008      	b.n	80055d8 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b09      	cmp	r3, #9
 80055ca:	d106      	bne.n	80055da <static_cb+0xbe>
    restore_http_cb(c);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff ff69 	bl	80054a4 <restore_http_cb>
 80055d2:	e002      	b.n	80055da <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80055d4:	bf00      	nop
 80055d6:	e000      	b.n	80055da <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80055d8:	bf00      	nop
  }
  (void) ev_data;
}
 80055da:	3728      	adds	r7, #40	@ 0x28
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b093      	sub	sp, #76	@ 0x4c
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	1d38      	adds	r0, r7, #4
 80055ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80055ee:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra), asterisk = mg_str_n("*", 1);
 80055f0:	f107 031c 	add.w	r3, r7, #28
 80055f4:	6839      	ldr	r1, [r7, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f009 fb62 	bl	800ecc0 <mg_str_s>
 80055fc:	f107 0314 	add.w	r3, r7, #20
 8005600:	2201      	movs	r2, #1
 8005602:	4943      	ldr	r1, [pc, #268]	@ (8005710 <guess_content_type+0x130>)
 8005604:	4618      	mov	r0, r3
 8005606:	f009 fb78 	bl	800ecfa <mg_str_n>
  size_t i = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 800560e:	e002      	b.n	8005616 <guess_content_type+0x36>
 8005610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005612:	3301      	adds	r3, #1
 8005614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800561a:	429a      	cmp	r2, r3
 800561c:	d208      	bcs.n	8005630 <guess_content_type+0x50>
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005624:	1acb      	subs	r3, r1, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	4413      	add	r3, r2
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b2e      	cmp	r3, #46	@ 0x2e
 800562e:	d1ef      	bne.n	8005610 <guess_content_type+0x30>
  path.buf += path.len - i;
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005636:	1acb      	subs	r3, r1, r3
 8005638:	4413      	add	r3, r2
 800563a:	607b      	str	r3, [r7, #4]
  path.len = i;
 800563c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563e:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 8005640:	e02b      	b.n	800569a <guess_content_type+0xba>
    if (mg_span(entry, &k, &v, '=') &&
 8005642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005646:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800564a:	213d      	movs	r1, #61	@ 0x3d
 800564c:	9100      	str	r1, [sp, #0]
 800564e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8005652:	c903      	ldmia	r1, {r0, r1}
 8005654:	f009 fd32 	bl	800f0bc <mg_span>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01d      	beq.n	800569a <guess_content_type+0xba>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800565e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005662:	cb0c      	ldmia	r3, {r2, r3}
 8005664:	f107 0114 	add.w	r1, r7, #20
 8005668:	c903      	ldmia	r1, {r0, r1}
 800566a:	f009 fbaa 	bl	800edc2 <mg_strcmp>
 800566e:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') &&
 8005670:	2b00      	cmp	r3, #0
 8005672:	d009      	beq.n	8005688 <guess_content_type+0xa8>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 8005674:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005678:	cb0c      	ldmia	r3, {r2, r3}
 800567a:	1d39      	adds	r1, r7, #4
 800567c:	c903      	ldmia	r1, {r0, r1}
 800567e:	f009 fba0 	bl	800edc2 <mg_strcmp>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d108      	bne.n	800569a <guess_content_type+0xba>
      return v;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	461a      	mov	r2, r3
 800568c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005690:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005694:	e882 0003 	stmia.w	r2, {r0, r1}
 8005698:	e036      	b.n	8005708 <guess_content_type+0x128>
  while (mg_span(s, &entry, &s, ',')) {
 800569a:	f107 031c 	add.w	r3, r7, #28
 800569e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80056a2:	212c      	movs	r1, #44	@ 0x2c
 80056a4:	9100      	str	r1, [sp, #0]
 80056a6:	f107 011c 	add.w	r1, r7, #28
 80056aa:	c903      	ldmia	r1, {r0, r1}
 80056ac:	f009 fd06 	bl	800f0bc <mg_span>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1c5      	bne.n	8005642 <guess_content_type+0x62>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80056b6:	2300      	movs	r3, #0
 80056b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056ba:	e01a      	b.n	80056f2 <guess_content_type+0x112>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80056bc:	4a15      	ldr	r2, [pc, #84]	@ (8005714 <guess_content_type+0x134>)
 80056be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	4413      	add	r3, r2
 80056c4:	cb0c      	ldmia	r3, {r2, r3}
 80056c6:	1d39      	adds	r1, r7, #4
 80056c8:	c903      	ldmia	r1, {r0, r1}
 80056ca:	f009 fb7a 	bl	800edc2 <mg_strcmp>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <guess_content_type+0x10c>
 80056d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d6:	3301      	adds	r3, #1
 80056d8:	68f9      	ldr	r1, [r7, #12]
 80056da:	4a0e      	ldr	r2, [pc, #56]	@ (8005714 <guess_content_type+0x134>)
 80056dc:	460c      	mov	r4, r1
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4413      	add	r3, r2
 80056e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80056e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80056ea:	e00d      	b.n	8005708 <guess_content_type+0x128>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80056ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ee:	3302      	adds	r3, #2
 80056f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056f2:	4a08      	ldr	r2, [pc, #32]	@ (8005714 <guess_content_type+0x134>)
 80056f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1de      	bne.n	80056bc <guess_content_type+0xdc>
  }

  return mg_str("text/plain; charset=utf-8");
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4905      	ldr	r1, [pc, #20]	@ (8005718 <guess_content_type+0x138>)
 8005702:	4618      	mov	r0, r3
 8005704:	f009 fadc 	bl	800ecc0 <mg_str_s>
}
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	3744      	adds	r7, #68	@ 0x44
 800570c:	46bd      	mov	sp, r7
 800570e:	bd90      	pop	{r4, r7, pc}
 8005710:	08026534 	.word	0x08026534
 8005714:	24000058 	.word	0x24000058
 8005718:	080263b0 	.word	0x080263b0

0800571c <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b08c      	sub	sp, #48	@ 0x30
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8005728:	2300      	movs	r3, #0
 800572a:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 800572c:	2300      	movs	r3, #0
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005730:	e058      	b.n	80057e4 <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	3306      	adds	r3, #6
 800573a:	18d1      	adds	r1, r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	1f9a      	subs	r2, r3, #6
 8005746:	f107 0310 	add.w	r3, r7, #16
 800574a:	4618      	mov	r0, r3
 800574c:	f009 fad5 	bl	800ecfa <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005756:	4413      	add	r3, r2
 8005758:	2206      	movs	r2, #6
 800575a:	4929      	ldr	r1, [pc, #164]	@ (8005800 <getrange+0xe4>)
 800575c:	4618      	mov	r0, r3
 800575e:	f01c fb17 	bl	8021d90 <memcmp>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <getrange+0x54>
  for (i = 0; i + 6 < s->len; i++) {
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	3301      	adds	r3, #1
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
 800576e:	e039      	b.n	80057e4 <getrange+0xc8>
    if (mg_span(v, &k, &v, '-')) {
 8005770:	f107 0310 	add.w	r3, r7, #16
 8005774:	f107 0218 	add.w	r2, r7, #24
 8005778:	212d      	movs	r1, #45	@ 0x2d
 800577a:	9100      	str	r1, [sp, #0]
 800577c:	f107 0110 	add.w	r1, r7, #16
 8005780:	c903      	ldmia	r1, {r0, r1}
 8005782:	f009 fc9b 	bl	800f0bc <mg_span>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01d      	beq.n	80057c8 <getrange+0xac>
      if (mg_to_size_t(k, a)) numparsed++;
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	f107 0318 	add.w	r3, r7, #24
 8005792:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005796:	f7fe fbb9 	bl	8003f0c <mg_to_size_t>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <getrange+0x8a>
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	3301      	adds	r3, #1
 80057a4:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d022      	beq.n	80057f2 <getrange+0xd6>
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	f107 0310 	add.w	r3, r7, #16
 80057b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80057b6:	f7fe fba9 	bl	8003f0c <mg_to_size_t>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d018      	beq.n	80057f2 <getrange+0xd6>
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	3301      	adds	r3, #1
 80057c4:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 80057c6:	e014      	b.n	80057f2 <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	f107 0310 	add.w	r3, r7, #16
 80057ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80057d2:	f7fe fb9b 	bl	8003f0c <mg_to_size_t>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <getrange+0xd6>
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	3301      	adds	r3, #1
 80057e0:	623b      	str	r3, [r7, #32]
 80057e2:	e007      	b.n	80057f4 <getrange+0xd8>
  for (i = 0; i + 6 < s->len; i++) {
 80057e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e6:	1d9a      	adds	r2, r3, #6
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d3a0      	bcc.n	8005732 <getrange+0x16>
 80057f0:	e000      	b.n	80057f4 <getrange+0xd8>
    break;
 80057f2:	bf00      	nop
  }
  return (int) numparsed;
 80057f4:	6a3b      	ldr	r3, [r7, #32]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3728      	adds	r7, #40	@ 0x28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	08026538 	.word	0x08026538

08005804 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8005804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005808:	b0f3      	sub	sp, #460	@ 0x1cc
 800580a:	af0a      	add	r7, sp, #40	@ 0x28
 800580c:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 8005810:	f5a4 74be 	sub.w	r4, r4, #380	@ 0x17c
 8005814:	6020      	str	r0, [r4, #0]
 8005816:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800581a:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 800581e:	6001      	str	r1, [r0, #0]
 8005820:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8005824:	f5a1 71c2 	sub.w	r1, r1, #388	@ 0x184
 8005828:	600a      	str	r2, [r1, #0]
 800582a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800582e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8005832:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8005834:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005838:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d006      	beq.n	8005852 <mg_http_serve_file+0x4e>
 8005844:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005848:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	e000      	b.n	8005854 <mg_http_serve_file+0x50>
 8005852:	4ba4      	ldr	r3, [pc, #656]	@ (8005ae4 <mg_http_serve_file+0x2e0>)
 8005854:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  struct mg_fd *fd = NULL;
 8005858:	2300      	movs	r3, #0
 800585a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  size_t size = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  time_t mtime = 0;
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 8005870:	2300      	movs	r3, #0
 8005872:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8005876:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800587a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800587e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005882:	6819      	ldr	r1, [r3, #0]
 8005884:	4610      	mov	r0, r2
 8005886:	f009 fa1b 	bl	800ecc0 <mg_str_s>
 800588a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800588e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800589a:	f5a2 7084 	sub.w	r0, r2, #264	@ 0x108
 800589e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80058a2:	ca06      	ldmia	r2, {r1, r2}
 80058a4:	f7ff fe9c 	bl	80055e0 <guess_content_type>
  bool gzip = false;
 80058a8:	2300      	movs	r3, #0
 80058aa:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b

  if (path != NULL) {
 80058ae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80058b2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d05c      	beq.n	8005976 <mg_http_serve_file+0x172>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 80058bc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80058c0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80058c4:	4988      	ldr	r1, [pc, #544]	@ (8005ae8 <mg_http_serve_file+0x2e4>)
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	f7fe fd6e 	bl	80043a8 <mg_http_get_header>
 80058cc:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    if (ae != NULL) {
 80058d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d03e      	beq.n	8005956 <mg_http_serve_file+0x152>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 80058d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80058dc:	6859      	ldr	r1, [r3, #4]
 80058de:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	4881      	ldr	r0, [pc, #516]	@ (8005aec <mg_http_serve_file+0x2e8>)
 80058e8:	f007 ff0e 	bl	800d708 <mg_mprintf>
 80058ec:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 80058f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d02a      	beq.n	800594e <mg_http_serve_file+0x14a>
 80058f8:	497d      	ldr	r1, [pc, #500]	@ (8005af0 <mg_http_serve_file+0x2ec>)
 80058fa:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 80058fe:	f01c fac1 	bl	8021e84 <strstr>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d022      	beq.n	800594e <mg_http_serve_file+0x14a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8005908:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800590c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005910:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a77      	ldr	r2, [pc, #476]	@ (8005af4 <mg_http_serve_file+0x2f0>)
 8005918:	2164      	movs	r1, #100	@ 0x64
 800591a:	f007 febf 	bl	800d69c <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 800591e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8005922:	2201      	movs	r2, #1
 8005924:	4619      	mov	r1, r3
 8005926:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800592a:	f7fe f869 	bl	8003a00 <mg_fs_open>
 800592e:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
        if (fd != NULL) gzip = true, path = tmp;
 8005932:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <mg_http_serve_file+0x14a>
 800593a:	2301      	movs	r3, #1
 800593c:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 8005940:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005944:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005948:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800594c:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 800594e:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8005952:	f01a ffb9 	bl	80208c8 <free>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8005956:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10b      	bne.n	8005976 <mg_http_serve_file+0x172>
 800595e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005962:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005966:	2201      	movs	r2, #1
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800596e:	f7fe f847 	bl	8003a00 <mg_fs_open>
 8005972:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8005976:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d144      	bne.n	8005a08 <mg_http_serve_file+0x204>
 800597e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005982:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d03c      	beq.n	8005a08 <mg_http_serve_file+0x204>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 800598e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005992:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2201      	movs	r2, #1
 800599c:	4619      	mov	r1, r3
 800599e:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 80059a2:	f7fe f82d 	bl	8003a00 <mg_fs_open>
 80059a6:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    path = opts->page404;
 80059aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80059ae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80059b2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80059b6:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	6912      	ldr	r2, [r2, #16]
 80059be:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 80059c0:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 80059c4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80059c8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80059cc:	6819      	ldr	r1, [r3, #0]
 80059ce:	4610      	mov	r0, r2
 80059d0:	f009 f976 	bl	800ecc0 <mg_str_s>
 80059d4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80059d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80059e4:	f5a2 7484 	sub.w	r4, r2, #264	@ 0x108
 80059e8:	f107 0010 	add.w	r0, r7, #16
 80059ec:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 80059f0:	ca06      	ldmia	r2, {r1, r2}
 80059f2:	f7ff fdf5 	bl	80055e0 <guess_content_type>
 80059f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80059fa:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 80059fe:	4623      	mov	r3, r4
 8005a00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a04:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8005a08:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00f      	beq.n	8005a30 <mg_http_serve_file+0x22c>
 8005a10:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005a14:	681c      	ldr	r4, [r3, #0]
 8005a16:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8005a1a:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8005a1e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a22:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	47a0      	blx	r4
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d114      	bne.n	8005a5a <mg_http_serve_file+0x256>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8005a30:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a34:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a40:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 8005a44:	4b2c      	ldr	r3, [pc, #176]	@ (8005af8 <mg_http_serve_file+0x2f4>)
 8005a46:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8005a4a:	6800      	ldr	r0, [r0, #0]
 8005a4c:	f7ff fcd2 	bl	80053f4 <mg_http_reply>
    mg_fs_close(fd);
 8005a50:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8005a54:	f7fd fffc 	bl	8003a50 <mg_fs_close>
 8005a58:	e190      	b.n	8005d7c <mg_http_serve_file+0x578>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8005a5a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8005a5e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8005a62:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8005a66:	e9cd 2300 	strd	r2, r3, [sp]
 8005a6a:	460a      	mov	r2, r1
 8005a6c:	2140      	movs	r1, #64	@ 0x40
 8005a6e:	f7ff fd39 	bl	80054e4 <mg_http_etag>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d045      	beq.n	8005b04 <mg_http_serve_file+0x300>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8005a78:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005a7c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005a80:	491e      	ldr	r1, [pc, #120]	@ (8005afc <mg_http_serve_file+0x2f8>)
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	f7fe fc90 	bl	80043a8 <mg_http_get_header>
 8005a88:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8005a8c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d037      	beq.n	8005b04 <mg_http_serve_file+0x300>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8005a94:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8005a98:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f009 f90e 	bl	800ecc0 <mg_str_s>
 8005aa4:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8005aa8:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8005aac:	cb0c      	ldmia	r3, {r2, r3}
 8005aae:	c903      	ldmia	r1, {r0, r1}
 8005ab0:	f009 f9c9 	bl	800ee46 <mg_strcasecmp>
 8005ab4:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d124      	bne.n	8005b04 <mg_http_serve_file+0x300>
    mg_fs_close(fd);
 8005aba:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8005abe:	f7fd ffc7 	bl	8003a50 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8005ac2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005ac6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005ad2:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <mg_http_serve_file+0x2fc>)
 8005ad8:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8005adc:	6800      	ldr	r0, [r0, #0]
 8005ade:	f7ff fc89 	bl	80053f4 <mg_http_reply>
 8005ae2:	e14b      	b.n	8005d7c <mg_http_serve_file+0x578>
 8005ae4:	24000030 	.word	0x24000030
 8005ae8:	08026540 	.word	0x08026540
 8005aec:	08025d28 	.word	0x08025d28
 8005af0:	08026550 	.word	0x08026550
 8005af4:	08026558 	.word	0x08026558
 8005af8:	08026560 	.word	0x08026560
 8005afc:	0802656c 	.word	0x0802656c
 8005b00:	08026288 	.word	0x08026288
  } else {
    int n, status = 200;
 8005b04:	23c8      	movs	r3, #200	@ 0xc8
 8005b06:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8005b0a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005b0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005b1a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b26:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8005b2a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005b2e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005b32:	4995      	ldr	r1, [pc, #596]	@ (8005d88 <mg_http_serve_file+0x584>)
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	f7fe fc37 	bl	80043a8 <mg_http_get_header>
 8005b3a:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    range[0] = '\0';
 8005b3e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005b42:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8005b4a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 808e 	beq.w	8005c70 <mg_http_serve_file+0x46c>
 8005b54:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8005b58:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 8005b62:	f7ff fddb 	bl	800571c <getrange>
 8005b66:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
 8005b6a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	dd7e      	ble.n	8005c70 <mg_http_serve_file+0x46c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8005b72:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d107      	bne.n	8005b8a <mg_http_serve_file+0x386>
 8005b7a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005b7e:	1e5a      	subs	r2, r3, #1
 8005b80:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005b84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005b88:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 8005b8a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005b8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005b98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d808      	bhi.n	8005bb4 <mg_http_serve_file+0x3b0>
 8005ba2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005ba6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d817      	bhi.n	8005be4 <mg_http_serve_file+0x3e0>
        status = 416;
 8005bb4:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8005bb8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8005bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	60fa      	str	r2, [r7, #12]
 8005bcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005bd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005bd4:	e9cd 1200 	strd	r1, r2, [sp]
 8005bd8:	4a6c      	ldr	r2, [pc, #432]	@ (8005d8c <mg_http_serve_file+0x588>)
 8005bda:	2164      	movs	r1, #100	@ 0x64
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f007 fd5d 	bl	800d69c <mg_snprintf>
 8005be2:	e045      	b.n	8005c70 <mg_http_serve_file+0x46c>
                    (int64_t) size);
      } else {
        status = 206;
 8005be4:	23ce      	movs	r3, #206	@ 0xce
 8005be6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = r2 - r1 + 1;
 8005bea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005bee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005bf8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	3301      	adds	r3, #1
 8005c02:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range),
 8005c06:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005c0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2200      	movs	r2, #0
 8005c12:	469a      	mov	sl, r3
 8005c14:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8005c16:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005c1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005c24:	4413      	add	r3, r2
 8005c26:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8005c28:	2200      	movs	r2, #0
 8005c2a:	461d      	mov	r5, r3
 8005c2c:	4616      	mov	r6, r2
 8005c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c32:	2200      	movs	r2, #0
 8005c34:	603b      	str	r3, [r7, #0]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005c3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c40:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8005c44:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8005c48:	e9cd ab00 	strd	sl, fp, [sp]
 8005c4c:	4a50      	ldr	r2, [pc, #320]	@ (8005d90 <mg_http_serve_file+0x58c>)
 8005c4e:	2164      	movs	r1, #100	@ 0x64
 8005c50:	4618      	mov	r0, r3
 8005c52:	f007 fd23 	bl	800d69c <mg_snprintf>
        fs->sk(fd->fd, r1);
 8005c56:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8005c60:	6810      	ldr	r0, [r2, #0]
 8005c62:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8005c66:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8005c70:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8005c74:	f7fe fec2 	bl	80049fc <mg_http_status_code_str>
 8005c78:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8005c7a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c82:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8005c84:	461d      	mov	r5, r3
 8005c86:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005c94:	2100      	movs	r1, #0
 8005c96:	4698      	mov	r8, r3
 8005c98:	4689      	mov	r9, r1
 8005c9a:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <mg_http_serve_file+0x4a2>
 8005ca2:	493c      	ldr	r1, [pc, #240]	@ (8005d94 <mg_http_serve_file+0x590>)
 8005ca4:	e000      	b.n	8005ca8 <mg_http_serve_file+0x4a4>
 8005ca6:	493c      	ldr	r1, [pc, #240]	@ (8005d98 <mg_http_serve_file+0x594>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8005ca8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005cac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d006      	beq.n	8005cc6 <mg_http_serve_file+0x4c2>
 8005cb8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005cbc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	e000      	b.n	8005cc8 <mg_http_serve_file+0x4c4>
 8005cc6:	4b34      	ldr	r3, [pc, #208]	@ (8005d98 <mg_http_serve_file+0x594>)
 8005cc8:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8005ccc:	f5a0 70be 	sub.w	r0, r0, #380	@ 0x17c
 8005cd0:	9308      	str	r3, [sp, #32]
 8005cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005cd6:	9307      	str	r3, [sp, #28]
 8005cd8:	9106      	str	r1, [sp, #24]
 8005cda:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8005cde:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005ce2:	9302      	str	r3, [sp, #8]
 8005ce4:	9201      	str	r2, [sp, #4]
 8005ce6:	9500      	str	r5, [sp, #0]
 8005ce8:	4623      	mov	r3, r4
 8005cea:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005cee:	492b      	ldr	r1, [pc, #172]	@ (8005d9c <mg_http_serve_file+0x598>)
 8005cf0:	6800      	ldr	r0, [r0, #0]
 8005cf2:	f003 fa9f 	bl	8009234 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8005cf6:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8005cfa:	4929      	ldr	r1, [pc, #164]	@ (8005da0 <mg_http_serve_file+0x59c>)
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f008 ffdf 	bl	800ecc0 <mg_str_s>
 8005d02:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005d06:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005d0a:	6819      	ldr	r1, [r3, #0]
 8005d0c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8005d10:	cb0c      	ldmia	r3, {r2, r3}
 8005d12:	c903      	ldmia	r1, {r0, r1}
 8005d14:	f009 f897 	bl	800ee46 <mg_strcasecmp>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10f      	bne.n	8005d3e <mg_http_serve_file+0x53a>
      c->is_resp = 0;
 8005d1e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005d22:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8005d2c:	f36f 13c7 	bfc	r3, #7, #1
 8005d30:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_fs_close(fd);
 8005d34:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8005d38:	f7fd fe8a 	bl	8003a50 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8005d3c:	e01e      	b.n	8005d7c <mg_http_serve_file+0x578>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8005d3e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005d42:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	33a4      	adds	r3, #164	@ 0xa4
 8005d4a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      c->pfn = static_cb;
 8005d4e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005d52:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a12      	ldr	r2, [pc, #72]	@ (8005da4 <mg_http_serve_file+0x5a0>)
 8005d5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 8005d5e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005d62:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8005d6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 8005d70:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8005d74:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8005d78:	601a      	str	r2, [r3, #0]
}
 8005d7a:	e7ff      	b.n	8005d7c <mg_http_serve_file+0x578>
 8005d7c:	bf00      	nop
 8005d7e:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8005d82:	46bd      	mov	sp, r7
 8005d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d88:	0802657c 	.word	0x0802657c
 8005d8c:	08026584 	.word	0x08026584
 8005d90:	080265a4 	.word	0x080265a4
 8005d94:	080265cc 	.word	0x080265cc
 8005d98:	08026288 	.word	0x08026288
 8005d9c:	080265e8 	.word	0x080265e8
 8005da0:	08026638 	.word	0x08026638
 8005da4:	0800551d 	.word	0x0800551d

08005da8 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8005da8:	b082      	sub	sp, #8
 8005daa:	b590      	push	{r4, r7, lr}
 8005dac:	b08f      	sub	sp, #60	@ 0x3c
 8005dae:	af02      	add	r7, sp, #8
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8005db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dba:	461a      	mov	r2, r3
 8005dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	4a9c      	ldr	r2, [pc, #624]	@ (8006034 <uri_to_path2+0x28c>)
 8005dc4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005dc6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005dc8:	f007 fc68 	bl	800d69c <mg_snprintf>
 8005dcc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d809      	bhi.n	8005dec <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8005dd8:	4b97      	ldr	r3, [pc, #604]	@ (8006038 <uri_to_path2+0x290>)
 8005dda:	4a98      	ldr	r2, [pc, #608]	@ (800603c <uri_to_path2+0x294>)
 8005ddc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7ff fb07 	bl	80053f4 <mg_http_reply>
    return -1;
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dea:	e143      	b.n	8006074 <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 8005dec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dee:	3b01      	subs	r3, #1
 8005df0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005df2:	4413      	add	r3, r2
 8005df4:	2200      	movs	r2, #0
 8005df6:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d012      	beq.n	8005e24 <uri_to_path2+0x7c>
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e00:	3b01      	subs	r3, #1
 8005e02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e04:	4413      	add	r3, r2
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b2f      	cmp	r3, #47	@ 0x2f
 8005e0a:	d00b      	beq.n	8005e24 <uri_to_path2+0x7c>
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e14:	4413      	add	r3, r2
 8005e16:	222f      	movs	r2, #47	@ 0x2f
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	4413      	add	r3, r2
 8005e20:	2200      	movs	r2, #0
 8005e22:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 8005e24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d212      	bcs.n	8005e54 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e34:	18d0      	adds	r0, r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e3c:	1ad1      	subs	r1, r2, r3
 8005e3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	18d4      	adds	r4, r2, r3
 8005e44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	9200      	str	r2, [sp, #0]
 8005e4e:	4622      	mov	r2, r4
 8005e50:	f7fe f9b7 	bl	80041c2 <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 8005e54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e56:	3b01      	subs	r3, #1
 8005e58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e5a:	4413      	add	r3, r2
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8005e60:	f107 0314 	add.w	r3, r7, #20
 8005e64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f008 ff46 	bl	800ecfa <mg_str_n>
 8005e6e:	f107 0314 	add.w	r3, r7, #20
 8005e72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005e76:	f011 fe2f 	bl	8017ad8 <mg_path_is_sane>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	f083 0301 	eor.w	r3, r3, #1
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 8005e86:	4b6e      	ldr	r3, [pc, #440]	@ (8006040 <uri_to_path2+0x298>)
 8005e88:	4a6c      	ldr	r2, [pc, #432]	@ (800603c <uri_to_path2+0x294>)
 8005e8a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f7ff fab0 	bl	80053f4 <mg_http_reply>
    return -1;
 8005e94:	f04f 33ff 	mov.w	r3, #4294967295
 8005e98:	e0ec      	b.n	8006074 <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 8005e9a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005e9c:	f7fa fa80 	bl	80003a0 <strlen>
 8005ea0:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8005ea2:	e007      	b.n	8005eb4 <uri_to_path2+0x10c>
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eaa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eae:	4413      	add	r3, r2
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d906      	bls.n	8005ec8 <uri_to_path2+0x120>
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ec0:	4413      	add	r3, r2
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b2f      	cmp	r3, #47	@ 0x2f
 8005ec6:	d0ed      	beq.n	8005ea4 <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8005ec8:	f107 031c 	add.w	r3, r7, #28
 8005ecc:	495d      	ldr	r1, [pc, #372]	@ (8006044 <uri_to_path2+0x29c>)
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f008 fef6 	bl	800ecc0 <mg_str_s>
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	f107 031c 	add.w	r3, r7, #28
 8005eda:	cb0c      	ldmia	r3, {r2, r3}
 8005edc:	3108      	adds	r1, #8
 8005ede:	c903      	ldmia	r1, {r0, r1}
 8005ee0:	f008 ff6f 	bl	800edc2 <mg_strcmp>
 8005ee4:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <uri_to_path2+0x152>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005ef4:	4798      	blx	r3
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	e000      	b.n	8005efc <uri_to_path2+0x154>
 8005efa:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8005efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8005efe:	4b52      	ldr	r3, [pc, #328]	@ (8006048 <uri_to_path2+0x2a0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	dd16      	ble.n	8005f34 <uri_to_path2+0x18c>
 8005f06:	4b51      	ldr	r3, [pc, #324]	@ (800604c <uri_to_path2+0x2a4>)
 8005f08:	f640 427e 	movw	r2, #3198	@ 0xc7e
 8005f0c:	4950      	ldr	r1, [pc, #320]	@ (8006050 <uri_to_path2+0x2a8>)
 8005f0e:	2004      	movs	r0, #4
 8005f10:	f002 f80e 	bl	8007f30 <mg_log_prefix>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	4849      	ldr	r0, [pc, #292]	@ (8006054 <uri_to_path2+0x2ac>)
 8005f30:	f002 f84e 	bl	8007fd0 <mg_log>
              flags));
  if (flags == 0) {
 8005f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 809b 	beq.w	8006072 <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8005f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d020      	beq.n	8005f88 <uri_to_path2+0x1e0>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d01c      	beq.n	8005f88 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	4413      	add	r3, r2
 8005f5a:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8005f5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005f5e:	d013      	beq.n	8005f88 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8005f64:	461a      	mov	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	493b      	ldr	r1, [pc, #236]	@ (8006058 <uri_to_path2+0x2b0>)
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f003 f961 	bl	8009234 <mg_printf>
    c->is_resp = 0;
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8005f78:	f36f 13c7 	bfc	r3, #7, #1
 8005f7c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    flags = -1;
 8005f80:	f04f 33ff 	mov.w	r3, #4294967295
 8005f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f86:	e074      	b.n	8006072 <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 8005f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d06f      	beq.n	8006072 <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8005f92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f96:	18d0      	adds	r0, r2, r3
 8005f98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800605c <uri_to_path2+0x2b4>)
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	f007 fb7b 	bl	800d69c <mg_snprintf>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d009      	beq.n	8005fc0 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005fb6:	4798      	blx	r3
 8005fb8:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8005fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d116      	bne.n	8005fee <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8005fc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	18d0      	adds	r0, r2, r3
 8005fc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	4a24      	ldr	r2, [pc, #144]	@ (8006060 <uri_to_path2+0x2b8>)
 8005fce:	4619      	mov	r1, r3
 8005fd0:	f007 fb64 	bl	800d69c <mg_snprintf>
 8005fd4:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005fe4:	4798      	blx	r3
 8005fe6:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8005fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <uri_to_path2+0x24c>
      flags = tmp;
 8005fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ff2:	e03e      	b.n	8006072 <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8005ff4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	18d0      	adds	r0, r2, r3
 8005ffa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	4a18      	ldr	r2, [pc, #96]	@ (8006064 <uri_to_path2+0x2bc>)
 8006002:	4619      	mov	r1, r3
 8006004:	f007 fb4a 	bl	800d69c <mg_snprintf>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d02c      	beq.n	8006068 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2200      	movs	r2, #0
 8006014:	2100      	movs	r1, #0
 8006016:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006018:	4798      	blx	r3
 800601a:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 800601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	d022      	beq.n	8006068 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	330b      	adds	r3, #11
 800602a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800602c:	4413      	add	r3, r2
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e01e      	b.n	8006072 <uri_to_path2+0x2ca>
 8006034:	08025d28 	.word	0x08025d28
 8006038:	08026640 	.word	0x08026640
 800603c:	08026288 	.word	0x08026288
 8006040:	08026654 	.word	0x08026654
 8006044:	08026664 	.word	0x08026664
 8006048:	24000240 	.word	0x24000240
 800604c:	08028f24 	.word	0x08028f24
 8006050:	0802597c 	.word	0x0802597c
 8006054:	08026668 	.word	0x08026668
 8006058:	0802667c 	.word	0x0802667c
 800605c:	080266b8 	.word	0x080266b8
 8006060:	080266c4 	.word	0x080266c4
 8006064:	080266d4 	.word	0x080266d4
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8006068:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	4413      	add	r3, r2
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006074:	4618      	mov	r0, r3
 8006076:	3734      	adds	r7, #52	@ 0x34
 8006078:	46bd      	mov	sp, r7
 800607a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800607e:	b002      	add	sp, #8
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop

08006084 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 8006084:	b580      	push	{r7, lr}
 8006086:	b09c      	sub	sp, #112	@ 0x70
 8006088:	af06      	add	r7, sp, #24
 800608a:	6178      	str	r0, [r7, #20]
 800608c:	6139      	str	r1, [r7, #16]
 800608e:	60fa      	str	r2, [r7, #12]
 8006090:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <uri_to_path+0x1c>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	e000      	b.n	80060a2 <uri_to_path+0x1e>
 80060a0:	4b5b      	ldr	r3, [pc, #364]	@ (8006210 <uri_to_path+0x18c>)
 80060a2:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80060ac:	4611      	mov	r1, r2
 80060ae:	4618      	mov	r0, r3
 80060b0:	f008 fe06 	bl	800ecc0 <mg_str_s>
 80060b4:	2300      	movs	r3, #0
 80060b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060b8:	2300      	movs	r3, #0
 80060ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060bc:	f107 031c 	add.w	r3, r7, #28
 80060c0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80060c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060c8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 80060cc:	e078      	b.n	80061c0 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 80060ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80060d2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80060d6:	213d      	movs	r1, #61	@ 0x3d
 80060d8:	9100      	str	r1, [sp, #0]
 80060da:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80060de:	c903      	ldmia	r1, {r0, r1}
 80060e0:	f008 ffec 	bl	800f0bc <mg_span>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f083 0301 	eor.w	r3, r3, #1
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d014      	beq.n	800611a <uri_to_path+0x96>
 80060f0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80060f4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80060f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8006100:	463b      	mov	r3, r7
 8006102:	2200      	movs	r2, #0
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f008 fdf7 	bl	800ecfa <mg_str_n>
 800610c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006110:	463a      	mov	r2, r7
 8006112:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006116:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 800611a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800611c:	2b00      	cmp	r3, #0
 800611e:	d123      	bne.n	8006168 <uri_to_path+0xe4>
 8006120:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006124:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8006128:	e892 0003 	ldmia.w	r2, {r0, r1}
 800612c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006130:	463b      	mov	r3, r7
 8006132:	4938      	ldr	r1, [pc, #224]	@ (8006214 <uri_to_path+0x190>)
 8006134:	4618      	mov	r0, r3
 8006136:	f008 fdc3 	bl	800ecc0 <mg_str_s>
 800613a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800613e:	463a      	mov	r2, r7
 8006140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006144:	e883 0003 	stmia.w	r3, {r0, r1}
 8006148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800614c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8006150:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006154:	e883 0003 	stmia.w	r3, {r0, r1}
 8006158:	f107 031c 	add.w	r3, r7, #28
 800615c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8006160:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006164:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800616e:	429a      	cmp	r2, r3
 8006170:	d323      	bcc.n	80061ba <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6899      	ldr	r1, [r3, #8]
 8006176:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006178:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800617c:	4618      	mov	r0, r3
 800617e:	f008 fdbc 	bl	800ecfa <mg_str_n>
 8006182:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006186:	cb0c      	ldmia	r3, {r2, r3}
 8006188:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800618c:	c903      	ldmia	r1, {r0, r1}
 800618e:	f008 fe18 	bl	800edc2 <mg_strcmp>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d112      	bne.n	80061be <uri_to_path+0x13a>
    u = k, p = v;
 8006198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800619c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80061a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80061a8:	f107 031c 	add.w	r3, r7, #28
 80061ac:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80061b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80061b8:	e002      	b.n	80061c0 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 80061ba:	bf00      	nop
 80061bc:	e000      	b.n	80061c0 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 80061be:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 80061c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80061c4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80061c8:	212c      	movs	r1, #44	@ 0x2c
 80061ca:	9100      	str	r1, [sp, #0]
 80061cc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80061d0:	c903      	ldmia	r1, {r0, r1}
 80061d2:	f008 ff73 	bl	800f0bc <mg_span>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f47f af78 	bne.w	80060ce <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 80061de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061e0:	9304      	str	r3, [sp, #16]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	9303      	str	r3, [sp, #12]
 80061e6:	aa01      	add	r2, sp, #4
 80061e8:	f107 031c 	add.w	r3, r7, #28
 80061ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061f0:	e882 0003 	stmia.w	r2, {r0, r1}
 80061f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80061fc:	6939      	ldr	r1, [r7, #16]
 80061fe:	6978      	ldr	r0, [r7, #20]
 8006200:	f7ff fdd2 	bl	8005da8 <uri_to_path2>
 8006204:	4603      	mov	r3, r0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3758      	adds	r7, #88	@ 0x58
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	24000030 	.word	0x24000030
 8006214:	08026664 	.word	0x08026664

08006218 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b0a6      	sub	sp, #152	@ 0x98
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 800622c:	f107 0314 	add.w	r3, r7, #20
 8006230:	2264      	movs	r2, #100	@ 0x64
 8006232:	9200      	str	r2, [sp, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7ff ff23 	bl	8006084 <uri_to_path>
 800623e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  if (flags < 0) {
 8006242:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006246:	2b00      	cmp	r3, #0
 8006248:	db41      	blt.n	80062ce <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 800624a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 8006256:	4b20      	ldr	r3, [pc, #128]	@ (80062d8 <mg_http_serve_dir+0xc0>)
 8006258:	4a20      	ldr	r2, [pc, #128]	@ (80062dc <mg_http_serve_dir+0xc4>)
 800625a:	f240 1193 	movw	r1, #403	@ 0x193
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff f8c8 	bl	80053f4 <mg_http_reply>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8006264:	e033      	b.n	80062ce <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8006266:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800626a:	2b00      	cmp	r3, #0
 800626c:	d028      	beq.n	80062c0 <mg_http_serve_dir+0xa8>
 800626e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006272:	2b00      	cmp	r3, #0
 8006274:	d024      	beq.n	80062c0 <mg_http_serve_dir+0xa8>
 8006276:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800627a:	f107 0214 	add.w	r2, r7, #20
 800627e:	4611      	mov	r1, r2
 8006280:	4618      	mov	r0, r3
 8006282:	f008 fd1d 	bl	800ecc0 <mg_str_s>
 8006286:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800628a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800628e:	4618      	mov	r0, r3
 8006290:	f008 fd16 	bl	800ecc0 <mg_str_s>
 8006294:	2300      	movs	r3, #0
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800629c:	cb0c      	ldmia	r3, {r2, r3}
 800629e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80062a2:	c903      	ldmia	r1, {r0, r1}
 80062a4:	f008 fe16 	bl	800eed4 <mg_match>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d008      	beq.n	80062c0 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f107 0214 	add.w	r2, r7, #20
 80062b6:	4619      	mov	r1, r3
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f008 fced 	bl	800ec98 <mg_http_serve_ssi>
}
 80062be:	e006      	b.n	80062ce <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 80062c0:	f107 0214 	add.w	r2, r7, #20
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f7ff fa9b 	bl	8005804 <mg_http_serve_file>
}
 80062ce:	bf00      	nop
 80062d0:	3790      	adds	r7, #144	@ 0x90
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	080266e4 	.word	0x080266e4
 80062dc:	08026288 	.word	0x08026288

080062e0 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 80062e0:	b590      	push	{r4, r7, lr}
 80062e2:	b0cf      	sub	sp, #316	@ 0x13c
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 80062ea:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 80062ee:	6020      	str	r0, [r4, #0]
 80062f0:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 80062f4:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 80062f8:	6001      	str	r1, [r0, #0]
 80062fa:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 80062fe:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8006302:	600a      	str	r2, [r1, #0]
 8006304:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006308:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800630c:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 800630e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006312:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006316:	497a      	ldr	r1, [pc, #488]	@ (8006500 <mg_http_creds+0x220>)
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	f7fe f845 	bl	80043a8 <mg_http_get_header>
 800631e:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
  user[0] = pass[0] = '\0';
 8006322:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006326:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006334:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	781a      	ldrb	r2, [r3, #0]
 800633c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006340:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8006348:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d05e      	beq.n	800640e <mg_http_creds+0x12e>
 8006350:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b06      	cmp	r3, #6
 8006358:	d959      	bls.n	800640e <mg_http_creds+0x12e>
 800635a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2206      	movs	r2, #6
 8006362:	4968      	ldr	r1, [pc, #416]	@ (8006504 <mg_http_creds+0x224>)
 8006364:	4618      	mov	r0, r3
 8006366:	f01b fd13 	bl	8021d90 <memcmp>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d14e      	bne.n	800640e <mg_http_creds+0x12e>
    char buf[256];
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 8006370:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	1d98      	adds	r0, r3, #6
 8006378:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	1f99      	subs	r1, r3, #6
 8006380:	f107 0214 	add.w	r2, r7, #20
 8006384:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006388:	f7fb f8b2 	bl	80014f0 <mg_base64_decode>
 800638c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 8006390:	f107 0314 	add.w	r3, r7, #20
 8006394:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006398:	213a      	movs	r1, #58	@ 0x3a
 800639a:	4618      	mov	r0, r3
 800639c:	f7f9 ffb0 	bl	8000300 <memchr>
 80063a0:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (p != NULL) {
 80063a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 80a2 	beq.w	80064f2 <mg_http_creds+0x212>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 80063ae:	f107 0314 	add.w	r3, r7, #20
 80063b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80063b6:	1ad2      	subs	r2, r2, r3
 80063b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063bc:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 80063c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063c4:	f5a3 7094 	sub.w	r0, r3, #296	@ 0x128
 80063c8:	f107 0314 	add.w	r3, r7, #20
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	4613      	mov	r3, r2
 80063d0:	4a4d      	ldr	r2, [pc, #308]	@ (8006508 <mg_http_creds+0x228>)
 80063d2:	6809      	ldr	r1, [r1, #0]
 80063d4:	6800      	ldr	r0, [r0, #0]
 80063d6:	f007 f961 	bl	800d69c <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 80063da:	f107 0314 	add.w	r3, r7, #20
 80063de:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	1e5a      	subs	r2, r3, #1
 80063ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80063f2:	3301      	adds	r3, #1
 80063f4:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 80063f8:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	4613      	mov	r3, r2
 8006400:	4a41      	ldr	r2, [pc, #260]	@ (8006508 <mg_http_creds+0x228>)
 8006402:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006406:	6800      	ldr	r0, [r0, #0]
 8006408:	f007 f948 	bl	800d69c <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800640c:	e071      	b.n	80064f2 <mg_http_creds+0x212>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 800640e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d024      	beq.n	8006460 <mg_http_creds+0x180>
 8006416:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b07      	cmp	r3, #7
 800641e:	d91f      	bls.n	8006460 <mg_http_creds+0x180>
 8006420:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2207      	movs	r2, #7
 8006428:	4938      	ldr	r1, [pc, #224]	@ (800650c <mg_http_creds+0x22c>)
 800642a:	4618      	mov	r0, r3
 800642c:	f01b fcb0 	bl	8021d90 <memcmp>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d114      	bne.n	8006460 <mg_http_creds+0x180>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 8006436:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	1fda      	subs	r2, r3, #7
 800643e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3307      	adds	r3, #7
 8006446:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800644a:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	4a2d      	ldr	r2, [pc, #180]	@ (8006508 <mg_http_creds+0x228>)
 8006454:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006458:	6800      	ldr	r0, [r0, #0]
 800645a:	f007 f91f 	bl	800d69c <mg_snprintf>
 800645e:	e049      	b.n	80064f4 <mg_http_creds+0x214>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 8006460:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006464:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006468:	4929      	ldr	r1, [pc, #164]	@ (8006510 <mg_http_creds+0x230>)
 800646a:	6818      	ldr	r0, [r3, #0]
 800646c:	f7fd ff9c 	bl	80043a8 <mg_http_get_header>
 8006470:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 8006474:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d028      	beq.n	80064ce <mg_http_creds+0x1ee>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 800647c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8006480:	220c      	movs	r2, #12
 8006482:	4924      	ldr	r1, [pc, #144]	@ (8006514 <mg_http_creds+0x234>)
 8006484:	4618      	mov	r0, r3
 8006486:	f008 fc38 	bl	800ecfa <mg_str_n>
 800648a:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800648e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8006492:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800649c:	ca06      	ldmia	r2, {r1, r2}
 800649e:	f000 f864 	bl	800656a <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 80064a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d024      	beq.n	80064f4 <mg_http_creds+0x214>
 80064aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80064ae:	4619      	mov	r1, r3
 80064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80064b8:	f5a2 7098 	sub.w	r0, r2, #304	@ 0x130
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	460b      	mov	r3, r1
 80064c0:	4a11      	ldr	r2, [pc, #68]	@ (8006508 <mg_http_creds+0x228>)
 80064c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80064c6:	6800      	ldr	r0, [r0, #0]
 80064c8:	f007 f8e8 	bl	800d69c <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 80064cc:	e012      	b.n	80064f4 <mg_http_creds+0x214>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 80064ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f103 0010 	add.w	r0, r3, #16
 80064dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064e0:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 80064e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	490a      	ldr	r1, [pc, #40]	@ (8006514 <mg_http_creds+0x234>)
 80064ec:	f7fd fdf4 	bl	80040d8 <mg_http_get_var>
}
 80064f0:	e000      	b.n	80064f4 <mg_http_creds+0x214>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 80064f2:	bf00      	nop
}
 80064f4:	bf00      	nop
 80064f6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd90      	pop	{r4, r7, pc}
 80064fe:	bf00      	nop
 8006500:	080266f8 	.word	0x080266f8
 8006504:	08026708 	.word	0x08026708
 8006508:	08025d28 	.word	0x08025d28
 800650c:	08026710 	.word	0x08026710
 8006510:	08026718 	.word	0x08026718
 8006514:	08026720 	.word	0x08026720

08006518 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	1d3b      	adds	r3, r7, #4
 8006522:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 8006526:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.buf + 1, s.len - 2)
             : s;
 8006528:	2b01      	cmp	r3, #1
 800652a:	d913      	bls.n	8006554 <stripquotes+0x3c>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2b22      	cmp	r3, #34	@ 0x22
 8006532:	d10f      	bne.n	8006554 <stripquotes+0x3c>
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	3b01      	subs	r3, #1
 800653a:	4413      	add	r3, r2
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b22      	cmp	r3, #34	@ 0x22
 8006540:	d108      	bne.n	8006554 <stripquotes+0x3c>
             ? mg_str_n(s.buf + 1, s.len - 2)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	1c59      	adds	r1, r3, #1
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	1e9a      	subs	r2, r3, #2
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4618      	mov	r0, r3
 800654e:	f008 fbd4 	bl	800ecfa <mg_str_n>
             : s;
 8006552:	e006      	b.n	8006562 <stripquotes+0x4a>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	461a      	mov	r2, r3
 8006558:	1d3b      	adds	r3, r7, #4
 800655a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800655e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 800656a:	b082      	sub	sp, #8
 800656c:	b580      	push	{r7, lr}
 800656e:	b08c      	sub	sp, #48	@ 0x30
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	1d38      	adds	r0, r7, #4
 8006576:	e880 0006 	stmia.w	r0, {r1, r2}
 800657a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800657c:	2300      	movs	r3, #0
 800657e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006580:	e072      	b.n	8006668 <mg_http_get_header_var+0xfe>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006588:	440b      	add	r3, r1
 800658a:	4413      	add	r3, r2
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b3d      	cmp	r3, #61	@ 0x3d
 8006590:	d167      	bne.n	8006662 <mg_http_get_header_var+0xf8>
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006596:	4413      	add	r3, r2
 8006598:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800659a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800659c:	4618      	mov	r0, r3
 800659e:	f01b fbf7 	bl	8021d90 <memcmp>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d15c      	bne.n	8006662 <mg_http_get_header_var+0xf8>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ae:	440b      	add	r3, r1
 80065b0:	3301      	adds	r3, #1
 80065b2:	4413      	add	r3, r2
 80065b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	4413      	add	r3, r2
 80065c0:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 80065c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d205      	bcs.n	80065d6 <mg_http_get_header_var+0x6c>
 80065ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b22      	cmp	r3, #34	@ 0x22
 80065d0:	d101      	bne.n	80065d6 <mg_http_get_header_var+0x6c>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <mg_http_get_header_var+0x6e>
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 80065da:	e002      	b.n	80065e2 <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 80065dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065de:	3301      	adds	r3, #1
 80065e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (p < x &&
 80065e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d227      	bcs.n	800663a <mg_http_get_header_var+0xd0>
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d010      	beq.n	8006612 <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 80065f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d003      	beq.n	8006600 <mg_http_get_header_var+0x96>
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b22      	cmp	r3, #34	@ 0x22
 80065fe:	d001      	beq.n	8006604 <mg_http_get_header_var+0x9a>
 8006600:	2301      	movs	r3, #1
 8006602:	e000      	b.n	8006606 <mg_http_get_header_var+0x9c>
 8006604:	2300      	movs	r3, #0
      while (p < x &&
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e5      	bne.n	80065dc <mg_http_get_header_var+0x72>
 8006610:	e013      	b.n	800663a <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8006612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b3b      	cmp	r3, #59	@ 0x3b
 8006618:	d009      	beq.n	800662e <mg_http_get_header_var+0xc4>
 800661a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b20      	cmp	r3, #32
 8006620:	d005      	beq.n	800662e <mg_http_get_header_var+0xc4>
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b2c      	cmp	r3, #44	@ 0x2c
 8006628:	d001      	beq.n	800662e <mg_http_get_header_var+0xc4>
 800662a:	2301      	movs	r3, #1
 800662c:	e000      	b.n	8006630 <mg_http_get_header_var+0xc6>
 800662e:	2300      	movs	r3, #0
      while (p < x &&
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1d0      	bne.n	80065dc <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.buf, (int) v.len,
      // v.buf, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 800663a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	461a      	mov	r2, r3
 8006646:	f107 0314 	add.w	r3, r7, #20
 800664a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800664c:	4618      	mov	r0, r3
 800664e:	f008 fb54 	bl	800ecfa <mg_str_n>
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f107 0314 	add.w	r3, r7, #20
 8006658:	e893 0006 	ldmia.w	r3, {r1, r2}
 800665c:	f7ff ff5c 	bl	8006518 <stripquotes>
 8006660:	e012      	b.n	8006688 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8006662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006664:	3301      	adds	r3, #1
 8006666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d006      	beq.n	800667c <mg_http_get_header_var+0x112>
 800666e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006672:	4413      	add	r3, r2
 8006674:	1c9a      	adds	r2, r3, #2
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	429a      	cmp	r2, r3
 800667a:	d382      	bcc.n	8006582 <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	2100      	movs	r1, #0
 8006682:	4618      	mov	r0, r3
 8006684:	f008 fb39 	bl	800ecfa <mg_str_n>
}
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	3730      	adds	r7, #48	@ 0x30
 800668c:	46bd      	mov	sp, r7
 800668e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006692:	b002      	add	sp, #8
 8006694:	4770      	bx	lr

08006696 <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f01a f8e8 	bl	8020878 <atoi>
 80066a8:	4603      	mov	r3, r0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <is_hex_digit>:

static bool is_hex_digit(int c) {
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80066be:	dd02      	ble.n	80066c6 <is_hex_digit+0x14>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b39      	cmp	r3, #57	@ 0x39
 80066c4:	dd0b      	ble.n	80066de <is_hex_digit+0x2c>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b60      	cmp	r3, #96	@ 0x60
 80066ca:	dd02      	ble.n	80066d2 <is_hex_digit+0x20>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b66      	cmp	r3, #102	@ 0x66
 80066d0:	dd05      	ble.n	80066de <is_hex_digit+0x2c>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b40      	cmp	r3, #64	@ 0x40
 80066d6:	dd04      	ble.n	80066e2 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b46      	cmp	r3, #70	@ 0x46
 80066dc:	dc01      	bgt.n	80066e2 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <is_hex_digit+0x32>
 80066e2:	2300      	movs	r3, #0
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	b2db      	uxtb	r3, r3
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b08a      	sub	sp, #40	@ 0x28
 80066fa:	af02      	add	r7, sp, #8
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	2300      	movs	r3, #0
 800670a:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b02      	cmp	r3, #2
 8006710:	dc04      	bgt.n	800671c <skip_chunk+0x26>
 8006712:	2300      	movs	r3, #0
 8006714:	e07a      	b.n	800680c <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	3301      	adds	r3, #1
 800671a:	61fb      	str	r3, [r7, #28]
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	429a      	cmp	r2, r3
 8006722:	da09      	bge.n	8006738 <skip_chunk+0x42>
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4413      	add	r3, r2
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff ffc0 	bl	80066b2 <is_hex_digit>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1ee      	bne.n	8006716 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d102      	bne.n	8006744 <skip_chunk+0x4e>
 800673e:	f04f 33ff 	mov.w	r3, #4294967295
 8006742:	e063      	b.n	800680c <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	2b08      	cmp	r3, #8
 8006748:	dd02      	ble.n	8006750 <skip_chunk+0x5a>
 800674a:	f04f 33ff 	mov.w	r3, #4294967295
 800674e:	e05d      	b.n	800680c <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	429a      	cmp	r2, r3
 8006756:	da0c      	bge.n	8006772 <skip_chunk+0x7c>
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4413      	add	r3, r2
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b0d      	cmp	r3, #13
 8006762:	d106      	bne.n	8006772 <skip_chunk+0x7c>
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	3301      	adds	r3, #1
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b0a      	cmp	r3, #10
 8006770:	d002      	beq.n	8006778 <skip_chunk+0x82>
 8006772:	f04f 33ff 	mov.w	r3, #4294967295
 8006776:	e049      	b.n	800680c <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	f107 0314 	add.w	r3, r7, #20
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	4618      	mov	r0, r3
 8006782:	f008 faba 	bl	800ecfa <mg_str_n>
 8006786:	f107 0310 	add.w	r3, r7, #16
 800678a:	2204      	movs	r2, #4
 800678c:	9200      	str	r2, [sp, #0]
 800678e:	2210      	movs	r2, #16
 8006790:	f107 0114 	add.w	r1, r7, #20
 8006794:	c903      	ldmia	r1, {r0, r1}
 8006796:	f008 fcee 	bl	800f176 <mg_str_to_num>
 800679a:	4603      	mov	r3, r0
 800679c:	f083 0301 	eor.w	r3, r3, #1
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 80067a6:	f04f 33ff 	mov.w	r3, #4294967295
 80067aa:	e02f      	b.n	800680c <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da02      	bge.n	80067b8 <skip_chunk+0xc2>
 80067b2:	f04f 33ff 	mov.w	r3, #4294967295
 80067b6:	e029      	b.n	800680c <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	1eda      	subs	r2, r3, #3
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	dc01      	bgt.n	80067ca <skip_chunk+0xd4>
 80067c6:	2300      	movs	r3, #0
 80067c8:	e020      	b.n	800680c <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	4413      	add	r3, r2
 80067d0:	3302      	adds	r3, #2
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b0d      	cmp	r3, #13
 80067da:	d108      	bne.n	80067ee <skip_chunk+0xf8>
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	4413      	add	r3, r2
 80067e2:	3303      	adds	r3, #3
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b0a      	cmp	r3, #10
 80067ec:	d002      	beq.n	80067f4 <skip_chunk+0xfe>
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295
 80067f2:	e00b      	b.n	800680c <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	1c9a      	adds	r2, r3, #2
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	1c9a      	adds	r2, r3, #2
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	4413      	add	r3, r2
 800680a:	3302      	adds	r3, #2
}
 800680c:	4618      	mov	r0, r3
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8006814:	b580      	push	{r7, lr}
 8006816:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800681a:	af00      	add	r7, sp, #0
 800681c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006820:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006824:	6018      	str	r0, [r3, #0]
 8006826:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800682a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800682e:	6019      	str	r1, [r3, #0]
 8006830:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006834:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006838:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 800683a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800683e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b07      	cmp	r3, #7
 8006846:	d031      	beq.n	80068ac <http_cb+0x98>
 8006848:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800684c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b09      	cmp	r3, #9
 8006854:	d02a      	beq.n	80068ac <http_cb+0x98>
 8006856:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800685a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b02      	cmp	r3, #2
 8006862:	f040 8356 	bne.w	8006f12 <http_cb+0x6fe>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8006866:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800686a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8349 	beq.w	8006f12 <http_cb+0x6fe>
 8006880:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006884:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800688e:	f003 0310 	and.w	r3, r3, #16
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	f040 833c 	bne.w	8006f12 <http_cb+0x6fe>
       c->recv.len > 0)) {  // see #2796
 800689a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800689e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8333 	beq.w	8006f12 <http_cb+0x6fe>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 80068ac:	2300      	movs	r3, #0
 80068ae:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 80068b2:	e301      	b.n	8006eb8 <http_cb+0x6a4>
      const char *buf = (char *) c->recv.buf + ofs;
 80068b4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80068b8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068c0:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80068c4:	4413      	add	r3, r2
 80068c6:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 80068ca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80068ce:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068d6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	f107 0210 	add.w	r2, r7, #16
 80068e0:	4619      	mov	r1, r3
 80068e2:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 80068e6:	f7fd ff1b 	bl	8004720 <mg_http_parse>
 80068ea:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 80068ee:	2300      	movs	r3, #0
 80068f0:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      size_t old_len = c->recv.len;
 80068f4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80068f8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006900:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
      if (n < 0) {
 8006904:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006908:	2b00      	cmp	r3, #0
 800690a:	da38      	bge.n	800697e <http_cb+0x16a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 800690c:	4bc2      	ldr	r3, [pc, #776]	@ (8006c18 <http_cb+0x404>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	dd10      	ble.n	8006936 <http_cb+0x122>
 8006914:	4bc1      	ldr	r3, [pc, #772]	@ (8006c1c <http_cb+0x408>)
 8006916:	f640 525a 	movw	r2, #3418	@ 0xd5a
 800691a:	49c1      	ldr	r1, [pc, #772]	@ (8006c20 <http_cb+0x40c>)
 800691c:	2001      	movs	r0, #1
 800691e:	f001 fb07 	bl	8007f30 <mg_log_prefix>
 8006922:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006926:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692e:	4619      	mov	r1, r3
 8006930:	48bc      	ldr	r0, [pc, #752]	@ (8006c24 <http_cb+0x410>)
 8006932:	f001 fb4d 	bl	8007fd0 <mg_log>
        c->is_draining = 1;
 8006936:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800693a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006944:	f043 0310 	orr.w	r3, r3, #16
 8006948:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 800694c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006950:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006958:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b10      	cmp	r3, #16
 8006960:	bf28      	it	cs
 8006962:	2310      	movcs	r3, #16
 8006964:	4619      	mov	r1, r3
 8006966:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800696a:	f001 fb67 	bl	800803c <mg_hexdump>
        c->recv.len = 0;
 800696e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006972:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2200      	movs	r2, #0
 800697a:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 800697c:	e2c9      	b.n	8006f12 <http_cb+0x6fe>
      }
      if (n == 0) break;                 // Request is not buffered yet
 800697e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 82b0 	beq.w	8006ee8 <http_cb+0x6d4>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8006988:	f107 0210 	add.w	r2, r7, #16
 800698c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006990:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006994:	210a      	movs	r1, #10
 8006996:	6818      	ldr	r0, [r3, #0]
 8006998:	f7fb ffc0 	bl	800291c <mg_call>
      if (c->recv.len != old_len) {
 800699c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80069a0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d01d      	beq.n	80069ec <http_cb+0x1d8>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
 80069b0:	4b99      	ldr	r3, [pc, #612]	@ (8006c18 <http_cb+0x404>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	dd10      	ble.n	80069da <http_cb+0x1c6>
 80069b8:	4b98      	ldr	r3, [pc, #608]	@ (8006c1c <http_cb+0x408>)
 80069ba:	f640 5264 	movw	r2, #3428	@ 0xd64
 80069be:	4998      	ldr	r1, [pc, #608]	@ (8006c20 <http_cb+0x40c>)
 80069c0:	2003      	movs	r0, #3
 80069c2:	f001 fab5 	bl	8007f30 <mg_log_prefix>
 80069c6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80069ca:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d2:	4619      	mov	r1, r3
 80069d4:	4894      	ldr	r0, [pc, #592]	@ (8006c28 <http_cb+0x414>)
 80069d6:	f001 fafb 	bl	8007fd0 <mg_log>
        c->pfn = NULL;
 80069da:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80069de:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        return;
 80069ea:	e292      	b.n	8006f12 <http_cb+0x6fe>
      }
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 80069ec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80069f0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b09      	cmp	r3, #9
 80069f8:	d128      	bne.n	8006a4c <http_cb+0x238>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 80069fa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80069fe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a06:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006a0a:	1ad2      	subs	r2, r2, r3
 8006a0c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a10:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006a14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8006a18:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a1c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006a20:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006a24:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8006a28:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 8006a2c:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8006a30:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8006a34:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 8006a38:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 8006a3c:	1a8a      	subs	r2, r1, r2
 8006a3e:	1a9a      	subs	r2, r3, r2
 8006a40:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a44:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006a48:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8006a4c:	f107 0310 	add.w	r3, r7, #16
 8006a50:	4976      	ldr	r1, [pc, #472]	@ (8006c2c <http_cb+0x418>)
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fd fca8 	bl	80043a8 <mg_http_get_header>
 8006a58:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
 8006a5c:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01d      	beq.n	8006aa0 <http_cb+0x28c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8006a64:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006a68:	4971      	ldr	r1, [pc, #452]	@ (8006c30 <http_cb+0x41c>)
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f008 f928 	bl	800ecc0 <mg_str_s>
 8006a70:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 8006a74:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006a78:	cb0c      	ldmia	r3, {r2, r3}
 8006a7a:	c903      	ldmia	r1, {r0, r1}
 8006a7c:	f008 f9e3 	bl	800ee46 <mg_strcasecmp>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <http_cb+0x27a>
          is_chunked = true;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 8006a8c:	e09f      	b.n	8006bce <http_cb+0x3ba>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8006a8e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006a92:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006a96:	4967      	ldr	r1, [pc, #412]	@ (8006c34 <http_cb+0x420>)
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	f7fb ff5f 	bl	800295c <mg_error>
          return;
 8006a9e:	e238      	b.n	8006f12 <http_cb+0x6fe>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8006aa0:	f107 0310 	add.w	r3, r7, #16
 8006aa4:	4964      	ldr	r1, [pc, #400]	@ (8006c38 <http_cb+0x424>)
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fd fc7e 	bl	80043a8 <mg_http_get_header>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f040 808d 	bne.w	8006bce <http_cb+0x3ba>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8006ab4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ab8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2205      	movs	r2, #5
 8006ac0:	495e      	ldr	r1, [pc, #376]	@ (8006c3c <http_cb+0x428>)
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fd f9e1 	bl	8003e8a <mg_ncasecmp>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bf0c      	ite	eq
 8006ace:	2301      	moveq	r3, #1
 8006ad0:	2300      	movne	r3, #0
 8006ad2:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
        bool require_content_len = false;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8006adc:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 8006ae0:	f083 0301 	eor.w	r3, r3, #1
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d030      	beq.n	8006b4c <http_cb+0x338>
 8006aea:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8006aee:	4954      	ldr	r1, [pc, #336]	@ (8006c40 <http_cb+0x42c>)
 8006af0:	4618      	mov	r0, r3
 8006af2:	f008 f8e5 	bl	800ecc0 <mg_str_s>
 8006af6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006afa:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 8006afe:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8006b02:	cb0c      	ldmia	r3, {r2, r3}
 8006b04:	c903      	ldmia	r1, {r0, r1}
 8006b06:	f008 f99e 	bl	800ee46 <mg_strcasecmp>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d012      	beq.n	8006b36 <http_cb+0x322>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8006b10:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8006b14:	494b      	ldr	r1, [pc, #300]	@ (8006c44 <http_cb+0x430>)
 8006b16:	4618      	mov	r0, r3
 8006b18:	f008 f8d2 	bl	800ecc0 <mg_str_s>
 8006b1c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006b20:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 8006b24:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8006b28:	cb0c      	ldmia	r3, {r2, r3}
 8006b2a:	c903      	ldmia	r1, {r0, r1}
 8006b2c:	f008 f98b 	bl	800ee46 <mg_strcasecmp>
 8006b30:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <http_cb+0x338>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 8006b3c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006b40:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006b44:	4413      	add	r3, r2
 8006b46:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8006b4a:	e022      	b.n	8006b92 <http_cb+0x37e>
        } else if (is_response) {
 8006b4c:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01e      	beq.n	8006b92 <http_cb+0x37e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 8006b54:	f107 0310 	add.w	r3, r7, #16
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff fd9c 	bl	8006696 <mg_http_status>
 8006b5e:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 8006b62:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8006b66:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b68:	dd0a      	ble.n	8006b80 <http_cb+0x36c>
 8006b6a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8006b6e:	2bcc      	cmp	r3, #204	@ 0xcc
 8006b70:	d006      	beq.n	8006b80 <http_cb+0x36c>
 8006b72:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8006b76:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8006b7a:	d001      	beq.n	8006b80 <http_cb+0x36c>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <http_cb+0x36e>
 8006b80:	2300      	movs	r3, #0
 8006b82:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 8006b86:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 8006b92:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d019      	beq.n	8006bce <http_cb+0x3ba>
          mg_http_reply(c, 411, "", "");
 8006b9a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006b9e:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 8006ba2:	4b29      	ldr	r3, [pc, #164]	@ (8006c48 <http_cb+0x434>)
 8006ba4:	4a28      	ldr	r2, [pc, #160]	@ (8006c48 <http_cb+0x434>)
 8006ba6:	f240 119b 	movw	r1, #411	@ 0x19b
 8006baa:	6800      	ldr	r0, [r0, #0]
 8006bac:	f7fe fc22 	bl	80053f4 <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8006bb0:	4b19      	ldr	r3, [pc, #100]	@ (8006c18 <http_cb+0x404>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	dd0a      	ble.n	8006bce <http_cb+0x3ba>
 8006bb8:	4b18      	ldr	r3, [pc, #96]	@ (8006c1c <http_cb+0x408>)
 8006bba:	f640 5287 	movw	r2, #3463	@ 0xd87
 8006bbe:	4918      	ldr	r1, [pc, #96]	@ (8006c20 <http_cb+0x40c>)
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	f001 f9b5 	bl	8007f30 <mg_log_prefix>
 8006bc6:	4921      	ldr	r1, [pc, #132]	@ (8006c4c <http_cb+0x438>)
 8006bc8:	4821      	ldr	r0, [pc, #132]	@ (8006c50 <http_cb+0x43c>)
 8006bca:	f001 fa01 	bl	8007fd0 <mg_log>
        }
      }

      if (is_chunked) {
 8006bce:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 80e7 	beq.w	8006da6 <http_cb+0x592>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 8006bd8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006bdc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006be4:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 8006be8:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006bec:	440b      	add	r3, r1
 8006bee:	4413      	add	r3, r2
 8006bf0:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006bfa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006bfe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c06:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8006c16:	e024      	b.n	8006c62 <http_cb+0x44e>
 8006c18:	24000240 	.word	0x24000240
 8006c1c:	08028f34 	.word	0x08028f34
 8006c20:	0802597c 	.word	0x0802597c
 8006c24:	080267d8 	.word	0x080267d8
 8006c28:	080267f0 	.word	0x080267f0
 8006c2c:	0802680c 	.word	0x0802680c
 8006c30:	08026820 	.word	0x08026820
 8006c34:	08026828 	.word	0x08026828
 8006c38:	08026844 	.word	0x08026844
 8006c3c:	08025db4 	.word	0x08025db4
 8006c40:	08025dc0 	.word	0x08025dc0
 8006c44:	08025dbc 	.word	0x08025dbc
 8006c48:	08026288 	.word	0x08026288
 8006c4c:	08026854 	.word	0x08026854
 8006c50:	08025d14 	.word	0x08025d14
 8006c54:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8006c58:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006c62:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006c66:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8006c6a:	18d0      	adds	r0, r2, r3
 8006c6c:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8006c70:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006c74:	1ad1      	subs	r1, r2, r3
 8006c76:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8006c7a:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8006c7e:	f7ff fd3a 	bl	80066f6 <skip_chunk>
 8006c82:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 8006c86:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dd03      	ble.n	8006c96 <http_cb+0x482>
 8006c8e:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1de      	bne.n	8006c54 <http_cb+0x440>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8006c96:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 8126 	beq.w	8006eec <http_cb+0x6d8>
        if (cl < 0) {
 8006ca0:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	da08      	bge.n	8006cba <http_cb+0x4a6>
          mg_error(c, "Invalid chunk");
 8006ca8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006cac:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006cb0:	499a      	ldr	r1, [pc, #616]	@ (8006f1c <http_cb+0x708>)
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	f7fb fe52 	bl	800295c <mg_error>
          break;
 8006cb8:	e11b      	b.n	8006ef2 <http_cb+0x6de>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006cc0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006cc4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006cce:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8006cd2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006cd6:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006cda:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8006cde:	e03e      	b.n	8006d5e <http_cb+0x54a>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8006ce0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ce4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006ce8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006cec:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8006cf0:	18d0      	adds	r0, r2, r3
 8006cf2:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006cf6:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8006d00:	4413      	add	r3, r2
 8006d02:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8006d06:	4619      	mov	r1, r3
 8006d08:	f01b f852 	bl	8021db0 <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8006d0c:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8006d10:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006d14:	4413      	add	r3, r2
 8006d16:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006d1a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006d1e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006d22:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006d26:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8006d2a:	441a      	add	r2, r3
 8006d2c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006d30:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006d34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006d38:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006d3c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006d40:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006d44:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8006d48:	441a      	add	r2, r3
 8006d4a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006d4e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006d52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 8006d56:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <http_cb+0x578>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8006d5e:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006d62:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8006d66:	18d0      	adds	r0, r2, r3
 8006d68:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8006d6c:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006d70:	1ad1      	subs	r1, r2, r3
 8006d72:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8006d76:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8006d7a:	f7ff fcbc 	bl	80066f6 <skip_chunk>
 8006d7e:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 8006d82:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	dcaa      	bgt.n	8006ce0 <http_cb+0x4cc>
 8006d8a:	e000      	b.n	8006d8e <http_cb+0x57a>
          if (dl == 0) break;
 8006d8c:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 8006d8e:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8006d92:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006d96:	4413      	add	r3, r2
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006d9e:	4413      	add	r3, r2
 8006da0:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8006da4:	e026      	b.n	8006df4 <http_cb+0x5e0>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 8006da6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006daa:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006db2:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006db6:	1ad2      	subs	r2, r2, r3
 8006db8:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        if (hm.body.len > len) break;  // Buffer more data
 8006dc2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006dc6:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006dca:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006dce:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	f0c0 808c 	bcc.w	8006ef0 <http_cb+0x6dc>
        ofs += (size_t) n + hm.body.len;
 8006dd8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ddc:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006de0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006de4:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006de8:	4413      	add	r3, r2
 8006dea:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006dee:	4413      	add	r3, r2
 8006df0:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8006df4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006df8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <http_cb+0x60e>
 8006e0c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006e10:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e1e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8006e22:	f107 0210 	add.w	r2, r7, #16
 8006e26:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006e2a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006e2e:	210b      	movs	r1, #11
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	f7fb fd73 	bl	800291c <mg_call>
      if (c->is_accepted && !c->is_resp) {
 8006e36:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006e3a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d034      	beq.n	8006eb8 <http_cb+0x6a4>
 8006e4e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006e52:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006e5c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d128      	bne.n	8006eb8 <http_cb+0x6a4>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8006e66:	f107 0310 	add.w	r3, r7, #16
 8006e6a:	492d      	ldr	r1, [pc, #180]	@ (8006f20 <http_cb+0x70c>)
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fd fa9b 	bl	80043a8 <mg_http_get_header>
 8006e72:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 8006e76:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d01c      	beq.n	8006eb8 <http_cb+0x6a4>
 8006e7e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8006e82:	4928      	ldr	r1, [pc, #160]	@ (8006f24 <http_cb+0x710>)
 8006e84:	4618      	mov	r0, r3
 8006e86:	f007 ff1b 	bl	800ecc0 <mg_str_s>
 8006e8a:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8006e8e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8006e92:	cb0c      	ldmia	r3, {r2, r3}
 8006e94:	c903      	ldmia	r1, {r0, r1}
 8006e96:	f007 ffd6 	bl	800ee46 <mg_strcasecmp>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <http_cb+0x6a4>
          c->is_draining = 1;  // honor "Connection: close"
 8006ea0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ea4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006eae:	f043 0310 	orr.w	r3, r3, #16
 8006eb2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 8006eb6:	e01c      	b.n	8006ef2 <http_cb+0x6de>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8006eb8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ebc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006ec6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d110      	bne.n	8006ef2 <http_cb+0x6de>
 8006ed0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006ed4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006edc:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	f4ff ace7 	bcc.w	80068b4 <http_cb+0xa0>
 8006ee6:	e004      	b.n	8006ef2 <http_cb+0x6de>
      if (n == 0) break;                 // Request is not buffered yet
 8006ee8:	bf00      	nop
 8006eea:	e002      	b.n	8006ef2 <http_cb+0x6de>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8006eec:	bf00      	nop
 8006eee:	e000      	b.n	8006ef2 <http_cb+0x6de>
        if (hm.body.len > len) break;  // Buffer more data
 8006ef0:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8006ef2:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00b      	beq.n	8006f12 <http_cb+0x6fe>
 8006efa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006efe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3338      	adds	r3, #56	@ 0x38
 8006f06:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 f91f 	bl	8007150 <mg_iobuf_del>
  }
  (void) ev_data;
}
 8006f12:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	08026878 	.word	0x08026878
 8006f20:	08026888 	.word	0x08026888
 8006f24:	08026894 	.word	0x08026894

08006f28 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f002 fd29 	bl	8009994 <mg_listen>
 8006f42:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <mg_http_listen+0x2a>
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	4a03      	ldr	r2, [pc, #12]	@ (8006f5c <mg_http_listen+0x34>)
 8006f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 8006f52:	697b      	ldr	r3, [r7, #20]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	08006815 	.word	0x08006815

08006f60 <roundup>:





static size_t roundup(size_t size, size_t align) {
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <roundup+0x26>
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	4413      	add	r3, r2
 8006f76:	1e5a      	subs	r2, r3, #1
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	fb02 f303 	mul.w	r3, r2, r3
 8006f84:	e000      	b.n	8006f88 <roundup+0x28>
 8006f86:	687b      	ldr	r3, [r7, #4]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8006f94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f98:	b088      	sub	sp, #32
 8006f9a:	af02      	add	r7, sp, #8
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6838      	ldr	r0, [r7, #0]
 8006fac:	f7ff ffd8 	bl	8006f60 <roundup>
 8006fb0:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d117      	bne.n	8006fe8 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f010 fcbe 	bl	8017944 <mg_bzero>
    free(io->buf);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f019 fc7b 	bl	80208c8 <free>
    io->buf = NULL;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	605a      	str	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	609a      	str	r2, [r3, #8]
 8006fe6:	e053      	b.n	8007090 <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d04e      	beq.n	8007090 <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	f019 fc43 	bl	8020880 <calloc>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d028      	beq.n	8007056 <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	4293      	cmp	r3, r2
 800700c:	bf28      	it	cs
 800700e:	4613      	movcs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <mg_iobuf_resize+0x9a>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d006      	beq.n	800702e <mg_iobuf_resize+0x9a>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4619      	mov	r1, r3
 8007028:	6938      	ldr	r0, [r7, #16]
 800702a:	f01a fec1 	bl	8021db0 <memmove>
      mg_bzero(io->buf, io->size);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f010 fc83 	bl	8017944 <mg_bzero>
      free(io->buf);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f019 fc40 	bl	80208c8 <free>
      io->buf = (unsigned char *) p;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	605a      	str	r2, [r3, #4]
 8007054:	e01c      	b.n	8007090 <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 800705a:	4b10      	ldr	r3, [pc, #64]	@ (800709c <mg_iobuf_resize+0x108>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	dd16      	ble.n	8007090 <mg_iobuf_resize+0xfc>
 8007062:	4b0f      	ldr	r3, [pc, #60]	@ (80070a0 <mg_iobuf_resize+0x10c>)
 8007064:	f640 6201 	movw	r2, #3585	@ 0xe01
 8007068:	490e      	ldr	r1, [pc, #56]	@ (80070a4 <mg_iobuf_resize+0x110>)
 800706a:	2001      	movs	r0, #1
 800706c:	f000 ff60 	bl	8007f30 <mg_log_prefix>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	4698      	mov	r8, r3
 8007078:	4691      	mov	r9, r2
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2200      	movs	r2, #0
 800707e:	461c      	mov	r4, r3
 8007080:	4615      	mov	r5, r2
 8007082:	e9cd 4500 	strd	r4, r5, [sp]
 8007086:	4642      	mov	r2, r8
 8007088:	464b      	mov	r3, r9
 800708a:	4807      	ldr	r0, [pc, #28]	@ (80070a8 <mg_iobuf_resize+0x114>)
 800708c:	f000 ffa0 	bl	8007fd0 <mg_log>
    }
  }
  return ok;
 8007090:	697b      	ldr	r3, [r7, #20]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800709c:	24000240 	.word	0x24000240
 80070a0:	08028f3c 	.word	0x08028f3c
 80070a4:	0802597c 	.word	0x0802597c
 80070a8:	080268d4 	.word	0x080268d4

080070ac <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	441a      	add	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	4619      	mov	r1, r3
 80070c8:	4610      	mov	r0, r2
 80070ca:	f7ff ff49 	bl	8006f60 <roundup>
 80070ce:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 80070d0:	6979      	ldr	r1, [r7, #20]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7ff ff5e 	bl	8006f94 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d001      	beq.n	80070e6 <mg_iobuf_add+0x3a>
 80070e2:	2300      	movs	r3, #0
 80070e4:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d210      	bcs.n	8007112 <mg_iobuf_add+0x66>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	440b      	add	r3, r1
 80070fa:	18d0      	adds	r0, r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	18d1      	adds	r1, r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	461a      	mov	r2, r3
 800710e:	f01a fe4f 	bl	8021db0 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <mg_iobuf_add+0x7e>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4413      	add	r3, r2
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4618      	mov	r0, r3
 8007126:	f01a fe43 	bl	8021db0 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	429a      	cmp	r2, r3
 8007132:	d902      	bls.n	800713a <mg_iobuf_add+0x8e>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	609a      	str	r2, [r3, #8]
  io->len += len;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	441a      	add	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	609a      	str	r2, [r3, #8]
  return len;
 8007146:	683b      	ldr	r3, [r7, #0]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	429a      	cmp	r2, r3
 8007164:	d902      	bls.n	800716c <mg_iobuf_del+0x1c>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	441a      	add	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	429a      	cmp	r2, r3
 8007178:	d904      	bls.n	8007184 <mg_iobuf_del+0x34>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d012      	beq.n	80071b2 <mg_iobuf_del+0x62>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	18d0      	adds	r0, r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	440b      	add	r3, r1
 800719e:	18d1      	adds	r1, r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	1ad2      	subs	r2, r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	f01a fdff 	bl	8021db0 <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <mg_iobuf_del+0x80>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6899      	ldr	r1, [r3, #8]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	1acb      	subs	r3, r1, r3
 80071c6:	4413      	add	r3, r2
 80071c8:	6879      	ldr	r1, [r7, #4]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f010 fbba 	bl	8017944 <mg_bzero>
  io->len -= len;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	1ad2      	subs	r2, r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	609a      	str	r2, [r3, #8]
  return len;
 80071dc:	687b      	ldr	r3, [r7, #4]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 80071ee:	2100      	movs	r1, #0
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff fecf 	bl	8006f94 <mg_iobuf_resize>
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <escapeseq+0x12>
 800720e:	4b04      	ldr	r3, [pc, #16]	@ (8007220 <escapeseq+0x20>)
 8007210:	e000      	b.n	8007214 <escapeseq+0x14>
 8007212:	4b04      	ldr	r3, [pc, #16]	@ (8007224 <escapeseq+0x24>)
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	080268e0 	.word	0x080268e0
 8007224:	080268e8 	.word	0x080268e8

08007228 <json_esc>:

static char json_esc(int c, int esc) {
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8007232:	6838      	ldr	r0, [r7, #0]
 8007234:	f7ff ffe4 	bl	8007200 <escapeseq>
 8007238:	6138      	str	r0, [r7, #16]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	bf0c      	ite	eq
 8007240:	2301      	moveq	r3, #1
 8007242:	2300      	movne	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff ffda 	bl	8007200 <escapeseq>
 800724c:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e010      	b.n	8007276 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4293      	cmp	r3, r2
 800725e:	d107      	bne.n	8007270 <json_esc+0x48>
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	461a      	mov	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	e007      	b.n	8007280 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	3301      	adds	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1ea      	bne.n	8007254 <json_esc+0x2c>
  }
  return 0;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	e02e      	b.n	80072f6 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80072a2:	d114      	bne.n	80072ce <mg_pass_string+0x46>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3301      	adds	r3, #1
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	dd0f      	ble.n	80072ce <mg_pass_string+0x46>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3301      	adds	r3, #1
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4413      	add	r3, r2
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2101      	movs	r1, #1
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff ffb4 	bl	8007228 <json_esc>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <mg_pass_string+0x46>
      i++;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3301      	adds	r3, #1
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	e010      	b.n	80072f0 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	4413      	add	r3, r2
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d102      	bne.n	80072e0 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 80072da:	f06f 0301 	mvn.w	r3, #1
 80072de:	e010      	b.n	8007302 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	4413      	add	r3, r2
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b22      	cmp	r3, #34	@ 0x22
 80072ea:	d101      	bne.n	80072f0 <mg_pass_string+0x68>
      return i;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	e008      	b.n	8007302 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3301      	adds	r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	dbcc      	blt.n	8007298 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 80072fe:	f06f 0301 	mvn.w	r3, #1
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	0000      	movs	r0, r0
 800730c:	0000      	movs	r0, r0
	...

08007310 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8007310:	b480      	push	{r7}
 8007312:	b091      	sub	sp, #68	@ 0x44
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	f04f 0300 	mov.w	r3, #0
 8007324:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 8007328:	2300      	movs	r3, #0
 800732a:	637b      	str	r3, [r7, #52]	@ 0x34
 800732c:	2301      	movs	r3, #1
 800732e:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 8007330:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	429a      	cmp	r2, r3
 8007336:	da0a      	bge.n	800734e <mg_atod+0x3e>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b2d      	cmp	r3, #45	@ 0x2d
 800733e:	d106      	bne.n	800734e <mg_atod+0x3e>
    sign = -1, i++;
 8007340:	f04f 33ff 	mov.w	r3, #4294967295
 8007344:	633b      	str	r3, [r7, #48]	@ 0x30
 8007346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007348:	3301      	adds	r3, #1
 800734a:	637b      	str	r3, [r7, #52]	@ 0x34
 800734c:	e00a      	b.n	8007364 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800734e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	429a      	cmp	r2, r3
 8007354:	da21      	bge.n	800739a <mg_atod+0x8a>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b2b      	cmp	r3, #43	@ 0x2b
 800735c:	d11d      	bne.n	800739a <mg_atod+0x8a>
    i++;
 800735e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007360:	3301      	adds	r3, #1
 8007362:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8007364:	e019      	b.n	800739a <mg_atod+0x8a>
    d *= 10.0;
 8007366:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800736a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800736e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007372:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 8007376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	3b30      	subs	r3, #48	@ 0x30
 8007380:	ee07 3a90 	vmov	s15, r3
 8007384:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007388:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800738c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007390:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8007394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007396:	3301      	adds	r3, #1
 8007398:	637b      	str	r3, [r7, #52]	@ 0x34
 800739a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	429a      	cmp	r2, r3
 80073a0:	da0b      	bge.n	80073ba <mg_atod+0xaa>
 80073a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80073ac:	d905      	bls.n	80073ba <mg_atod+0xaa>
 80073ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4413      	add	r3, r2
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b39      	cmp	r3, #57	@ 0x39
 80073b8:	d9d5      	bls.n	8007366 <mg_atod+0x56>
  }
  d *= sign;
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	ee07 3a90 	vmov	s15, r3
 80073c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073c4:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80073c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80073cc:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 80073d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	da51      	bge.n	800747c <mg_atod+0x16c>
 80073d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4413      	add	r3, r2
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80073e2:	d14b      	bne.n	800747c <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80073f0:	a36d      	add	r3, pc, #436	@ (adr r3, 80075a8 <mg_atod+0x298>)
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 80073fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fc:	3301      	adds	r3, #1
 80073fe:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8007400:	e01d      	b.n	800743e <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 8007402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4413      	add	r3, r2
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	3b30      	subs	r3, #48	@ 0x30
 800740c:	ee07 3a90 	vmov	s15, r3
 8007410:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007414:	ed97 7b08 	vldr	d7, [r7, #32]
 8007418:	ee26 7b07 	vmul.f64	d7, d6, d7
 800741c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8007420:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007424:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 8007428:	ed97 6b08 	vldr	d6, [r7, #32]
 800742c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8007430:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007434:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8007438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743a:	3301      	adds	r3, #1
 800743c:	637b      	str	r3, [r7, #52]	@ 0x34
 800743e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	429a      	cmp	r2, r3
 8007444:	da0b      	bge.n	800745e <mg_atod+0x14e>
 8007446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007450:	d905      	bls.n	800745e <mg_atod+0x14e>
 8007452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b39      	cmp	r3, #57	@ 0x39
 800745c:	d9d1      	bls.n	8007402 <mg_atod+0xf2>
    }
    d += frac * sign;
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	ee07 3a90 	vmov	s15, r3
 8007464:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007468:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800746c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007470:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8007474:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007478:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 800747c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	429a      	cmp	r2, r3
 8007482:	da7e      	bge.n	8007582 <mg_atod+0x272>
 8007484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	4413      	add	r3, r2
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b65      	cmp	r3, #101	@ 0x65
 800748e:	d005      	beq.n	800749c <mg_atod+0x18c>
 8007490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4413      	add	r3, r2
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b45      	cmp	r3, #69	@ 0x45
 800749a:	d172      	bne.n	8007582 <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	2300      	movs	r3, #0
 80074a2:	617b      	str	r3, [r7, #20]
    i++;
 80074a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a6:	3301      	adds	r3, #1
 80074a8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 80074aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	da0a      	bge.n	80074c8 <mg_atod+0x1b8>
 80074b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80074bc:	d104      	bne.n	80074c8 <mg_atod+0x1b8>
 80074be:	2301      	movs	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c4:	3301      	adds	r3, #1
 80074c6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 80074c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	da19      	bge.n	8007504 <mg_atod+0x1f4>
 80074d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4413      	add	r3, r2
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b2b      	cmp	r3, #43	@ 0x2b
 80074da:	d113      	bne.n	8007504 <mg_atod+0x1f4>
 80074dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074de:	3301      	adds	r3, #1
 80074e0:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 80074e2:	e00f      	b.n	8007504 <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	4619      	mov	r1, r3
 80074f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	637a      	str	r2, [r7, #52]	@ 0x34
 80074f6:	461a      	mov	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	3b30      	subs	r3, #48	@ 0x30
 8007500:	440b      	add	r3, r1
 8007502:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8007504:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	429a      	cmp	r2, r3
 800750a:	da0f      	bge.n	800752c <mg_atod+0x21c>
 800750c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4413      	add	r3, r2
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b2f      	cmp	r3, #47	@ 0x2f
 8007516:	d909      	bls.n	800752c <mg_atod+0x21c>
 8007518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4413      	add	r3, r2
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b39      	cmp	r3, #57	@ 0x39
 8007522:	d803      	bhi.n	800752c <mg_atod+0x21c>
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800752a:	dbdb      	blt.n	80074e4 <mg_atod+0x1d4>
    if (minus) exp = -exp;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <mg_atod+0x228>
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	425b      	negs	r3, r3
 8007536:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8007538:	2300      	movs	r3, #0
 800753a:	61fb      	str	r3, [r7, #28]
 800753c:	e00a      	b.n	8007554 <mg_atod+0x244>
 800753e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8007542:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007546:	ee27 7b06 	vmul.f64	d7, d7, d6
 800754a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	3301      	adds	r3, #1
 8007552:	61fb      	str	r3, [r7, #28]
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	429a      	cmp	r2, r3
 800755a:	dbf0      	blt.n	800753e <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800755c:	2300      	movs	r3, #0
 800755e:	61fb      	str	r3, [r7, #28]
 8007560:	e00a      	b.n	8007578 <mg_atod+0x268>
 8007562:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8007566:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800756a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800756e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	3301      	adds	r3, #1
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	425b      	negs	r3, r3
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	429a      	cmp	r2, r3
 8007580:	dbef      	blt.n	8007562 <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <mg_atod+0x27e>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800758c:	601a      	str	r2, [r3, #0]
  return d;
 800758e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007592:	ec43 2b17 	vmov	d7, r2, r3
}
 8007596:	eeb0 0b47 	vmov.f64	d0, d7
 800759a:	3744      	adds	r7, #68	@ 0x44
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	f3af 8000 	nop.w
 80075a8:	9999999a 	.word	0x9999999a
 80075ac:	3fb99999 	.word	0x3fb99999

080075b0 <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 80075b0:	b590      	push	{r4, r7, lr}
 80075b2:	b09b      	sub	sp, #108	@ 0x6c
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	f107 0408 	add.w	r4, r7, #8
 80075ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 80075d0:	2300      	movs	r3, #0
 80075d2:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 80075d4:	2300      	movs	r3, #0
 80075d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 80075d8:	2300      	movs	r3, #0
 80075da:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 80075dc:	2300      	movs	r3, #0
 80075de:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 80075e0:	2301      	movs	r3, #1
 80075e2:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 80075e4:	f04f 33ff 	mov.w	r3, #4294967295
 80075e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075ea:	f04f 33ff 	mov.w	r3, #4294967295
 80075ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <mg_json_get+0x4c>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b24      	cmp	r3, #36	@ 0x24
 8007602:	d002      	beq.n	800760a <mg_json_get+0x5a>
 8007604:	f06f 0301 	mvn.w	r3, #1
 8007608:	e308      	b.n	8007c1c <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 800760a:	2300      	movs	r3, #0
 800760c:	663b      	str	r3, [r7, #96]	@ 0x60
 800760e:	e2fe      	b.n	8007c0e <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 8007610:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007612:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007614:	4413      	add	r3, r2
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800761c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007620:	2b20      	cmp	r3, #32
 8007622:	f000 82ee 	beq.w	8007c02 <mg_json_get+0x652>
 8007626:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800762a:	2b09      	cmp	r3, #9
 800762c:	f000 82e9 	beq.w	8007c02 <mg_json_get+0x652>
 8007630:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007634:	2b0a      	cmp	r3, #10
 8007636:	f000 82e4 	beq.w	8007c02 <mg_json_get+0x652>
 800763a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800763e:	2b0d      	cmp	r3, #13
 8007640:	f000 82df 	beq.w	8007c02 <mg_json_get+0x652>
    switch (expecting) {
 8007644:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007648:	2b03      	cmp	r3, #3
 800764a:	f200 82dd 	bhi.w	8007c08 <mg_json_get+0x658>
 800764e:	a201      	add	r2, pc, #4	@ (adr r2, 8007654 <mg_json_get+0xa4>)
 8007650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007654:	08007665 	.word	0x08007665
 8007658:	0800794d 	.word	0x0800794d
 800765c:	08007adb 	.word	0x08007adb
 8007660:	08007af1 	.word	0x08007af1
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 8007664:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007668:	429a      	cmp	r2, r3
 800766a:	d101      	bne.n	8007670 <mg_json_get+0xc0>
 800766c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800766e:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 8007670:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007674:	2b7b      	cmp	r3, #123	@ 0x7b
 8007676:	d12b      	bne.n	80076d0 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8007678:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800767a:	2b1d      	cmp	r3, #29
 800767c:	dd02      	ble.n	8007684 <mg_json_get+0xd4>
 800767e:	f04f 33ff 	mov.w	r3, #4294967295
 8007682:	e2cb      	b.n	8007c1c <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8007684:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007688:	429a      	cmp	r2, r3
 800768a:	d114      	bne.n	80076b6 <mg_json_get+0x106>
 800768c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	4413      	add	r3, r2
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b2e      	cmp	r3, #46	@ 0x2e
 8007696:	d10e      	bne.n	80076b6 <mg_json_get+0x106>
 8007698:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800769a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800769c:	429a      	cmp	r2, r3
 800769e:	d10a      	bne.n	80076b6 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 80076a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076a2:	3301      	adds	r3, #1
 80076a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80076a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076a8:	3301      	adds	r3, #1
 80076aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80076ac:	f04f 33ff 	mov.w	r3, #4294967295
 80076b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 80076b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80076bc:	3368      	adds	r3, #104	@ 0x68
 80076be:	443b      	add	r3, r7
 80076c0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80076c4:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 80076c8:	2301      	movs	r3, #1
 80076ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 80076ce:	e29b      	b.n	8007c08 <mg_json_get+0x658>
        } else if (c == '[') {
 80076d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80076d4:	2b5b      	cmp	r3, #91	@ 0x5b
 80076d6:	d14e      	bne.n	8007776 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80076d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076da:	2b1d      	cmp	r3, #29
 80076dc:	dd02      	ble.n	80076e4 <mg_json_get+0x134>
 80076de:	f04f 33ff 	mov.w	r3, #4294967295
 80076e2:	e29b      	b.n	8007c1c <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 80076e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d13a      	bne.n	8007762 <mg_json_get+0x1b2>
 80076ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4413      	add	r3, r2
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b5b      	cmp	r3, #91	@ 0x5b
 80076f6:	d134      	bne.n	8007762 <mg_json_get+0x1b2>
 80076f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d130      	bne.n	8007762 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 8007700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007702:	3301      	adds	r3, #1
 8007704:	657b      	str	r3, [r7, #84]	@ 0x54
 8007706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007708:	3301      	adds	r3, #1
 800770a:	653b      	str	r3, [r7, #80]	@ 0x50
 800770c:	2300      	movs	r3, #0
 800770e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8007710:	2300      	movs	r3, #0
 8007712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007714:	e010      	b.n	8007738 <mg_json_get+0x188>
              ei *= 10;
 8007716:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 8007722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	4413      	add	r3, r2
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	3b30      	subs	r3, #48	@ 0x30
 800772c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800772e:	4413      	add	r3, r2
 8007730:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8007732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007734:	3301      	adds	r3, #1
 8007736:	653b      	str	r3, [r7, #80]	@ 0x50
 8007738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	4413      	add	r3, r2
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b5d      	cmp	r3, #93	@ 0x5d
 8007742:	d005      	beq.n	8007750 <mg_json_get+0x1a0>
 8007744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	4413      	add	r3, r2
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e2      	bne.n	8007716 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 8007750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	4413      	add	r3, r2
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <mg_json_get+0x1b2>
 800775c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800775e:	3301      	adds	r3, #1
 8007760:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 8007762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007768:	3368      	adds	r3, #104	@ 0x68
 800776a:	443b      	add	r3, r7
 800776c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007770:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 8007774:	e248      	b.n	8007c08 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 8007776:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800777a:	2b5d      	cmp	r3, #93	@ 0x5d
 800777c:	d13a      	bne.n	80077f4 <mg_json_get+0x244>
 800777e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007780:	2b00      	cmp	r3, #0
 8007782:	dd37      	ble.n	80077f4 <mg_json_get+0x244>
          MG_EOO(']');
 8007784:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007788:	429a      	cmp	r2, r3
 800778a:	d106      	bne.n	800779a <mg_json_get+0x1ea>
 800778c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800778e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007790:	429a      	cmp	r2, r3
 8007792:	d002      	beq.n	800779a <mg_json_get+0x1ea>
 8007794:	f06f 0302 	mvn.w	r3, #2
 8007798:	e240      	b.n	8007c1c <mg_json_get+0x66c>
 800779a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800779e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077a0:	3b01      	subs	r3, #1
 80077a2:	3368      	adds	r3, #104	@ 0x68
 80077a4:	443b      	add	r3, r7
 80077a6:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80077aa:	3302      	adds	r3, #2
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d002      	beq.n	80077b6 <mg_json_get+0x206>
 80077b0:	f06f 0301 	mvn.w	r3, #1
 80077b4:	e232      	b.n	8007c1c <mg_json_get+0x66c>
 80077b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077b8:	3b01      	subs	r3, #1
 80077ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077c0:	429a      	cmp	r2, r3
 80077c2:	f040 809c 	bne.w	80078fe <mg_json_get+0x34e>
 80077c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	4413      	add	r3, r2
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f040 8095 	bne.w	80078fe <mg_json_get+0x34e>
 80077d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077d8:	429a      	cmp	r2, r3
 80077da:	f040 8090 	bne.w	80078fe <mg_json_get+0x34e>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <mg_json_get+0x240>
 80077e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077f2:	e213      	b.n	8007c1c <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 80077f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80077f8:	2b74      	cmp	r3, #116	@ 0x74
 80077fa:	d113      	bne.n	8007824 <mg_json_get+0x274>
 80077fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077fe:	3303      	adds	r3, #3
 8007800:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007802:	429a      	cmp	r2, r3
 8007804:	dd0e      	ble.n	8007824 <mg_json_get+0x274>
 8007806:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800780a:	4413      	add	r3, r2
 800780c:	2204      	movs	r2, #4
 800780e:	4998      	ldr	r1, [pc, #608]	@ (8007a70 <mg_json_get+0x4c0>)
 8007810:	4618      	mov	r0, r3
 8007812:	f01a fabd 	bl	8021d90 <memcmp>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d103      	bne.n	8007824 <mg_json_get+0x274>
          i += 3;
 800781c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800781e:	3303      	adds	r3, #3
 8007820:	663b      	str	r3, [r7, #96]	@ 0x60
 8007822:	e06c      	b.n	80078fe <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8007824:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007828:	2b6e      	cmp	r3, #110	@ 0x6e
 800782a:	d113      	bne.n	8007854 <mg_json_get+0x2a4>
 800782c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800782e:	3303      	adds	r3, #3
 8007830:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007832:	429a      	cmp	r2, r3
 8007834:	dd0e      	ble.n	8007854 <mg_json_get+0x2a4>
 8007836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800783a:	4413      	add	r3, r2
 800783c:	2204      	movs	r2, #4
 800783e:	498d      	ldr	r1, [pc, #564]	@ (8007a74 <mg_json_get+0x4c4>)
 8007840:	4618      	mov	r0, r3
 8007842:	f01a faa5 	bl	8021d90 <memcmp>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <mg_json_get+0x2a4>
          i += 3;
 800784c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800784e:	3303      	adds	r3, #3
 8007850:	663b      	str	r3, [r7, #96]	@ 0x60
 8007852:	e054      	b.n	80078fe <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8007854:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007858:	2b66      	cmp	r3, #102	@ 0x66
 800785a:	d113      	bne.n	8007884 <mg_json_get+0x2d4>
 800785c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800785e:	3304      	adds	r3, #4
 8007860:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007862:	429a      	cmp	r2, r3
 8007864:	dd0e      	ble.n	8007884 <mg_json_get+0x2d4>
 8007866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007868:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800786a:	4413      	add	r3, r2
 800786c:	2205      	movs	r2, #5
 800786e:	4982      	ldr	r1, [pc, #520]	@ (8007a78 <mg_json_get+0x4c8>)
 8007870:	4618      	mov	r0, r3
 8007872:	f01a fa8d 	bl	8021d90 <memcmp>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d103      	bne.n	8007884 <mg_json_get+0x2d4>
          i += 4;
 800787c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800787e:	3304      	adds	r3, #4
 8007880:	663b      	str	r3, [r7, #96]	@ 0x60
 8007882:	e03c      	b.n	80078fe <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8007884:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007888:	2b2d      	cmp	r3, #45	@ 0x2d
 800788a:	d007      	beq.n	800789c <mg_json_get+0x2ec>
 800788c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007890:	2b2f      	cmp	r3, #47	@ 0x2f
 8007892:	d916      	bls.n	80078c2 <mg_json_get+0x312>
 8007894:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007898:	2b39      	cmp	r3, #57	@ 0x39
 800789a:	d812      	bhi.n	80078c2 <mg_json_get+0x312>
          int numlen = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 80078a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078a4:	18d0      	adds	r0, r2, r3
 80078a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	f107 0210 	add.w	r2, r7, #16
 80078b0:	4619      	mov	r1, r3
 80078b2:	f7ff fd2d 	bl	8007310 <mg_atod>
          i += numlen - 1;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80078bc:	4413      	add	r3, r2
 80078be:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 80078c0:	e01d      	b.n	80078fe <mg_json_get+0x34e>
        } else if (c == '"') {
 80078c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80078c6:	2b22      	cmp	r3, #34	@ 0x22
 80078c8:	d116      	bne.n	80078f8 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80078ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078cc:	3301      	adds	r3, #1
 80078ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078d0:	18d0      	adds	r0, r2, r3
 80078d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	4619      	mov	r1, r3
 80078dc:	f7ff fcd4 	bl	8007288 <mg_pass_string>
 80078e0:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 80078e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	da01      	bge.n	80078ec <mg_json_get+0x33c>
 80078e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ea:	e197      	b.n	8007c1c <mg_json_get+0x66c>
          i += n + 1;
 80078ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ee:	3301      	adds	r3, #1
 80078f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80078f2:	4413      	add	r3, r2
 80078f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80078f6:	e002      	b.n	80078fe <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 80078f8:	f06f 0301 	mvn.w	r3, #1
 80078fc:	e18e      	b.n	8007c1c <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 80078fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007902:	429a      	cmp	r2, r3
 8007904:	d114      	bne.n	8007930 <mg_json_get+0x380>
 8007906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	4413      	add	r3, r2
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10e      	bne.n	8007930 <mg_json_get+0x380>
 8007912:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007916:	429a      	cmp	r2, r3
 8007918:	d10a      	bne.n	8007930 <mg_json_get+0x380>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d005      	beq.n	800792c <mg_json_get+0x37c>
 8007920:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800792e:	e175      	b.n	8007c1c <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 8007930:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007934:	429a      	cmp	r2, r3
 8007936:	d105      	bne.n	8007944 <mg_json_get+0x394>
 8007938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800793a:	2b00      	cmp	r3, #0
 800793c:	db02      	blt.n	8007944 <mg_json_get+0x394>
 800793e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007940:	3301      	adds	r3, #1
 8007942:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 8007944:	2303      	movs	r3, #3
 8007946:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800794a:	e15d      	b.n	8007c08 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 800794c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007950:	2b22      	cmp	r3, #34	@ 0x22
 8007952:	d170      	bne.n	8007a36 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8007954:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007956:	3301      	adds	r3, #1
 8007958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800795a:	18d0      	adds	r0, r2, r3
 800795c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800795e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	3b01      	subs	r3, #1
 8007964:	4619      	mov	r1, r3
 8007966:	f7ff fc8f 	bl	8007288 <mg_pass_string>
 800796a:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 800796c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796e:	2b00      	cmp	r3, #0
 8007970:	da01      	bge.n	8007976 <mg_json_get+0x3c6>
 8007972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007974:	e152      	b.n	8007c1c <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8007976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797c:	4413      	add	r3, r2
 800797e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007980:	429a      	cmp	r2, r3
 8007982:	dc02      	bgt.n	800798a <mg_json_get+0x3da>
 8007984:	f06f 0302 	mvn.w	r3, #2
 8007988:	e148      	b.n	8007c1c <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 800798a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800798c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800798e:	429a      	cmp	r2, r3
 8007990:	da02      	bge.n	8007998 <mg_json_get+0x3e8>
 8007992:	f06f 0302 	mvn.w	r3, #2
 8007996:	e141      	b.n	8007c1c <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8007998:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800799a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800799c:	429a      	cmp	r2, r3
 800799e:	d109      	bne.n	80079b4 <mg_json_get+0x404>
 80079a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079a2:	3b01      	subs	r3, #1
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	4413      	add	r3, r2
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80079ac:	d002      	beq.n	80079b4 <mg_json_get+0x404>
 80079ae:	f06f 0302 	mvn.w	r3, #2
 80079b2:	e133      	b.n	8007c1c <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 80079b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d133      	bne.n	8007a24 <mg_json_get+0x474>
 80079bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079be:	3b01      	subs	r3, #1
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80079c8:	d12c      	bne.n	8007a24 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 80079ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079cc:	3301      	adds	r3, #1
 80079ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079d0:	18d0      	adds	r0, r2, r3
 80079d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079da:	4619      	mov	r1, r3
 80079dc:	f01a fa17 	bl	8021e0e <strncmp>
 80079e0:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d11e      	bne.n	8007a24 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80079e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ea:	4413      	add	r3, r2
 80079ec:	461a      	mov	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4413      	add	r3, r2
 80079f2:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d011      	beq.n	8007a1c <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80079f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fc:	4413      	add	r3, r2
 80079fe:	461a      	mov	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4413      	add	r3, r2
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a08:	d008      	beq.n	8007a1c <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 8007a0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0e:	4413      	add	r3, r2
 8007a10:	461a      	mov	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4413      	add	r3, r2
 8007a16:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8007a18:	2b5b      	cmp	r3, #91	@ 0x5b
 8007a1a:	d103      	bne.n	8007a24 <mg_json_get+0x474>
            pos += n;
 8007a1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a20:	4413      	add	r3, r2
 8007a22:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 8007a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a26:	3301      	adds	r3, #1
 8007a28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a2a:	4413      	add	r3, r2
 8007a2c:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 8007a2e:	2302      	movs	r3, #2
 8007a30:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8007a34:	e0e7      	b.n	8007c06 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 8007a36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a3a:	2b7d      	cmp	r3, #125	@ 0x7d
 8007a3c:	d14a      	bne.n	8007ad4 <mg_json_get+0x524>
          MG_EOO('}');
 8007a3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d106      	bne.n	8007a54 <mg_json_get+0x4a4>
 8007a46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d002      	beq.n	8007a54 <mg_json_get+0x4a4>
 8007a4e:	f06f 0302 	mvn.w	r3, #2
 8007a52:	e0e3      	b.n	8007c1c <mg_json_get+0x66c>
 8007a54:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007a58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	3368      	adds	r3, #104	@ 0x68
 8007a5e:	443b      	add	r3, r7
 8007a60:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8007a64:	3302      	adds	r3, #2
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d008      	beq.n	8007a7c <mg_json_get+0x4cc>
 8007a6a:	f06f 0301 	mvn.w	r3, #1
 8007a6e:	e0d5      	b.n	8007c1c <mg_json_get+0x66c>
 8007a70:	080268f4 	.word	0x080268f4
 8007a74:	080268fc 	.word	0x080268fc
 8007a78:	08026904 	.word	0x08026904
 8007a7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d114      	bne.n	8007ab4 <mg_json_get+0x504>
 8007a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	4413      	add	r3, r2
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10e      	bne.n	8007ab4 <mg_json_get+0x504>
 8007a96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d10a      	bne.n	8007ab4 <mg_json_get+0x504>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <mg_json_get+0x500>
 8007aa4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ab2:	e0b3      	b.n	8007c1c <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 8007aba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	f040 80a1 	bne.w	8007c06 <mg_json_get+0x656>
 8007ac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f2c0 809d 	blt.w	8007c06 <mg_json_get+0x656>
 8007acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ace:	3301      	adds	r3, #1
 8007ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 8007ad2:	e098      	b.n	8007c06 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 8007ad4:	f06f 0301 	mvn.w	r3, #1
 8007ad8:	e0a0      	b.n	8007c1c <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 8007ada:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007ade:	2b3a      	cmp	r3, #58	@ 0x3a
 8007ae0:	d103      	bne.n	8007aea <mg_json_get+0x53a>
          expecting = S_VALUE;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8007ae8:	e08e      	b.n	8007c08 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 8007aea:	f06f 0301 	mvn.w	r3, #1
 8007aee:	e095      	b.n	8007c1c <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 8007af0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	dc02      	bgt.n	8007afc <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 8007af6:	f06f 0301 	mvn.w	r3, #1
 8007afa:	e08f      	b.n	8007c1c <mg_json_get+0x66c>
        } else if (c == ',') {
 8007afc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b00:	2b2c      	cmp	r3, #44	@ 0x2c
 8007b02:	d10d      	bne.n	8007b20 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8007b04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b06:	3b01      	subs	r3, #1
 8007b08:	3368      	adds	r3, #104	@ 0x68
 8007b0a:	443b      	add	r3, r7
 8007b0c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8007b10:	2b7b      	cmp	r3, #123	@ 0x7b
 8007b12:	bf0c      	ite	eq
 8007b14:	2301      	moveq	r3, #1
 8007b16:	2300      	movne	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8007b1e:	e073      	b.n	8007c08 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 8007b20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b24:	2b5d      	cmp	r3, #93	@ 0x5d
 8007b26:	d003      	beq.n	8007b30 <mg_json_get+0x580>
 8007b28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b2c:	2b7d      	cmp	r3, #125	@ 0x7d
 8007b2e:	d163      	bne.n	8007bf8 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8007b30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d10d      	bne.n	8007b54 <mg_json_get+0x5a4>
 8007b38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b3c:	2b7d      	cmp	r3, #125	@ 0x7d
 8007b3e:	d109      	bne.n	8007b54 <mg_json_get+0x5a4>
 8007b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b42:	3b01      	subs	r3, #1
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	4413      	add	r3, r2
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b4c:	d102      	bne.n	8007b54 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 8007b4e:	f06f 0302 	mvn.w	r3, #2
 8007b52:	e063      	b.n	8007c1c <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8007b54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d10d      	bne.n	8007b78 <mg_json_get+0x5c8>
 8007b5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b60:	2b5d      	cmp	r3, #93	@ 0x5d
 8007b62:	d109      	bne.n	8007b78 <mg_json_get+0x5c8>
 8007b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b66:	3b01      	subs	r3, #1
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b2c      	cmp	r3, #44	@ 0x2c
 8007b70:	d102      	bne.n	8007b78 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 8007b72:	f06f 0302 	mvn.w	r3, #2
 8007b76:	e051      	b.n	8007c1c <mg_json_get+0x66c>
          MG_EOO('O');
 8007b78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d106      	bne.n	8007b8e <mg_json_get+0x5de>
 8007b80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d002      	beq.n	8007b8e <mg_json_get+0x5de>
 8007b88:	f06f 0302 	mvn.w	r3, #2
 8007b8c:	e046      	b.n	8007c1c <mg_json_get+0x66c>
 8007b8e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b94:	3b01      	subs	r3, #1
 8007b96:	3368      	adds	r3, #104	@ 0x68
 8007b98:	443b      	add	r3, r7
 8007b9a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8007b9e:	3302      	adds	r3, #2
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d002      	beq.n	8007baa <mg_json_get+0x5fa>
 8007ba4:	f06f 0301 	mvn.w	r3, #1
 8007ba8:	e038      	b.n	8007c1c <mg_json_get+0x66c>
 8007baa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007bac:	3b01      	subs	r3, #1
 8007bae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d114      	bne.n	8007be2 <mg_json_get+0x632>
 8007bb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10e      	bne.n	8007be2 <mg_json_get+0x632>
 8007bc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d10a      	bne.n	8007be2 <mg_json_get+0x632>
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <mg_json_get+0x62e>
 8007bd2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007bd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007be0:	e01c      	b.n	8007c1c <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 8007be2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d109      	bne.n	8007bfe <mg_json_get+0x64e>
 8007bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	db06      	blt.n	8007bfe <mg_json_get+0x64e>
 8007bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bf6:	e002      	b.n	8007bfe <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 8007bf8:	f06f 0301 	mvn.w	r3, #1
 8007bfc:	e00e      	b.n	8007c1c <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 8007bfe:	bf00      	nop
        break;
 8007c00:	e002      	b.n	8007c08 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8007c02:	bf00      	nop
 8007c04:	e000      	b.n	8007c08 <mg_json_get+0x658>
        break;
 8007c06:	bf00      	nop
  for (i = 0; i < len; i++) {
 8007c08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c12:	429a      	cmp	r2, r3
 8007c14:	f6ff acfc 	blt.w	8007610 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8007c18:	f06f 0302 	mvn.w	r3, #2
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	376c      	adds	r7, #108	@ 0x6c
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd90      	pop	{r4, r7, pc}

08007c24 <mg_json_get_tok>:

struct mg_str mg_json_get_tok(struct mg_str json, const char *path) {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	1d38      	adds	r0, r7, #4
 8007c2e:	e880 0006 	stmia.w	r0, {r1, r2}
 8007c32:	603b      	str	r3, [r7, #0]
  int len = 0, ofs = mg_json_get(json, path, &len);
 8007c34:	2300      	movs	r3, #0
 8007c36:	613b      	str	r3, [r7, #16]
 8007c38:	f107 0310 	add.w	r3, r7, #16
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	1d39      	adds	r1, r7, #4
 8007c40:	c903      	ldmia	r1, {r0, r1}
 8007c42:	f7ff fcb5 	bl	80075b0 <mg_json_get>
 8007c46:	6178      	str	r0, [r7, #20]
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	db03      	blt.n	8007c56 <mg_json_get_tok+0x32>
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	4413      	add	r3, r2
 8007c54:	e000      	b.n	8007c58 <mg_json_get_tok+0x34>
 8007c56:	2300      	movs	r3, #0
                  (size_t) (len < 0 ? 0 : len));
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	4619      	mov	r1, r3
 8007c62:	f007 f84a 	bl	800ecfa <mg_str_n>
}
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8007c6e:	b590      	push	{r4, r7, lr}
 8007c70:	b089      	sub	sp, #36	@ 0x24
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	f107 0408 	add.w	r4, r7, #8
 8007c78:	e884 0003 	stmia.w	r4, {r0, r1}
 8007c7c:	607a      	str	r2, [r7, #4]
 8007c7e:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8007c84:	f107 0314 	add.w	r3, r7, #20
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	f107 0108 	add.w	r1, r7, #8
 8007c8e:	c903      	ldmia	r1, {r0, r1}
 8007c90:	f7ff fc8e 	bl	80075b0 <mg_json_get>
 8007c94:	61b8      	str	r0, [r7, #24]
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	db23      	blt.n	8007ce4 <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8007ca4:	2b2d      	cmp	r3, #45	@ 0x2d
 8007ca6:	d00b      	beq.n	8007cc0 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	4413      	add	r3, r2
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b2f      	cmp	r3, #47	@ 0x2f
 8007cb2:	d917      	bls.n	8007ce4 <mg_json_get_num+0x76>
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	4413      	add	r3, r2
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b39      	cmp	r3, #57	@ 0x39
 8007cbe:	d811      	bhi.n	8007ce4 <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00c      	beq.n	8007ce0 <mg_json_get_num+0x72>
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	4413      	add	r3, r2
 8007ccc:	6979      	ldr	r1, [r7, #20]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff fb1d 	bl	8007310 <mg_atod>
 8007cd6:	eeb0 7b40 	vmov.f64	d7, d0
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	61fb      	str	r3, [r7, #28]
  }
  return found;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	bf14      	ite	ne
 8007cea:	2301      	movne	r3, #1
 8007cec:	2300      	moveq	r3, #0
 8007cee:	b2db      	uxtb	r3, r3
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3724      	adds	r7, #36	@ 0x24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd90      	pop	{r4, r7, pc}

08007cf8 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8007cf8:	b590      	push	{r4, r7, lr}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	f107 0408 	add.w	r4, r7, #8
 8007d02:	e884 0003 	stmia.w	r4, {r0, r1}
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	f107 0108 	add.w	r1, r7, #8
 8007d16:	c903      	ldmia	r1, {r0, r1}
 8007d18:	f7ff fc4a 	bl	80075b0 <mg_json_get>
 8007d1c:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	db1b      	blt.n	8007d5c <mg_json_get_bool+0x64>
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	4413      	add	r3, r2
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b74      	cmp	r3, #116	@ 0x74
 8007d2e:	d005      	beq.n	8007d3c <mg_json_get_bool+0x44>
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	4413      	add	r3, r2
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b66      	cmp	r3, #102	@ 0x66
 8007d3a:	d10f      	bne.n	8007d5c <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <mg_json_get_bool+0x60>
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4413      	add	r3, r2
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	2b74      	cmp	r3, #116	@ 0x74
 8007d4c:	bf0c      	ite	eq
 8007d4e:	2301      	moveq	r3, #1
 8007d50:	2300      	movne	r3, #0
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	701a      	strb	r2, [r3, #0]
    found = 1;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
  }
  return found;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bf14      	ite	ne
 8007d62:	2301      	movne	r3, #1
 8007d64:	2300      	moveq	r3, #0
 8007d66:	b2db      	uxtb	r3, r3
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	371c      	adds	r7, #28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd90      	pop	{r4, r7, pc}

08007d70 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8007d70:	b590      	push	{r4, r7, lr}
 8007d72:	b08d      	sub	sp, #52	@ 0x34
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	f107 0408 	add.w	r4, r7, #8
 8007d7a:	e884 0003 	stmia.w	r4, {r0, r1}
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8007d82:	2300      	movs	r3, #0
 8007d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d86:	2300      	movs	r3, #0
 8007d88:	623b      	str	r3, [r7, #32]
 8007d8a:	e064      	b.n	8007e56 <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d90:	4413      	add	r3, r2
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b5c      	cmp	r3, #92	@ 0x5c
 8007d96:	d12c      	bne.n	8007df2 <mg_json_unescape+0x82>
 8007d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9a:	1d5a      	adds	r2, r3, #5
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d227      	bcs.n	8007df2 <mg_json_unescape+0x82>
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	3301      	adds	r3, #1
 8007da8:	4413      	add	r3, r2
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b75      	cmp	r3, #117	@ 0x75
 8007dae:	d120      	bne.n	8007df2 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db4:	3302      	adds	r3, #2
 8007db6:	18d1      	adds	r1, r2, r3
 8007db8:	f107 0314 	add.w	r3, r7, #20
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f006 ff9b 	bl	800ecfa <mg_str_n>
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	4413      	add	r3, r2
 8007dca:	2201      	movs	r2, #1
 8007dcc:	9200      	str	r2, [sp, #0]
 8007dce:	2210      	movs	r2, #16
 8007dd0:	f107 0114 	add.w	r1, r7, #20
 8007dd4:	c903      	ldmia	r1, {r0, r1}
 8007dd6:	f007 f9ce 	bl	800f176 <mg_str_to_num>
 8007dda:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 8007ddc:	f083 0301 	eor.w	r3, r3, #1
 8007de0:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <mg_json_unescape+0x7a>
        return false;
 8007de6:	2300      	movs	r3, #0
 8007de8:	e04c      	b.n	8007e84 <mg_json_unescape+0x114>
      i += 5;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	3305      	adds	r3, #5
 8007dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8007df0:	e02b      	b.n	8007e4a <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df6:	4413      	add	r3, r2
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b5c      	cmp	r3, #92	@ 0x5c
 8007dfc:	d11d      	bne.n	8007e3a <mg_json_unescape+0xca>
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d218      	bcs.n	8007e3a <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	4413      	add	r3, r2
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2100      	movs	r1, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff fa07 	bl	8007228 <json_esc>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 8007e1e:	7ffb      	ldrb	r3, [r7, #31]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <mg_json_unescape+0xb8>
 8007e24:	2300      	movs	r3, #0
 8007e26:	e02d      	b.n	8007e84 <mg_json_unescape+0x114>
      to[j] = c;
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	7ffa      	ldrb	r2, [r7, #31]
 8007e30:	701a      	strb	r2, [r3, #0]
      i++;
 8007e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e34:	3301      	adds	r3, #1
 8007e36:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8007e38:	e007      	b.n	8007e4a <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3e:	441a      	add	r2, r3
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	440b      	add	r3, r1
 8007e46:	7812      	ldrb	r2, [r2, #0]
 8007e48:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	3301      	adds	r3, #1
 8007e54:	623b      	str	r3, [r7, #32]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d203      	bcs.n	8007e66 <mg_json_unescape+0xf6>
 8007e5e:	6a3a      	ldr	r2, [r7, #32]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d392      	bcc.n	8007d8c <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 8007e66:	6a3a      	ldr	r2, [r7, #32]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d301      	bcc.n	8007e72 <mg_json_unescape+0x102>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e008      	b.n	8007e84 <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d004      	beq.n	8007e82 <mg_json_unescape+0x112>
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	701a      	strb	r2, [r3, #0]
  return true;
 8007e82:	2301      	movs	r3, #1
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	372c      	adds	r7, #44	@ 0x2c
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd90      	pop	{r4, r7, pc}

08007e8c <mg_json_get_long>:
    if (slen != NULL) *slen = len / 2 - 1;
  }
  return result;
}

long mg_json_get_long(struct mg_str json, const char *path, long dflt) {
 8007e8c:	b590      	push	{r4, r7, lr}
 8007e8e:	b089      	sub	sp, #36	@ 0x24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	f107 0408 	add.w	r4, r7, #8
 8007e96:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
  double dv;
  long result = dflt;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	61fb      	str	r3, [r7, #28]
  if (mg_json_get_num(json, path, &dv)) result = (long) dv;
 8007ea2:	f107 0310 	add.w	r3, r7, #16
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	f107 0108 	add.w	r1, r7, #8
 8007eac:	c903      	ldmia	r1, {r0, r1}
 8007eae:	f7ff fede 	bl	8007c6e <mg_json_get_num>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d006      	beq.n	8007ec6 <mg_json_get_long+0x3a>
 8007eb8:	ed97 7b04 	vldr	d7, [r7, #16]
 8007ebc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007ec0:	ee17 3a90 	vmov	r3, s15
 8007ec4:	61fb      	str	r3, [r7, #28]
  return result;
 8007ec6:	69fb      	ldr	r3, [r7, #28]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3724      	adds	r7, #36	@ 0x24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd90      	pop	{r4, r7, pc}

08007ed0 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8007eda:	4b05      	ldr	r3, [pc, #20]	@ (8007ef0 <logc+0x20>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a05      	ldr	r2, [pc, #20]	@ (8007ef4 <logc+0x24>)
 8007ee0:	6811      	ldr	r1, [r2, #0]
 8007ee2:	79fa      	ldrb	r2, [r7, #7]
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4798      	blx	r3
}
 8007ee8:	bf00      	nop
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	24000244 	.word	0x24000244
 8007ef4:	24000d84 	.word	0x24000d84

08007ef8 <logs>:

static void logs(const char *buf, size_t len) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	e009      	b.n	8007f1c <logs+0x24>
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff ffdd 	bl	8007ed0 <logc>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d3f1      	bcc.n	8007f08 <logs+0x10>
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8007f30:	b590      	push	{r4, r7, lr}
 8007f32:	b099      	sub	sp, #100	@ 0x64
 8007f34:	af06      	add	r7, sp, #24
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 8007f3e:	212f      	movs	r1, #47	@ 0x2f
 8007f40:	68b8      	ldr	r0, [r7, #8]
 8007f42:	f019 ff89 	bl	8021e58 <strrchr>
 8007f46:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 8007f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <mg_log_prefix+0x28>
 8007f4e:	215c      	movs	r1, #92	@ 0x5c
 8007f50:	68b8      	ldr	r0, [r7, #8]
 8007f52:	f019 ff81 	bl	8021e58 <strrchr>
 8007f56:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8007f58:	f7f9 f812 	bl	8000f80 <mg_millis>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007f62:	2900      	cmp	r1, #0
 8007f64:	d002      	beq.n	8007f6c <mg_log_prefix+0x3c>
 8007f66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007f68:	3101      	adds	r1, #1
 8007f6a:	e000      	b.n	8007f6e <mg_log_prefix+0x3e>
 8007f6c:	68b9      	ldr	r1, [r7, #8]
 8007f6e:	f107 0414 	add.w	r4, r7, #20
 8007f72:	6838      	ldr	r0, [r7, #0]
 8007f74:	9005      	str	r0, [sp, #20]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	9004      	str	r0, [sp, #16]
 8007f7a:	9103      	str	r1, [sp, #12]
 8007f7c:	68f9      	ldr	r1, [r7, #12]
 8007f7e:	9102      	str	r1, [sp, #8]
 8007f80:	e9cd 2300 	strd	r2, r3, [sp]
 8007f84:	4a11      	ldr	r2, [pc, #68]	@ (8007fcc <mg_log_prefix+0x9c>)
 8007f86:	2129      	movs	r1, #41	@ 0x29
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f005 fb87 	bl	800d69c <mg_snprintf>
 8007f8e:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8007f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f92:	2b27      	cmp	r3, #39	@ 0x27
 8007f94:	d90a      	bls.n	8007fac <mg_log_prefix+0x7c>
 8007f96:	2327      	movs	r3, #39	@ 0x27
 8007f98:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 8007f9a:	e007      	b.n	8007fac <mg_log_prefix+0x7c>
 8007f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fa2:	3348      	adds	r3, #72	@ 0x48
 8007fa4:	443b      	add	r3, r7
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f803 2c34 	strb.w	r2, [r3, #-52]
 8007fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fae:	2b28      	cmp	r3, #40	@ 0x28
 8007fb0:	d9f4      	bls.n	8007f9c <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 8007fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fb4:	1e5a      	subs	r2, r3, #1
 8007fb6:	f107 0314 	add.w	r3, r7, #20
 8007fba:	4611      	mov	r1, r2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff ff9b 	bl	8007ef8 <logs>
}
 8007fc2:	bf00      	nop
 8007fc4:	374c      	adds	r7, #76	@ 0x4c
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd90      	pop	{r4, r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	0802690c 	.word	0x0802690c

08007fd0 <mg_log>:

void mg_log(const char *fmt, ...) {
 8007fd0:	b40f      	push	{r0, r1, r2, r3}
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b082      	sub	sp, #8
 8007fd6:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 8007fd8:	f107 0314 	add.w	r3, r7, #20
 8007fdc:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8007fde:	4b09      	ldr	r3, [pc, #36]	@ (8008004 <mg_log+0x34>)
 8007fe0:	6818      	ldr	r0, [r3, #0]
 8007fe2:	4b09      	ldr	r3, [pc, #36]	@ (8008008 <mg_log+0x38>)
 8007fe4:	6819      	ldr	r1, [r3, #0]
 8007fe6:	1d3b      	adds	r3, r7, #4
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	f7fb f965 	bl	80032b8 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 8007fee:	2102      	movs	r1, #2
 8007ff0:	4806      	ldr	r0, [pc, #24]	@ (800800c <mg_log+0x3c>)
 8007ff2:	f7ff ff81 	bl	8007ef8 <logs>
}
 8007ff6:	bf00      	nop
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008000:	b004      	add	sp, #16
 8008002:	4770      	bx	lr
 8008004:	24000244 	.word	0x24000244
 8008008:	24000d84 	.word	0x24000d84
 800800c:	08025d90 	.word	0x08025d90

08008010 <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b09      	cmp	r3, #9
 800801c:	d804      	bhi.n	8008028 <nibble+0x18>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	3330      	adds	r3, #48	@ 0x30
 8008024:	b2db      	uxtb	r3, r3
 8008026:	e003      	b.n	8008030 <nibble+0x20>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	3357      	adds	r3, #87	@ 0x57
 800802e:	b2db      	uxtb	r3, r3
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 800803c:	b580      	push	{r7, lr}
 800803e:	b08a      	sub	sp, #40	@ 0x28
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 8008050:	2300      	movs	r3, #0
 8008052:	623b      	str	r3, [r7, #32]
 8008054:	e07a      	b.n	800814c <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	2b00      	cmp	r3, #0
 800805e:	d13a      	bne.n	80080d6 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00f      	beq.n	8008086 <mg_hexdump+0x4a>
 8008066:	2102      	movs	r1, #2
 8008068:	484c      	ldr	r0, [pc, #304]	@ (800819c <mg_hexdump+0x160>)
 800806a:	f7ff ff45 	bl	8007ef8 <logs>
 800806e:	f107 030c 	add.w	r3, r7, #12
 8008072:	2110      	movs	r1, #16
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff ff3f 	bl	8007ef8 <logs>
 800807a:	200a      	movs	r0, #10
 800807c:	f7ff ff28 	bl	8007ed0 <logc>
 8008080:	2300      	movs	r3, #0
 8008082:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	0b1b      	lsrs	r3, r3, #12
 800808a:	f003 030f 	and.w	r3, r3, #15
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff ffbe 	bl	8008010 <nibble>
 8008094:	4603      	mov	r3, r0
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff ff1a 	bl	8007ed0 <logc>
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	0a1b      	lsrs	r3, r3, #8
 80080a0:	f003 030f 	and.w	r3, r3, #15
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff ffb3 	bl	8008010 <nibble>
 80080aa:	4603      	mov	r3, r0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7ff ff0f 	bl	8007ed0 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	091b      	lsrs	r3, r3, #4
 80080b6:	f003 030f 	and.w	r3, r3, #15
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7ff ffa8 	bl	8008010 <nibble>
 80080c0:	4603      	mov	r3, r0
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7ff ff04 	bl	8007ed0 <logc>
 80080c8:	2030      	movs	r0, #48	@ 0x30
 80080ca:	f7ff ff01 	bl	8007ed0 <logc>
 80080ce:	2103      	movs	r1, #3
 80080d0:	4833      	ldr	r0, [pc, #204]	@ (80081a0 <mg_hexdump+0x164>)
 80080d2:	f7ff ff11 	bl	8007ef8 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	4413      	add	r3, r2
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	091b      	lsrs	r3, r3, #4
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff ff94 	bl	8008010 <nibble>
 80080e8:	4603      	mov	r3, r0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff fef0 	bl	8007ed0 <logc>
 80080f0:	69fa      	ldr	r2, [r7, #28]
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	4413      	add	r3, r2
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	f003 030f 	and.w	r3, r3, #15
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff ff87 	bl	8008010 <nibble>
 8008102:	4603      	mov	r3, r0
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff fee3 	bl	8007ed0 <logc>
    logc(' ');                                         // Space after hex number
 800810a:	2020      	movs	r0, #32
 800810c:	f7ff fee0 	bl	8007ed0 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	4413      	add	r3, r2
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	2b1f      	cmp	r3, #31
 800811a:	d90a      	bls.n	8008132 <mg_hexdump+0xf6>
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	4413      	add	r3, r2
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b7e      	cmp	r3, #126	@ 0x7e
 8008126:	d804      	bhi.n	8008132 <mg_hexdump+0xf6>
 8008128:	69fa      	ldr	r2, [r7, #28]
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	4413      	add	r3, r2
 800812e:	781a      	ldrb	r2, [r3, #0]
 8008130:	e000      	b.n	8008134 <mg_hexdump+0xf8>
 8008132:	222e      	movs	r2, #46	@ 0x2e
 8008134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008138:	1c59      	adds	r1, r3, #1
 800813a:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 800813e:	3328      	adds	r3, #40	@ 0x28
 8008140:	443b      	add	r3, r7
 8008142:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	3301      	adds	r3, #1
 800814a:	623b      	str	r3, [r7, #32]
 800814c:	6a3a      	ldr	r2, [r7, #32]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	429a      	cmp	r2, r3
 8008152:	d380      	bcc.n	8008056 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8008154:	e00d      	b.n	8008172 <mg_hexdump+0x136>
 8008156:	2103      	movs	r1, #3
 8008158:	4811      	ldr	r0, [pc, #68]	@ (80081a0 <mg_hexdump+0x164>)
 800815a:	f7ff fecd 	bl	8007ef8 <logs>
 800815e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8008168:	3328      	adds	r3, #40	@ 0x28
 800816a:	443b      	add	r3, r7
 800816c:	2220      	movs	r2, #32
 800816e:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8008172:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008176:	2b0f      	cmp	r3, #15
 8008178:	d9ed      	bls.n	8008156 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 800817a:	2102      	movs	r1, #2
 800817c:	4807      	ldr	r0, [pc, #28]	@ (800819c <mg_hexdump+0x160>)
 800817e:	f7ff febb 	bl	8007ef8 <logs>
 8008182:	f107 030c 	add.w	r3, r7, #12
 8008186:	2110      	movs	r1, #16
 8008188:	4618      	mov	r0, r3
 800818a:	f7ff feb5 	bl	8007ef8 <logs>
 800818e:	200a      	movs	r0, #10
 8008190:	f7ff fe9e 	bl	8007ed0 <logc>
}
 8008194:	bf00      	nop
 8008196:	3728      	adds	r7, #40	@ 0x28
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	08026920 	.word	0x08026920
 80081a0:	08026924 	.word	0x08026924

080081a4 <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b088      	sub	sp, #32
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	607b      	str	r3, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	72fb      	strb	r3, [r7, #11]
 80081b2:	4613      	mov	r3, r2
 80081b4:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 80081b6:	f107 0314 	add.w	r3, r7, #20
 80081ba:	3301      	adds	r3, #1
 80081bc:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 80081be:	7afb      	ldrb	r3, [r7, #11]
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	b25a      	sxtb	r2, r3
 80081c4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	b25b      	sxtb	r3, r3
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	09db      	lsrs	r3, r3, #7
 80081e2:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d006      	beq.n	80081f8 <mg_mqtt_send_header+0x54>
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	701a      	strb	r2, [r3, #0]
    vlen++;
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	3301      	adds	r3, #1
 80081fc:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <mg_mqtt_send_header+0x6c>
 8008204:	f107 0314 	add.w	r3, r7, #20
 8008208:	3305      	adds	r3, #5
 800820a:	69fa      	ldr	r2, [r7, #28]
 800820c:	429a      	cmp	r2, r3
 800820e:	d3df      	bcc.n	80081d0 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 8008210:	f107 0314 	add.w	r3, r7, #20
 8008214:	69fa      	ldr	r2, [r7, #28]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	461a      	mov	r2, r3
 800821a:	f107 0314 	add.w	r3, r7, #20
 800821e:	4619      	mov	r1, r3
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f004 ff0f 	bl	800d044 <mg_send>
}
 8008226:	bf00      	nop
 8008228:	3720      	adds	r7, #32
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 800822e:	b580      	push	{r7, lr}
 8008230:	b082      	sub	sp, #8
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	460b      	mov	r3, r1
 8008238:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 800823a:	1cbb      	adds	r3, r7, #2
 800823c:	2202      	movs	r2, #2
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f004 feff 	bl	800d044 <mg_send>
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 8008258:	463b      	mov	r3, r7
 800825a:	2204      	movs	r2, #4
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f004 fef0 	bl	800d044 <mg_send>
}
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <varint_size>:

static uint8_t varint_size(size_t length) {
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	3301      	adds	r3, #1
 800827c:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	09db      	lsrs	r3, r3, #7
 8008282:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f6      	bne.n	8008278 <varint_size+0xc>
  return bytes_needed;
 800828a:	7bfb      	ldrb	r3, [r7, #15]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t b = (uint8_t) (value % 128);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082ae:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	09db      	lsrs	r3, r3, #7
 80082b4:	603b      	str	r3, [r7, #0]
    if (value > 0) b |= 0x80;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <encode_varint+0x2c>
 80082bc:	7afb      	ldrb	r3, [r7, #11]
 80082be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80082c2:	72fb      	strb	r3, [r7, #11]
    buf[len++] = b;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	60fa      	str	r2, [r7, #12]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	7afa      	ldrb	r2, [r7, #11]
 80082d0:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e6      	bne.n	80082a6 <encode_varint+0xe>

  return len;
 80082d8:	68fb      	ldr	r3, [r7, #12]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 80082e6:	b480      	push	{r7}
 80082e8:	b089      	sub	sp, #36	@ 0x24
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 80082f2:	2301      	movs	r3, #1
 80082f4:	61fb      	str	r3, [r7, #28]
  *value = 0;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 80082fc:	2300      	movs	r3, #0
 80082fe:	61bb      	str	r3, [r7, #24]
 8008300:	e01c      	b.n	800833c <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	4413      	add	r3, r2
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	7dfb      	ldrb	r3, [r7, #23]
 8008312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008316:	69f9      	ldr	r1, [r7, #28]
 8008318:	fb01 f303 	mul.w	r3, r1, r3
 800831c:	441a      	add	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	01db      	lsls	r3, r3, #7
 8008326:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8008328:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800832c:	2b00      	cmp	r3, #0
 800832e:	db02      	blt.n	8008336 <decode_varint+0x50>
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	3301      	adds	r3, #1
 8008334:	e00a      	b.n	800834c <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	3301      	adds	r3, #1
 800833a:	61bb      	str	r3, [r7, #24]
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	2b03      	cmp	r3, #3
 8008340:	d803      	bhi.n	800834a <decode_varint+0x64>
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	429a      	cmp	r2, r3
 8008348:	d3db      	bcc.n	8008302 <decode_varint+0x1c>
  }

  return 0;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3724      	adds	r7, #36	@ 0x24
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 8008362:	231b      	movs	r3, #27
 8008364:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]
 800836a:	e00f      	b.n	800838c <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 800836c:	4a0d      	ldr	r2, [pc, #52]	@ (80083a4 <mqtt_prop_type_by_id+0x4c>)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008374:	79fa      	ldrb	r2, [r7, #7]
 8008376:	429a      	cmp	r2, r3
 8008378:	d105      	bne.n	8008386 <mqtt_prop_type_by_id+0x2e>
 800837a:	4a0a      	ldr	r2, [pc, #40]	@ (80083a4 <mqtt_prop_type_by_id+0x4c>)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	4413      	add	r3, r2
 8008382:	785b      	ldrb	r3, [r3, #1]
 8008384:	e008      	b.n	8008398 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3301      	adds	r3, #1
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	429a      	cmp	r2, r3
 8008392:	d3eb      	bcc.n	800836c <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 8008394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	08028c74 	.word	0x08028c74

080083a8 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	e07a      	b.n	80084b2 <get_properties_length+0x10a>
    size++;  // identifier
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	3301      	adds	r3, #1
 80083c0:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4613      	mov	r3, r2
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	4413      	add	r3, r2
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	461a      	mov	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4413      	add	r3, r2
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7ff ffbf 	bl	8008358 <mqtt_prop_type_by_id>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b06      	cmp	r3, #6
 80083de:	d863      	bhi.n	80084a8 <get_properties_length+0x100>
 80083e0:	a201      	add	r2, pc, #4	@ (adr r2, 80083e8 <get_properties_length+0x40>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	080084a1 	.word	0x080084a1
 80083ec:	08008435 	.word	0x08008435
 80083f0:	08008405 	.word	0x08008405
 80083f4:	08008451 	.word	0x08008451
 80083f8:	0800846d 	.word	0x0800846d
 80083fc:	08008491 	.word	0x08008491
 8008400:	08008499 	.word	0x08008499
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	4613      	mov	r3, r2
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	4413      	add	r3, r2
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	461a      	mov	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4413      	add	r3, r2
 8008414:	6959      	ldr	r1, [r3, #20]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4613      	mov	r3, r2
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	4413      	add	r3, r2
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	461a      	mov	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4413      	add	r3, r2
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	18ca      	adds	r2, r1, r3
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	4413      	add	r3, r2
 800842e:	3304      	adds	r3, #4
 8008430:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 8008432:	e03b      	b.n	80084ac <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	4613      	mov	r3, r2
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	4413      	add	r3, r2
 800843c:	00db      	lsls	r3, r3, #3
 800843e:	461a      	mov	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4413      	add	r3, r2
 8008444:	695a      	ldr	r2, [r3, #20]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	4413      	add	r3, r2
 800844a:	3302      	adds	r3, #2
 800844c:	60bb      	str	r3, [r7, #8]
        break;
 800844e:	e02d      	b.n	80084ac <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4613      	mov	r3, r2
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	4413      	add	r3, r2
 8008458:	00db      	lsls	r3, r3, #3
 800845a:	461a      	mov	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4413      	add	r3, r2
 8008460:	695a      	ldr	r2, [r3, #20]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	4413      	add	r3, r2
 8008466:	3302      	adds	r3, #2
 8008468:	60bb      	str	r3, [r7, #8]
        break;
 800846a:	e01f      	b.n	80084ac <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4613      	mov	r3, r2
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	4413      	add	r3, r2
 8008474:	00db      	lsls	r3, r3, #3
 8008476:	461a      	mov	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4413      	add	r3, r2
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	4618      	mov	r0, r3
 8008480:	f7ff fef4 	bl	800826c <varint_size>
 8008484:	4603      	mov	r3, r0
 8008486:	461a      	mov	r2, r3
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4413      	add	r3, r2
 800848c:	60bb      	str	r3, [r7, #8]
        break;
 800848e:	e00d      	b.n	80084ac <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	3304      	adds	r3, #4
 8008494:	60bb      	str	r3, [r7, #8]
        break;
 8008496:	e009      	b.n	80084ac <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	3302      	adds	r3, #2
 800849c:	60bb      	str	r3, [r7, #8]
        break;
 800849e:	e005      	b.n	80084ac <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	3301      	adds	r3, #1
 80084a4:	60bb      	str	r3, [r7, #8]
        break;
 80084a6:	e001      	b.n	80084ac <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	e007      	b.n	80084bc <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3301      	adds	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d380      	bcc.n	80083bc <get_properties_length+0x14>
    }
  }

  return size;
 80084ba:	68bb      	ldr	r3, [r7, #8]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff ff69 	bl	80083a8 <get_properties_length>
 80084d6:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f7ff fec7 	bl	800826c <varint_size>
 80084de:	4603      	mov	r3, r0
 80084e0:	461a      	mov	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4413      	add	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
  return size;
 80084e8:	68fb      	ldr	r3, [r7, #12]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
	...

080084f4 <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b08a      	sub	sp, #40	@ 0x28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 8008500:	6879      	ldr	r1, [r7, #4]
 8008502:	68b8      	ldr	r0, [r7, #8]
 8008504:	f7ff ff50 	bl	80083a8 <get_properties_length>
 8008508:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 800850a:	2300      	movs	r3, #0
 800850c:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 8008512:	f107 0314 	add.w	r3, r7, #20
 8008516:	6a39      	ldr	r1, [r7, #32]
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff febd 	bl	8008298 <encode_varint>
 800851e:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 8008520:	f107 0314 	add.w	r3, r7, #20
 8008524:	69fa      	ldr	r2, [r7, #28]
 8008526:	4619      	mov	r1, r3
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f004 fd8b 	bl	800d044 <mg_send>
  for (i = 0; i < nprops; i++) {
 800852e:	2300      	movs	r3, #0
 8008530:	627b      	str	r3, [r7, #36]	@ 0x24
 8008532:	e11f      	b.n	8008774 <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8008534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008536:	4613      	mov	r3, r2
 8008538:	005b      	lsls	r3, r3, #1
 800853a:	4413      	add	r3, r2
 800853c:	00db      	lsls	r3, r3, #3
 800853e:	461a      	mov	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	4413      	add	r3, r2
 8008544:	2201      	movs	r2, #1
 8008546:	4619      	mov	r1, r3
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f004 fd7b 	bl	800d044 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 800854e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008550:	4613      	mov	r3, r2
 8008552:	005b      	lsls	r3, r3, #1
 8008554:	4413      	add	r3, r2
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	461a      	mov	r2, r3
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	4413      	add	r3, r2
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff fef9 	bl	8008358 <mqtt_prop_type_by_id>
 8008566:	4603      	mov	r3, r0
 8008568:	2b06      	cmp	r3, #6
 800856a:	f200 8100 	bhi.w	800876e <mg_send_mqtt_properties+0x27a>
 800856e:	a201      	add	r2, pc, #4	@ (adr r2, 8008574 <mg_send_mqtt_properties+0x80>)
 8008570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008574:	08008633 	.word	0x08008633
 8008578:	0800869b 	.word	0x0800869b
 800857c:	08008591 	.word	0x08008591
 8008580:	080086ed 	.word	0x080086ed
 8008584:	0800873f 	.word	0x0800873f
 8008588:	08008677 	.word	0x08008677
 800858c:	08008651 	.word	0x08008651
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8008590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008592:	4613      	mov	r3, r2
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	4413      	add	r3, r2
 8008598:	00db      	lsls	r3, r3, #3
 800859a:	461a      	mov	r2, r3
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	4413      	add	r3, r2
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	4618      	mov	r0, r3
 80085a6:	f00f fa46 	bl	8017a36 <mg_ntohs>
 80085aa:	4603      	mov	r3, r0
 80085ac:	4619      	mov	r1, r3
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff fe3d 	bl	800822e <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 80085b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085b6:	4613      	mov	r3, r2
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	4413      	add	r3, r2
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	461a      	mov	r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4413      	add	r3, r2
 80085c4:	6899      	ldr	r1, [r3, #8]
 80085c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085c8:	4613      	mov	r3, r2
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	4413      	add	r3, r2
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	461a      	mov	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	4413      	add	r3, r2
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	461a      	mov	r2, r3
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f004 fd32 	bl	800d044 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80085e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085e2:	4613      	mov	r3, r2
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	4413      	add	r3, r2
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	461a      	mov	r2, r3
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	4413      	add	r3, r2
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	4618      	mov	r0, r3
 80085f6:	f00f fa1e 	bl	8017a36 <mg_ntohs>
 80085fa:	4603      	mov	r3, r0
 80085fc:	4619      	mov	r1, r3
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f7ff fe15 	bl	800822e <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8008604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008606:	4613      	mov	r3, r2
 8008608:	005b      	lsls	r3, r3, #1
 800860a:	4413      	add	r3, r2
 800860c:	00db      	lsls	r3, r3, #3
 800860e:	461a      	mov	r2, r3
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	4413      	add	r3, r2
 8008614:	6919      	ldr	r1, [r3, #16]
 8008616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008618:	4613      	mov	r3, r2
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	4413      	add	r3, r2
 800861e:	00db      	lsls	r3, r3, #3
 8008620:	461a      	mov	r2, r3
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	4413      	add	r3, r2
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	461a      	mov	r2, r3
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f004 fd0a 	bl	800d044 <mg_send>
        break;
 8008630:	e09d      	b.n	800876e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 8008632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008634:	4613      	mov	r3, r2
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	4413      	add	r3, r2
 800863a:	00db      	lsls	r3, r3, #3
 800863c:	461a      	mov	r2, r3
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	4413      	add	r3, r2
 8008642:	3304      	adds	r3, #4
 8008644:	2201      	movs	r2, #1
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f004 fcfb 	bl	800d044 <mg_send>
        break;
 800864e:	e08e      	b.n	800876e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8008650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008652:	4613      	mov	r3, r2
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	4413      	add	r3, r2
 8008658:	00db      	lsls	r3, r3, #3
 800865a:	461a      	mov	r2, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4413      	add	r3, r2
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	b29b      	uxth	r3, r3
 8008664:	4618      	mov	r0, r3
 8008666:	f00f f9e6 	bl	8017a36 <mg_ntohs>
 800866a:	4603      	mov	r3, r0
 800866c:	4619      	mov	r1, r3
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f7ff fddd 	bl	800822e <mg_send_u16>
        break;
 8008674:	e07b      	b.n	800876e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 8008676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008678:	4613      	mov	r3, r2
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	4413      	add	r3, r2
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	461a      	mov	r2, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	4413      	add	r3, r2
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	4618      	mov	r0, r3
 800868a:	f00f f9bb 	bl	8017a04 <mg_ntohl>
 800868e:	4603      	mov	r3, r0
 8008690:	4619      	mov	r1, r3
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff fddb 	bl	800824e <mg_send_u32>
        break;
 8008698:	e069      	b.n	800876e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 800869a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800869c:	4613      	mov	r3, r2
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	4413      	add	r3, r2
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	461a      	mov	r2, r3
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	4413      	add	r3, r2
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	4618      	mov	r0, r3
 80086b0:	f00f f9c1 	bl	8017a36 <mg_ntohs>
 80086b4:	4603      	mov	r3, r0
 80086b6:	4619      	mov	r1, r3
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f7ff fdb8 	bl	800822e <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80086be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c0:	4613      	mov	r3, r2
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	4413      	add	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	461a      	mov	r2, r3
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	4413      	add	r3, r2
 80086ce:	6919      	ldr	r1, [r3, #16]
 80086d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086d2:	4613      	mov	r3, r2
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	4413      	add	r3, r2
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	461a      	mov	r2, r3
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	4413      	add	r3, r2
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	461a      	mov	r2, r3
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f004 fcad 	bl	800d044 <mg_send>
        break;
 80086ea:	e040      	b.n	800876e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80086ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ee:	4613      	mov	r3, r2
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	4413      	add	r3, r2
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	461a      	mov	r2, r3
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	4413      	add	r3, r2
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	4618      	mov	r0, r3
 8008702:	f00f f998 	bl	8017a36 <mg_ntohs>
 8008706:	4603      	mov	r3, r0
 8008708:	4619      	mov	r1, r3
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f7ff fd8f 	bl	800822e <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8008710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008712:	4613      	mov	r3, r2
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	4413      	add	r3, r2
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	461a      	mov	r2, r3
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	4413      	add	r3, r2
 8008720:	6919      	ldr	r1, [r3, #16]
 8008722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008724:	4613      	mov	r3, r2
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	4413      	add	r3, r2
 800872a:	00db      	lsls	r3, r3, #3
 800872c:	461a      	mov	r2, r3
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	4413      	add	r3, r2
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	461a      	mov	r2, r3
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f004 fc84 	bl	800d044 <mg_send>
        break;
 800873c:	e017      	b.n	800876e <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 800873e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008740:	4613      	mov	r3, r2
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	4413      	add	r3, r2
 8008746:	00db      	lsls	r3, r3, #3
 8008748:	461a      	mov	r2, r3
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	4413      	add	r3, r2
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	f107 0318 	add.w	r3, r7, #24
 8008754:	4611      	mov	r1, r2
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff fd9e 	bl	8008298 <encode_varint>
 800875c:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 800875e:	f107 0318 	add.w	r3, r7, #24
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	4619      	mov	r1, r3
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f004 fc6c 	bl	800d044 <mg_send>
        break;
 800876c:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 800876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008770:	3301      	adds	r3, #1
 8008772:	627b      	str	r3, [r7, #36]	@ 0x24
 8008774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	429a      	cmp	r2, r3
 800877a:	f4ff aedb 	bcc.w	8008534 <mg_send_mqtt_properties+0x40>
    }
  }
}
 800877e:	bf00      	nop
 8008780:	bf00      	nop
 8008782:	3728      	adds	r7, #40	@ 0x28
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8008788:	b580      	push	{r7, lr}
 800878a:	b08e      	sub	sp, #56	@ 0x38
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  char client_id[21];
  struct mg_str cid = opts->client_id;
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	f107 0314 	add.w	r3, r7, #20
 8008798:	3210      	adds	r2, #16
 800879a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800879e:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 80087a2:	230c      	movs	r3, #12
 80087a4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 80087a6:	2300      	movs	r3, #0
 80087a8:	733b      	strb	r3, [r7, #12]
 80087aa:	2304      	movs	r3, #4
 80087ac:	737b      	strb	r3, [r7, #13]
 80087ae:	234d      	movs	r3, #77	@ 0x4d
 80087b0:	73bb      	strb	r3, [r7, #14]
 80087b2:	2351      	movs	r3, #81	@ 0x51
 80087b4:	73fb      	strb	r3, [r7, #15]
 80087b6:	2354      	movs	r3, #84	@ 0x54
 80087b8:	743b      	strb	r3, [r7, #16]
 80087ba:	2354      	movs	r3, #84	@ 0x54
 80087bc:	747b      	strb	r3, [r7, #17]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80087c4:	74bb      	strb	r3, [r7, #18]
 80087c6:	2300      	movs	r3, #0
 80087c8:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d110      	bne.n	80087f2 <mg_mqtt_login+0x6a>
    mg_random_str(client_id, sizeof(client_id) - 1);
 80087d0:	f107 031c 	add.w	r3, r7, #28
 80087d4:	2114      	movs	r1, #20
 80087d6:	4618      	mov	r0, r3
 80087d8:	f00f f8ce 	bl	8017978 <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 80087dc:	2300      	movs	r3, #0
 80087de:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    cid = mg_str(client_id);
 80087e2:	f107 0314 	add.w	r3, r7, #20
 80087e6:	f107 021c 	add.w	r2, r7, #28
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f006 fa67 	bl	800ecc0 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 80087f2:	7cbb      	ldrb	r3, [r7, #18]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <mg_mqtt_login+0x74>
 80087f8:	2304      	movs	r3, #4
 80087fa:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 80087fc:	7cbb      	ldrb	r3, [r7, #18]
 80087fe:	2b05      	cmp	r3, #5
 8008800:	bf0c      	ite	eq
 8008802:	2301      	moveq	r3, #1
 8008804:	2300      	movne	r3, #0
 8008806:	b2d9      	uxtb	r1, r3
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800880e:	f361 0382 	bfi	r3, r1, #2, #1
 8008812:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	b2db      	uxtb	r3, r3
 8008820:	f003 0318 	and.w	r3, r3, #24
 8008824:	b2db      	uxtb	r3, r3
 8008826:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00a      	beq.n	8008846 <mg_mqtt_login+0xbe>
    total_len += 2 + (uint32_t) opts->user.len;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008836:	4413      	add	r3, r2
 8008838:	3302      	adds	r3, #2
 800883a:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_USER_NAME;
 800883c:	7cfb      	ldrb	r3, [r7, #19]
 800883e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008842:	b2db      	uxtb	r3, r3
 8008844:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00a      	beq.n	8008864 <mg_mqtt_login+0xdc>
    total_len += 2 + (uint32_t) opts->pass.len;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008854:	4413      	add	r3, r2
 8008856:	3302      	adds	r3, #2
 8008858:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_PASSWORD;
 800885a:	7cfb      	ldrb	r3, [r7, #19]
 800885c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008860:	b2db      	uxtb	r3, r3
 8008862:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00d      	beq.n	8008888 <mg_mqtt_login+0x100>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	69da      	ldr	r2, [r3, #28]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008874:	441a      	add	r2, r3
 8008876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008878:	4413      	add	r3, r2
 800887a:	3304      	adds	r3, #4
 800887c:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_WILL;
 800887e:	7cfb      	ldrb	r3, [r7, #19]
 8008880:	f043 0304 	orr.w	r3, r3, #4
 8008884:	b2db      	uxtb	r3, r3
 8008886:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800888e:	2b00      	cmp	r3, #0
 8008890:	d102      	bne.n	8008898 <mg_mqtt_login+0x110>
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d104      	bne.n	80088a2 <mg_mqtt_login+0x11a>
 8008898:	7cfb      	ldrb	r3, [r7, #19]
 800889a:	f043 0302 	orr.w	r3, r3, #2
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	74fb      	strb	r3, [r7, #19]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d004      	beq.n	80088b6 <mg_mqtt_login+0x12e>
 80088ac:	7cfb      	ldrb	r3, [r7, #19]
 80088ae:	f043 0320 	orr.w	r3, r3, #32
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088ba:	4413      	add	r3, r2
 80088bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (c->is_mqtt5) {
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80088c4:	f003 0304 	and.w	r3, r3, #4
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d01c      	beq.n	8008908 <mg_mqtt_login+0x180>
    total_len += get_props_size(opts->props, opts->num_props);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d6:	4619      	mov	r1, r3
 80088d8:	4610      	mov	r0, r2
 80088da:	f7ff fdf3 	bl	80084c4 <get_props_size>
 80088de:	4602      	mov	r2, r0
 80088e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e2:	4413      	add	r3, r2
 80088e4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (hdr[7] & MQTT_HAS_WILL)
 80088e6:	7cfb      	ldrb	r3, [r7, #19]
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00b      	beq.n	8008908 <mg_mqtt_login+0x180>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f8:	4619      	mov	r1, r3
 80088fa:	4610      	mov	r0, r2
 80088fc:	f7ff fde2 	bl	80084c4 <get_props_size>
 8008900:	4602      	mov	r2, r0
 8008902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008904:	4413      	add	r3, r2
 8008906:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8008908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800890a:	2200      	movs	r2, #0
 800890c:	2101      	movs	r1, #1
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff fc48 	bl	80081a4 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8008914:	f107 030c 	add.w	r3, r7, #12
 8008918:	2208      	movs	r2, #8
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f004 fb91 	bl	800d044 <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008926:	4618      	mov	r0, r3
 8008928:	f00f f885 	bl	8017a36 <mg_ntohs>
 800892c:	4603      	mov	r3, r0
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7ff fc7c 	bl	800822e <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d007      	beq.n	8008956 <mg_mqtt_login+0x1ce>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800894e:	461a      	mov	r2, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff fdcf 	bl	80084f4 <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	b29b      	uxth	r3, r3
 800895a:	4618      	mov	r0, r3
 800895c:	f00f f86b 	bl	8017a36 <mg_ntohs>
 8008960:	4603      	mov	r3, r0
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff fc62 	bl	800822e <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f004 fb67 	bl	800d044 <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 8008976:	7cfb      	ldrb	r3, [r7, #19]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b00      	cmp	r3, #0
 800897e:	d035      	beq.n	80089ec <mg_mqtt_login+0x264>
    if (c->is_mqtt5)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <mg_mqtt_login+0x218>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008998:	461a      	mov	r2, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff fdaa 	bl	80084f4 <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	4618      	mov	r0, r3
 80089a8:	f00f f845 	bl	8017a36 <mg_ntohs>
 80089ac:	4603      	mov	r3, r0
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff fc3c 	bl	800822e <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	6999      	ldr	r1, [r3, #24]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	461a      	mov	r2, r3
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f004 fb3f 	bl	800d044 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	4618      	mov	r0, r3
 80089ce:	f00f f832 	bl	8017a36 <mg_ntohs>
 80089d2:	4603      	mov	r3, r0
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7ff fc29 	bl	800822e <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	6a19      	ldr	r1, [r3, #32]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e4:	461a      	mov	r2, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f004 fb2c 	bl	800d044 <mg_send>
  }
  if (opts->user.len > 0) {
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d012      	beq.n	8008a1a <mg_mqtt_login+0x292>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	4618      	mov	r0, r3
 80089fc:	f00f f81b 	bl	8017a36 <mg_ntohs>
 8008a00:	4603      	mov	r3, r0
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff fc12 	bl	800822e <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	6819      	ldr	r1, [r3, #0]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	461a      	mov	r2, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f004 fb15 	bl	800d044 <mg_send>
  }
  if (opts->pass.len > 0) {
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d012      	beq.n	8008a48 <mg_mqtt_login+0x2c0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f00f f804 	bl	8017a36 <mg_ntohs>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff fbfb 	bl	800822e <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	6899      	ldr	r1, [r3, #8]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	461a      	mov	r2, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f004 fafe 	bl	800d044 <mg_send>
  }
}
 8008a48:	bf00      	nop
 8008a4a:	3738      	adds	r7, #56	@ 0x38
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a5e:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	b25b      	sxtb	r3, r3
 8008a6a:	f003 0306 	and.w	r3, r3, #6
 8008a6e:	b25b      	sxtb	r3, r3
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	d001      	beq.n	8008a7e <mg_mqtt_pub+0x2e>
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	e000      	b.n	8008a80 <mg_mqtt_pub+0x30>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4313      	orrs	r3, r2
 8008a82:	b25b      	sxtb	r3, r3
 8008a84:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	69da      	ldr	r2, [r3, #28]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8e:	4413      	add	r3, r2
 8008a90:	3302      	adds	r3, #2
 8008a92:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8008a94:	4b51      	ldr	r3, [pc, #324]	@ (8008bdc <mg_mqtt_pub+0x18c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	dd19      	ble.n	8008ad0 <mg_mqtt_pub+0x80>
 8008a9c:	4b50      	ldr	r3, [pc, #320]	@ (8008be0 <mg_mqtt_pub+0x190>)
 8008a9e:	f241 12f9 	movw	r2, #4601	@ 0x11f9
 8008aa2:	4950      	ldr	r1, [pc, #320]	@ (8008be4 <mg_mqtt_pub+0x194>)
 8008aa4:	2003      	movs	r0, #3
 8008aa6:	f7ff fa43 	bl	8007f30 <mg_log_prefix>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	461c      	mov	r4, r3
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	699a      	ldr	r2, [r3, #24]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008abc:	4618      	mov	r0, r3
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	9000      	str	r0, [sp, #0]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	4622      	mov	r2, r4
 8008aca:	4847      	ldr	r0, [pc, #284]	@ (8008be8 <mg_mqtt_pub+0x198>)
 8008acc:	f7ff fa80 	bl	8007fd0 <mg_log>
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <mg_mqtt_pub+0x90>
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	3302      	adds	r3, #2
 8008ade:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008ae6:	f003 0304 	and.w	r3, r3, #4
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00b      	beq.n	8008b08 <mg_mqtt_pub+0xb8>
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af8:	4619      	mov	r1, r3
 8008afa:	4610      	mov	r0, r2
 8008afc:	f7ff fce2 	bl	80084c4 <get_props_size>
 8008b00:	4602      	mov	r2, r0
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4413      	add	r3, r2
 8008b06:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d006      	beq.n	8008b20 <mg_mqtt_pub+0xd0>
 8008b12:	89fb      	ldrh	r3, [r7, #14]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d003      	beq.n	8008b20 <mg_mqtt_pub+0xd0>
 8008b18:	7b7b      	ldrb	r3, [r7, #13]
 8008b1a:	f043 0308 	orr.w	r3, r3, #8
 8008b1e:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8008b20:	7b7a      	ldrb	r2, [r7, #13]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2103      	movs	r1, #3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7ff fb3c 	bl	80081a4 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	4618      	mov	r0, r3
 8008b34:	f00e ff7f 	bl	8017a36 <mg_ntohs>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff fb76 	bl	800822e <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	6999      	ldr	r1, [r3, #24]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f004 fa79 	bl	800d044 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01e      	beq.n	8008b9a <mg_mqtt_pub+0x14a>
    if (id == 0) {  // generate new one if not resending
 8008b5c:	89fb      	ldrh	r3, [r7, #14]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d112      	bne.n	8008b88 <mg_mqtt_pub+0x138>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b68:	3201      	adds	r2, #1
 8008b6a:	b292      	uxth	r2, r2
 8008b6c:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8008b6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d105      	bne.n	8008b80 <mg_mqtt_pub+0x130>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b7a:	3201      	adds	r2, #1
 8008b7c:	b292      	uxth	r2, r2
 8008b7e:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b86:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 8008b88:	89fb      	ldrh	r3, [r7, #14]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f00e ff53 	bl	8017a36 <mg_ntohs>
 8008b90:	4603      	mov	r3, r0
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7ff fb4a 	bl	800822e <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <mg_mqtt_pub+0x16a>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7ff fc9d 	bl	80084f4 <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d007      	beq.n	8008bd2 <mg_mqtt_pub+0x182>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	6a19      	ldr	r1, [r3, #32]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bca:	461a      	mov	r2, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f004 fa39 	bl	800d044 <mg_send>
  return id;
 8008bd2:	89fb      	ldrh	r3, [r7, #14]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd90      	pop	{r4, r7, pc}
 8008bdc:	24000240 	.word	0x24000240
 8008be0:	08028f4c 	.word	0x08028f4c
 8008be4:	0802597c 	.word	0x0802597c
 8008be8:	0802692c 	.word	0x0802692c

08008bec <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  uint8_t qos_ = opts->qos & 3;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bfc:	f003 0303 	and.w	r3, r3, #3
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	73fb      	strb	r3, [r7, #15]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d009      	beq.n	8008c28 <mg_mqtt_sub+0x3c>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f7ff fc50 	bl	80084c4 <get_props_size>
 8008c24:	4603      	mov	r3, r0
 8008c26:	e000      	b.n	8008c2a <mg_mqtt_sub+0x3e>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	69da      	ldr	r2, [r3, #28]
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	4413      	add	r3, r2
 8008c34:	3305      	adds	r3, #5
 8008c36:	613b      	str	r3, [r7, #16]

  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	2108      	movs	r1, #8
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff fab0 	bl	80081a4 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c4a:	3201      	adds	r2, #1
 8008c4c:	b292      	uxth	r2, r2
 8008c4e:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8008c50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d105      	bne.n	8008c62 <mg_mqtt_sub+0x76>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c5c:	3201      	adds	r2, #1
 8008c5e:	b292      	uxth	r2, r2
 8008c60:	859a      	strh	r2, [r3, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f00e fee4 	bl	8017a36 <mg_ntohs>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	4619      	mov	r1, r3
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff fadb 	bl	800822e <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008c7e:	f003 0304 	and.w	r3, r3, #4
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d007      	beq.n	8008c98 <mg_mqtt_sub+0xac>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c90:	461a      	mov	r2, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fc2e 	bl	80084f4 <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f00e fec9 	bl	8017a36 <mg_ntohs>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7ff fac0 	bl	800822e <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	6999      	ldr	r1, [r3, #24]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f004 f9c3 	bl	800d044 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 8008cbe:	f107 030f 	add.w	r3, r7, #15
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f004 f9bc 	bl	800d044 <mg_send>
}
 8008ccc:	bf00      	nop
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08a      	sub	sp, #40	@ 0x28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	61fb      	str	r3, [r7, #28]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 8008cf2:	2228      	movs	r2, #40	@ 0x28
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	6838      	ldr	r0, [r7, #0]
 8008cf8:	f019 f874 	bl	8021de4 <memset>
  m->dgram.buf = (char *) buf;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d801      	bhi.n	8008d0c <mg_mqtt_parse+0x38>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e104      	b.n	8008f16 <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	091b      	lsrs	r3, r3, #4
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	085b      	lsrs	r3, r3, #1
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	f003 0303 	and.w	r3, r3, #3
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	61bb      	str	r3, [r7, #24]
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3301      	adds	r3, #1
 8008d36:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 8008d38:	e01f      	b.n	8008d7a <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	623a      	str	r2, [r7, #32]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8008d46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d4a:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	4613      	mov	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	fa01 f303 	lsl.w	r3, r1, r3
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	4413      	add	r3, r2
 8008d60:	61fb      	str	r3, [r7, #28]
    len_len++;
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	3301      	adds	r3, #1
 8008d66:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 8008d68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	da0c      	bge.n	8008d8a <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d901      	bls.n	8008d7a <mg_mqtt_parse+0xa6>
 8008d76:	2302      	movs	r3, #2
 8008d78:	e0cd      	b.n	8008f16 <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 8008d7a:	6a3a      	ldr	r2, [r7, #32]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	461a      	mov	r2, r3
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d8d8      	bhi.n	8008d3a <mg_mqtt_parse+0x66>
 8008d88:	e000      	b.n	8008d8c <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 8008d8a:	bf00      	nop
  }
  end = p + n;
 8008d8c:	6a3a      	ldr	r2, [r7, #32]
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	4413      	add	r3, r2
 8008d92:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8008d94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	db05      	blt.n	8008da8 <mg_mqtt_parse+0xd4>
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	4413      	add	r3, r2
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d901      	bls.n	8008dac <mg_mqtt_parse+0xd8>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0b4      	b.n	8008f16 <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	461a      	mov	r2, r3
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	7e9b      	ldrb	r3, [r3, #26]
 8008dbc:	2b0b      	cmp	r3, #11
 8008dbe:	f300 80a8 	bgt.w	8008f12 <mg_mqtt_parse+0x23e>
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	da10      	bge.n	8008de8 <mg_mqtt_parse+0x114>
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d002      	beq.n	8008dd0 <mg_mqtt_parse+0xfc>
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d024      	beq.n	8008e18 <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 8008dce:	e0a0      	b.n	8008f12 <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	dc01      	bgt.n	8008dde <mg_mqtt_parse+0x10a>
 8008dda:	2302      	movs	r3, #2
 8008ddc:	e09b      	b.n	8008f16 <mg_mqtt_parse+0x242>
      m->ack = p[1];
 8008dde:	6a3b      	ldr	r3, [r7, #32]
 8008de0:	785a      	ldrb	r2, [r3, #1]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	771a      	strb	r2, [r3, #28]
      break;
 8008de6:	e095      	b.n	8008f14 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	3302      	adds	r3, #2
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d201      	bcs.n	8008df6 <mg_mqtt_parse+0x122>
 8008df2:	2302      	movs	r3, #2
 8008df4:	e08f      	b.n	8008f16 <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	021b      	lsls	r3, r3, #8
 8008dfc:	b21a      	sxth	r2, r3
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	3301      	adds	r3, #1
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	b21b      	sxth	r3, r3
 8008e06:	4313      	orrs	r3, r2
 8008e08:	b21b      	sxth	r3, r3
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	831a      	strh	r2, [r3, #24]
      p += 2;
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	3302      	adds	r3, #2
 8008e14:	623b      	str	r3, [r7, #32]
      break;
 8008e16:	e07d      	b.n	8008f14 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	3302      	adds	r3, #2
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d201      	bcs.n	8008e26 <mg_mqtt_parse+0x152>
 8008e22:	2302      	movs	r3, #2
 8008e24:	e077      	b.n	8008f16 <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	021b      	lsls	r3, r3, #8
 8008e2c:	b21a      	sxth	r2, r3
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	3301      	adds	r3, #1
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	b21b      	sxth	r3, r3
 8008e36:	4313      	orrs	r3, r2
 8008e38:	b21b      	sxth	r3, r3
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	1c9a      	adds	r2, r3, #2
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	3302      	adds	r3, #2
 8008e50:	6a3a      	ldr	r2, [r7, #32]
 8008e52:	4413      	add	r3, r2
 8008e54:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8008e56:	6a3a      	ldr	r2, [r7, #32]
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d901      	bls.n	8008e62 <mg_mqtt_parse+0x18e>
 8008e5e:	2302      	movs	r3, #2
 8008e60:	e059      	b.n	8008f16 <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	7edb      	ldrb	r3, [r3, #27]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d016      	beq.n	8008e98 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	3302      	adds	r3, #2
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d201      	bcs.n	8008e78 <mg_mqtt_parse+0x1a4>
 8008e74:	2302      	movs	r3, #2
 8008e76:	e04e      	b.n	8008f16 <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	b21a      	sxth	r2, r3
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	3301      	adds	r3, #1
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	b21b      	sxth	r3, r3
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	b21b      	sxth	r3, r3
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	831a      	strh	r2, [r3, #24]
        p += 2;
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	3302      	adds	r3, #2
 8008e96:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8008e98:	6a3a      	ldr	r2, [r7, #32]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d901      	bls.n	8008ea4 <mg_mqtt_parse+0x1d0>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e038      	b.n	8008f16 <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 8008ea4:	79fb      	ldrb	r3, [r7, #7]
 8008ea6:	2b05      	cmp	r3, #5
 8008ea8:	d123      	bne.n	8008ef2 <mg_mqtt_parse+0x21e>
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	3302      	adds	r3, #2
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d91e      	bls.n	8008ef2 <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	4619      	mov	r1, r3
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	3324      	adds	r3, #36	@ 0x24
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6a38      	ldr	r0, [r7, #32]
 8008ec4:	f7ff fa0f 	bl	80082e6 <decode_varint>
 8008ec8:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <mg_mqtt_parse+0x200>
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e020      	b.n	8008f16 <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 8008ed4:	6a3a      	ldr	r2, [r7, #32]
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	441a      	add	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	461a      	mov	r2, r3
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	4413      	add	r3, r2
 8008eec:	6a3a      	ldr	r2, [r7, #32]
 8008eee:	4413      	add	r3, r2
 8008ef0:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8008ef2:	6a3a      	ldr	r2, [r7, #32]
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d901      	bls.n	8008efe <mg_mqtt_parse+0x22a>
 8008efa:	2302      	movs	r3, #2
 8008efc:	e00b      	b.n	8008f16 <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	6a3a      	ldr	r2, [r7, #32]
 8008f02:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	60da      	str	r2, [r3, #12]
      break;
 8008f10:	e000      	b.n	8008f14 <mg_mqtt_parse+0x240>
      break;
 8008f12:	bf00      	nop
  }
  return MQTT_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3728      	adds	r7, #40	@ 0x28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
	...

08008f20 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8008f20:	b590      	push	{r4, r7, lr}
 8008f22:	b099      	sub	sp, #100	@ 0x64
 8008f24:	af02      	add	r7, sp, #8
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b07      	cmp	r3, #7
 8008f30:	f040 8124 	bne.w	800917c <mqtt_cb+0x25c>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008f3a:	f003 0304 	and.w	r3, r3, #4
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <mqtt_cb+0x28>
 8008f44:	2305      	movs	r3, #5
 8008f46:	e000      	b.n	8008f4a <mqtt_cb+0x2a>
 8008f48:	2304      	movs	r3, #4
 8008f4a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008f56:	f107 0314 	add.w	r3, r7, #20
 8008f5a:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8008f5e:	f7ff feb9 	bl	8008cd4 <mg_mqtt_parse>
 8008f62:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 8008f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d118      	bne.n	8008f9c <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8008f6a:	4b86      	ldr	r3, [pc, #536]	@ (8009184 <mqtt_cb+0x264>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dd0c      	ble.n	8008f8c <mqtt_cb+0x6c>
 8008f72:	4b85      	ldr	r3, [pc, #532]	@ (8009188 <mqtt_cb+0x268>)
 8008f74:	f241 226e 	movw	r2, #4718	@ 0x126e
 8008f78:	4984      	ldr	r1, [pc, #528]	@ (800918c <mqtt_cb+0x26c>)
 8008f7a:	2001      	movs	r0, #1
 8008f7c:	f7fe ffd8 	bl	8007f30 <mg_log_prefix>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f84:	4619      	mov	r1, r3
 8008f86:	4882      	ldr	r0, [pc, #520]	@ (8009190 <mqtt_cb+0x270>)
 8008f88:	f7ff f822 	bl	8007fd0 <mg_log>
        c->is_closing = 1;
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8008f92:	f043 0320 	orr.w	r3, r3, #32
 8008f96:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 8008f9a:	e0ef      	b.n	800917c <mqtt_cb+0x25c>
      } else if (rc == MQTT_OK) {
 8008f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f040 80eb 	bne.w	800917a <mqtt_cb+0x25a>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8008fa4:	4b77      	ldr	r3, [pc, #476]	@ (8009184 <mqtt_cb+0x264>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	dd17      	ble.n	8008fdc <mqtt_cb+0xbc>
 8008fac:	4b76      	ldr	r3, [pc, #472]	@ (8009188 <mqtt_cb+0x268>)
 8008fae:	f241 2272 	movw	r2, #4722	@ 0x1272
 8008fb2:	4976      	ldr	r1, [pc, #472]	@ (800918c <mqtt_cb+0x26c>)
 8008fb4:	2004      	movs	r0, #4
 8008fb6:	f7fe ffbb 	bl	8007f30 <mg_log_prefix>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008fbe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc6:	461c      	mov	r4, r3
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	9200      	str	r2, [sp, #0]
 8008fd2:	4623      	mov	r3, r4
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	486f      	ldr	r0, [pc, #444]	@ (8009194 <mqtt_cb+0x274>)
 8008fd8:	f7fe fffa 	bl	8007fd0 <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 8008fdc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008fe0:	3b02      	subs	r3, #2
 8008fe2:	2b04      	cmp	r3, #4
 8008fe4:	f200 80ba 	bhi.w	800915c <mqtt_cb+0x23c>
 8008fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff0 <mqtt_cb+0xd0>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009005 	.word	0x08009005
 8008ff4:	08009079 	.word	0x08009079
 8008ff8:	0800915d 	.word	0x0800915d
 8008ffc:	08009103 	.word	0x08009103
 8009000:	0800912f 	.word	0x0800912f
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8009004:	f107 0314 	add.w	r3, r7, #20
 8009008:	331c      	adds	r3, #28
 800900a:	461a      	mov	r2, r3
 800900c:	2111      	movs	r1, #17
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f7f9 fc84 	bl	800291c <mg_call>
            if (mm.ack == 0) {
 8009014:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009018:	2b00      	cmp	r3, #0
 800901a:	d112      	bne.n	8009042 <mqtt_cb+0x122>
              MG_DEBUG(("%lu Connected", c->id));
 800901c:	4b59      	ldr	r3, [pc, #356]	@ (8009184 <mqtt_cb+0x264>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b02      	cmp	r3, #2
 8009022:	f340 809a 	ble.w	800915a <mqtt_cb+0x23a>
 8009026:	4b58      	ldr	r3, [pc, #352]	@ (8009188 <mqtt_cb+0x268>)
 8009028:	f241 2278 	movw	r2, #4728	@ 0x1278
 800902c:	4957      	ldr	r1, [pc, #348]	@ (800918c <mqtt_cb+0x26c>)
 800902e:	2003      	movs	r0, #3
 8009030:	f7fe ff7e 	bl	8007f30 <mg_log_prefix>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009038:	4619      	mov	r1, r3
 800903a:	4857      	ldr	r0, [pc, #348]	@ (8009198 <mqtt_cb+0x278>)
 800903c:	f7fe ffc8 	bl	8007fd0 <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 8009040:	e08b      	b.n	800915a <mqtt_cb+0x23a>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8009042:	4b50      	ldr	r3, [pc, #320]	@ (8009184 <mqtt_cb+0x264>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	dd0e      	ble.n	8009068 <mqtt_cb+0x148>
 800904a:	4b4f      	ldr	r3, [pc, #316]	@ (8009188 <mqtt_cb+0x268>)
 800904c:	f241 227a 	movw	r2, #4730	@ 0x127a
 8009050:	494e      	ldr	r1, [pc, #312]	@ (800918c <mqtt_cb+0x26c>)
 8009052:	2001      	movs	r0, #1
 8009054:	f7fe ff6c 	bl	8007f30 <mg_log_prefix>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800905c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8009060:	4619      	mov	r1, r3
 8009062:	484e      	ldr	r0, [pc, #312]	@ (800919c <mqtt_cb+0x27c>)
 8009064:	f7fe ffb4 	bl	8007fd0 <mg_log>
              c->is_closing = 1;
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800906e:	f043 0320 	orr.w	r3, r3, #32
 8009072:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            break;
 8009076:	e070      	b.n	800915a <mqtt_cb+0x23a>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 8009078:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800907c:	2b00      	cmp	r3, #0
 800907e:	d038      	beq.n	80090f2 <mqtt_cb+0x1d2>
              uint16_t id = mg_ntohs(mm.id);
 8009080:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009082:	4618      	mov	r0, r3
 8009084:	f00e fcd7 	bl	8017a36 <mg_ntohs>
 8009088:	4603      	mov	r3, r0
 800908a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 800908e:	2302      	movs	r3, #2
 8009090:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	b2db      	uxtb	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <mqtt_cb+0x188>
 80090a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090a4:	3302      	adds	r3, #2
 80090a6:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 80090a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d101      	bne.n	80090b4 <mqtt_cb+0x194>
 80090b0:	2105      	movs	r1, #5
 80090b2:	e000      	b.n	80090b6 <mqtt_cb+0x196>
 80090b4:	2104      	movs	r1, #4
 80090b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090b8:	2200      	movs	r2, #0
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f7ff f872 	bl	80081a4 <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 80090c0:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 80090c4:	2202      	movs	r2, #2
 80090c6:	4619      	mov	r1, r3
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f003 ffbb 	bl	800d044 <mg_send>

              if (c->is_mqtt5) {
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80090d4:	f003 0304 	and.w	r3, r3, #4
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d009      	beq.n	80090f2 <mqtt_cb+0x1d2>
                uint16_t zero = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 80090e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80090e8:	2202      	movs	r2, #2
 80090ea:	4619      	mov	r1, r3
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f003 ffa9 	bl	800d044 <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 80090f2:	f107 0314 	add.w	r3, r7, #20
 80090f6:	461a      	mov	r2, r3
 80090f8:	2110      	movs	r1, #16
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f7f9 fc0e 	bl	800291c <mg_call>
            break;
 8009100:	e02c      	b.n	800915c <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 8009102:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009104:	4618      	mov	r0, r3
 8009106:	f00e fc96 	bl	8017a36 <mg_ntohs>
 800910a:	4603      	mov	r3, r0
 800910c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 800910e:	2302      	movs	r3, #2
 8009110:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8009112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009114:	2202      	movs	r2, #2
 8009116:	2106      	movs	r1, #6
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7ff f843 	bl	80081a4 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 800911e:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 8009122:	2202      	movs	r2, #2
 8009124:	4619      	mov	r1, r3
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f003 ff8c 	bl	800d044 <mg_send>
            break;
 800912c:	e016      	b.n	800915c <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 800912e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009130:	4618      	mov	r0, r3
 8009132:	f00e fc80 	bl	8017a36 <mg_ntohs>
 8009136:	4603      	mov	r3, r0
 8009138:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 800913a:	2302      	movs	r3, #2
 800913c:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 800913e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009140:	2200      	movs	r2, #0
 8009142:	2107      	movs	r1, #7
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f7ff f82d 	bl	80081a4 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 800914a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800914e:	2202      	movs	r2, #2
 8009150:	4619      	mov	r1, r3
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f003 ff76 	bl	800d044 <mg_send>
            break;
 8009158:	e000      	b.n	800915c <mqtt_cb+0x23c>
            break;
 800915a:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 800915c:	f107 0314 	add.w	r3, r7, #20
 8009160:	461a      	mov	r2, r3
 8009162:	210f      	movs	r1, #15
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7f9 fbd9 	bl	800291c <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3338      	adds	r3, #56	@ 0x38
 800916e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009170:	2100      	movs	r1, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f7fd ffec 	bl	8007150 <mg_iobuf_del>
    for (;;) {
 8009178:	e6dc      	b.n	8008f34 <mqtt_cb+0x14>
      } else {
        break;
 800917a:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 800917c:	bf00      	nop
 800917e:	375c      	adds	r7, #92	@ 0x5c
 8009180:	46bd      	mov	sp, r7
 8009182:	bd90      	pop	{r4, r7, pc}
 8009184:	24000240 	.word	0x24000240
 8009188:	08028f58 	.word	0x08028f58
 800918c:	0802597c 	.word	0x0802597c
 8009190:	08026944 	.word	0x08026944
 8009194:	08026960 	.word	0x08026960
 8009198:	08026980 	.word	0x08026980
 800919c:	08026990 	.word	0x08026990

080091a0 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b096      	sub	sp, #88	@ 0x58
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
 80091ac:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 80091ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 fb5f 	bl	8009878 <mg_connect>
 80091ba:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 80091bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d015      	beq.n	80091ee <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 80091c2:	f107 0314 	add.w	r3, r7, #20
 80091c6:	2240      	movs	r2, #64	@ 0x40
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f018 fe0a 	bl	8021de4 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d102      	bne.n	80091dc <mg_mqtt_connect+0x3c>
 80091d6:	f107 0314 	add.w	r3, r7, #20
 80091da:	e000      	b.n	80091de <mg_mqtt_connect+0x3e>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4619      	mov	r1, r3
 80091e0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80091e2:	f7ff fad1 	bl	8008788 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 80091e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091e8:	4a03      	ldr	r2, [pc, #12]	@ (80091f8 <mg_mqtt_connect+0x58>)
 80091ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 80091ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3758      	adds	r7, #88	@ 0x58
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	08008f21 	.word	0x08008f21

080091fc <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800920c:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	4805      	ldr	r0, [pc, #20]	@ (8009230 <mg_vprintf+0x34>)
 800921a:	f7fa f84d 	bl	80032b8 <mg_vxprintf>
  return c->send.len - old;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	1ad3      	subs	r3, r2, r3
}
 8009226:	4618      	mov	r0, r3
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	0800d62b 	.word	0x0800d62b

08009234 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8009234:	b40e      	push	{r1, r2, r3}
 8009236:	b580      	push	{r7, lr}
 8009238:	b085      	sub	sp, #20
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8009242:	f107 0320 	add.w	r3, r7, #32
 8009246:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 8009248:	f107 0308 	add.w	r3, r7, #8
 800924c:	461a      	mov	r2, r3
 800924e:	69f9      	ldr	r1, [r7, #28]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff ffd3 	bl	80091fc <mg_vprintf>
 8009256:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8009258:	68fb      	ldr	r3, [r7, #12]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009264:	b003      	add	sp, #12
 8009266:	4770      	bx	lr

08009268 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8009268:	b580      	push	{r7, lr}
 800926a:	b088      	sub	sp, #32
 800926c:	af00      	add	r7, sp, #0
 800926e:	f107 0308 	add.w	r3, r7, #8
 8009272:	e883 0003 	stmia.w	r3, {r0, r1}
 8009276:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 8009278:	4811      	ldr	r0, [pc, #68]	@ (80092c0 <mg_atonl+0x58>)
 800927a:	f00e fbc3 	bl	8017a04 <mg_ntohl>
 800927e:	4603      	mov	r3, r0
 8009280:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8009282:	f107 0318 	add.w	r3, r7, #24
 8009286:	490f      	ldr	r1, [pc, #60]	@ (80092c4 <mg_atonl+0x5c>)
 8009288:	4618      	mov	r0, r3
 800928a:	f005 fd19 	bl	800ecc0 <mg_str_s>
 800928e:	f107 0318 	add.w	r3, r7, #24
 8009292:	cb0c      	ldmia	r3, {r2, r3}
 8009294:	f107 0108 	add.w	r1, r7, #8
 8009298:	c903      	ldmia	r1, {r0, r1}
 800929a:	f005 fdd4 	bl	800ee46 <mg_strcasecmp>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <mg_atonl+0x40>
 80092a4:	2300      	movs	r3, #0
 80092a6:	e006      	b.n	80092b6 <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	74da      	strb	r2, [r3, #19]
  return true;
 80092b4:	2301      	movs	r3, #1
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3720      	adds	r7, #32
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	7f000001 	.word	0x7f000001
 80092c4:	080269b0 	.word	0x080269b0

080092c8 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	f107 0308 	add.w	r3, r7, #8
 80092d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80092d6:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <mg_atone+0x1a>
 80092de:	2300      	movs	r3, #0
 80092e0:	e009      	b.n	80092f6 <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2210      	movs	r2, #16
 80092e6:	2100      	movs	r1, #0
 80092e8:	4618      	mov	r0, r3
 80092ea:	f018 fd7b 	bl	8021de4 <memset>
  addr->is_ip6 = false;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	74da      	strb	r2, [r3, #19]
  return true;
 80092f4:	2301      	movs	r3, #1
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 80092fe:	b480      	push	{r7}
 8009300:	b089      	sub	sp, #36	@ 0x24
 8009302:	af00      	add	r7, sp, #0
 8009304:	f107 0308 	add.w	r3, r7, #8
 8009308:	e883 0003 	stmia.w	r3, {r0, r1}
 800930c:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800930e:	2300      	movs	r3, #0
 8009310:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 8009316:	2300      	movs	r3, #0
 8009318:	61fb      	str	r3, [r7, #28]
 800931a:	e049      	b.n	80093b0 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	4413      	add	r3, r2
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	2b2f      	cmp	r3, #47	@ 0x2f
 8009326:	d925      	bls.n	8009374 <mg_aton4+0x76>
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	4413      	add	r3, r2
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b39      	cmp	r3, #57	@ 0x39
 8009332:	d81f      	bhi.n	8009374 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 8009334:	f107 0210 	add.w	r2, r7, #16
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	4413      	add	r3, r2
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	4613      	mov	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	4619      	mov	r1, r3
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	4413      	add	r3, r2
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	3b30      	subs	r3, #48	@ 0x30
 8009354:	440b      	add	r3, r1
 8009356:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2bff      	cmp	r3, #255	@ 0xff
 800935c:	dd01      	ble.n	8009362 <mg_aton4+0x64>
 800935e:	2300      	movs	r3, #0
 8009360:	e03d      	b.n	80093de <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	b2d9      	uxtb	r1, r3
 8009366:	f107 0210 	add.w	r2, r7, #16
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	4413      	add	r3, r2
 800936e:	460a      	mov	r2, r1
 8009370:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 8009372:	e01a      	b.n	80093aa <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	4413      	add	r3, r2
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	2b2e      	cmp	r3, #46	@ 0x2e
 800937e:	d112      	bne.n	80093a6 <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	2b02      	cmp	r3, #2
 8009384:	d809      	bhi.n	800939a <mg_aton4+0x9c>
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d006      	beq.n	800939a <mg_aton4+0x9c>
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	3b01      	subs	r3, #1
 8009392:	4413      	add	r3, r2
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	2b2e      	cmp	r3, #46	@ 0x2e
 8009398:	d101      	bne.n	800939e <mg_aton4+0xa0>
 800939a:	2300      	movs	r3, #0
 800939c:	e01f      	b.n	80093de <mg_aton4+0xe0>
      num_dots++;
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	3301      	adds	r3, #1
 80093a2:	61bb      	str	r3, [r7, #24]
 80093a4:	e001      	b.n	80093aa <mg_aton4+0xac>
    } else {
      return false;
 80093a6:	2300      	movs	r3, #0
 80093a8:	e019      	b.n	80093de <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	3301      	adds	r3, #1
 80093ae:	61fb      	str	r3, [r7, #28]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	69fa      	ldr	r2, [r7, #28]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d3b1      	bcc.n	800931c <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d106      	bne.n	80093cc <mg_aton4+0xce>
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	4413      	add	r3, r2
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80093ca:	d101      	bne.n	80093d0 <mg_aton4+0xd2>
 80093cc:	2300      	movs	r3, #0
 80093ce:	e006      	b.n	80093de <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	74da      	strb	r2, [r3, #19]
  return true;
 80093dc:	2301      	movs	r3, #1
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3724      	adds	r7, #36	@ 0x24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b088      	sub	sp, #32
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	f107 0308 	add.w	r3, r7, #8
 80093f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80093f8:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2b0d      	cmp	r3, #13
 80093fe:	d801      	bhi.n	8009404 <mg_v4mapped+0x1a>
 8009400:	2300      	movs	r3, #0
 8009402:	e056      	b.n	80094b2 <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b3a      	cmp	r3, #58	@ 0x3a
 800940a:	d109      	bne.n	8009420 <mg_v4mapped+0x36>
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	3301      	adds	r3, #1
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b3a      	cmp	r3, #58	@ 0x3a
 8009414:	d104      	bne.n	8009420 <mg_v4mapped+0x36>
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	3306      	adds	r3, #6
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b3a      	cmp	r3, #58	@ 0x3a
 800941e:	d001      	beq.n	8009424 <mg_v4mapped+0x3a>
 8009420:	2300      	movs	r3, #0
 8009422:	e046      	b.n	80094b2 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 8009424:	2302      	movs	r3, #2
 8009426:	61fb      	str	r3, [r7, #28]
 8009428:	e010      	b.n	800944c <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	4413      	add	r3, r2
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	2b66      	cmp	r3, #102	@ 0x66
 8009434:	d007      	beq.n	8009446 <mg_v4mapped+0x5c>
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	4413      	add	r3, r2
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b46      	cmp	r3, #70	@ 0x46
 8009440:	d001      	beq.n	8009446 <mg_v4mapped+0x5c>
 8009442:	2300      	movs	r3, #0
 8009444:	e035      	b.n	80094b2 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	3301      	adds	r3, #1
 800944a:	61fb      	str	r3, [r7, #28]
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	2b05      	cmp	r3, #5
 8009450:	ddeb      	ble.n	800942a <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	1dd9      	adds	r1, r3, #7
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	1fda      	subs	r2, r3, #7
 800945a:	f107 0314 	add.w	r3, r7, #20
 800945e:	4618      	mov	r0, r3
 8009460:	f005 fc4b 	bl	800ecfa <mg_str_n>
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	f107 0314 	add.w	r3, r7, #20
 800946a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800946e:	f7ff ff46 	bl	80092fe <mg_aton4>
 8009472:	4603      	mov	r3, r0
 8009474:	f083 0301 	eor.w	r3, r3, #1
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <mg_v4mapped+0x98>
 800947e:	2300      	movs	r3, #0
 8009480:	e017      	b.n	80094b2 <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2210      	movs	r2, #16
 800948c:	2100      	movs	r1, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f018 fca8 	bl	8021de4 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	22ff      	movs	r2, #255	@ 0xff
 8009498:	72da      	strb	r2, [r3, #11]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	7ada      	ldrb	r2, [r3, #11]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	330c      	adds	r3, #12
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	74da      	strb	r2, [r3, #19]
  return true;
 80094b0:	2301      	movs	r3, #1
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3720      	adds	r7, #32
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b090      	sub	sp, #64	@ 0x40
 80094be:	af02      	add	r7, sp, #8
 80094c0:	f107 0308 	add.w	r3, r7, #8
 80094c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80094c8:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 80094ca:	2300      	movs	r3, #0
 80094cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80094ce:	2300      	movs	r3, #0
 80094d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094d2:	232a      	movs	r3, #42	@ 0x2a
 80094d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d909      	bls.n	80094f6 <mg_aton6+0x3c>
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	2b5b      	cmp	r3, #91	@ 0x5b
 80094e8:	d105      	bne.n	80094f6 <mg_aton6+0x3c>
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	3301      	adds	r3, #1
 80094ee:	60bb      	str	r3, [r7, #8]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	3b02      	subs	r3, #2
 80094f4:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	f107 0308 	add.w	r3, r7, #8
 80094fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009500:	f7ff ff73 	bl	80093ea <mg_v4mapped>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <mg_aton6+0x54>
 800950a:	2301      	movs	r3, #1
 800950c:	e0e1      	b.n	80096d2 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800950e:	2300      	movs	r3, #0
 8009510:	637b      	str	r3, [r7, #52]	@ 0x34
 8009512:	e0b0      	b.n	8009676 <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009518:	4413      	add	r3, r2
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	2b2f      	cmp	r3, #47	@ 0x2f
 800951e:	d905      	bls.n	800952c <mg_aton6+0x72>
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009524:	4413      	add	r3, r2
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b39      	cmp	r3, #57	@ 0x39
 800952a:	d917      	bls.n	800955c <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009530:	4413      	add	r3, r2
 8009532:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8009534:	2b60      	cmp	r3, #96	@ 0x60
 8009536:	d905      	bls.n	8009544 <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800953c:	4413      	add	r3, r2
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	2b66      	cmp	r3, #102	@ 0x66
 8009542:	d90b      	bls.n	800955c <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009548:	4413      	add	r3, r2
 800954a:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800954c:	2b40      	cmp	r3, #64	@ 0x40
 800954e:	d933      	bls.n	80095b8 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009554:	4413      	add	r3, r2
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	2b46      	cmp	r3, #70	@ 0x46
 800955a:	d82d      	bhi.n	80095b8 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 800955c:	2300      	movs	r3, #0
 800955e:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 8009560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009562:	3303      	adds	r3, #3
 8009564:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009566:	429a      	cmp	r2, r3
 8009568:	d901      	bls.n	800956e <mg_aton6+0xb4>
 800956a:	2300      	movs	r3, #0
 800956c:	e0b1      	b.n	80096d2 <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009572:	18d1      	adds	r1, r2, r3
 8009574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	1c5a      	adds	r2, r3, #1
 800957c:	f107 0318 	add.w	r3, r7, #24
 8009580:	4618      	mov	r0, r3
 8009582:	f005 fbba 	bl	800ecfa <mg_str_n>
 8009586:	f107 0314 	add.w	r3, r7, #20
 800958a:	2204      	movs	r2, #4
 800958c:	9200      	str	r2, [sp, #0]
 800958e:	2210      	movs	r2, #16
 8009590:	f107 0118 	add.w	r1, r7, #24
 8009594:	c903      	ldmia	r1, {r0, r1}
 8009596:	f005 fdee 	bl	800f176 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	0a1b      	lsrs	r3, r3, #8
 800959e:	b2d9      	uxtb	r1, r3
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a4:	4413      	add	r3, r2
 80095a6:	460a      	mov	r2, r1
 80095a8:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ae:	3301      	adds	r3, #1
 80095b0:	b2d1      	uxtb	r1, r2
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 80095b6:	e05b      	b.n	8009670 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095bc:	4413      	add	r3, r2
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80095c2:	d134      	bne.n	800962e <mg_aton6+0x174>
      j = i + 1;
 80095c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c6:	3301      	adds	r3, #1
 80095c8:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 80095ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d014      	beq.n	80095fa <mg_aton6+0x140>
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d4:	3b01      	subs	r3, #1
 80095d6:	4413      	add	r3, r2
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	2b3a      	cmp	r3, #58	@ 0x3a
 80095dc:	d10d      	bne.n	80095fa <mg_aton6+0x140>
        dc = n;  // Double colon
 80095de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 80095e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d90f      	bls.n	8009608 <mg_aton6+0x14e>
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ec:	3b02      	subs	r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80095f4:	d108      	bne.n	8009608 <mg_aton6+0x14e>
 80095f6:	2300      	movs	r3, #0
 80095f8:	e06b      	b.n	80096d2 <mg_aton6+0x218>
      } else if (i > 0) {
 80095fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <mg_aton6+0x150>
        n += 2;
 8009600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009602:	3302      	adds	r3, #2
 8009604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009606:	e000      	b.n	800960a <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8009608:	bf00      	nop
      }
      if (n > 14) return false;
 800960a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800960c:	2b0e      	cmp	r3, #14
 800960e:	d901      	bls.n	8009614 <mg_aton6+0x15a>
 8009610:	2300      	movs	r3, #0
 8009612:	e05e      	b.n	80096d2 <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8009614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009616:	3301      	adds	r3, #1
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	2100      	movs	r1, #0
 800961c:	54d1      	strb	r1, [r2, r3]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	5cd1      	ldrb	r1, [r2, r3]
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009626:	4413      	add	r3, r2
 8009628:	460a      	mov	r2, r1
 800962a:	701a      	strb	r2, [r3, #0]
 800962c:	e020      	b.n	8009670 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009632:	4413      	add	r3, r2
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	2b25      	cmp	r3, #37	@ 0x25
 8009638:	d118      	bne.n	800966c <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963e:	3301      	adds	r3, #1
 8009640:	18d1      	adds	r1, r2, r3
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	1e5a      	subs	r2, r3, #1
 800964a:	f107 0320 	add.w	r3, r7, #32
 800964e:	4618      	mov	r0, r3
 8009650:	f005 fb53 	bl	800ecfa <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8009658:	2201      	movs	r2, #1
 800965a:	9200      	str	r2, [sp, #0]
 800965c:	220a      	movs	r2, #10
 800965e:	f107 0120 	add.w	r1, r7, #32
 8009662:	c903      	ldmia	r1, {r0, r1}
 8009664:	f005 fd87 	bl	800f176 <mg_str_to_num>
 8009668:	4603      	mov	r3, r0
 800966a:	e032      	b.n	80096d2 <mg_aton6+0x218>
    } else {
      return false;
 800966c:	2300      	movs	r3, #0
 800966e:	e030      	b.n	80096d2 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 8009670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009672:	3301      	adds	r3, #1
 8009674:	637b      	str	r3, [r7, #52]	@ 0x34
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800967a:	429a      	cmp	r2, r3
 800967c:	f4ff af4a 	bcc.w	8009514 <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 8009680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009682:	2b0d      	cmp	r3, #13
 8009684:	d804      	bhi.n	8009690 <mg_aton6+0x1d6>
 8009686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009688:	2b2a      	cmp	r3, #42	@ 0x2a
 800968a:	d101      	bne.n	8009690 <mg_aton6+0x1d6>
 800968c:	2300      	movs	r3, #0
 800968e:	e020      	b.n	80096d2 <mg_aton6+0x218>
  if (n < 14) {
 8009690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009692:	2b0d      	cmp	r3, #13
 8009694:	d819      	bhi.n	80096ca <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 8009696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	330e      	adds	r3, #14
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	18d0      	adds	r0, r2, r3
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a6:	18d1      	adds	r1, r2, r3
 80096a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	3302      	adds	r3, #2
 80096b0:	461a      	mov	r2, r3
 80096b2:	f018 fb7d 	bl	8021db0 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ba:	18d0      	adds	r0, r2, r3
 80096bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096be:	f1c3 030e 	rsb	r3, r3, #14
 80096c2:	461a      	mov	r2, r3
 80096c4:	2100      	movs	r1, #0
 80096c6:	f018 fb8d 	bl	8021de4 <memset>
  }

  addr->is_ip6 = true;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	74da      	strb	r2, [r3, #19]
  return true;
 80096d0:	2301      	movs	r3, #1
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3738      	adds	r7, #56	@ 0x38
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	f107 0308 	add.w	r3, r7, #8
 80096e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80096e8:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	f107 0308 	add.w	r3, r7, #8
 80096f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80096f4:	f7ff fde8 	bl	80092c8 <mg_atone>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d11d      	bne.n	800973a <mg_aton+0x60>
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	f107 0308 	add.w	r3, r7, #8
 8009704:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009708:	f7ff fdae 	bl	8009268 <mg_atonl>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d113      	bne.n	800973a <mg_aton+0x60>
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	f107 0308 	add.w	r3, r7, #8
 8009718:	e893 0003 	ldmia.w	r3, {r0, r1}
 800971c:	f7ff fdef 	bl	80092fe <mg_aton4>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d109      	bne.n	800973a <mg_aton+0x60>
         mg_aton6(str, addr);
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	f107 0308 	add.w	r3, r7, #8
 800972c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009730:	f7ff fec3 	bl	80094ba <mg_aton6>
 8009734:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <mg_aton+0x64>
 800973a:	2301      	movs	r3, #1
 800973c:	e000      	b.n	8009740 <mg_aton+0x66>
 800973e:	2300      	movs	r3, #0
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	b2db      	uxtb	r3, r3
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975a:	33b0      	adds	r3, #176	@ 0xb0
 800975c:	4619      	mov	r1, r3
 800975e:	2001      	movs	r0, #1
 8009760:	f017 f88e 	bl	8020880 <calloc>
 8009764:	4603      	mov	r3, r0
 8009766:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d017      	beq.n	800979e <mg_alloc_conn+0x50>
    c->mgr = mgr;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800977a:	675a      	str	r2, [r3, #116]	@ 0x74
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	645a      	str	r2, [r3, #68]	@ 0x44
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	69db      	ldr	r3, [r3, #28]
 8009790:	1c5a      	adds	r2, r3, #1
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	61da      	str	r2, [r3, #28]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	69da      	ldr	r2, [r3, #28]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 800979e:	68fb      	ldr	r3, [r7, #12]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7f8 fb0c 	bl	8001dce <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	e002      	b.n	80097c4 <mg_close_conn+0x1c>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	60fb      	str	r3, [r7, #12]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d1f7      	bne.n	80097be <mg_close_conn+0x16>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d103      	bne.n	80097ea <mg_close_conn+0x42>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d103      	bne.n	80097fe <mg_close_conn+0x56>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 80097fe:	2200      	movs	r2, #0
 8009800:	2109      	movs	r1, #9
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7f9 f88a 	bl	800291c <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 8009808:	4b17      	ldr	r3, [pc, #92]	@ (8009868 <mg_close_conn+0xc0>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b02      	cmp	r3, #2
 800980e:	dd0e      	ble.n	800982e <mg_close_conn+0x86>
 8009810:	4b16      	ldr	r3, [pc, #88]	@ (800986c <mg_close_conn+0xc4>)
 8009812:	f241 326b 	movw	r2, #4971	@ 0x136b
 8009816:	4916      	ldr	r1, [pc, #88]	@ (8009870 <mg_close_conn+0xc8>)
 8009818:	2003      	movs	r0, #3
 800981a:	f7fe fb89 	bl	8007f30 <mg_log_prefix>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009826:	461a      	mov	r2, r3
 8009828:	4812      	ldr	r0, [pc, #72]	@ (8009874 <mg_close_conn+0xcc>)
 800982a:	f7fe fbd1 	bl	8007fd0 <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f008 fd92 	bl	8012358 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3338      	adds	r3, #56	@ 0x38
 8009838:	4618      	mov	r0, r3
 800983a:	f7fd fcd4 	bl	80071e6 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	3348      	adds	r3, #72	@ 0x48
 8009842:	4618      	mov	r0, r3
 8009844:	f7fd fccf 	bl	80071e6 <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	3368      	adds	r3, #104	@ 0x68
 800984c:	4618      	mov	r0, r3
 800984e:	f7fd fcca 	bl	80071e6 <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 8009852:	21b0      	movs	r1, #176	@ 0xb0
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f00e f875 	bl	8017944 <mg_bzero>
  free(c);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f017 f834 	bl	80208c8 <free>
}
 8009860:	bf00      	nop
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	24000240 	.word	0x24000240
 800986c:	08028f60 	.word	0x08028f60
 8009870:	0802597c 	.word	0x0802597c
 8009874:	080269bc 	.word	0x080269bc

08009878 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
 8009884:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <mg_connect+0x20>
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10e      	bne.n	80098b6 <mg_connect+0x3e>
    MG_ERROR(("null url"));
 8009898:	4b37      	ldr	r3, [pc, #220]	@ (8009978 <mg_connect+0x100>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	dd66      	ble.n	800996e <mg_connect+0xf6>
 80098a0:	4b36      	ldr	r3, [pc, #216]	@ (800997c <mg_connect+0x104>)
 80098a2:	f241 327b 	movw	r2, #4987	@ 0x137b
 80098a6:	4936      	ldr	r1, [pc, #216]	@ (8009980 <mg_connect+0x108>)
 80098a8:	2001      	movs	r0, #1
 80098aa:	f7fe fb41 	bl	8007f30 <mg_log_prefix>
 80098ae:	4835      	ldr	r0, [pc, #212]	@ (8009984 <mg_connect+0x10c>)
 80098b0:	f7fe fb8e 	bl	8007fd0 <mg_log>
 80098b4:	e05b      	b.n	800996e <mg_connect+0xf6>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f7ff ff49 	bl	800974e <mg_alloc_conn>
 80098bc:	6178      	str	r0, [r7, #20]
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10e      	bne.n	80098e2 <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 80098c4:	4b2c      	ldr	r3, [pc, #176]	@ (8009978 <mg_connect+0x100>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dd50      	ble.n	800996e <mg_connect+0xf6>
 80098cc:	4b2b      	ldr	r3, [pc, #172]	@ (800997c <mg_connect+0x104>)
 80098ce:	f241 327d 	movw	r2, #4989	@ 0x137d
 80098d2:	492b      	ldr	r1, [pc, #172]	@ (8009980 <mg_connect+0x108>)
 80098d4:	2001      	movs	r0, #1
 80098d6:	f7fe fb2b 	bl	8007f30 <mg_log_prefix>
 80098da:	482b      	ldr	r0, [pc, #172]	@ (8009988 <mg_connect+0x110>)
 80098dc:	f7fe fb78 	bl	8007fd0 <mg_log>
 80098e0:	e045      	b.n	800996e <mg_connect+0xf6>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 80098f0:	2204      	movs	r2, #4
 80098f2:	4926      	ldr	r1, [pc, #152]	@ (800998c <mg_connect+0x114>)
 80098f4:	68b8      	ldr	r0, [r7, #8]
 80098f6:	f018 fa8a 	bl	8021e0e <strncmp>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	bf0c      	ite	eq
 8009900:	2301      	moveq	r3, #1
 8009902:	2300      	movne	r3, #0
 8009904:	b2d9      	uxtb	r1, r3
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800990c:	f361 0300 	bfi	r3, r1, #0, #1
 8009910:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f04f 32ff 	mov.w	r2, #4294967295
 800991a:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8009928:	f043 0302 	orr.w	r3, r3, #2
 800992c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8009936:	4b10      	ldr	r3, [pc, #64]	@ (8009978 <mg_connect+0x100>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b02      	cmp	r3, #2
 800993c:	dd0e      	ble.n	800995c <mg_connect+0xe4>
 800993e:	4b0f      	ldr	r3, [pc, #60]	@ (800997c <mg_connect+0x104>)
 8009940:	f241 3285 	movw	r2, #4997	@ 0x1385
 8009944:	490e      	ldr	r1, [pc, #56]	@ (8009980 <mg_connect+0x108>)
 8009946:	2003      	movs	r0, #3
 8009948:	f7fe faf2 	bl	8007f30 <mg_log_prefix>
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	480e      	ldr	r0, [pc, #56]	@ (8009990 <mg_connect+0x118>)
 8009958:	f7fe fb3a 	bl	8007fd0 <mg_log>
    mg_call(c, MG_EV_OPEN, (void *) url);
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	2101      	movs	r1, #1
 8009960:	6978      	ldr	r0, [r7, #20]
 8009962:	f7f8 ffdb 	bl	800291c <mg_call>
    mg_resolve(c, url);
 8009966:	68b9      	ldr	r1, [r7, #8]
 8009968:	6978      	ldr	r0, [r7, #20]
 800996a:	f7f8 ff93 	bl	8002894 <mg_resolve>
  }
  return c;
 800996e:	697b      	ldr	r3, [r7, #20]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	24000240 	.word	0x24000240
 800997c:	08028f70 	.word	0x08028f70
 8009980:	0802597c 	.word	0x0802597c
 8009984:	080269cc 	.word	0x080269cc
 8009988:	080269d8 	.word	0x080269d8
 800998c:	080269dc 	.word	0x080269dc
 8009990:	08025d04 	.word	0x08025d04

08009994 <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 80099a2:	2300      	movs	r3, #0
 80099a4:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f7ff fed1 	bl	800974e <mg_alloc_conn>
 80099ac:	6178      	str	r0, [r7, #20]
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10f      	bne.n	80099d4 <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 80099b4:	4b41      	ldr	r3, [pc, #260]	@ (8009abc <mg_listen+0x128>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	dd7a      	ble.n	8009ab2 <mg_listen+0x11e>
 80099bc:	4b40      	ldr	r3, [pc, #256]	@ (8009ac0 <mg_listen+0x12c>)
 80099be:	f241 3290 	movw	r2, #5008	@ 0x1390
 80099c2:	4940      	ldr	r1, [pc, #256]	@ (8009ac4 <mg_listen+0x130>)
 80099c4:	2001      	movs	r0, #1
 80099c6:	f7fe fab3 	bl	8007f30 <mg_log_prefix>
 80099ca:	68b9      	ldr	r1, [r7, #8]
 80099cc:	483e      	ldr	r0, [pc, #248]	@ (8009ac8 <mg_listen+0x134>)
 80099ce:	f7fe faff 	bl	8007fd0 <mg_log>
 80099d2:	e06e      	b.n	8009ab2 <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 80099d4:	68b9      	ldr	r1, [r7, #8]
 80099d6:	6978      	ldr	r0, [r7, #20]
 80099d8:	f003 f974 	bl	800ccc4 <mg_open_listener>
 80099dc:	4603      	mov	r3, r0
 80099de:	f083 0301 	eor.w	r3, r3, #1
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d019      	beq.n	8009a1c <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 80099e8:	4b34      	ldr	r3, [pc, #208]	@ (8009abc <mg_listen+0x128>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	dd0f      	ble.n	8009a10 <mg_listen+0x7c>
 80099f0:	4b33      	ldr	r3, [pc, #204]	@ (8009ac0 <mg_listen+0x12c>)
 80099f2:	f241 3292 	movw	r2, #5010	@ 0x1392
 80099f6:	4933      	ldr	r1, [pc, #204]	@ (8009ac4 <mg_listen+0x130>)
 80099f8:	2001      	movs	r0, #1
 80099fa:	f7fe fa99 	bl	8007f30 <mg_log_prefix>
 80099fe:	f018 fab1 	bl	8021f64 <__errno>
 8009a02:	4603      	mov	r3, r0
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	4830      	ldr	r0, [pc, #192]	@ (8009acc <mg_listen+0x138>)
 8009a0c:	f7fe fae0 	bl	8007fd0 <mg_log>
    MG_PROF_FREE(c);
    free(c);
 8009a10:	6978      	ldr	r0, [r7, #20]
 8009a12:	f016 ff59 	bl	80208c8 <free>
    c = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	617b      	str	r3, [r7, #20]
 8009a1a:	e04a      	b.n	8009ab2 <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8009a22:	f043 0301 	orr.w	r3, r3, #1
 8009a26:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8009a2a:	2204      	movs	r2, #4
 8009a2c:	4928      	ldr	r1, [pc, #160]	@ (8009ad0 <mg_listen+0x13c>)
 8009a2e:	68b8      	ldr	r0, [r7, #8]
 8009a30:	f018 f9ed 	bl	8021e0e <strncmp>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	bf0c      	ite	eq
 8009a3a:	2301      	moveq	r3, #1
 8009a3c:	2300      	movne	r3, #0
 8009a3e:	b2d9      	uxtb	r1, r3
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8009a46:	f361 0300 	bfi	r3, r1, #0, #1
 8009a4a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	6978      	ldr	r0, [r7, #20]
 8009a6e:	f7f8 ff55 	bl	800291c <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 8009a72:	68b8      	ldr	r0, [r7, #8]
 8009a74:	f00d fe06 	bl	8017684 <mg_url_is_ssl>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d006      	beq.n	8009a8c <mg_listen+0xf8>
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8009a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a88:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009abc <mg_listen+0x128>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	dd0e      	ble.n	8009ab2 <mg_listen+0x11e>
 8009a94:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac0 <mg_listen+0x12c>)
 8009a96:	f241 329e 	movw	r2, #5022	@ 0x139e
 8009a9a:	490a      	ldr	r1, [pc, #40]	@ (8009ac4 <mg_listen+0x130>)
 8009a9c:	2003      	movs	r0, #3
 8009a9e:	f7fe fa47 	bl	8007f30 <mg_log_prefix>
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	4809      	ldr	r0, [pc, #36]	@ (8009ad4 <mg_listen+0x140>)
 8009aae:	f7fe fa8f 	bl	8007fd0 <mg_log>
  }
  return c;
 8009ab2:	697b      	ldr	r3, [r7, #20]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	24000240 	.word	0x24000240
 8009ac0:	08028f7c 	.word	0x08028f7c
 8009ac4:	0802597c 	.word	0x0802597c
 8009ac8:	080269e4 	.word	0x080269e4
 8009acc:	080269ec 	.word	0x080269ec
 8009ad0:	080269dc 	.word	0x080269dc
 8009ad4:	08025d04 	.word	0x08025d04

08009ad8 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08a      	sub	sp, #40	@ 0x28
 8009adc:	af04      	add	r7, sp, #16
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8009ae4:	2128      	movs	r1, #40	@ 0x28
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	f016 feca 	bl	8020880 <calloc>
 8009aec:	4603      	mov	r3, r0
 8009aee:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d014      	beq.n	8009b20 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8009afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afe:	9302      	str	r3, [sp, #8]
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	9301      	str	r3, [sp, #4]
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b0c:	6979      	ldr	r1, [r7, #20]
 8009b0e:	f005 fd65 	bl	800f5dc <mg_timer_init>
    t->id = mgr->timerid++;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	1c59      	adds	r1, r3, #1
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	6211      	str	r1, [r2, #32]
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	6013      	str	r3, [r2, #0]
  }
  return t;
 8009b20:	697b      	ldr	r3, [r7, #20]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 8009b34:	2248      	movs	r2, #72	@ 0x48
 8009b36:	2100      	movs	r1, #0
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f018 f953 	bl	8021de4 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f04f 32ff 	mov.w	r2, #4294967295
 8009b44:	639a      	str	r2, [r3, #56]	@ 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 8009b46:	4b34      	ldr	r3, [pc, #208]	@ (8009c18 <mg_mgr_init+0xec>)
 8009b48:	2204      	movs	r2, #4
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	4b32      	ldr	r3, [pc, #200]	@ (8009c18 <mg_mgr_init+0xec>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	711a      	strb	r2, [r3, #4]
 8009b52:	4b31      	ldr	r3, [pc, #196]	@ (8009c18 <mg_mgr_init+0xec>)
 8009b54:	2202      	movs	r2, #2
 8009b56:	715a      	strb	r2, [r3, #5]
 8009b58:	2000      	movs	r0, #0
 8009b5a:	f00d ff53 	bl	8017a04 <mg_ntohl>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	4a2e      	ldr	r2, [pc, #184]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009b62:	6093      	str	r3, [r2, #8]
 8009b64:	2000      	movs	r0, #0
 8009b66:	f00d ff4d 	bl	8017a04 <mg_ntohl>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009b6e:	60d3      	str	r3, [r2, #12]
 8009b70:	2000      	movs	r0, #0
 8009b72:	f00d ff47 	bl	8017a04 <mg_ntohl>
 8009b76:	4603      	mov	r3, r0
 8009b78:	4a28      	ldr	r2, [pc, #160]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009b7a:	6113      	str	r3, [r2, #16]
 8009b7c:	4b27      	ldr	r3, [pc, #156]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009b7e:	4a28      	ldr	r2, [pc, #160]	@ (8009c20 <mg_mgr_init+0xf4>)
 8009b80:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b82:	4b26      	ldr	r3, [pc, #152]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009b84:	4a24      	ldr	r2, [pc, #144]	@ (8009c18 <mg_mgr_init+0xec>)
 8009b86:	629a      	str	r2, [r3, #40]	@ 0x28
 8009b88:	4b24      	ldr	r3, [pc, #144]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	4b25      	ldr	r3, [pc, #148]	@ (8009c24 <mg_mgr_init+0xf8>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	4b21      	ldr	r3, [pc, #132]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009b96:	705a      	strb	r2, [r3, #1]
 8009b98:	4b22      	ldr	r3, [pc, #136]	@ (8009c24 <mg_mgr_init+0xf8>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	0a9b      	lsrs	r3, r3, #10
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009ba2:	709a      	strb	r2, [r3, #2]
 8009ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8009c24 <mg_mgr_init+0xf8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	0cdb      	lsrs	r3, r3, #19
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	4b1b      	ldr	r3, [pc, #108]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009bae:	70da      	strb	r2, [r3, #3]
 8009bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8009c28 <mg_mgr_init+0xfc>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	4b19      	ldr	r3, [pc, #100]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009bb8:	711a      	strb	r2, [r3, #4]
 8009bba:	4b1c      	ldr	r3, [pc, #112]	@ (8009c2c <mg_mgr_init+0x100>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	4b16      	ldr	r3, [pc, #88]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009bc2:	715a      	strb	r2, [r3, #5]
 8009bc4:	4915      	ldr	r1, [pc, #84]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f002 fe44 	bl	800c854 <mg_tcpip_init>
 8009bcc:	4b18      	ldr	r3, [pc, #96]	@ (8009c30 <mg_mgr_init+0x104>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	dd0b      	ble.n	8009bec <mg_mgr_init+0xc0>
 8009bd4:	4b17      	ldr	r3, [pc, #92]	@ (8009c34 <mg_mgr_init+0x108>)
 8009bd6:	f241 32e7 	movw	r2, #5095	@ 0x13e7
 8009bda:	4917      	ldr	r1, [pc, #92]	@ (8009c38 <mg_mgr_init+0x10c>)
 8009bdc:	2002      	movs	r0, #2
 8009bde:	f7fe f9a7 	bl	8007f30 <mg_log_prefix>
 8009be2:	4a0e      	ldr	r2, [pc, #56]	@ (8009c1c <mg_mgr_init+0xf0>)
 8009be4:	4915      	ldr	r1, [pc, #84]	@ (8009c3c <mg_mgr_init+0x110>)
 8009be6:	4816      	ldr	r0, [pc, #88]	@ (8009c40 <mg_mgr_init+0x114>)
 8009be8:	f7fe f9f2 	bl	8007fd0 <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8009bfa:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a11      	ldr	r2, [pc, #68]	@ (8009c44 <mg_mgr_init+0x118>)
 8009c00:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a10      	ldr	r2, [pc, #64]	@ (8009c48 <mg_mgr_init+0x11c>)
 8009c06:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f008 fc69 	bl	80124e0 <mg_tls_ctx_init>
}
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	24003e84 	.word	0x24003e84
 8009c1c:	24003e90 	.word	0x24003e90
 8009c20:	24000268 	.word	0x24000268
 8009c24:	1ff1e800 	.word	0x1ff1e800
 8009c28:	1ff1e804 	.word	0x1ff1e804
 8009c2c:	1ff1e808 	.word	0x1ff1e808
 8009c30:	24000240 	.word	0x24000240
 8009c34:	08028f88 	.word	0x08028f88
 8009c38:	0802597c 	.word	0x0802597c
 8009c3c:	0800d919 	.word	0x0800d919
 8009c40:	08026a1c 	.word	0x08026a1c
 8009c44:	08026a34 	.word	0x08026a34
 8009c48:	08026a48 	.word	0x08026a48

08009c4c <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d005      	beq.n	8009c6c <mg_tcpip_call+0x20>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	68b9      	ldr	r1, [r7, #8]
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	4798      	blx	r3
}
 8009c6c:	bf00      	nop
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 8009c74:	b590      	push	{r4, r7, lr}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	441a      	add	r2, r3
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	68fc      	ldr	r4, [r7, #12]
 8009c90:	463b      	mov	r3, r7
 8009c92:	68b9      	ldr	r1, [r7, #8]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f005 f830 	bl	800ecfa <mg_str_n>
 8009c9a:	f104 0308 	add.w	r3, r4, #8
 8009c9e:	463a      	mov	r2, r7
 8009ca0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ca4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8009ca8:	bf00      	nop
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd90      	pop	{r4, r7, pc}

08009cb0 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]
 8009cc4:	e014      	b.n	8009cf0 <csumup+0x40>
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d004      	beq.n	8009cda <csumup+0x2a>
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	e004      	b.n	8009ce4 <csumup+0x34>
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	4413      	add	r3, r2
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	021b      	lsls	r3, r3, #8
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	3301      	adds	r3, #1
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d3e6      	bcc.n	8009cc6 <csumup+0x16>
  return sum;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	371c      	adds	r7, #28
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b082      	sub	sp, #8
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8009d0e:	e005      	b.n	8009d1c <csumfin+0x16>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	0c1b      	lsrs	r3, r3, #16
 8009d18:	4413      	add	r3, r2
 8009d1a:	607b      	str	r3, [r7, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	0c1b      	lsrs	r3, r3, #16
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1f5      	bne.n	8009d10 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	43db      	mvns	r3, r3
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f00d fe82 	bl	8017a36 <mg_ntohs>
 8009d32:	4603      	mov	r3, r0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	6879      	ldr	r1, [r7, #4]
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	f7ff ffb0 	bl	8009cb0 <csumup>
 8009d50:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f7ff ffd7 	bl	8009d06 <csumfin>
 8009d58:	4603      	mov	r3, r0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
	...

08009d64 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 8009d64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009d68:	b088      	sub	sp, #32
 8009d6a:	af02      	add	r7, sp, #8
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d78:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	33b0      	adds	r3, #176	@ 0xb0
 8009d7e:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d013      	beq.n	8009dae <settmout+0x4a>
 8009d86:	78fb      	ldrb	r3, [r7, #3]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d00e      	beq.n	8009daa <settmout+0x46>
 8009d8c:	78fb      	ldrb	r3, [r7, #3]
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d008      	beq.n	8009da4 <settmout+0x40>
 8009d92:	78fb      	ldrb	r3, [r7, #3]
 8009d94:	2b04      	cmp	r3, #4
 8009d96:	d102      	bne.n	8009d9e <settmout+0x3a>
 8009d98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009d9c:	e008      	b.n	8009db0 <settmout+0x4c>
 8009d9e:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8009da2:	e005      	b.n	8009db0 <settmout+0x4c>
 8009da4:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8009da8:	e002      	b.n	8009db0 <settmout+0x4c>
 8009daa:	2364      	movs	r3, #100	@ 0x64
 8009dac:	e000      	b.n	8009db0 <settmout+0x4c>
 8009dae:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 8009db0:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8009db8:	68f9      	ldr	r1, [r7, #12]
 8009dba:	2000      	movs	r0, #0
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	eb12 0804 	adds.w	r8, r2, r4
 8009dc4:	eb43 0905 	adc.w	r9, r3, r5
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	78fa      	ldrb	r2, [r7, #3]
 8009dd2:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8009dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8009e0c <settmout+0xa8>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	dd12      	ble.n	8009e02 <settmout+0x9e>
 8009ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8009e10 <settmout+0xac>)
 8009dde:	f241 42a5 	movw	r2, #5285	@ 0x14a5
 8009de2:	490c      	ldr	r1, [pc, #48]	@ (8009e14 <settmout+0xb0>)
 8009de4:	2004      	movs	r0, #4
 8009de6:	f7fe f8a3 	bl	8007f30 <mg_log_prefix>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009dee:	78f8      	ldrb	r0, [r7, #3]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009df6:	e9cd 2300 	strd	r2, r3, [sp]
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	4806      	ldr	r0, [pc, #24]	@ (8009e18 <settmout+0xb4>)
 8009dfe:	f7fe f8e7 	bl	8007fd0 <mg_log>
}
 8009e02:	bf00      	nop
 8009e04:	3718      	adds	r7, #24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009e0c:	24000240 	.word	0x24000240
 8009e10:	08028f94 	.word	0x08028f94
 8009e14:	0802597c 	.word	0x0802597c
 8009e18:	08026a68 	.word	0x08026a68

08009e1c <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6950      	ldr	r0, [r2, #20]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	4798      	blx	r3
 8009e36:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d104      	bne.n	8009e4a <ether_output+0x2e>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e44:	1c5a      	adds	r2, r3, #1
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	675a      	str	r2, [r3, #116]	@ 0x74
  return n;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	330e      	adds	r3, #14
 8009e6a:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	2206      	movs	r2, #6
 8009e70:	21ff      	movs	r1, #255	@ 0xff
 8009e72:	4618      	mov	r0, r3
 8009e74:	f017 ffb6 	bl	8021de4 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	3306      	adds	r3, #6
 8009e7c:	68f9      	ldr	r1, [r7, #12]
 8009e7e:	2206      	movs	r2, #6
 8009e80:	4618      	mov	r0, r3
 8009e82:	f018 f8a4 	bl	8021fce <memcpy>
  eth->type = mg_htons(0x806);
 8009e86:	f640 0006 	movw	r0, #2054	@ 0x806
 8009e8a:	f00d fdd4 	bl	8017a36 <mg_ntohs>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	461a      	mov	r2, r3
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 8009e96:	221c      	movs	r2, #28
 8009e98:	2100      	movs	r1, #0
 8009e9a:	6938      	ldr	r0, [r7, #16]
 8009e9c:	f017 ffa2 	bl	8021de4 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8009ea0:	2001      	movs	r0, #1
 8009ea2:	f00d fdc8 	bl	8017a36 <mg_ntohs>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	801a      	strh	r2, [r3, #0]
 8009eae:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009eb2:	f00d fdc0 	bl	8017a36 <mg_ntohs>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	461a      	mov	r2, r3
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	805a      	strh	r2, [r3, #2]
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2206      	movs	r2, #6
 8009ec2:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	2204      	movs	r2, #4
 8009ec8:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8009eca:	2001      	movs	r0, #1
 8009ecc:	f00d fdb3 	bl	8017a36 <mg_ntohs>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	80da      	strh	r2, [r3, #6]
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	619a      	str	r2, [r3, #24]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	689a      	ldr	r2, [r3, #8]
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	3308      	adds	r3, #8
 8009eec:	68f9      	ldr	r1, [r7, #12]
 8009eee:	2206      	movs	r2, #6
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f018 f86c 	bl	8021fce <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d006      	beq.n	8009f0a <mg_tcpip_arp_request+0xb6>
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	3312      	adds	r3, #18
 8009f00:	2206      	movs	r2, #6
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f018 f862 	bl	8021fce <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f103 021c 	add.w	r2, r3, #28
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	4619      	mov	r1, r3
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f7ff ff80 	bl	8009e1c <ether_output>
}
 8009f1c:	bf00      	nop
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d135      	bne.n	8009fa2 <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8009f36:	4b45      	ldr	r3, [pc, #276]	@ (800a04c <onstatechange+0x128>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	dd0d      	ble.n	8009f5a <onstatechange+0x36>
 8009f3e:	4b44      	ldr	r3, [pc, #272]	@ (800a050 <onstatechange+0x12c>)
 8009f40:	f241 42bf 	movw	r2, #5311	@ 0x14bf
 8009f44:	4943      	ldr	r1, [pc, #268]	@ (800a054 <onstatechange+0x130>)
 8009f46:	2002      	movs	r0, #2
 8009f48:	f7fd fff2 	bl	8007f30 <mg_log_prefix>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	3308      	adds	r3, #8
 8009f50:	461a      	mov	r2, r3
 8009f52:	4941      	ldr	r1, [pc, #260]	@ (800a058 <onstatechange+0x134>)
 8009f54:	4841      	ldr	r0, [pc, #260]	@ (800a05c <onstatechange+0x138>)
 8009f56:	f7fe f83b 	bl	8007fd0 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8009f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800a04c <onstatechange+0x128>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	dd0d      	ble.n	8009f7e <onstatechange+0x5a>
 8009f62:	4b3b      	ldr	r3, [pc, #236]	@ (800a050 <onstatechange+0x12c>)
 8009f64:	f44f 52a6 	mov.w	r2, #5312	@ 0x14c0
 8009f68:	493a      	ldr	r1, [pc, #232]	@ (800a054 <onstatechange+0x130>)
 8009f6a:	2002      	movs	r0, #2
 8009f6c:	f7fd ffe0 	bl	8007f30 <mg_log_prefix>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	3310      	adds	r3, #16
 8009f74:	461a      	mov	r2, r3
 8009f76:	4938      	ldr	r1, [pc, #224]	@ (800a058 <onstatechange+0x134>)
 8009f78:	4839      	ldr	r0, [pc, #228]	@ (800a060 <onstatechange+0x13c>)
 8009f7a:	f7fe f829 	bl	8007fd0 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8009f7e:	4b33      	ldr	r3, [pc, #204]	@ (800a04c <onstatechange+0x128>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	dd57      	ble.n	800a036 <onstatechange+0x112>
 8009f86:	4b32      	ldr	r3, [pc, #200]	@ (800a050 <onstatechange+0x12c>)
 8009f88:	f241 42c1 	movw	r2, #5313	@ 0x14c1
 8009f8c:	4931      	ldr	r1, [pc, #196]	@ (800a054 <onstatechange+0x130>)
 8009f8e:	2002      	movs	r0, #2
 8009f90:	f7fd ffce 	bl	8007f30 <mg_log_prefix>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	461a      	mov	r2, r3
 8009f98:	4932      	ldr	r1, [pc, #200]	@ (800a064 <onstatechange+0x140>)
 8009f9a:	4833      	ldr	r0, [pc, #204]	@ (800a068 <onstatechange+0x144>)
 8009f9c:	f7fe f818 	bl	8007fd0 <mg_log>
 8009fa0:	e049      	b.n	800a036 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009fa8:	2b03      	cmp	r3, #3
 8009faa:	d115      	bne.n	8009fd8 <onstatechange+0xb4>
    MG_ERROR(("Got IP"));
 8009fac:	4b27      	ldr	r3, [pc, #156]	@ (800a04c <onstatechange+0x128>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dd09      	ble.n	8009fc8 <onstatechange+0xa4>
 8009fb4:	4b26      	ldr	r3, [pc, #152]	@ (800a050 <onstatechange+0x12c>)
 8009fb6:	f241 42c3 	movw	r2, #5315	@ 0x14c3
 8009fba:	4926      	ldr	r1, [pc, #152]	@ (800a054 <onstatechange+0x130>)
 8009fbc:	2001      	movs	r0, #1
 8009fbe:	f7fd ffb7 	bl	8007f30 <mg_log_prefix>
 8009fc2:	482a      	ldr	r0, [pc, #168]	@ (800a06c <onstatechange+0x148>)
 8009fc4:	f7fe f804 	bl	8007fd0 <mg_log>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff ff3f 	bl	8009e54 <mg_tcpip_arp_request>
 8009fd6:	e02e      	b.n	800a036 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d116      	bne.n	800a010 <onstatechange+0xec>
    MG_ERROR(("Link up"));
 8009fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800a04c <onstatechange+0x128>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	dd09      	ble.n	8009ffe <onstatechange+0xda>
 8009fea:	4b19      	ldr	r3, [pc, #100]	@ (800a050 <onstatechange+0x12c>)
 8009fec:	f241 42c6 	movw	r2, #5318	@ 0x14c6
 8009ff0:	4918      	ldr	r1, [pc, #96]	@ (800a054 <onstatechange+0x130>)
 8009ff2:	2001      	movs	r0, #1
 8009ff4:	f7fd ff9c 	bl	8007f30 <mg_log_prefix>
 8009ff8:	481d      	ldr	r0, [pc, #116]	@ (800a070 <onstatechange+0x14c>)
 8009ffa:	f7fd ffe9 	bl	8007fd0 <mg_log>
    srand((unsigned int) mg_millis());
 8009ffe:	f7f6 ffbf 	bl	8000f80 <mg_millis>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4613      	mov	r3, r2
 800a008:	4618      	mov	r0, r3
 800a00a:	f016 fd13 	bl	8020a34 <srand>
 800a00e:	e012      	b.n	800a036 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10d      	bne.n	800a036 <onstatechange+0x112>
    MG_ERROR(("Link down"));
 800a01a:	4b0c      	ldr	r3, [pc, #48]	@ (800a04c <onstatechange+0x128>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	dd09      	ble.n	800a036 <onstatechange+0x112>
 800a022:	4b0b      	ldr	r3, [pc, #44]	@ (800a050 <onstatechange+0x12c>)
 800a024:	f241 42c9 	movw	r2, #5321	@ 0x14c9
 800a028:	490a      	ldr	r1, [pc, #40]	@ (800a054 <onstatechange+0x130>)
 800a02a:	2001      	movs	r0, #1
 800a02c:	f7fd ff80 	bl	8007f30 <mg_log_prefix>
 800a030:	4810      	ldr	r0, [pc, #64]	@ (800a074 <onstatechange+0x150>)
 800a032:	f7fd ffcd 	bl	8007fd0 <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	337c      	adds	r3, #124	@ 0x7c
 800a03a:	461a      	mov	r2, r3
 800a03c:	2100      	movs	r1, #0
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7ff fe04 	bl	8009c4c <mg_tcpip_call>
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	24000240 	.word	0x24000240
 800a050:	08028fa0 	.word	0x08028fa0
 800a054:	0802597c 	.word	0x0802597c
 800a058:	0800d855 	.word	0x0800d855
 800a05c:	08026a78 	.word	0x08026a78
 800a060:	08026a88 	.word	0x08026a88
 800a064:	0800d919 	.word	0x0800d919
 800a068:	08026a98 	.word	0x08026a98
 800a06c:	08026aa8 	.word	0x08026aa8
 800a070:	08026ab0 	.word	0x08026ab0
 800a074:	08026ab8 	.word	0x08026ab8

0800a078 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	4613      	mov	r3, r2
 800a086:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	330e      	adds	r3, #14
 800a092:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	2206      	movs	r2, #6
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f017 ff97 	bl	8021fce <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	3306      	adds	r3, #6
 800a0a4:	68f9      	ldr	r1, [r7, #12]
 800a0a6:	2206      	movs	r2, #6
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f017 ff90 	bl	8021fce <memcpy>
  eth->type = mg_htons(0x800);
 800a0ae:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a0b2:	f00d fcc0 	bl	8017a36 <mg_ntohs>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800a0be:	2214      	movs	r2, #20
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	6938      	ldr	r0, [r7, #16]
 800a0c4:	f017 fe8e 	bl	8021de4 <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	2245      	movs	r2, #69	@ 0x45
 800a0cc:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 800a0ce:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a0d2:	f00d fcb0 	bl	8017a36 <mg_ntohs>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	461a      	mov	r2, r3
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800a0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	3314      	adds	r3, #20
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f00d fca5 	bl	8017a36 <mg_ntohs>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	2240      	movs	r2, #64	@ 0x40
 800a0f8:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	79fa      	ldrb	r2, [r7, #7]
 800a0fe:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	6a3a      	ldr	r2, [r7, #32]
 800a10a:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800a10c:	2114      	movs	r1, #20
 800a10e:	6938      	ldr	r0, [r7, #16]
 800a110:	f7ff fe14 	bl	8009d3c <ipcsum>
 800a114:	4603      	mov	r3, r0
 800a116:	461a      	mov	r2, r3
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	815a      	strh	r2, [r3, #10]
  return ip;
 800a11c:	693b      	ldr	r3, [r7, #16]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 800a126:	b580      	push	{r7, lr}
 800a128:	b08a      	sub	sp, #40	@ 0x28
 800a12a:	af02      	add	r7, sp, #8
 800a12c:	60f8      	str	r0, [r7, #12]
 800a12e:	60b9      	str	r1, [r7, #8]
 800a130:	607a      	str	r2, [r7, #4]
 800a132:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800a134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a136:	3308      	adds	r3, #8
 800a138:	9301      	str	r3, [sp, #4]
 800a13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2211      	movs	r2, #17
 800a142:	68b9      	ldr	r1, [r7, #8]
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7ff ff97 	bl	800a078 <tx_ip>
 800a14a:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	3314      	adds	r3, #20
 800a150:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	887a      	ldrh	r2, [r7, #2]
 800a156:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a15c:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800a15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a160:	b29b      	uxth	r3, r3
 800a162:	3308      	adds	r3, #8
 800a164:	b29b      	uxth	r3, r3
 800a166:	4618      	mov	r0, r3
 800a168:	f00d fc65 	bl	8017a36 <mg_ntohs>
 800a16c:	4603      	mov	r3, r0
 800a16e:	461a      	mov	r2, r3
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	2200      	movs	r2, #0
 800a178:	719a      	strb	r2, [r3, #6]
 800a17a:	2200      	movs	r2, #0
 800a17c:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 800a17e:	2208      	movs	r2, #8
 800a180:	69b9      	ldr	r1, [r7, #24]
 800a182:	2000      	movs	r0, #0
 800a184:	f7ff fd94 	bl	8009cb0 <csumup>
 800a188:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800a18a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a18c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a18e:	6978      	ldr	r0, [r7, #20]
 800a190:	f7ff fd8e 	bl	8009cb0 <csumup>
 800a194:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	330c      	adds	r3, #12
 800a19a:	2204      	movs	r2, #4
 800a19c:	4619      	mov	r1, r3
 800a19e:	6978      	ldr	r0, [r7, #20]
 800a1a0:	f7ff fd86 	bl	8009cb0 <csumup>
 800a1a4:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	3310      	adds	r3, #16
 800a1aa:	2204      	movs	r2, #4
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6978      	ldr	r0, [r7, #20]
 800a1b0:	f7ff fd7e 	bl	8009cb0 <csumup>
 800a1b4:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	7a5b      	ldrb	r3, [r3, #9]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1be:	441a      	add	r2, r3
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800a1c8:	6978      	ldr	r0, [r7, #20]
 800a1ca:	f7ff fd9c 	bl	8009d06 <csumfin>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f017 fde6 	bl	8021db0 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 800a1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1e6:	332a      	adds	r3, #42	@ 0x2a
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7ff fe16 	bl	8009e1c <ether_output>
}
 800a1f0:	bf00      	nop
 800a1f2:	3720      	adds	r7, #32
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 800a1f8:	b5b0      	push	{r4, r5, r7, lr}
 800a1fa:	b0cc      	sub	sp, #304	@ 0x130
 800a1fc:	af04      	add	r7, sp, #16
 800a1fe:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 800a202:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800a206:	6020      	str	r0, [r4, #0]
 800a208:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800a20c:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 800a210:	6001      	str	r1, [r0, #0]
 800a212:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800a216:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800a21a:	600a      	str	r2, [r1, #0]
 800a21c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800a220:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800a224:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800a226:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a22a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a22e:	4a38      	ldr	r2, [pc, #224]	@ (800a310 <tx_dhcp+0x118>)
 800a230:	4618      	mov	r0, r3
 800a232:	4611      	mov	r1, r2
 800a234:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a238:	461a      	mov	r2, r3
 800a23a:	f017 fec8 	bl	8021fce <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800a23e:	4835      	ldr	r0, [pc, #212]	@ (800a314 <tx_dhcp+0x11c>)
 800a240:	f00d fbe0 	bl	8017a04 <mg_ntohl>
 800a244:	4602      	mov	r2, r0
 800a246:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a24a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a24e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800a252:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a256:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a25a:	6819      	ldr	r1, [r3, #0]
 800a25c:	f107 0310 	add.w	r3, r7, #16
 800a260:	331c      	adds	r3, #28
 800a262:	2206      	movs	r2, #6
 800a264:	4618      	mov	r0, r3
 800a266:	f017 feb2 	bl	8021fce <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800a26a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a26e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3302      	adds	r3, #2
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	461a      	mov	r2, r3
 800a27a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a27e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a282:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800a284:	f107 0310 	add.w	r3, r7, #16
 800a288:	33f0      	adds	r3, #240	@ 0xf0
 800a28a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800a28e:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 800a292:	4618      	mov	r0, r3
 800a294:	f017 fe9b 	bl	8021fce <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800a298:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d009      	beq.n	800a2b4 <tx_dhcp+0xbc>
 800a2a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a2a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2a8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800a2ac:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800a2b0:	6812      	ldr	r2, [r2, #0]
 800a2b2:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 800a2b4:	2044      	movs	r0, #68	@ 0x44
 800a2b6:	f00d fbbe 	bl	8017a36 <mg_ntohs>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	461d      	mov	r5, r3
 800a2be:	2043      	movs	r0, #67	@ 0x43
 800a2c0:	f00d fbb9 	bl	8017a36 <mg_ntohs>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	461c      	mov	r4, r3
 800a2c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a2cc:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 800a2d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a2d4:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 800a2d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a2dc:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800a2e0:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a2e4:	9303      	str	r3, [sp, #12]
 800a2e6:	f107 0310 	add.w	r3, r7, #16
 800a2ea:	9302      	str	r3, [sp, #8]
 800a2ec:	9401      	str	r4, [sp, #4]
 800a2ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a2f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	462b      	mov	r3, r5
 800a2fc:	6812      	ldr	r2, [r2, #0]
 800a2fe:	6809      	ldr	r1, [r1, #0]
 800a300:	6800      	ldr	r0, [r0, #0]
 800a302:	f7ff ff10 	bl	800a126 <tx_udp>
         sizeof(dhcp));
}
 800a306:	bf00      	nop
 800a308:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bdb0      	pop	{r4, r5, r7, pc}
 800a310:	08026ac4 	.word	0x08026ac4
 800a314:	63825363 	.word	0x63825363

0800a318 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800a318:	b5b0      	push	{r4, r5, r7, lr}
 800a31a:	b090      	sub	sp, #64	@ 0x40
 800a31c:	af04      	add	r7, sp, #16
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 800a324:	4b31      	ldr	r3, [pc, #196]	@ (800a3ec <tx_dhcp_request_sel+0xd4>)
 800a326:	f107 0414 	add.w	r4, r7, #20
 800a32a:	461d      	mov	r5, r3
 800a32c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a32e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a330:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a334:	c403      	stmia	r4!, {r0, r1}
 800a336:	8022      	strh	r2, [r4, #0]
 800a338:	3402      	adds	r4, #2
 800a33a:	0c13      	lsrs	r3, r2, #16
 800a33c:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 800a344:	f107 0314 	add.w	r3, r7, #20
 800a348:	330a      	adds	r3, #10
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 800a34e:	f107 0314 	add.w	r3, r7, #20
 800a352:	3310      	adds	r3, #16
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	7fdb      	ldrb	r3, [r3, #31]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00a      	beq.n	800a376 <tx_dhcp_request_sel+0x5e>
 800a360:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800a36a:	3318      	adds	r3, #24
 800a36c:	3330      	adds	r3, #48	@ 0x30
 800a36e:	443b      	add	r3, r7
 800a370:	2206      	movs	r2, #6
 800a372:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00a      	beq.n	800a396 <tx_dhcp_request_sel+0x7e>
 800a380:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a384:	1c5a      	adds	r2, r3, #1
 800a386:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800a38a:	3318      	adds	r3, #24
 800a38c:	3330      	adds	r3, #48	@ 0x30
 800a38e:	443b      	add	r3, r7
 800a390:	222a      	movs	r2, #42	@ 0x2a
 800a392:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 800a396:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800a39a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a39e:	4413      	add	r3, r2
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 800a3a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a3aa:	3319      	adds	r3, #25
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	9202      	str	r2, [sp, #8]
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	f107 0314 	add.w	r3, r7, #20
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3bc:	2200      	movs	r2, #0
 800a3be:	490c      	ldr	r1, [pc, #48]	@ (800a3f0 <tx_dhcp_request_sel+0xd8>)
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f7ff ff19 	bl	800a1f8 <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
 800a3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a3f4 <tx_dhcp_request_sel+0xdc>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	dd09      	ble.n	800a3e2 <tx_dhcp_request_sel+0xca>
 800a3ce:	4b0a      	ldr	r3, [pc, #40]	@ (800a3f8 <tx_dhcp_request_sel+0xe0>)
 800a3d0:	f241 521b 	movw	r2, #5403	@ 0x151b
 800a3d4:	4909      	ldr	r1, [pc, #36]	@ (800a3fc <tx_dhcp_request_sel+0xe4>)
 800a3d6:	2003      	movs	r0, #3
 800a3d8:	f7fd fdaa 	bl	8007f30 <mg_log_prefix>
 800a3dc:	4808      	ldr	r0, [pc, #32]	@ (800a400 <tx_dhcp_request_sel+0xe8>)
 800a3de:	f7fd fdf7 	bl	8007fd0 <mg_log>
}
 800a3e2:	bf00      	nop
 800a3e4:	3730      	adds	r7, #48	@ 0x30
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	08026be4 	.word	0x08026be4
 800a3f0:	08028cac 	.word	0x08028cac
 800a3f4:	24000240 	.word	0x24000240
 800a3f8:	08028fb0 	.word	0x08028fb0
 800a3fc:	0802597c 	.word	0x0802597c
 800a400:	08026bd4 	.word	0x08026bd4

0800a404 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800a404:	b580      	push	{r7, lr}
 800a406:	b08a      	sub	sp, #40	@ 0x28
 800a408:	af04      	add	r7, sp, #16
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800a412:	4b10      	ldr	r3, [pc, #64]	@ (800a454 <tx_dhcp_request_re+0x50>)
 800a414:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800a416:	2301      	movs	r3, #1
 800a418:	9302      	str	r3, [sp, #8]
 800a41a:	2304      	movs	r3, #4
 800a41c:	9301      	str	r3, [sp, #4]
 800a41e:	f107 0314 	add.w	r3, r7, #20
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	68b9      	ldr	r1, [r7, #8]
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7ff fee4 	bl	800a1f8 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800a430:	4b09      	ldr	r3, [pc, #36]	@ (800a458 <tx_dhcp_request_re+0x54>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b02      	cmp	r3, #2
 800a436:	dd09      	ble.n	800a44c <tx_dhcp_request_re+0x48>
 800a438:	4b08      	ldr	r3, [pc, #32]	@ (800a45c <tx_dhcp_request_re+0x58>)
 800a43a:	f241 5226 	movw	r2, #5414	@ 0x1526
 800a43e:	4908      	ldr	r1, [pc, #32]	@ (800a460 <tx_dhcp_request_re+0x5c>)
 800a440:	2003      	movs	r0, #3
 800a442:	f7fd fd75 	bl	8007f30 <mg_log_prefix>
 800a446:	4807      	ldr	r0, [pc, #28]	@ (800a464 <tx_dhcp_request_re+0x60>)
 800a448:	f7fd fdc2 	bl	8007fd0 <mg_log>
}
 800a44c:	bf00      	nop
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	ff030135 	.word	0xff030135
 800a458:	24000240 	.word	0x24000240
 800a45c:	08028fc4 	.word	0x08028fc4
 800a460:	0802597c 	.word	0x0802597c
 800a464:	08026bd4 	.word	0x08026bd4

0800a468 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800a468:	b580      	push	{r7, lr}
 800a46a:	b088      	sub	sp, #32
 800a46c:	af04      	add	r7, sp, #16
 800a46e:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800a470:	4a14      	ldr	r2, [pc, #80]	@ (800a4c4 <tx_dhcp_discover+0x5c>)
 800a472:	f107 0308 	add.w	r3, r7, #8
 800a476:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a47a:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800a47e:	2300      	movs	r3, #0
 800a480:	9302      	str	r3, [sp, #8]
 800a482:	2308      	movs	r3, #8
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	f107 0308 	add.w	r3, r7, #8
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	f04f 33ff 	mov.w	r3, #4294967295
 800a490:	2200      	movs	r2, #0
 800a492:	490d      	ldr	r1, [pc, #52]	@ (800a4c8 <tx_dhcp_discover+0x60>)
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7ff feaf 	bl	800a1f8 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800a49a:	4b0c      	ldr	r3, [pc, #48]	@ (800a4cc <tx_dhcp_discover+0x64>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	dd0c      	ble.n	800a4bc <tx_dhcp_discover+0x54>
 800a4a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a4d0 <tx_dhcp_discover+0x68>)
 800a4a4:	f241 5230 	movw	r2, #5424	@ 0x1530
 800a4a8:	490a      	ldr	r1, [pc, #40]	@ (800a4d4 <tx_dhcp_discover+0x6c>)
 800a4aa:	2003      	movs	r0, #3
 800a4ac:	f7fd fd40 	bl	8007f30 <mg_log_prefix>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	4908      	ldr	r1, [pc, #32]	@ (800a4d8 <tx_dhcp_discover+0x70>)
 800a4b6:	4809      	ldr	r0, [pc, #36]	@ (800a4dc <tx_dhcp_discover+0x74>)
 800a4b8:	f7fd fd8a 	bl	8007fd0 <mg_log>
}
 800a4bc:	bf00      	nop
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	08026c20 	.word	0x08026c20
 800a4c8:	08028cac 	.word	0x08028cac
 800a4cc:	24000240 	.word	0x24000240
 800a4d0:	08028fd8 	.word	0x08028fd8
 800a4d4:	0802597c 	.word	0x0802597c
 800a4d8:	0800d919 	.word	0x0800d919
 800a4dc:	08026c00 	.word	0x08026c00

0800a4e0 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	617b      	str	r3, [r7, #20]
 800a4f8:	e057      	b.n	800a5aa <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a500:	f003 0310 	and.w	r3, r3, #16
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	d010      	beq.n	800a52c <getpeer+0x4c>
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00c      	beq.n	800a52c <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	f103 000e 	add.w	r0, r3, #14
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	331c      	adds	r3, #28
 800a51e:	2204      	movs	r2, #4
 800a520:	4619      	mov	r1, r3
 800a522:	f017 fc35 	bl	8021d90 <memcmp>
 800a526:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d042      	beq.n	800a5b2 <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00b      	beq.n	800a554 <getpeer+0x74>
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a540:	2b00      	cmp	r3, #0
 800a542:	d007      	beq.n	800a554 <getpeer+0x74>
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	8b1a      	ldrh	r2, [r3, #24]
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54c:	885b      	ldrh	r3, [r3, #2]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	429a      	cmp	r2, r3
 800a552:	d030      	beq.n	800a5b6 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a55a:	f003 0301 	and.w	r3, r3, #1
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d11f      	bne.n	800a5a4 <getpeer+0xc4>
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d01b      	beq.n	800a5a4 <getpeer+0xc4>
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	8b1a      	ldrh	r2, [r3, #24]
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a574:	885b      	ldrh	r3, [r3, #2]
 800a576:	b29b      	uxth	r3, r3
 800a578:	429a      	cmp	r2, r3
 800a57a:	d113      	bne.n	800a5a4 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a582:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a586:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800a588:	79fa      	ldrb	r2, [r7, #7]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d10a      	bne.n	800a5a4 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800a58e:	79fb      	ldrb	r3, [r7, #7]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d111      	bne.n	800a5b8 <getpeer+0xd8>
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a59c:	881b      	ldrh	r3, [r3, #0]
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d009      	beq.n	800a5b8 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	617b      	str	r3, [r7, #20]
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d1a4      	bne.n	800a4fa <getpeer+0x1a>
 800a5b0:	e002      	b.n	800a5b8 <getpeer+0xd8>
      break;
 800a5b2:	bf00      	nop
 800a5b4:	e000      	b.n	800a5b8 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800a5b6:	bf00      	nop
      break;
  }
  return c;
 800a5b8:	697b      	ldr	r3, [r7, #20]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a5c4:	b5b0      	push	{r4, r5, r7, lr}
 800a5c6:	b088      	sub	sp, #32
 800a5c8:	af02      	add	r7, sp, #8
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	699b      	ldr	r3, [r3, #24]
 800a5d2:	88db      	ldrh	r3, [r3, #6]
 800a5d4:	b29c      	uxth	r4, r3
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	f00d fa2d 	bl	8017a36 <mg_ntohs>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	429c      	cmp	r4, r3
 800a5e0:	d176      	bne.n	800a6d0 <rx_arp+0x10c>
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	699a      	ldr	r2, [r3, #24]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d16f      	bne.n	800a6d0 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	695b      	ldr	r3, [r3, #20]
 800a5f4:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	330e      	adds	r3, #14
 800a5fa:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800a5fc:	6978      	ldr	r0, [r7, #20]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	3306      	adds	r3, #6
 800a604:	2206      	movs	r2, #6
 800a606:	4619      	mov	r1, r3
 800a608:	f017 fce1 	bl	8021fce <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	3306      	adds	r3, #6
 800a610:	6879      	ldr	r1, [r7, #4]
 800a612:	2206      	movs	r2, #6
 800a614:	4618      	mov	r0, r3
 800a616:	f017 fcda 	bl	8021fce <memcpy>
    eth->type = mg_htons(0x806);
 800a61a:	f640 0006 	movw	r0, #2054	@ 0x806
 800a61e:	f00d fa0a 	bl	8017a36 <mg_ntohs>
 800a622:	4603      	mov	r3, r0
 800a624:	461a      	mov	r2, r3
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	699a      	ldr	r2, [r3, #24]
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	6814      	ldr	r4, [r2, #0]
 800a632:	6850      	ldr	r0, [r2, #4]
 800a634:	6891      	ldr	r1, [r2, #8]
 800a636:	68d5      	ldr	r5, [r2, #12]
 800a638:	601c      	str	r4, [r3, #0]
 800a63a:	6058      	str	r0, [r3, #4]
 800a63c:	6099      	str	r1, [r3, #8]
 800a63e:	60dd      	str	r5, [r3, #12]
 800a640:	6914      	ldr	r4, [r2, #16]
 800a642:	6950      	ldr	r0, [r2, #20]
 800a644:	6991      	ldr	r1, [r2, #24]
 800a646:	611c      	str	r4, [r3, #16]
 800a648:	6158      	str	r0, [r3, #20]
 800a64a:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800a64c:	2002      	movs	r0, #2
 800a64e:	f00d f9f2 	bl	8017a36 <mg_ntohs>
 800a652:	4603      	mov	r3, r0
 800a654:	461a      	mov	r2, r3
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f103 0012 	add.w	r0, r3, #18
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	3308      	adds	r3, #8
 800a666:	2206      	movs	r2, #6
 800a668:	4619      	mov	r1, r3
 800a66a:	f017 fcb0 	bl	8021fce <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	3308      	adds	r3, #8
 800a672:	6879      	ldr	r1, [r7, #4]
 800a674:	2206      	movs	r2, #6
 800a676:	4618      	mov	r0, r3
 800a678:	f017 fca9 	bl	8021fce <memcpy>
    arp->tpa = pkt->arp->spa;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	689a      	ldr	r2, [r3, #8]
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 800a692:	4b4e      	ldr	r3, [pc, #312]	@ (800a7cc <rx_arp+0x208>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b02      	cmp	r3, #2
 800a698:	dd10      	ble.n	800a6bc <rx_arp+0xf8>
 800a69a:	4b4d      	ldr	r3, [pc, #308]	@ (800a7d0 <rx_arp+0x20c>)
 800a69c:	f241 5254 	movw	r2, #5460	@ 0x1554
 800a6a0:	494c      	ldr	r1, [pc, #304]	@ (800a7d4 <rx_arp+0x210>)
 800a6a2:	2003      	movs	r0, #3
 800a6a4:	f7fd fc44 	bl	8007f30 <mg_log_prefix>
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	f103 0218 	add.w	r2, r3, #24
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	4b49      	ldr	r3, [pc, #292]	@ (800a7d8 <rx_arp+0x214>)
 800a6b4:	4949      	ldr	r1, [pc, #292]	@ (800a7dc <rx_arp+0x218>)
 800a6b6:	484a      	ldr	r0, [pc, #296]	@ (800a7e0 <rx_arp+0x21c>)
 800a6b8:	f7fd fc8a 	bl	8007fd0 <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f103 021c 	add.w	r2, r3, #28
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f7ff fba7 	bl	8009e1c <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800a6ce:	e079      	b.n	800a7c4 <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	88db      	ldrh	r3, [r3, #6]
 800a6d6:	b29c      	uxth	r4, r3
 800a6d8:	2002      	movs	r0, #2
 800a6da:	f00d f9ac 	bl	8017a36 <mg_ntohs>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	429c      	cmp	r4, r3
 800a6e2:	d16f      	bne.n	800a7c4 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	3312      	adds	r3, #18
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	2206      	movs	r2, #6
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f017 fb4e 	bl	8021d90 <memcmp>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d163      	bne.n	800a7c2 <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	429a      	cmp	r2, r3
 800a708:	d116      	bne.n	800a738 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	3308      	adds	r3, #8
 800a716:	2206      	movs	r2, #6
 800a718:	4619      	mov	r1, r3
 800a71a:	f017 fc58 	bl	8021fce <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a724:	2b03      	cmp	r3, #3
 800a726:	d14d      	bne.n	800a7c4 <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2204      	movs	r2, #4
 800a72c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        onstatechange(ifp);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff fbf7 	bl	8009f24 <onstatechange>
 800a736:	e045      	b.n	800a7c4 <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a73c:	2200      	movs	r2, #0
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	4618      	mov	r0, r3
 800a742:	f7ff fecd 	bl	800a4e0 <getpeer>
 800a746:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d03a      	beq.n	800a7c4 <rx_arp+0x200>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a754:	f003 0310 	and.w	r3, r3, #16
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d032      	beq.n	800a7c4 <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	33b0      	adds	r3, #176	@ 0xb0
 800a762:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	f103 0018 	add.w	r0, r3, #24
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	3308      	adds	r3, #8
 800a770:	2206      	movs	r2, #6
 800a772:	4619      	mov	r1, r3
 800a774:	f017 fc2b 	bl	8021fce <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800a778:	4b14      	ldr	r3, [pc, #80]	@ (800a7cc <rx_arp+0x208>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	dd15      	ble.n	800a7ac <rx_arp+0x1e8>
 800a780:	4b13      	ldr	r3, [pc, #76]	@ (800a7d0 <rx_arp+0x20c>)
 800a782:	f241 5265 	movw	r2, #5477	@ 0x1565
 800a786:	4913      	ldr	r1, [pc, #76]	@ (800a7d4 <rx_arp+0x210>)
 800a788:	2003      	movs	r0, #3
 800a78a:	f7fd fbd1 	bl	8007f30 <mg_log_prefix>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f103 021c 	add.w	r2, r3, #28
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	3318      	adds	r3, #24
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	4b0e      	ldr	r3, [pc, #56]	@ (800a7d8 <rx_arp+0x214>)
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	4a0d      	ldr	r2, [pc, #52]	@ (800a7dc <rx_arp+0x218>)
 800a7a6:	480f      	ldr	r0, [pc, #60]	@ (800a7e4 <rx_arp+0x220>)
 800a7a8:	f7fd fc12 	bl	8007fd0 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800a7b2:	f36f 1304 	bfc	r3, #4, #1
 800a7b6:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        mac_resolved(c);
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f002 f959 	bl	800ca72 <mac_resolved>
 800a7c0:	e000      	b.n	800a7c4 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800a7c2:	bf00      	nop
      }
    }
  }
}
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bdb0      	pop	{r4, r5, r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	24000240 	.word	0x24000240
 800a7d0:	08028fec 	.word	0x08028fec
 800a7d4:	0802597c 	.word	0x0802597c
 800a7d8:	0800d919 	.word	0x0800d919
 800a7dc:	0800d855 	.word	0x0800d855
 800a7e0:	08026c28 	.word	0x08026c28
 800a7e4:	08026c40 	.word	0x08026c40

0800a7e8 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b08a      	sub	sp, #40	@ 0x28
 800a7ec:	af02      	add	r7, sp, #8
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2b08      	cmp	r3, #8
 800a7fa:	d14d      	bne.n	800a898 <rx_icmp+0xb0>
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	69db      	ldr	r3, [r3, #28]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d049      	beq.n	800a898 <rx_icmp+0xb0>
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	691a      	ldr	r2, [r3, #16]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d142      	bne.n	800a898 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800a812:	2326      	movs	r3, #38	@ 0x26
 800a814:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	699a      	ldr	r2, [r3, #24]
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 800a826:	69fa      	ldr	r2, [r7, #28]
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d901      	bls.n	800a832 <rx_icmp+0x4a>
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	1d99      	adds	r1, r3, #6
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6898      	ldr	r0, [r3, #8]
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	69db      	ldr	r3, [r3, #28]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	69fa      	ldr	r2, [r7, #28]
 800a844:	3204      	adds	r2, #4
 800a846:	9201      	str	r2, [sp, #4]
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	4603      	mov	r3, r0
 800a84c:	2201      	movs	r2, #1
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7ff fc12 	bl	800a078 <tx_ip>
 800a854:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	3314      	adds	r3, #20
 800a85a:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800a85c:	2204      	movs	r2, #4
 800a85e:	2100      	movs	r1, #0
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f017 fabf 	bl	8021de4 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	1d18      	adds	r0, r3, #4
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	69fa      	ldr	r2, [r7, #28]
 800a870:	4619      	mov	r1, r3
 800a872:	f017 fbac 	bl	8021fce <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	3304      	adds	r3, #4
 800a87a:	4619      	mov	r1, r3
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f7ff fa5d 	bl	8009d3c <ipcsum>
 800a882:	4603      	mov	r3, r0
 800a884:	461a      	mov	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800a88a:	69ba      	ldr	r2, [r7, #24]
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	4413      	add	r3, r2
 800a890:	4619      	mov	r1, r3
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f7ff fac2 	bl	8009e1c <ether_output>
  }
}
 800a898:	bf00      	nop
 800a89a:	3720      	adds	r7, #32
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a8a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8a4:	b090      	sub	sp, #64	@ 0x40
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	623b      	str	r3, [r7, #32]
 800a8bc:	2300      	movs	r3, #0
 800a8be:	61fb      	str	r3, [r7, #28]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800a8d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8d8:	33f0      	adds	r3, #240	@ 0xf0
 800a8da:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ec:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800a8f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	f0c0 81ac 	bcc.w	800ac50 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8fc:	1d18      	adds	r0, r3, #4
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	3302      	adds	r3, #2
 800a902:	2204      	movs	r2, #4
 800a904:	4619      	mov	r1, r3
 800a906:	f017 fa43 	bl	8021d90 <memcmp>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f040 81a1 	bne.w	800ac54 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800a912:	e08a      	b.n	800aa2a <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800a914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d10e      	bne.n	800a93a <rx_dhcp_client+0x9a>
 800a91c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a91e:	3301      	adds	r3, #1
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	2b04      	cmp	r3, #4
 800a924:	d109      	bne.n	800a93a <rx_dhcp_client+0x9a>
 800a926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a928:	3306      	adds	r3, #6
 800a92a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d904      	bls.n	800a93a <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 800a930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a932:	3302      	adds	r3, #2
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	627b      	str	r3, [r7, #36]	@ 0x24
 800a938:	e070      	b.n	800aa1c <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800a93a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d112      	bne.n	800a968 <rx_dhcp_client+0xc8>
 800a942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a944:	3301      	adds	r3, #1
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b04      	cmp	r3, #4
 800a94a:	d10d      	bne.n	800a968 <rx_dhcp_client+0xc8>
 800a94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a94e:	3306      	adds	r3, #6
 800a950:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a952:	429a      	cmp	r2, r3
 800a954:	d908      	bls.n	800a968 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 800a956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a958:	3302      	adds	r3, #2
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a966:	e059      	b.n	800aa1c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	7fdb      	ldrb	r3, [r3, #31]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d012      	beq.n	800a996 <rx_dhcp_client+0xf6>
 800a970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	2b06      	cmp	r3, #6
 800a976:	d10e      	bne.n	800a996 <rx_dhcp_client+0xf6>
 800a978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a97a:	3301      	adds	r3, #1
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	2b04      	cmp	r3, #4
 800a980:	d109      	bne.n	800a996 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 800a982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a984:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800a986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a988:	429a      	cmp	r2, r3
 800a98a:	d904      	bls.n	800a996 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 800a98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a98e:	3302      	adds	r3, #2
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	61fb      	str	r3, [r7, #28]
 800a994:	e042      	b.n	800aa1c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d012      	beq.n	800a9c6 <rx_dhcp_client+0x126>
 800a9a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9a6:	d10e      	bne.n	800a9c6 <rx_dhcp_client+0x126>
 800a9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	2b04      	cmp	r3, #4
 800a9b0:	d109      	bne.n	800a9c6 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 800a9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b4:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800a9b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d904      	bls.n	800a9c6 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 800a9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9be:	3302      	adds	r3, #2
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	61bb      	str	r3, [r7, #24]
 800a9c4:	e02a      	b.n	800aa1c <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800a9c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	2b33      	cmp	r3, #51	@ 0x33
 800a9cc:	d114      	bne.n	800a9f8 <rx_dhcp_client+0x158>
 800a9ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b04      	cmp	r3, #4
 800a9d6:	d10f      	bne.n	800a9f8 <rx_dhcp_client+0x158>
 800a9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9da:	3306      	adds	r3, #6
 800a9dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d90a      	bls.n	800a9f8 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 800a9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e4:	3302      	adds	r3, #2
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f00d f809 	bl	8017a04 <mg_ntohl>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	623b      	str	r3, [r7, #32]
 800a9f6:	e011      	b.n	800aa1c <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	2b35      	cmp	r3, #53	@ 0x35
 800a9fe:	d10d      	bne.n	800aa1c <rx_dhcp_client+0x17c>
 800aa00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa02:	3301      	adds	r3, #1
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d108      	bne.n	800aa1c <rx_dhcp_client+0x17c>
 800aa0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa0c:	3306      	adds	r3, #6
 800aa0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d903      	bls.n	800aa1c <rx_dhcp_client+0x17c>
      msgtype = p[2];
 800aa14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa16:	789b      	ldrb	r3, [r3, #2]
 800aa18:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 800aa1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa1e:	3301      	adds	r3, #1
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	3302      	adds	r3, #2
 800aa24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa26:	4413      	add	r3, r2
 800aa28:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800aa2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d904      	bls.n	800aa3e <rx_dhcp_client+0x19e>
 800aa34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	2bff      	cmp	r3, #255	@ 0xff
 800aa3a:	f47f af6b 	bne.w	800a914 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800aa3e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800aa42:	2b06      	cmp	r3, #6
 800aa44:	d10c      	bne.n	800aa60 <rx_dhcp_client+0x1c0>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d107      	bne.n	800aa60 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	609a      	str	r2, [r3, #8]
 800aa5e:	e0ec      	b.n	800ac3a <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800aa60:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d123      	bne.n	800aab0 <rx_dhcp_client+0x210>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d11e      	bne.n	800aab0 <rx_dhcp_client+0x210>
 800aa72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d01b      	beq.n	800aab0 <rx_dhcp_client+0x210>
 800aa78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d018      	beq.n	800aab0 <rx_dhcp_client+0x210>
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d015      	beq.n	800aab0 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa88:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d003      	beq.n	800aa96 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	e002      	b.n	800aa9c <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f7ff fc39 	bl	800a318 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800aaae:	e0c4      	b.n	800ac3a <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 800aab0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800aab4:	2b05      	cmp	r3, #5
 800aab6:	f040 80c0 	bne.w	800ac3a <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	f040 8081 	bne.w	800abc8 <rx_dhcp_client+0x328>
 800aac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d07d      	beq.n	800abc8 <rx_dhcp_client+0x328>
 800aacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d07a      	beq.n	800abc8 <rx_dhcp_client+0x328>
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d077      	beq.n	800abc8 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800aade:	6a39      	ldr	r1, [r7, #32]
 800aae0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800aae4:	fb00 f101 	mul.w	r1, r0, r1
 800aae8:	2000      	movs	r0, #0
 800aaea:	4688      	mov	r8, r1
 800aaec:	4681      	mov	r9, r0
 800aaee:	eb12 0108 	adds.w	r1, r2, r8
 800aaf2:	6039      	str	r1, [r7, #0]
 800aaf4:	eb43 0309 	adc.w	r3, r3, r9
 800aaf8:	607b      	str	r3, [r7, #4]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ab00:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800ab04:	4b56      	ldr	r3, [pc, #344]	@ (800ac60 <rx_dhcp_client+0x3c0>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	dd16      	ble.n	800ab3a <rx_dhcp_client+0x29a>
 800ab0c:	4b55      	ldr	r3, [pc, #340]	@ (800ac64 <rx_dhcp_client+0x3c4>)
 800ab0e:	f241 52a6 	movw	r2, #5542	@ 0x15a6
 800ab12:	4955      	ldr	r1, [pc, #340]	@ (800ac68 <rx_dhcp_client+0x3c8>)
 800ab14:	2002      	movs	r0, #2
 800ab16:	f7fd fa0b 	bl	8007f30 <mg_log_prefix>
 800ab1a:	6a3c      	ldr	r4, [r7, #32]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800ab22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ab26:	f04f 0300 	mov.w	r3, #0
 800ab2a:	f7f5 fe4d 	bl	80007c8 <__aeabi_uldivmod>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	460b      	mov	r3, r1
 800ab32:	4621      	mov	r1, r4
 800ab34:	484d      	ldr	r0, [pc, #308]	@ (800ac6c <rx_dhcp_client+0x3cc>)
 800ab36:	f7fd fa4b 	bl	8007fd0 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	3306      	adds	r3, #6
 800ab46:	2206      	movs	r2, #6
 800ab48:	4619      	mov	r1, r3
 800ab4a:	f017 fa40 	bl	8021fce <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab52:	609a      	str	r2, [r3, #8]
 800ab54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	611a      	str	r2, [r3, #16]
 800ab5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2203      	movs	r2, #3
 800ab64:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800ab68:	f107 0310 	add.w	r3, r7, #16
 800ab6c:	2108      	movs	r1, #8
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7f6 f9d8 	bl	8000f24 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800ab74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ab78:	4614      	mov	r4, r2
 800ab7a:	f7f6 fa01 	bl	8000f80 <mg_millis>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	460b      	mov	r3, r1
 800ab82:	4613      	mov	r3, r2
 800ab84:	4423      	add	r3, r4
 800ab86:	4618      	mov	r0, r3
 800ab88:	f015 ff54 	bl	8020a34 <srand>
      if (ifp->enable_req_dns && dns != 0)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	7fdb      	ldrb	r3, [r3, #31]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d009      	beq.n	800aba8 <rx_dhcp_client+0x308>
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d006      	beq.n	800aba8 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 800ab9a:	f107 031c 	add.w	r3, r7, #28
 800ab9e:	461a      	mov	r2, r3
 800aba0:	2101      	movs	r1, #1
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f7ff f852 	bl	8009c4c <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d042      	beq.n	800ac38 <rx_dhcp_client+0x398>
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d03f      	beq.n	800ac38 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 800abb8:	f107 0318 	add.w	r3, r7, #24
 800abbc:	461a      	mov	r2, r3
 800abbe:	2102      	movs	r1, #2
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f7ff f843 	bl	8009c4c <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800abc6:	e037      	b.n	800ac38 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800abce:	2b04      	cmp	r3, #4
 800abd0:	d133      	bne.n	800ac3a <rx_dhcp_client+0x39a>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800abd8:	429a      	cmp	r2, r3
 800abda:	d12e      	bne.n	800ac3a <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800abe2:	6a39      	ldr	r1, [r7, #32]
 800abe4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800abe8:	fb00 f101 	mul.w	r1, r0, r1
 800abec:	2000      	movs	r0, #0
 800abee:	460c      	mov	r4, r1
 800abf0:	4605      	mov	r5, r0
 800abf2:	eb12 0a04 	adds.w	sl, r2, r4
 800abf6:	eb43 0b05 	adc.w	fp, r3, r5
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	e9c3 ab18 	strd	sl, fp, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800ac00:	4b17      	ldr	r3, [pc, #92]	@ (800ac60 <rx_dhcp_client+0x3c0>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	dd18      	ble.n	800ac3a <rx_dhcp_client+0x39a>
 800ac08:	4b16      	ldr	r3, [pc, #88]	@ (800ac64 <rx_dhcp_client+0x3c4>)
 800ac0a:	f241 52b4 	movw	r2, #5556	@ 0x15b4
 800ac0e:	4916      	ldr	r1, [pc, #88]	@ (800ac68 <rx_dhcp_client+0x3c8>)
 800ac10:	2002      	movs	r0, #2
 800ac12:	f7fd f98d 	bl	8007f30 <mg_log_prefix>
 800ac16:	6a3c      	ldr	r4, [r7, #32]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800ac1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ac22:	f04f 0300 	mov.w	r3, #0
 800ac26:	f7f5 fdcf 	bl	80007c8 <__aeabi_uldivmod>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4621      	mov	r1, r4
 800ac30:	480e      	ldr	r0, [pc, #56]	@ (800ac6c <rx_dhcp_client+0x3cc>)
 800ac32:	f7fd f9cd 	bl	8007fd0 <mg_log>
 800ac36:	e000      	b.n	800ac3a <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800ac38:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ac40:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d006      	beq.n	800ac56 <rx_dhcp_client+0x3b6>
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f7ff f96b 	bl	8009f24 <onstatechange>
 800ac4e:	e002      	b.n	800ac56 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800ac50:	bf00      	nop
 800ac52:	e000      	b.n	800ac56 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800ac54:	bf00      	nop
}
 800ac56:	3740      	adds	r7, #64	@ 0x40
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac5e:	bf00      	nop
 800ac60:	24000240 	.word	0x24000240
 800ac64:	08028ff4 	.word	0x08028ff4
 800ac68:	0802597c 	.word	0x0802597c
 800ac6c:	08026c5c 	.word	0x08026c5c

0800ac70 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800ac70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac74:	b0d6      	sub	sp, #344	@ 0x158
 800ac76:	af04      	add	r7, sp, #16
 800ac78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ac7c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ac80:	6018      	str	r0, [r3, #0]
 800ac82:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ac86:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ac8a:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 800ac92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ac96:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac9e:	33f0      	adds	r3, #240	@ 0xf0
 800aca0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800aca4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aca8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800acb4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	4413      	add	r3, r2
 800acbe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800acc2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800acc6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acce:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800acd2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800acd6:	429a      	cmp	r2, r3
 800acd8:	f0c0 81b0 	bcc.w	800b03c <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800acdc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ace0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ace4:	4ad8      	ldr	r2, [pc, #864]	@ (800b048 <rx_dhcp_server+0x3d8>)
 800ace6:	4618      	mov	r0, r3
 800ace8:	4611      	mov	r1, r2
 800acea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800acee:	461a      	mov	r2, r3
 800acf0:	f017 f96d 	bl	8021fce <memcpy>
  res.yiaddr = ifp->ip;
 800acf4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800acf8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	689a      	ldr	r2, [r3, #8]
 800ad00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ad04:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ad08:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800ad0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ad0e:	3310      	adds	r3, #16
 800ad10:	3303      	adds	r3, #3
 800ad12:	781a      	ldrb	r2, [r3, #0]
 800ad14:	3201      	adds	r2, #1
 800ad16:	b2d2      	uxtb	r2, r2
 800ad18:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800ad1a:	e020      	b.n	800ad5e <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 800ad1c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2b35      	cmp	r3, #53	@ 0x35
 800ad24:	d111      	bne.n	800ad4a <rx_dhcp_server+0xda>
 800ad26:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d10b      	bne.n	800ad4a <rx_dhcp_server+0xda>
 800ad32:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad36:	3302      	adds	r3, #2
 800ad38:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d904      	bls.n	800ad4a <rx_dhcp_server+0xda>
      op = p[2];
 800ad40:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad44:	789b      	ldrb	r3, [r3, #2]
 800ad46:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 800ad4a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad4e:	3301      	adds	r3, #1
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	3302      	adds	r3, #2
 800ad54:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800ad58:	4413      	add	r3, r2
 800ad5a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800ad5e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad62:	3301      	adds	r3, #1
 800ad64:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d904      	bls.n	800ad76 <rx_dhcp_server+0x106>
 800ad6c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2bff      	cmp	r3, #255	@ 0xff
 800ad74:	d1d2      	bne.n	800ad1c <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800ad76:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d004      	beq.n	800ad88 <rx_dhcp_server+0x118>
 800ad7e:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	f040 815b 	bne.w	800b03e <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800ad88:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d101      	bne.n	800ad94 <rx_dhcp_server+0x124>
 800ad90:	2302      	movs	r3, #2
 800ad92:	e000      	b.n	800ad96 <rx_dhcp_server+0x126>
 800ad94:	2305      	movs	r3, #5
 800ad96:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 800ad9a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ad9e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ada2:	2235      	movs	r2, #53	@ 0x35
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800adaa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800adae:	2201      	movs	r2, #1
 800adb0:	705a      	strb	r2, [r3, #1]
 800adb2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800adb6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800adba:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800adbe:	709a      	strb	r2, [r3, #2]
 800adc0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800adc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800adc8:	2201      	movs	r2, #1
 800adca:	70da      	strb	r2, [r3, #3]
 800adcc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800add0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800add4:	2204      	movs	r2, #4
 800add6:	711a      	strb	r2, [r3, #4]
 800add8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800addc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ade0:	2200      	movs	r2, #0
 800ade2:	715a      	strb	r2, [r3, #5]
 800ade4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ade8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800adec:	2200      	movs	r2, #0
 800adee:	719a      	strb	r2, [r3, #6]
 800adf0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800adf4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800adf8:	2200      	movs	r2, #0
 800adfa:	71da      	strb	r2, [r3, #7]
 800adfc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae04:	2200      	movs	r2, #0
 800ae06:	721a      	strb	r2, [r3, #8]
 800ae08:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae0c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae10:	2236      	movs	r2, #54	@ 0x36
 800ae12:	725a      	strb	r2, [r3, #9]
 800ae14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae18:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae1c:	2204      	movs	r2, #4
 800ae1e:	729a      	strb	r2, [r3, #10]
 800ae20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae28:	2200      	movs	r2, #0
 800ae2a:	72da      	strb	r2, [r3, #11]
 800ae2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae34:	2200      	movs	r2, #0
 800ae36:	731a      	strb	r2, [r3, #12]
 800ae38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae40:	2200      	movs	r2, #0
 800ae42:	735a      	strb	r2, [r3, #13]
 800ae44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	739a      	strb	r2, [r3, #14]
 800ae50:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae58:	220c      	movs	r2, #12
 800ae5a:	73da      	strb	r2, [r3, #15]
 800ae5c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae64:	2203      	movs	r2, #3
 800ae66:	741a      	strb	r2, [r3, #16]
 800ae68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae6c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae70:	226d      	movs	r2, #109	@ 0x6d
 800ae72:	745a      	strb	r2, [r3, #17]
 800ae74:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae7c:	2269      	movs	r2, #105	@ 0x69
 800ae7e:	749a      	strb	r2, [r3, #18]
 800ae80:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae84:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae88:	2270      	movs	r2, #112	@ 0x70
 800ae8a:	74da      	strb	r2, [r3, #19]
 800ae8c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae90:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ae94:	2233      	movs	r2, #51	@ 0x33
 800ae96:	751a      	strb	r2, [r3, #20]
 800ae98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ae9c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aea0:	2204      	movs	r2, #4
 800aea2:	755a      	strb	r2, [r3, #21]
 800aea4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aea8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aeac:	22ff      	movs	r2, #255	@ 0xff
 800aeae:	759a      	strb	r2, [r3, #22]
 800aeb0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aeb4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aeb8:	22ff      	movs	r2, #255	@ 0xff
 800aeba:	75da      	strb	r2, [r3, #23]
 800aebc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aec0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aec4:	22ff      	movs	r2, #255	@ 0xff
 800aec6:	761a      	strb	r2, [r3, #24]
 800aec8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aecc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aed0:	22ff      	movs	r2, #255	@ 0xff
 800aed2:	765a      	strb	r2, [r3, #25]
 800aed4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aed8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800aedc:	22ff      	movs	r2, #255	@ 0xff
 800aede:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800aee0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800aee4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeec:	f103 011c 	add.w	r1, r3, #28
 800aef0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800aef4:	331c      	adds	r3, #28
 800aef6:	2206      	movs	r2, #6
 800aef8:	4618      	mov	r0, r3
 800aefa:	f017 f868 	bl	8021fce <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800aefe:	f107 030c 	add.w	r3, r7, #12
 800af02:	3305      	adds	r3, #5
 800af04:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800af08:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800af0c:	6812      	ldr	r2, [r2, #0]
 800af0e:	320c      	adds	r2, #12
 800af10:	6812      	ldr	r2, [r2, #0]
 800af12:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800af14:	f107 030c 	add.w	r3, r7, #12
 800af18:	330b      	adds	r3, #11
 800af1a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800af1e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800af22:	6812      	ldr	r2, [r2, #0]
 800af24:	3208      	adds	r2, #8
 800af26:	6812      	ldr	r2, [r2, #0]
 800af28:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800af2a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af2e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800af32:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800af36:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800af3a:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800af3e:	4615      	mov	r5, r2
 800af40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800af48:	c403      	stmia	r4!, {r0, r1}
 800af4a:	8022      	strh	r2, [r4, #0]
 800af4c:	3402      	adds	r4, #2
 800af4e:	0c13      	lsrs	r3, r2, #16
 800af50:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800af52:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af56:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af5e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800af62:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af66:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800af6a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 800af6e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af72:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af80:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800af84:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 800af86:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af8a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	7f9b      	ldrb	r3, [r3, #30]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d01c      	beq.n	800afd0 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 800af96:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800af9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800af9e:	691a      	ldr	r2, [r3, #16]
 800afa0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800afa4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800afac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800afb0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 800afba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800afbe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	3306      	adds	r3, #6
 800afc8:	2206      	movs	r2, #6
 800afca:	4619      	mov	r1, r3
 800afcc:	f016 ffff 	bl	8021fce <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800afd0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800afd4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	1d9d      	adds	r5, r3, #6
 800afde:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800afe2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	689e      	ldr	r6, [r3, #8]
 800afea:	2043      	movs	r0, #67	@ 0x43
 800afec:	f00c fd23 	bl	8017a36 <mg_ntohs>
 800aff0:	4603      	mov	r3, r0
 800aff2:	4698      	mov	r8, r3
 800aff4:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d005      	beq.n	800b008 <rx_dhcp_server+0x398>
 800affc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b000:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b004:	691c      	ldr	r4, [r3, #16]
 800b006:	e001      	b.n	800b00c <rx_dhcp_server+0x39c>
 800b008:	f04f 34ff 	mov.w	r4, #4294967295
 800b00c:	2044      	movs	r0, #68	@ 0x44
 800b00e:	f00c fd12 	bl	8017a36 <mg_ntohs>
 800b012:	4603      	mov	r3, r0
 800b014:	461a      	mov	r2, r3
 800b016:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b01a:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 800b01e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b022:	9303      	str	r3, [sp, #12]
 800b024:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b028:	9302      	str	r3, [sp, #8]
 800b02a:	9201      	str	r2, [sp, #4]
 800b02c:	9400      	str	r4, [sp, #0]
 800b02e:	4643      	mov	r3, r8
 800b030:	4632      	mov	r2, r6
 800b032:	4629      	mov	r1, r5
 800b034:	6800      	ldr	r0, [r0, #0]
 800b036:	f7ff f876 	bl	800a126 <tx_udp>
 800b03a:	e000      	b.n	800b03e <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800b03c:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800b03e:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800b042:	46bd      	mov	sp, r7
 800b044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b048:	08026c74 	.word	0x08026c74

0800b04c <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b05a:	2201      	movs	r2, #1
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	4618      	mov	r0, r3
 800b060:	f7ff fa3e 	bl	800a4e0 <getpeer>
 800b064:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d059      	beq.n	800b120 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b070:	881b      	ldrh	r3, [r3, #0]
 800b072:	b29a      	uxth	r2, r3
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	331c      	adds	r3, #28
 800b07c:	683a      	ldr	r2, [r7, #0]
 800b07e:	69d2      	ldr	r2, [r2, #28]
 800b080:	320c      	adds	r2, #12
 800b082:	6812      	ldr	r2, [r2, #0]
 800b084:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	33b0      	adds	r3, #176	@ 0xb0
 800b08a:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	f103 0018 	add.w	r0, r3, #24
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	3306      	adds	r3, #6
 800b098:	2206      	movs	r2, #6
 800b09a:	4619      	mov	r1, r3
 800b09c:	f016 ff97 	bl	8021fce <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b0a8:	d304      	bcc.n	800b0b4 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800b0aa:	491f      	ldr	r1, [pc, #124]	@ (800b128 <rx_udp+0xdc>)
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f7f7 fc55 	bl	800295c <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800b0b2:	e035      	b.n	800b120 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0bc:	1ad2      	subs	r2, r2, r3
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d212      	bcs.n	800b0ec <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	f7fb ff5c 	bl	8006f94 <mg_iobuf_resize>
 800b0dc:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d104      	bne.n	800b0ec <rx_udp+0xa0>
      mg_error(c, "oom");
 800b0e2:	4912      	ldr	r1, [pc, #72]	@ (800b12c <rx_udp+0xe0>)
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f7f7 fc39 	bl	800295c <mg_error>
}
 800b0ea:	e019      	b.n	800b120 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0f4:	18d0      	adds	r0, r2, r3
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	6899      	ldr	r1, [r3, #8]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	461a      	mov	r2, r3
 800b100:	f016 ff65 	bl	8021fce <memcpy>
      c->recv.len += pkt->pay.len;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	441a      	add	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	330c      	adds	r3, #12
 800b116:	461a      	mov	r2, r3
 800b118:	2107      	movs	r1, #7
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7f7 fbfe 	bl	800291c <mg_call>
}
 800b120:	bf00      	nop
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	08026d84 	.word	0x08026d84
 800b12c:	08026da0 	.word	0x08026da0

0800b130 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800b130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b132:	b091      	sub	sp, #68	@ 0x44
 800b134:	af06      	add	r7, sp, #24
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
 800b13c:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	689a      	ldr	r2, [r3, #8]
 800b142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b144:	3314      	adds	r3, #20
 800b146:	9301      	str	r3, [sp, #4]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	4613      	mov	r3, r2
 800b14e:	2206      	movs	r2, #6
 800b150:	68b9      	ldr	r1, [r7, #8]
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f7fe ff90 	bl	800a078 <tx_ip>
 800b158:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 800b15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15c:	3314      	adds	r3, #20
 800b15e:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800b160:	2214      	movs	r2, #20
 800b162:	2100      	movs	r1, #0
 800b164:	6a38      	ldr	r0, [r7, #32]
 800b166:	f016 fe3d 	bl	8021de4 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800b16a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d009      	beq.n	800b184 <tx_tcp+0x54>
 800b170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b172:	2b00      	cmp	r3, #0
 800b174:	d006      	beq.n	800b184 <tx_tcp+0x54>
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	3314      	adds	r3, #20
 800b17a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b17c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b17e:	4618      	mov	r0, r3
 800b180:	f016 fe16 	bl	8021db0 <memmove>
  tcp->sport = sport;
 800b184:	6a3b      	ldr	r3, [r7, #32]
 800b186:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b18a:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800b18c:	6a3b      	ldr	r3, [r7, #32]
 800b18e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800b192:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800b194:	6a3b      	ldr	r3, [r7, #32]
 800b196:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b198:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b19e:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	78fa      	ldrb	r2, [r7, #3]
 800b1a4:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 800b1a6:	f241 7070 	movw	r0, #6000	@ 0x1770
 800b1aa:	f00c fc44 	bl	8017a36 <mg_ntohs>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	2250      	movs	r2, #80	@ 0x50
 800b1ba:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800b1c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	3314      	adds	r3, #20
 800b1c6:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	753b      	strb	r3, [r7, #20]
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ce:	7a5b      	ldrb	r3, [r3, #9]
 800b1d0:	757b      	strb	r3, [r7, #21]
 800b1d2:	8b7b      	ldrh	r3, [r7, #26]
 800b1d4:	0a1b      	lsrs	r3, r3, #8
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	75bb      	strb	r3, [r7, #22]
 800b1dc:	8b7b      	ldrh	r3, [r7, #26]
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 800b1e2:	8b7b      	ldrh	r3, [r7, #26]
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	6a39      	ldr	r1, [r7, #32]
 800b1e8:	69f8      	ldr	r0, [r7, #28]
 800b1ea:	f7fe fd61 	bl	8009cb0 <csumup>
 800b1ee:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f2:	330c      	adds	r3, #12
 800b1f4:	2204      	movs	r2, #4
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	69f8      	ldr	r0, [r7, #28]
 800b1fa:	f7fe fd59 	bl	8009cb0 <csumup>
 800b1fe:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800b200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b202:	3310      	adds	r3, #16
 800b204:	2204      	movs	r2, #4
 800b206:	4619      	mov	r1, r3
 800b208:	69f8      	ldr	r0, [r7, #28]
 800b20a:	f7fe fd51 	bl	8009cb0 <csumup>
 800b20e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800b210:	f107 0314 	add.w	r3, r7, #20
 800b214:	2204      	movs	r2, #4
 800b216:	4619      	mov	r1, r3
 800b218:	69f8      	ldr	r0, [r7, #28]
 800b21a:	f7fe fd49 	bl	8009cb0 <csumup>
 800b21e:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800b220:	69f8      	ldr	r0, [r7, #28]
 800b222:	f7fe fd70 	bl	8009d06 <csumfin>
 800b226:	4603      	mov	r3, r0
 800b228:	461a      	mov	r2, r3
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800b22e:	4b21      	ldr	r3, [pc, #132]	@ (800b2b4 <tx_tcp+0x184>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b03      	cmp	r3, #3
 800b234:	dd2c      	ble.n	800b290 <tx_tcp+0x160>
 800b236:	4b20      	ldr	r3, [pc, #128]	@ (800b2b8 <tx_tcp+0x188>)
 800b238:	f241 6219 	movw	r2, #5657	@ 0x1619
 800b23c:	491f      	ldr	r1, [pc, #124]	@ (800b2bc <tx_tcp+0x18c>)
 800b23e:	2004      	movs	r0, #4
 800b240:	f7fc fe76 	bl	8007f30 <mg_log_prefix>
 800b244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b246:	f103 050c 	add.w	r5, r3, #12
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	881b      	ldrh	r3, [r3, #0]
 800b24e:	b29b      	uxth	r3, r3
 800b250:	4618      	mov	r0, r3
 800b252:	f00c fbf0 	bl	8017a36 <mg_ntohs>
 800b256:	4603      	mov	r3, r0
 800b258:	461e      	mov	r6, r3
 800b25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25c:	f103 0410 	add.w	r4, r3, #16
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	885b      	ldrh	r3, [r3, #2]
 800b264:	b29b      	uxth	r3, r3
 800b266:	4618      	mov	r0, r3
 800b268:	f00c fbe5 	bl	8017a36 <mg_ntohs>
 800b26c:	4603      	mov	r3, r0
 800b26e:	461a      	mov	r2, r3
 800b270:	6a3b      	ldr	r3, [r7, #32]
 800b272:	7b5b      	ldrb	r3, [r3, #13]
 800b274:	4619      	mov	r1, r3
 800b276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b278:	9304      	str	r3, [sp, #16]
 800b27a:	9103      	str	r1, [sp, #12]
 800b27c:	9202      	str	r2, [sp, #8]
 800b27e:	9401      	str	r4, [sp, #4]
 800b280:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c0 <tx_tcp+0x190>)
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	4633      	mov	r3, r6
 800b286:	462a      	mov	r2, r5
 800b288:	490d      	ldr	r1, [pc, #52]	@ (800b2c0 <tx_tcp+0x190>)
 800b28a:	480e      	ldr	r0, [pc, #56]	@ (800b2c4 <tx_tcp+0x194>)
 800b28c:	f7fc fea0 	bl	8007fd0 <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 800b290:	6a3b      	ldr	r3, [r7, #32]
 800b292:	f103 0214 	add.w	r2, r3, #20
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	695b      	ldr	r3, [r3, #20]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	461a      	mov	r2, r3
 800b29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2a0:	4413      	add	r3, r2
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f7fe fdb9 	bl	8009e1c <ether_output>
 800b2aa:	4603      	mov	r3, r0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	372c      	adds	r7, #44	@ 0x2c
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2b4:	24000240 	.word	0x24000240
 800b2b8:	08029004 	.word	0x08029004
 800b2bc:	0802597c 	.word	0x0802597c
 800b2c0:	0800d855 	.word	0x0800d855
 800b2c4:	08026da4 	.word	0x08026da4

0800b2c8 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 800b2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2cc:	b08c      	sub	sp, #48	@ 0x30
 800b2ce:	af06      	add	r7, sp, #24
 800b2d0:	60f8      	str	r0, [r7, #12]
 800b2d2:	60b9      	str	r1, [r7, #8]
 800b2d4:	603b      	str	r3, [r7, #0]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2de:	7b5b      	ldrb	r3, [r3, #13]
 800b2e0:	f003 0303 	and.w	r3, r3, #3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	bf14      	ite	ne
 800b2e8:	2301      	movne	r3, #1
 800b2ea:	2300      	moveq	r3, #0
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	691b      	ldr	r3, [r3, #16]
 800b2f4:	1d9e      	adds	r6, r3, #6
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	69db      	ldr	r3, [r3, #28]
 800b2fa:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b302:	885b      	ldrh	r3, [r3, #2]
 800b304:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800b30a:	881b      	ldrh	r3, [r3, #0]
 800b30c:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	4618      	mov	r0, r3
 800b316:	f00c fb75 	bl	8017a04 <mg_ntohl>
 800b31a:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	4413      	add	r3, r2
 800b320:	4618      	mov	r0, r3
 800b322:	f00c fb6f 	bl	8017a04 <mg_ntohl>
 800b326:	4601      	mov	r1, r0
 800b328:	79fa      	ldrb	r2, [r7, #7]
 800b32a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b32c:	9305      	str	r3, [sp, #20]
 800b32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b330:	9304      	str	r3, [sp, #16]
 800b332:	9103      	str	r1, [sp, #12]
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	9302      	str	r3, [sp, #8]
 800b338:	9501      	str	r5, [sp, #4]
 800b33a:	9400      	str	r4, [sp, #0]
 800b33c:	4613      	mov	r3, r2
 800b33e:	4642      	mov	r2, r8
 800b340:	4631      	mov	r1, r6
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f7ff fef4 	bl	800b130 <tx_tcp>
 800b348:	4603      	mov	r3, r0
                buf, len);
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b354 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 800b354:	b5b0      	push	{r4, r5, r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	4618      	mov	r0, r3
 800b364:	f7fe f9f3 	bl	800974e <mg_alloc_conn>
 800b368:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10f      	bne.n	800b390 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 800b370:	4b4e      	ldr	r3, [pc, #312]	@ (800b4ac <accept_conn+0x158>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	dd09      	ble.n	800b38c <accept_conn+0x38>
 800b378:	4b4d      	ldr	r3, [pc, #308]	@ (800b4b0 <accept_conn+0x15c>)
 800b37a:	f241 622d 	movw	r2, #5677	@ 0x162d
 800b37e:	494d      	ldr	r1, [pc, #308]	@ (800b4b4 <accept_conn+0x160>)
 800b380:	2001      	movs	r0, #1
 800b382:	f7fc fdd5 	bl	8007f30 <mg_log_prefix>
 800b386:	484c      	ldr	r0, [pc, #304]	@ (800b4b8 <accept_conn+0x164>)
 800b388:	f7fc fe22 	bl	8007fd0 <mg_log>
    return NULL;
 800b38c:	2300      	movs	r3, #0
 800b38e:	e088      	b.n	800b4a2 <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	33b0      	adds	r3, #176	@ 0xb0
 800b394:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f00c fb31 	bl	8017a04 <mg_ntohl>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f00c fb28 	bl	8017a04 <mg_ntohl>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	f103 0018 	add.w	r0, r3, #24
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	3306      	adds	r3, #6
 800b3c6:	2206      	movs	r2, #6
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	f016 fe00 	bl	8021fce <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7fe fcc7 	bl	8009d64 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	331c      	adds	r3, #28
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	69d2      	ldr	r2, [r2, #28]
 800b3de:	320c      	adds	r2, #12
 800b3e0:	6812      	ldr	r2, [r2, #0]
 800b3e2:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 800b3f0:	4b2e      	ldr	r3, [pc, #184]	@ (800b4ac <accept_conn+0x158>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	dd0e      	ble.n	800b416 <accept_conn+0xc2>
 800b3f8:	4b2d      	ldr	r3, [pc, #180]	@ (800b4b0 <accept_conn+0x15c>)
 800b3fa:	f241 6236 	movw	r2, #5686	@ 0x1636
 800b3fe:	492d      	ldr	r1, [pc, #180]	@ (800b4b4 <accept_conn+0x160>)
 800b400:	2003      	movs	r0, #3
 800b402:	f7fc fd95 	bl	8007f30 <mg_log_prefix>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	331c      	adds	r3, #28
 800b40e:	4a2b      	ldr	r2, [pc, #172]	@ (800b4bc <accept_conn+0x168>)
 800b410:	482b      	ldr	r0, [pc, #172]	@ (800b4c0 <accept_conn+0x16c>)
 800b412:	f7fc fddd 	bl	8007fd0 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	601a      	str	r2, [r3, #0]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800b42e:	f043 0304 	orr.w	r3, r3, #4
 800b432:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b43c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b440:	b2d9      	uxtb	r1, r3
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b448:	f361 03c3 	bfi	r3, r1, #3, #1
 800b44c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f102 0408 	add.w	r4, r2, #8
 800b464:	f103 0508 	add.w	r5, r3, #8
 800b468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 800b48c:	2200      	movs	r2, #0
 800b48e:	2101      	movs	r1, #1
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f7f7 fa43 	bl	800291c <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800b496:	2200      	movs	r2, #0
 800b498:	2105      	movs	r1, #5
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f7f7 fa3e 	bl	800291c <mg_call>
  return c;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bdb0      	pop	{r4, r5, r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	24000240 	.word	0x24000240
 800b4b0:	0802900c 	.word	0x0802900c
 800b4b4:	0802597c 	.word	0x0802597c
 800b4b8:	080269d8 	.word	0x080269d8
 800b4bc:	0800d8cd 	.word	0x0800d8cd
 800b4c0:	08026dc8 	.word	0x08026dc8

0800b4c4 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08a      	sub	sp, #40	@ 0x28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4d4:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 800b4d6:	230e      	movs	r3, #14
 800b4d8:	623b      	str	r3, [r7, #32]
 800b4da:	2318      	movs	r3, #24
 800b4dc:	61fb      	str	r3, [r7, #28]
 800b4de:	233c      	movs	r3, #60	@ 0x3c
 800b4e0:	61bb      	str	r3, [r7, #24]
 800b4e2:	2308      	movs	r3, #8
 800b4e4:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 800b4e6:	6a3a      	ldr	r2, [r7, #32]
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	441a      	add	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b4f2:	f003 0301 	and.w	r3, r3, #1
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d001      	beq.n	800b500 <trim_len+0x3c>
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	e000      	b.n	800b502 <trim_len+0x3e>
 800b500:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 800b502:	4413      	add	r3, r2
 800b504:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b50c:	f003 0301 	and.w	r3, r3, #1
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d103      	bne.n	800b51e <trim_len+0x5a>
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	e000      	b.n	800b520 <trim_len+0x5c>
 800b51e:	2344      	movs	r3, #68	@ 0x44
 800b520:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	441a      	add	r2, r3
 800b528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d904      	bls.n	800b53a <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 800b530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b532:	699a      	ldr	r2, [r3, #24]
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 800b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b540:	461a      	mov	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	4293      	cmp	r3, r2
 800b546:	d913      	bls.n	800b570 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 800b548:	4b20      	ldr	r3, [pc, #128]	@ (800b5cc <trim_len+0x108>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	dd0a      	ble.n	800b566 <trim_len+0xa2>
 800b550:	4b1f      	ldr	r3, [pc, #124]	@ (800b5d0 <trim_len+0x10c>)
 800b552:	f241 6251 	movw	r2, #5713	@ 0x1651
 800b556:	491f      	ldr	r1, [pc, #124]	@ (800b5d4 <trim_len+0x110>)
 800b558:	2001      	movs	r0, #1
 800b55a:	f7fc fce9 	bl	8007f30 <mg_log_prefix>
 800b55e:	68f9      	ldr	r1, [r7, #12]
 800b560:	481d      	ldr	r0, [pc, #116]	@ (800b5d8 <trim_len+0x114>)
 800b562:	f7fc fd35 	bl	8007fd0 <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	b29a      	uxth	r2, r3
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 800b570:	683a      	ldr	r2, [r7, #0]
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	441a      	add	r2, r3
 800b576:	6a3b      	ldr	r3, [r7, #32]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b57c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	@ 0x44
 800b580:	4293      	cmp	r3, r2
 800b582:	d91e      	bls.n	800b5c2 <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 800b584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b586:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b58a:	461a      	mov	r2, r3
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	6a3a      	ldr	r2, [r7, #32]
 800b592:	4413      	add	r3, r2
 800b594:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b59c:	f003 0301 	and.w	r3, r3, #1
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00d      	beq.n	800b5c2 <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 800b5a6:	4b09      	ldr	r3, [pc, #36]	@ (800b5cc <trim_len+0x108>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	dd09      	ble.n	800b5c2 <trim_len+0xfe>
 800b5ae:	4b08      	ldr	r3, [pc, #32]	@ (800b5d0 <trim_len+0x10c>)
 800b5b0:	f241 6258 	movw	r2, #5720	@ 0x1658
 800b5b4:	4907      	ldr	r1, [pc, #28]	@ (800b5d4 <trim_len+0x110>)
 800b5b6:	2001      	movs	r0, #1
 800b5b8:	f7fc fcba 	bl	8007f30 <mg_log_prefix>
 800b5bc:	4807      	ldr	r0, [pc, #28]	@ (800b5dc <trim_len+0x118>)
 800b5be:	f7fc fd07 	bl	8007fd0 <mg_log>
    }
  }

  return len;
 800b5c2:	683b      	ldr	r3, [r7, #0]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3728      	adds	r7, #40	@ 0x28
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	24000240 	.word	0x24000240
 800b5d0:	08029018 	.word	0x08029018
 800b5d4:	0802597c 	.word	0x0802597c
 800b5d8:	08026dd8 	.word	0x08026dd8
 800b5dc:	08026e04 	.word	0x08026e04

0800b5e0 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800b5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e2:	b08f      	sub	sp, #60	@ 0x3c
 800b5e4:	af06      	add	r7, sp, #24
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5f2:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	33b0      	adds	r3, #176	@ 0xb0
 800b5f8:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	331c      	adds	r3, #28
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 800b602:	6879      	ldr	r1, [r7, #4]
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f7ff ff5d 	bl	800b4c4 <trim_len>
 800b60a:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	b2db      	uxtb	r3, r3
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d015      	beq.n	800b648 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	f103 0118 	add.w	r1, r3, #24
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	6898      	ldr	r0, [r3, #8]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	8b1c      	ldrh	r4, [r3, #24]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	9203      	str	r2, [sp, #12]
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	9202      	str	r2, [sp, #8]
 800b636:	9301      	str	r3, [sp, #4]
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	4623      	mov	r3, r4
 800b63e:	4602      	mov	r2, r0
 800b640:	69f8      	ldr	r0, [r7, #28]
 800b642:	f7fe fd70 	bl	800a126 <tx_udp>
 800b646:	e03d      	b.n	800b6c4 <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	f103 0618 	add.w	r6, r3, #24
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	8b1c      	ldrh	r4, [r3, #24]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f00c f9d2 	bl	8017a04 <mg_ntohl>
 800b660:	6038      	str	r0, [r7, #0]
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	4618      	mov	r0, r3
 800b668:	f00c f9cc 	bl	8017a04 <mg_ntohl>
 800b66c:	4602      	mov	r2, r0
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	9305      	str	r3, [sp, #20]
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	9304      	str	r3, [sp, #16]
 800b676:	9203      	str	r2, [sp, #12]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	9302      	str	r3, [sp, #8]
 800b67c:	9501      	str	r5, [sp, #4]
 800b67e:	9400      	str	r4, [sp, #0]
 800b680:	2318      	movs	r3, #24
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	4631      	mov	r1, r6
 800b686:	69f8      	ldr	r0, [r7, #28]
 800b688:	f7ff fd52 	bl	800b130 <tx_tcp>
 800b68c:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d102      	bne.n	800b69a <mg_io_send+0xba>
      return MG_IO_WAIT;
 800b694:	f06f 0301 	mvn.w	r3, #1
 800b698:	e015      	b.n	800b6c6 <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a0:	d102      	bne.n	800b6a8 <mg_io_send+0xc8>
      return MG_IO_ERR;
 800b6a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a6:	e00e      	b.n	800b6c6 <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	441a      	add	r2, r3
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	7f9b      	ldrb	r3, [r3, #30]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d103      	bne.n	800b6c4 <mg_io_send+0xe4>
 800b6bc:	2100      	movs	r1, #0
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f7fe fb50 	bl	8009d64 <settmout>
    }
  }
  return (long) len;
 800b6c4:	687b      	ldr	r3, [r7, #4]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3724      	adds	r7, #36	@ 0x24
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b6d0 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	18d1      	adds	r1, r2, r3
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	685a      	ldr	r2, [r3, #4]
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f006 fe9d 	bl	8012430 <mg_tls_recv>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b700:	d104      	bne.n	800b70c <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 800b702:	490c      	ldr	r1, [pc, #48]	@ (800b734 <handle_tls_recv+0x64>)
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f7f7 f929 	bl	800295c <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 800b70a:	e00f      	b.n	800b72c <handle_tls_recv+0x5c>
  } else if (n > 0) {
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	dd0c      	ble.n	800b72c <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	441a      	add	r2, r3
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 800b71e:	f107 030c 	add.w	r3, r7, #12
 800b722:	461a      	mov	r2, r3
 800b724:	2107      	movs	r1, #7
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7f7 f8f8 	bl	800291c <mg_call>
}
 800b72c:	bf00      	nop
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	08026e30 	.word	0x08026e30

0800b738 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800b738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b73c:	b090      	sub	sp, #64	@ 0x40
 800b73e:	af06      	add	r7, sp, #24
 800b740:	60f8      	str	r0, [r7, #12]
 800b742:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	33b0      	adds	r3, #176	@ 0xb0
 800b748:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	d002      	beq.n	800b760 <read_conn+0x28>
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3368      	adds	r3, #104	@ 0x68
 800b75e:	e001      	b.n	800b764 <read_conn+0x2c>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	3338      	adds	r3, #56	@ 0x38
 800b764:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f00c f949 	bl	8017a04 <mg_ntohl>
 800b772:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	331c      	adds	r3, #28
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b780:	7b5b      	ldrb	r3, [r3, #13]
 800b782:	f003 0301 	and.w	r3, r3, #1
 800b786:	2b00      	cmp	r3, #0
 800b788:	d070      	beq.n	800b86c <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 800b78a:	2310      	movs	r3, #16
 800b78c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	4618      	mov	r0, r3
 800b798:	f00c f934 	bl	8017a04 <mg_ntohl>
 800b79c:	4602      	mov	r2, r0
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	1c5a      	adds	r2, r3, #1
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b7b0:	f003 0310 	and.w	r3, r3, #16
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d01e      	beq.n	800b7f8 <read_conn+0xc0>
 800b7ba:	6a3b      	ldr	r3, [r7, #32]
 800b7bc:	7f9b      	ldrb	r3, [r3, #30]
 800b7be:	2b04      	cmp	r3, #4
 800b7c0:	d11a      	bne.n	800b7f8 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800b7c2:	6a3b      	ldr	r3, [r7, #32]
 800b7c4:	681c      	ldr	r4, [r3, #0]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f00c f919 	bl	8017a04 <mg_ntohl>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	429c      	cmp	r4, r3
 800b7d6:	d105      	bne.n	800b7e4 <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	1c5a      	adds	r2, r3, #1
 800b7de:	6a3b      	ldr	r3, [r7, #32]
 800b7e0:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800b7e2:	e01a      	b.n	800b81a <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f00c f90a 	bl	8017a04 <mg_ntohl>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	6a3b      	ldr	r3, [r7, #32]
 800b7f4:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800b7f6:	e010      	b.n	800b81a <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 800b7f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7fc:	f043 0301 	orr.w	r3, r3, #1
 800b800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b80a:	f043 0310 	orr.w	r3, r3, #16
 800b80e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 800b812:	2104      	movs	r1, #4
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f7fe faa5 	bl	8009d64 <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800b820:	6a3b      	ldr	r3, [r7, #32]
 800b822:	f103 0818 	add.w	r8, r3, #24
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	607b      	str	r3, [r7, #4]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	8b1c      	ldrh	r4, [r3, #24]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b832:	6a3b      	ldr	r3, [r7, #32]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4618      	mov	r0, r3
 800b838:	f00c f8e4 	bl	8017a04 <mg_ntohl>
 800b83c:	6038      	str	r0, [r7, #0]
 800b83e:	6a3b      	ldr	r3, [r7, #32]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	4618      	mov	r0, r3
 800b844:	f00c f8de 	bl	8017a04 <mg_ntohl>
 800b848:	4602      	mov	r2, r0
 800b84a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b84e:	2100      	movs	r1, #0
 800b850:	9105      	str	r1, [sp, #20]
 800b852:	4990      	ldr	r1, [pc, #576]	@ (800ba94 <read_conn+0x35c>)
 800b854:	9104      	str	r1, [sp, #16]
 800b856:	9203      	str	r2, [sp, #12]
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	9102      	str	r1, [sp, #8]
 800b85c:	9501      	str	r5, [sp, #4]
 800b85e:	9400      	str	r4, [sp, #0]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	4641      	mov	r1, r8
 800b864:	4630      	mov	r0, r6
 800b866:	f7ff fc63 	bl	800b130 <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800b86a:	e173      	b.n	800bb54 <read_conn+0x41c>
  } else if (pkt->pay.len == 0) {
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	f000 816f 	beq.w	800bb54 <read_conn+0x41c>
  } else if (seq != s->ack) {
 800b876:	6a3b      	ldr	r3, [r7, #32]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	69ba      	ldr	r2, [r7, #24]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d059      	beq.n	800b934 <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	4618      	mov	r0, r3
 800b888:	f00c f8bc 	bl	8017a04 <mg_ntohl>
 800b88c:	4602      	mov	r2, r0
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	4413      	add	r3, r2
 800b894:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 800b896:	6a3b      	ldr	r3, [r7, #32]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d10f      	bne.n	800b8c0 <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800b8a0:	4b7d      	ldr	r3, [pc, #500]	@ (800ba98 <read_conn+0x360>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b03      	cmp	r3, #3
 800b8a6:	f340 8155 	ble.w	800bb54 <read_conn+0x41c>
 800b8aa:	4b7c      	ldr	r3, [pc, #496]	@ (800ba9c <read_conn+0x364>)
 800b8ac:	f241 629f 	movw	r2, #5791	@ 0x169f
 800b8b0:	497b      	ldr	r1, [pc, #492]	@ (800baa0 <read_conn+0x368>)
 800b8b2:	2004      	movs	r0, #4
 800b8b4:	f7fc fb3c 	bl	8007f30 <mg_log_prefix>
 800b8b8:	487a      	ldr	r0, [pc, #488]	@ (800baa4 <read_conn+0x36c>)
 800b8ba:	f7fc fb89 	bl	8007fd0 <mg_log>
}
 800b8be:	e149      	b.n	800bb54 <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 800b8c0:	4b75      	ldr	r3, [pc, #468]	@ (800ba98 <read_conn+0x360>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b03      	cmp	r3, #3
 800b8c6:	dd0d      	ble.n	800b8e4 <read_conn+0x1ac>
 800b8c8:	4b74      	ldr	r3, [pc, #464]	@ (800ba9c <read_conn+0x364>)
 800b8ca:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 800b8ce:	4974      	ldr	r1, [pc, #464]	@ (800baa0 <read_conn+0x368>)
 800b8d0:	2004      	movs	r0, #4
 800b8d2:	f7fc fb2d 	bl	8007f30 <mg_log_prefix>
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	69b9      	ldr	r1, [r7, #24]
 800b8de:	4872      	ldr	r0, [pc, #456]	@ (800baa8 <read_conn+0x370>)
 800b8e0:	f7fc fb76 	bl	8007fd0 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800b8ea:	6a3b      	ldr	r3, [r7, #32]
 800b8ec:	f103 0818 	add.w	r8, r3, #24
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	607b      	str	r3, [r7, #4]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	8b1c      	ldrh	r4, [r3, #24]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4618      	mov	r0, r3
 800b902:	f00c f87f 	bl	8017a04 <mg_ntohl>
 800b906:	6038      	str	r0, [r7, #0]
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f00c f879 	bl	8017a04 <mg_ntohl>
 800b912:	4603      	mov	r3, r0
 800b914:	2200      	movs	r2, #0
 800b916:	9205      	str	r2, [sp, #20]
 800b918:	4a5e      	ldr	r2, [pc, #376]	@ (800ba94 <read_conn+0x35c>)
 800b91a:	9204      	str	r2, [sp, #16]
 800b91c:	9303      	str	r3, [sp, #12]
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	9102      	str	r1, [sp, #8]
 800b922:	9501      	str	r5, [sp, #4]
 800b924:	9400      	str	r4, [sp, #0]
 800b926:	2310      	movs	r3, #16
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	4641      	mov	r1, r8
 800b92c:	4630      	mov	r0, r6
 800b92e:	f7ff fbff 	bl	800b130 <tx_tcp>
}
 800b932:	e10f      	b.n	800bb54 <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	685a      	ldr	r2, [r3, #4]
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	1ad2      	subs	r2, r2, r3
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	429a      	cmp	r2, r3
 800b944:	d210      	bcs.n	800b968 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	689a      	ldr	r2, [r3, #8]
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	4413      	add	r3, r2
 800b950:	4619      	mov	r1, r3
 800b952:	69f8      	ldr	r0, [r7, #28]
 800b954:	f7fb fb1e 	bl	8006f94 <mg_iobuf_resize>
 800b958:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d104      	bne.n	800b968 <read_conn+0x230>
    mg_error(c, "oom");
 800b95e:	4953      	ldr	r1, [pc, #332]	@ (800baac <read_conn+0x374>)
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f7f6 fffb 	bl	800295c <mg_error>
 800b966:	e0f5      	b.n	800bb54 <read_conn+0x41c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	18d0      	adds	r0, r2, r3
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	6899      	ldr	r1, [r3, #8]
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	461a      	mov	r2, r3
 800b97c:	f016 fb27 	bl	8021fce <memcpy>
    io->len += pkt->pay.len;
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	689a      	ldr	r2, [r3, #8]
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	441a      	add	r2, r3
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800b98e:	4b42      	ldr	r3, [pc, #264]	@ (800ba98 <read_conn+0x360>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b03      	cmp	r3, #3
 800b994:	dd15      	ble.n	800b9c2 <read_conn+0x28a>
 800b996:	4b41      	ldr	r3, [pc, #260]	@ (800ba9c <read_conn+0x364>)
 800b998:	f241 62b2 	movw	r2, #5810	@ 0x16b2
 800b99c:	4940      	ldr	r1, [pc, #256]	@ (800baa0 <read_conn+0x368>)
 800b99e:	2004      	movs	r0, #4
 800b9a0:	f7fc fac6 	bl	8007f30 <mg_log_prefix>
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f00c f828 	bl	8017a04 <mg_ntohl>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	483c      	ldr	r0, [pc, #240]	@ (800bab0 <read_conn+0x378>)
 800b9be:	f7fc fb07 	bl	8007fd0 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f00c f81b 	bl	8017a04 <mg_ntohl>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	441a      	add	r2, r3
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	695a      	ldr	r2, [r3, #20]
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	441a      	add	r2, r3
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 800b9e8:	6a3b      	ldr	r3, [r7, #32]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d961      	bls.n	800bab8 <read_conn+0x380>
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	691a      	ldr	r2, [r3, #16]
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d05b      	beq.n	800bab8 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 800ba00:	4b25      	ldr	r3, [pc, #148]	@ (800ba98 <read_conn+0x360>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b03      	cmp	r3, #3
 800ba06:	dd0e      	ble.n	800ba26 <read_conn+0x2ee>
 800ba08:	4b24      	ldr	r3, [pc, #144]	@ (800ba9c <read_conn+0x364>)
 800ba0a:	f241 62b9 	movw	r2, #5817	@ 0x16b9
 800ba0e:	4924      	ldr	r1, [pc, #144]	@ (800baa0 <read_conn+0x368>)
 800ba10:	2004      	movs	r0, #4
 800ba12:	f7fc fa8d 	bl	8007f30 <mg_log_prefix>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	4824      	ldr	r0, [pc, #144]	@ (800bab4 <read_conn+0x37c>)
 800ba22:	f7fc fad5 	bl	8007fd0 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	f103 0818 	add.w	r8, r3, #24
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	607b      	str	r3, [r7, #4]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	8b1c      	ldrh	r4, [r3, #24]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800ba3e:	6a3b      	ldr	r3, [r7, #32]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f00b ffde 	bl	8017a04 <mg_ntohl>
 800ba48:	6038      	str	r0, [r7, #0]
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f00b ffd8 	bl	8017a04 <mg_ntohl>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2200      	movs	r2, #0
 800ba58:	9205      	str	r2, [sp, #20]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	9204      	str	r2, [sp, #16]
 800ba5e:	9303      	str	r3, [sp, #12]
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	9102      	str	r1, [sp, #8]
 800ba64:	9501      	str	r5, [sp, #4]
 800ba66:	9400      	str	r4, [sp, #0]
 800ba68:	2310      	movs	r3, #16
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	4641      	mov	r1, r8
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7ff fb5e 	bl	800b130 <tx_tcp>
      s->unacked = 0;
 800ba74:	6a3b      	ldr	r3, [r7, #32]
 800ba76:	2200      	movs	r2, #0
 800ba78:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 800ba7a:	6a3b      	ldr	r3, [r7, #32]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	6a3b      	ldr	r3, [r7, #32]
 800ba80:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 800ba82:	6a3b      	ldr	r3, [r7, #32]
 800ba84:	7f9b      	ldrb	r3, [r3, #30]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d01e      	beq.n	800bac8 <read_conn+0x390>
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f7fe f969 	bl	8009d64 <settmout>
 800ba92:	e019      	b.n	800bac8 <read_conn+0x390>
 800ba94:	08026288 	.word	0x08026288
 800ba98:	24000240 	.word	0x24000240
 800ba9c:	08029024 	.word	0x08029024
 800baa0:	0802597c 	.word	0x0802597c
 800baa4:	08026e40 	.word	0x08026e40
 800baa8:	08026e58 	.word	0x08026e58
 800baac:	08026da0 	.word	0x08026da0
 800bab0:	08026e70 	.word	0x08026e70
 800bab4:	08026e84 	.word	0x08026e84
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800bab8:	6a3b      	ldr	r3, [r7, #32]
 800baba:	7f9b      	ldrb	r3, [r3, #30]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d003      	beq.n	800bac8 <read_conn+0x390>
 800bac0:	2101      	movs	r1, #1
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f7fe f94e 	bl	8009d64 <settmout>
    if (c->is_tls && c->is_tls_hs) {
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00b      	beq.n	800baf0 <read_conn+0x3b8>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bade:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d003      	beq.n	800baf0 <read_conn+0x3b8>
      mg_tls_handshake(c);
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f006 fa2b 	bl	8011f44 <mg_tls_handshake>
 800baee:	e031      	b.n	800bb54 <read_conn+0x41c>
    } else if (c->is_tls) {
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800baf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d021      	beq.n	800bb44 <read_conn+0x40c>
      io = &c->recv;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	3338      	adds	r3, #56	@ 0x38
 800bb04:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	1ad2      	subs	r2, r2, r3
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d210      	bcs.n	800bb3a <read_conn+0x402>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	689a      	ldr	r2, [r3, #8]
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	4413      	add	r3, r2
 800bb22:	4619      	mov	r1, r3
 800bb24:	69f8      	ldr	r0, [r7, #28]
 800bb26:	f7fb fa35 	bl	8006f94 <mg_iobuf_resize>
 800bb2a:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d104      	bne.n	800bb3a <read_conn+0x402>
        mg_error(c, "oom");
 800bb30:	490b      	ldr	r1, [pc, #44]	@ (800bb60 <read_conn+0x428>)
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f7f6 ff12 	bl	800295c <mg_error>
 800bb38:	e00c      	b.n	800bb54 <read_conn+0x41c>
        handle_tls_recv(c, io);
 800bb3a:	69f9      	ldr	r1, [r7, #28]
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7ff fdc7 	bl	800b6d0 <handle_tls_recv>
}
 800bb42:	e007      	b.n	800bb54 <read_conn+0x41c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	330c      	adds	r3, #12
 800bb48:	461a      	mov	r2, r3
 800bb4a:	2107      	movs	r1, #7
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f7f6 fee5 	bl	800291c <mg_call>
}
 800bb52:	e7ff      	b.n	800bb54 <read_conn+0x41c>
 800bb54:	bf00      	nop
 800bb56:	3728      	adds	r7, #40	@ 0x28
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb5e:	bf00      	nop
 800bb60:	08026da0 	.word	0x08026da0

0800bb64 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800bb64:	b590      	push	{r4, r7, lr}
 800bb66:	b089      	sub	sp, #36	@ 0x24
 800bb68:	af02      	add	r7, sp, #8
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb72:	2200      	movs	r2, #0
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fe fcb2 	bl	800a4e0 <getpeer>
 800bb7c:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <rx_tcp+0x26>
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	33b0      	adds	r3, #176	@ 0xb0
 800bb88:	e000      	b.n	800bb8c <rx_tcp+0x28>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d048      	beq.n	800bc26 <rx_tcp+0xc2>
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bb9a:	f003 0320 	and.w	r3, r3, #32
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d040      	beq.n	800bc26 <rx_tcp+0xc2>
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bba8:	7b5b      	ldrb	r3, [r3, #13]
 800bbaa:	2b12      	cmp	r3, #18
 800bbac:	d13b      	bne.n	800bc26 <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f00b ff25 	bl	8017a04 <mg_ntohl>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	601a      	str	r2, [r3, #0]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f00b ff1c 	bl	8017a04 <mg_ntohl>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	1c5a      	adds	r2, r3, #1
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	9201      	str	r2, [sp, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	9200      	str	r2, [sp, #0]
 800bbe2:	2210      	movs	r2, #16
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7ff fb6e 	bl	800b2c8 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800bbec:	697a      	ldr	r2, [r7, #20]
 800bbee:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800bbf2:	f36f 1345 	bfc	r3, #5, #1
 800bbf6:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	6978      	ldr	r0, [r7, #20]
 800bbfe:	f7fe f8b1 	bl	8009d64 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800bc02:	2200      	movs	r2, #0
 800bc04:	2104      	movs	r1, #4
 800bc06:	6978      	ldr	r0, [r7, #20]
 800bc08:	f7f6 fe88 	bl	800291c <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bc12:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f000 80cd 	beq.w	800bdb8 <rx_tcp+0x254>
 800bc1e:	6978      	ldr	r0, [r7, #20]
 800bc20:	f006 f990 	bl	8011f44 <mg_tls_handshake>
 800bc24:	e0c8      	b.n	800bdb8 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d019      	beq.n	800bc60 <rx_tcp+0xfc>
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bc32:	f003 0320 	and.w	r3, r3, #32
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d011      	beq.n	800bc60 <rx_tcp+0xfc>
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc40:	7b5b      	ldrb	r3, [r3, #13]
 800bc42:	2b10      	cmp	r3, #16
 800bc44:	d00c      	beq.n	800bc60 <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	9201      	str	r2, [sp, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	9200      	str	r2, [sp, #0]
 800bc54:	2214      	movs	r2, #20
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7ff fb35 	bl	800b2c8 <tx_tcp_pkt>
 800bc5e:	e0ab      	b.n	800bdb8 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00b      	beq.n	800bc7e <rx_tcp+0x11a>
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc6a:	7b5b      	ldrb	r3, [r3, #13]
 800bc6c:	f003 0304 	and.w	r3, r3, #4
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d004      	beq.n	800bc7e <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800bc74:	4952      	ldr	r1, [pc, #328]	@ (800bdc0 <rx_tcp+0x25c>)
 800bc76:	6978      	ldr	r0, [r7, #20]
 800bc78:	f7f6 fe70 	bl	800295c <mg_error>
 800bc7c:	e09c      	b.n	800bdb8 <rx_tcp+0x254>
  } else if (c != NULL) {
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00f      	beq.n	800bca4 <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	2200      	movs	r2, #0
 800bc88:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	7f9b      	ldrb	r3, [r3, #30]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d103      	bne.n	800bc9a <rx_tcp+0x136>
      settmout(c,
 800bc92:	2100      	movs	r1, #0
 800bc94:	6978      	ldr	r0, [r7, #20]
 800bc96:	f7fe f865 	bl	8009d64 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	6978      	ldr	r0, [r7, #20]
 800bc9e:	f7ff fd4b 	bl	800b738 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 800bca2:	e089      	b.n	800bdb8 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bca8:	2201      	movs	r2, #1
 800bcaa:	6839      	ldr	r1, [r7, #0]
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7fe fc17 	bl	800a4e0 <getpeer>
 800bcb2:	6178      	str	r0, [r7, #20]
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10c      	bne.n	800bcd4 <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	9201      	str	r2, [sp, #4]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	9200      	str	r2, [sp, #0]
 800bcc8:	2214      	movs	r2, #20
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7ff fafb 	bl	800b2c8 <tx_tcp_pkt>
}
 800bcd2:	e071      	b.n	800bdb8 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd8:	7b5b      	ldrb	r3, [r3, #13]
 800bcda:	f003 0304 	and.w	r3, r3, #4
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00c      	beq.n	800bcfc <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bce8:	f003 0304 	and.w	r3, r3, #4
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d062      	beq.n	800bdb8 <rx_tcp+0x254>
 800bcf2:	4933      	ldr	r1, [pc, #204]	@ (800bdc0 <rx_tcp+0x25c>)
 800bcf4:	6978      	ldr	r0, [r7, #20]
 800bcf6:	f7f6 fe31 	bl	800295c <mg_error>
}
 800bcfa:	e05d      	b.n	800bdb8 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd00:	7b5b      	ldrb	r3, [r3, #13]
 800bd02:	f003 0302 	and.w	r3, r3, #2
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d016      	beq.n	800bd38 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd0e:	881b      	ldrh	r3, [r3, #0]
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	4618      	mov	r0, r3
 800bd14:	f00b fe8f 	bl	8017a36 <mg_ntohs>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f00b fe72 	bl	8017a04 <mg_ntohl>
 800bd20:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800bd22:	2300      	movs	r3, #0
 800bd24:	9301      	str	r3, [sp, #4]
 800bd26:	2300      	movs	r3, #0
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2212      	movs	r2, #18
 800bd2e:	6839      	ldr	r1, [r7, #0]
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7ff fac9 	bl	800b2c8 <tx_tcp_pkt>
}
 800bd36:	e03f      	b.n	800bdb8 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd3c:	7b5b      	ldrb	r3, [r3, #13]
 800bd3e:	f003 0301 	and.w	r3, r3, #1
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00c      	beq.n	800bd60 <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	9201      	str	r2, [sp, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	9200      	str	r2, [sp, #0]
 800bd54:	2211      	movs	r2, #17
 800bd56:	6839      	ldr	r1, [r7, #0]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff fab5 	bl	800b2c8 <tx_tcp_pkt>
}
 800bd5e:	e02b      	b.n	800bdb8 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f00b fe4c 	bl	8017a04 <mg_ntohl>
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd72:	881b      	ldrh	r3, [r3, #0]
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	4618      	mov	r0, r3
 800bd78:	f00b fe5d 	bl	8017a36 <mg_ntohs>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	3301      	adds	r3, #1
 800bd80:	429c      	cmp	r4, r3
 800bd82:	d104      	bne.n	800bd8e <rx_tcp+0x22a>
    accept_conn(c, pkt);
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6978      	ldr	r0, [r7, #20]
 800bd88:	f7ff fae4 	bl	800b354 <accept_conn>
}
 800bd8c:	e014      	b.n	800bdb8 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bd94:	f003 0304 	and.w	r3, r3, #4
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10c      	bne.n	800bdb8 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	2200      	movs	r2, #0
 800bda6:	9201      	str	r2, [sp, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	9200      	str	r2, [sp, #0]
 800bdac:	2214      	movs	r2, #20
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f7ff fa89 	bl	800b2c8 <tx_tcp_pkt>
}
 800bdb6:	e7ff      	b.n	800bdb8 <rx_tcp+0x254>
 800bdb8:	bf00      	nop
 800bdba:	371c      	adds	r7, #28
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd90      	pop	{r4, r7, pc}
 800bdc0:	08026e94 	.word	0x08026e94

0800bdc4 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800bdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdc6:	b08b      	sub	sp, #44	@ 0x2c
 800bdc8:	af04      	add	r7, sp, #16
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	69db      	ldr	r3, [r3, #28]
 800bdd2:	88db      	ldrh	r3, [r3, #6]
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f00b fe2d 	bl	8017a36 <mg_ntohs>
 800bddc:	4603      	mov	r3, r0
 800bdde:	82fb      	strh	r3, [r7, #22]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800bde0:	8afb      	ldrh	r3, [r7, #22]
 800bde2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d104      	bne.n	800bdf4 <rx_ip+0x30>
 800bdea:	8afb      	ldrh	r3, [r7, #22]
 800bdec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d026      	beq.n	800be42 <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	69db      	ldr	r3, [r3, #28]
 800bdf8:	7a5b      	ldrb	r3, [r3, #9]
 800bdfa:	2b11      	cmp	r3, #17
 800bdfc:	d105      	bne.n	800be0a <rx_ip+0x46>
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	69db      	ldr	r3, [r3, #28]
 800be02:	f103 0214 	add.w	r2, r3, #20
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	7a5b      	ldrb	r3, [r3, #9]
 800be10:	2b06      	cmp	r3, #6
 800be12:	d105      	bne.n	800be20 <rx_ip+0x5c>
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	69db      	ldr	r3, [r3, #28]
 800be18:	f103 0214 	add.w	r2, r3, #20
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be24:	2200      	movs	r2, #0
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe fb59 	bl	800a4e0 <getpeer>
 800be2e:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	f000 811b 	beq.w	800c06e <rx_ip+0x2aa>
 800be38:	4992      	ldr	r1, [pc, #584]	@ (800c084 <rx_ip+0x2c0>)
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7f6 fd8e 	bl	800295c <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800be40:	e115      	b.n	800c06e <rx_ip+0x2aa>
  } else if (pkt->ip->proto == 1) {
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	69db      	ldr	r3, [r3, #28]
 800be46:	7a5b      	ldrb	r3, [r3, #9]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d116      	bne.n	800be7a <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	69db      	ldr	r3, [r3, #28]
 800be50:	f103 0214 	add.w	r2, r3, #20
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	2b03      	cmp	r3, #3
 800be5e:	f240 8108 	bls.w	800c072 <rx_ip+0x2ae>
    mkpay(pkt, pkt->icmp + 1);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be66:	3304      	adds	r3, #4
 800be68:	4619      	mov	r1, r3
 800be6a:	6838      	ldr	r0, [r7, #0]
 800be6c:	f7fd ff02 	bl	8009c74 <mkpay>
    rx_icmp(ifp, pkt);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7fe fcb8 	bl	800a7e8 <rx_icmp>
 800be78:	e100      	b.n	800c07c <rx_ip+0x2b8>
  } else if (pkt->ip->proto == 17) {
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	69db      	ldr	r3, [r3, #28]
 800be7e:	7a5b      	ldrb	r3, [r3, #9]
 800be80:	2b11      	cmp	r3, #17
 800be82:	f040 808b 	bne.w	800bf9c <rx_ip+0x1d8>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	69db      	ldr	r3, [r3, #28]
 800be8a:	f103 0214 	add.w	r2, r3, #20
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	2b07      	cmp	r3, #7
 800be98:	f240 80ed 	bls.w	800c076 <rx_ip+0x2b2>
    mkpay(pkt, pkt->udp + 1);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea0:	3308      	adds	r3, #8
 800bea2:	4619      	mov	r1, r3
 800bea4:	6838      	ldr	r0, [r7, #0]
 800bea6:	f7fd fee5 	bl	8009c74 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800beaa:	4b77      	ldr	r3, [pc, #476]	@ (800c088 <rx_ip+0x2c4>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b03      	cmp	r3, #3
 800beb0:	dd2d      	ble.n	800bf0e <rx_ip+0x14a>
 800beb2:	4b76      	ldr	r3, [pc, #472]	@ (800c08c <rx_ip+0x2c8>)
 800beb4:	f241 721b 	movw	r2, #5915	@ 0x171b
 800beb8:	4975      	ldr	r1, [pc, #468]	@ (800c090 <rx_ip+0x2cc>)
 800beba:	2004      	movs	r0, #4
 800bebc:	f7fc f838 	bl	8007f30 <mg_log_prefix>
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	69db      	ldr	r3, [r3, #28]
 800bec4:	f103 050c 	add.w	r5, r3, #12
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	b29b      	uxth	r3, r3
 800bed0:	4618      	mov	r0, r3
 800bed2:	f00b fdb0 	bl	8017a36 <mg_ntohs>
 800bed6:	4603      	mov	r3, r0
 800bed8:	461e      	mov	r6, r3
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	69db      	ldr	r3, [r3, #28]
 800bede:	f103 0410 	add.w	r4, r3, #16
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee6:	885b      	ldrh	r3, [r3, #2]
 800bee8:	b29b      	uxth	r3, r3
 800beea:	4618      	mov	r0, r3
 800beec:	f00b fda3 	bl	8017a36 <mg_ntohs>
 800bef0:	4603      	mov	r3, r0
 800bef2:	461a      	mov	r2, r3
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	9303      	str	r3, [sp, #12]
 800befa:	9202      	str	r2, [sp, #8]
 800befc:	9401      	str	r4, [sp, #4]
 800befe:	4b65      	ldr	r3, [pc, #404]	@ (800c094 <rx_ip+0x2d0>)
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	4633      	mov	r3, r6
 800bf04:	462a      	mov	r2, r5
 800bf06:	4963      	ldr	r1, [pc, #396]	@ (800c094 <rx_ip+0x2d0>)
 800bf08:	4863      	ldr	r0, [pc, #396]	@ (800c098 <rx_ip+0x2d4>)
 800bf0a:	f7fc f861 	bl	8007fd0 <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	7f1b      	ldrb	r3, [r3, #28]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d01c      	beq.n	800bf50 <rx_ip+0x18c>
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf1a:	885b      	ldrh	r3, [r3, #2]
 800bf1c:	b29c      	uxth	r4, r3
 800bf1e:	2044      	movs	r0, #68	@ 0x44
 800bf20:	f00b fd89 	bl	8017a36 <mg_ntohs>
 800bf24:	4603      	mov	r3, r0
 800bf26:	429c      	cmp	r4, r3
 800bf28:	d112      	bne.n	800bf50 <rx_ip+0x18c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf2e:	f103 0208 	add.w	r2, r3, #8
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf3a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6838      	ldr	r0, [r7, #0]
 800bf42:	f7fd fe97 	bl	8009c74 <mkpay>
      rx_dhcp_client(ifp, pkt);
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7fe fca9 	bl	800a8a0 <rx_dhcp_client>
 800bf4e:	e095      	b.n	800c07c <rx_ip+0x2b8>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	7f5b      	ldrb	r3, [r3, #29]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d01c      	beq.n	800bf92 <rx_ip+0x1ce>
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf5c:	885b      	ldrh	r3, [r3, #2]
 800bf5e:	b29c      	uxth	r4, r3
 800bf60:	2043      	movs	r0, #67	@ 0x43
 800bf62:	f00b fd68 	bl	8017a36 <mg_ntohs>
 800bf66:	4603      	mov	r3, r0
 800bf68:	429c      	cmp	r4, r3
 800bf6a:	d112      	bne.n	800bf92 <rx_ip+0x1ce>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf70:	f103 0208 	add.w	r2, r3, #8
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf7c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800bf80:	4619      	mov	r1, r3
 800bf82:	6838      	ldr	r0, [r7, #0]
 800bf84:	f7fd fe76 	bl	8009c74 <mkpay>
      rx_dhcp_server(ifp, pkt);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7fe fe70 	bl	800ac70 <rx_dhcp_server>
 800bf90:	e074      	b.n	800c07c <rx_ip+0x2b8>
    } else {
      rx_udp(ifp, pkt);
 800bf92:	6839      	ldr	r1, [r7, #0]
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7ff f859 	bl	800b04c <rx_udp>
 800bf9a:	e06f      	b.n	800c07c <rx_ip+0x2b8>
    }
  } else if (pkt->ip->proto == 6) {
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	69db      	ldr	r3, [r3, #28]
 800bfa0:	7a5b      	ldrb	r3, [r3, #9]
 800bfa2:	2b06      	cmp	r3, #6
 800bfa4:	d16a      	bne.n	800c07c <rx_ip+0x2b8>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	69db      	ldr	r3, [r3, #28]
 800bfaa:	f103 0214 	add.w	r2, r3, #20
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	2b13      	cmp	r3, #19
 800bfb8:	d95f      	bls.n	800c07a <rx_ip+0x2b6>
    mkpay(pkt, pkt->tcp + 1);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfbe:	3314      	adds	r3, #20
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6838      	ldr	r0, [r7, #0]
 800bfc4:	f7fd fe56 	bl	8009c74 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	69db      	ldr	r3, [r3, #28]
 800bfcc:	885b      	ldrh	r3, [r3, #2]
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f00b fd30 	bl	8017a36 <mg_ntohs>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	82bb      	strh	r3, [r7, #20]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfde:	7b1b      	ldrb	r3, [r3, #12]
 800bfe0:	091b      	lsrs	r3, r3, #4
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	3305      	adds	r3, #5
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	827b      	strh	r3, [r7, #18]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800bfec:	8aba      	ldrh	r2, [r7, #20]
 800bfee:	8a7b      	ldrh	r3, [r7, #18]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d305      	bcc.n	800c000 <rx_ip+0x23c>
 800bff4:	8aba      	ldrh	r2, [r7, #20]
 800bff6:	8a7b      	ldrh	r3, [r7, #18]
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	461a      	mov	r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800c000:	4b21      	ldr	r3, [pc, #132]	@ (800c088 <rx_ip+0x2c4>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2b03      	cmp	r3, #3
 800c006:	dd2d      	ble.n	800c064 <rx_ip+0x2a0>
 800c008:	4b20      	ldr	r3, [pc, #128]	@ (800c08c <rx_ip+0x2c8>)
 800c00a:	f241 7230 	movw	r2, #5936	@ 0x1730
 800c00e:	4920      	ldr	r1, [pc, #128]	@ (800c090 <rx_ip+0x2cc>)
 800c010:	2004      	movs	r0, #4
 800c012:	f7fb ff8d 	bl	8007f30 <mg_log_prefix>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	69db      	ldr	r3, [r3, #28]
 800c01a:	f103 050c 	add.w	r5, r3, #12
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c022:	881b      	ldrh	r3, [r3, #0]
 800c024:	b29b      	uxth	r3, r3
 800c026:	4618      	mov	r0, r3
 800c028:	f00b fd05 	bl	8017a36 <mg_ntohs>
 800c02c:	4603      	mov	r3, r0
 800c02e:	461e      	mov	r6, r3
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	69db      	ldr	r3, [r3, #28]
 800c034:	f103 0410 	add.w	r4, r3, #16
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c03c:	885b      	ldrh	r3, [r3, #2]
 800c03e:	b29b      	uxth	r3, r3
 800c040:	4618      	mov	r0, r3
 800c042:	f00b fcf8 	bl	8017a36 <mg_ntohs>
 800c046:	4603      	mov	r3, r0
 800c048:	461a      	mov	r2, r3
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	9303      	str	r3, [sp, #12]
 800c050:	9202      	str	r2, [sp, #8]
 800c052:	9401      	str	r4, [sp, #4]
 800c054:	4b0f      	ldr	r3, [pc, #60]	@ (800c094 <rx_ip+0x2d0>)
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	4633      	mov	r3, r6
 800c05a:	462a      	mov	r2, r5
 800c05c:	490d      	ldr	r1, [pc, #52]	@ (800c094 <rx_ip+0x2d0>)
 800c05e:	480f      	ldr	r0, [pc, #60]	@ (800c09c <rx_ip+0x2d8>)
 800c060:	f7fb ffb6 	bl	8007fd0 <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff fd7c 	bl	800bb64 <rx_tcp>
 800c06c:	e006      	b.n	800c07c <rx_ip+0x2b8>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800c06e:	bf00      	nop
 800c070:	e004      	b.n	800c07c <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800c072:	bf00      	nop
 800c074:	e002      	b.n	800c07c <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800c076:	bf00      	nop
 800c078:	e000      	b.n	800c07c <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800c07a:	bf00      	nop
  }
}
 800c07c:	371c      	adds	r7, #28
 800c07e:	46bd      	mov	sp, r7
 800c080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c082:	bf00      	nop
 800c084:	08026ea0 	.word	0x08026ea0
 800c088:	24000240 	.word	0x24000240
 800c08c:	08029030 	.word	0x08029030
 800c090:	0802597c 	.word	0x0802597c
 800c094:	0800d855 	.word	0x0800d855
 800c098:	08026ebc 	.word	0x08026ebc
 800c09c:	08026ed8 	.word	0x08026ed8

0800c0a0 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	799b      	ldrb	r3, [r3, #6]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d004      	beq.n	800c0be <rx_ip6+0x1e>
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	6a1b      	ldr	r3, [r3, #32]
 800c0b8:	799b      	ldrb	r3, [r3, #6]
 800c0ba:	2b3a      	cmp	r3, #58	@ 0x3a
 800c0bc:	d115      	bne.n	800c0ea <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	6a1b      	ldr	r3, [r3, #32]
 800c0c2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d922      	bls.n	800c118 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	4619      	mov	r1, r3
 800c0da:	6838      	ldr	r0, [r7, #0]
 800c0dc:	f7fd fdca 	bl	8009c74 <mkpay>
    rx_icmp(ifp, pkt);
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7fe fb80 	bl	800a7e8 <rx_icmp>
 800c0e8:	e019      	b.n	800c11e <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	6a1b      	ldr	r3, [r3, #32]
 800c0ee:	799b      	ldrb	r3, [r3, #6]
 800c0f0:	2b11      	cmp	r3, #17
 800c0f2:	d114      	bne.n	800c11e <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	6a1b      	ldr	r3, [r3, #32]
 800c0f8:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	2b07      	cmp	r3, #7
 800c106:	d909      	bls.n	800c11c <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c10c:	3308      	adds	r3, #8
 800c10e:	4619      	mov	r1, r3
 800c110:	6838      	ldr	r0, [r7, #0]
 800c112:	f7fd fdaf 	bl	8009c74 <mkpay>
 800c116:	e002      	b.n	800c11e <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800c118:	bf00      	nop
 800c11a:	e000      	b.n	800c11e <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800c11c:	bf00      	nop
  }
}
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800c124:	b590      	push	{r4, r7, lr}
 800c126:	b093      	sub	sp, #76	@ 0x4c
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800c130:	f107 0314 	add.w	r3, r7, #20
 800c134:	2234      	movs	r2, #52	@ 0x34
 800c136:	2100      	movs	r1, #0
 800c138:	4618      	mov	r0, r3
 800c13a:	f015 fe53 	bl	8021de4 <memset>
  pkt.raw.buf = (char *) buf;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	2b0d      	cmp	r3, #13
 800c14e:	f240 80df 	bls.w	800c310 <mg_tcpip_rx+0x1ec>
  if (ifp->enable_mac_check &&
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d013      	beq.n	800c184 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800c15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15e:	4618      	mov	r0, r3
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2206      	movs	r2, #6
 800c164:	4619      	mov	r1, r3
 800c166:	f015 fe13 	bl	8021d90 <memcmp>
 800c16a:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d009      	beq.n	800c184 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800c170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c172:	2206      	movs	r2, #6
 800c174:	4970      	ldr	r1, [pc, #448]	@ (800c338 <mg_tcpip_rx+0x214>)
 800c176:	4618      	mov	r0, r3
 800c178:	f015 fe0a 	bl	8021d90 <memcmp>
 800c17c:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f040 80c8 	bne.w	800c314 <mg_tcpip_rx+0x1f0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d01a      	beq.n	800c1c4 <mg_tcpip_rx+0xa0>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2b04      	cmp	r3, #4
 800c192:	d917      	bls.n	800c1c4 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	3b04      	subs	r3, #4
 800c198:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	68b9      	ldr	r1, [r7, #8]
 800c19e:	2000      	movs	r0, #0
 800c1a0:	f00b fc60 	bl	8017a64 <mg_crc32>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f107 0310 	add.w	r3, r7, #16
 800c1b4:	2204      	movs	r2, #4
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	f015 fdea 	bl	8021d90 <memcmp>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f040 80aa 	bne.w	800c318 <mg_tcpip_rx+0x1f4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c6:	899b      	ldrh	r3, [r3, #12]
 800c1c8:	b29c      	uxth	r4, r3
 800c1ca:	f640 0006 	movw	r0, #2054	@ 0x806
 800c1ce:	f00b fc32 	bl	8017a36 <mg_ntohs>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	429c      	cmp	r4, r3
 800c1d6:	d114      	bne.n	800c202 <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1da:	330e      	adds	r3, #14
 800c1dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	2b29      	cmp	r3, #41	@ 0x29
 800c1e2:	f240 809b 	bls.w	800c31c <mg_tcpip_rx+0x1f8>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 800c1e6:	f107 0314 	add.w	r3, r7, #20
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	2103      	movs	r1, #3
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f7fd fd2c 	bl	8009c4c <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 800c1f4:	f107 0314 	add.w	r3, r7, #20
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f7fe f9e2 	bl	800a5c4 <rx_arp>
 800c200:	e097      	b.n	800c332 <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800c202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c204:	899b      	ldrh	r3, [r3, #12]
 800c206:	b29c      	uxth	r4, r3
 800c208:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 800c20c:	f00b fc13 	bl	8017a36 <mg_ntohs>
 800c210:	4603      	mov	r3, r0
 800c212:	429c      	cmp	r4, r3
 800c214:	d11b      	bne.n	800c24e <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c218:	330e      	adds	r3, #14
 800c21a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	2b35      	cmp	r3, #53	@ 0x35
 800c220:	d97e      	bls.n	800c320 <mg_tcpip_rx+0x1fc>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800c222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	091b      	lsrs	r3, r3, #4
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b06      	cmp	r3, #6
 800c22c:	d17a      	bne.n	800c324 <mg_tcpip_rx+0x200>
    mkpay(&pkt, pkt.ip6 + 1);
 800c22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c230:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800c234:	f107 0314 	add.w	r3, r7, #20
 800c238:	4611      	mov	r1, r2
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fd fd1a 	bl	8009c74 <mkpay>
    rx_ip6(ifp, &pkt);
 800c240:	f107 0314 	add.w	r3, r7, #20
 800c244:	4619      	mov	r1, r3
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7ff ff2a 	bl	800c0a0 <rx_ip6>
 800c24c:	e071      	b.n	800c332 <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800c24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c250:	899b      	ldrh	r3, [r3, #12]
 800c252:	b29c      	uxth	r4, r3
 800c254:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c258:	f00b fbed 	bl	8017a36 <mg_ntohs>
 800c25c:	4603      	mov	r3, r0
 800c25e:	429c      	cmp	r4, r3
 800c260:	d133      	bne.n	800c2ca <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800c262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c264:	330e      	adds	r3, #14
 800c266:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	2b21      	cmp	r3, #33	@ 0x21
 800c26c:	d95c      	bls.n	800c328 <mg_tcpip_rx+0x204>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800c26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c270:	885b      	ldrh	r3, [r3, #2]
 800c272:	b29b      	uxth	r3, r3
 800c274:	4618      	mov	r0, r3
 800c276:	f00b fbde 	bl	8017a36 <mg_ntohs>
 800c27a:	4603      	mov	r3, r0
 800c27c:	f103 020e 	add.w	r2, r3, #14
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	429a      	cmp	r2, r3
 800c284:	d208      	bcs.n	800c298 <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800c286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c288:	885b      	ldrh	r3, [r3, #2]
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	4618      	mov	r0, r3
 800c28e:	f00b fbd2 	bl	8017a36 <mg_ntohs>
 800c292:	4603      	mov	r3, r0
 800c294:	330e      	adds	r3, #14
 800c296:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	2b21      	cmp	r3, #33	@ 0x21
 800c29c:	d946      	bls.n	800c32c <mg_tcpip_rx+0x208>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800c29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	091b      	lsrs	r3, r3, #4
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b04      	cmp	r3, #4
 800c2a8:	d142      	bne.n	800c330 <mg_tcpip_rx+0x20c>
    mkpay(&pkt, pkt.ip + 1);
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ac:	f103 0214 	add.w	r2, r3, #20
 800c2b0:	f107 0314 	add.w	r3, r7, #20
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fd fcdc 	bl	8009c74 <mkpay>
    rx_ip(ifp, &pkt);
 800c2bc:	f107 0314 	add.w	r3, r7, #20
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f7ff fd7e 	bl	800bdc4 <rx_ip>
 800c2c8:	e033      	b.n	800c332 <mg_tcpip_rx+0x20e>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 800c2ca:	4b1c      	ldr	r3, [pc, #112]	@ (800c33c <mg_tcpip_rx+0x218>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	dd11      	ble.n	800c2f6 <mg_tcpip_rx+0x1d2>
 800c2d2:	4b1b      	ldr	r3, [pc, #108]	@ (800c340 <mg_tcpip_rx+0x21c>)
 800c2d4:	f241 726f 	movw	r2, #5999	@ 0x176f
 800c2d8:	491a      	ldr	r1, [pc, #104]	@ (800c344 <mg_tcpip_rx+0x220>)
 800c2da:	2003      	movs	r0, #3
 800c2dc:	f7fb fe28 	bl	8007f30 <mg_log_prefix>
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e2:	899b      	ldrh	r3, [r3, #12]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f00b fba5 	bl	8017a36 <mg_ntohs>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4815      	ldr	r0, [pc, #84]	@ (800c348 <mg_tcpip_rx+0x224>)
 800c2f2:	f7fb fe6d 	bl	8007fd0 <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 800c2f6:	4b11      	ldr	r3, [pc, #68]	@ (800c33c <mg_tcpip_rx+0x218>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b03      	cmp	r3, #3
 800c2fc:	dd19      	ble.n	800c332 <mg_tcpip_rx+0x20e>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2b20      	cmp	r3, #32
 800c302:	bf28      	it	cs
 800c304:	2320      	movcs	r3, #32
 800c306:	4619      	mov	r1, r3
 800c308:	68b8      	ldr	r0, [r7, #8]
 800c30a:	f7fb fe97 	bl	800803c <mg_hexdump>
 800c30e:	e010      	b.n	800c332 <mg_tcpip_rx+0x20e>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800c310:	bf00      	nop
 800c312:	e00e      	b.n	800c332 <mg_tcpip_rx+0x20e>
    return;
 800c314:	bf00      	nop
 800c316:	e00c      	b.n	800c332 <mg_tcpip_rx+0x20e>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800c318:	bf00      	nop
 800c31a:	e00a      	b.n	800c332 <mg_tcpip_rx+0x20e>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800c31c:	bf00      	nop
 800c31e:	e008      	b.n	800c332 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800c320:	bf00      	nop
 800c322:	e006      	b.n	800c332 <mg_tcpip_rx+0x20e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800c324:	bf00      	nop
 800c326:	e004      	b.n	800c332 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800c328:	bf00      	nop
 800c32a:	e002      	b.n	800c332 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800c32c:	bf00      	nop
 800c32e:	e000      	b.n	800c332 <mg_tcpip_rx+0x20e>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800c330:	bf00      	nop
  }
}
 800c332:	374c      	adds	r7, #76	@ 0x4c
 800c334:	46bd      	mov	sp, r7
 800c336:	bd90      	pop	{r4, r7, pc}
 800c338:	08028cac 	.word	0x08028cac
 800c33c:	24000240 	.word	0x24000240
 800c340:	08029038 	.word	0x08029038
 800c344:	0802597c 	.word	0x0802597c
 800c348:	08026ef4 	.word	0x08026ef4

0800c34c <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 800c34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c34e:	b095      	sub	sp, #84	@ 0x54
 800c350:	af06      	add	r7, sp, #24
 800c352:	6178      	str	r0, [r7, #20]
 800c354:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800c35e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c362:	e9cd 2300 	strd	r2, r3, [sp]
 800c366:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c36a:	f04f 0300 	mov.w	r3, #0
 800c36e:	4608      	mov	r0, r1
 800c370:	f003 f960 	bl	800f634 <mg_timer_expired>
 800c374:	4603      	mov	r3, r0
 800c376:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 800c37a:	6979      	ldr	r1, [r7, #20]
 800c37c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c380:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
  }
#endif
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 800c384:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00b      	beq.n	800c3a4 <mg_tcpip_poll+0x58>
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c392:	2b03      	cmp	r3, #3
 800c394:	d106      	bne.n	800c3a4 <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY; // keep best-effort MAC
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2204      	movs	r2, #4
 800c39a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    onstatechange(ifp);
 800c39e:	6978      	ldr	r0, [r7, #20]
 800c3a0:	f7fd fdc0 	bl	8009f24 <onstatechange>
  }
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800c3a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d073      	beq.n	800c494 <mg_tcpip_poll+0x148>
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d06e      	beq.n	800c494 <mg_tcpip_poll+0x148>
    bool up = ifp->driver->up(ifp);
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	6978      	ldr	r0, [r7, #20]
 800c3be:	4798      	blx	r3
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	bf14      	ite	ne
 800c3d0:	2301      	movne	r3, #1
 800c3d2:	2300      	moveq	r3, #0
 800c3d4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800c3d8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c3dc:	f083 0301 	eor.w	r3, r3, #1
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d006      	beq.n	800c3f4 <mg_tcpip_poll+0xa8>
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	7f1b      	ldrb	r3, [r3, #28]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d002      	beq.n	800c3f4 <mg_tcpip_poll+0xa8>
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	609a      	str	r2, [r3, #8]
    if (up != current) {  // link state has changed
 800c3f4:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800c3f8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d01a      	beq.n	800c436 <mg_tcpip_poll+0xea>
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800c400:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c404:	f083 0301 	eor.w	r3, r3, #1
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d001      	beq.n	800c412 <mg_tcpip_poll+0xc6>
 800c40e:	2300      	movs	r3, #0
 800c410:	e00a      	b.n	800c428 <mg_tcpip_poll+0xdc>
                   : ifp->enable_dhcp_client || ifp->ip == 0
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800c416:	2b00      	cmp	r3, #0
 800c418:	d103      	bne.n	800c422 <mg_tcpip_poll+0xd6>
                   : ifp->enable_dhcp_client || ifp->ip == 0
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <mg_tcpip_poll+0xda>
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800c422:	2301      	movs	r3, #1
 800c424:	e000      	b.n	800c428 <mg_tcpip_poll+0xdc>
 800c426:	2303      	movs	r3, #3
 800c428:	697a      	ldr	r2, [r7, #20]
 800c42a:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
                       ? MG_TCPIP_STATE_UP
                       : MG_TCPIP_STATE_IP;
      onstatechange(ifp);
 800c42e:	6978      	ldr	r0, [r7, #20]
 800c430:	f7fd fd78 	bl	8009f24 <onstatechange>
 800c434:	e016      	b.n	800c464 <mg_tcpip_poll+0x118>
    } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	7f1b      	ldrb	r3, [r3, #28]
 800c43a:	f083 0301 	eor.w	r3, r3, #1
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00f      	beq.n	800c464 <mg_tcpip_poll+0x118>
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d10a      	bne.n	800c464 <mg_tcpip_poll+0x118>
               ifp->ip) {
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	689b      	ldr	r3, [r3, #8]
    } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800c452:	2b00      	cmp	r3, #0
 800c454:	d006      	beq.n	800c464 <mg_tcpip_poll+0x118>
      ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2203      	movs	r2, #3
 800c45a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      onstatechange(ifp);
 800c45e:	6978      	ldr	r0, [r7, #20]
 800c460:	f7fd fd60 	bl	8009f24 <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10d      	bne.n	800c48a <mg_tcpip_poll+0x13e>
 800c46e:	4ba2      	ldr	r3, [pc, #648]	@ (800c6f8 <mg_tcpip_poll+0x3ac>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	dd09      	ble.n	800c48a <mg_tcpip_poll+0x13e>
 800c476:	4ba1      	ldr	r3, [pc, #644]	@ (800c6fc <mg_tcpip_poll+0x3b0>)
 800c478:	f241 7296 	movw	r2, #6038	@ 0x1796
 800c47c:	49a0      	ldr	r1, [pc, #640]	@ (800c700 <mg_tcpip_poll+0x3b4>)
 800c47e:	2001      	movs	r0, #1
 800c480:	f7fb fd56 	bl	8007f30 <mg_log_prefix>
 800c484:	489f      	ldr	r0, [pc, #636]	@ (800c704 <mg_tcpip_poll+0x3b8>)
 800c486:	f7fb fda3 	bl	8007fd0 <mg_log>
    mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 800c48a:	2200      	movs	r2, #0
 800c48c:	2104      	movs	r1, #4
 800c48e:	6978      	ldr	r0, [r7, #20]
 800c490:	f7fd fbdc 	bl	8009c4c <mg_tcpip_call>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 819d 	beq.w	800c7da <mg_tcpip_poll+0x48e>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	7f1b      	ldrb	r3, [r3, #28]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d055      	beq.n	800c554 <mg_tcpip_poll+0x208>
 800c4a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d051      	beq.n	800c554 <mg_tcpip_poll+0x208>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d103      	bne.n	800c4c2 <mg_tcpip_poll+0x176>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800c4ba:	6978      	ldr	r0, [r7, #20]
 800c4bc:	f7fd ffd4 	bl	800a468 <tx_dhcp_discover>
 800c4c0:	e048      	b.n	800c554 <mg_tcpip_poll+0x208>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c4c8:	2b04      	cmp	r3, #4
 800c4ca:	d143      	bne.n	800c554 <mg_tcpip_poll+0x208>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	d03e      	beq.n	800c554 <mg_tcpip_poll+0x208>
      if (ifp->now >= ifp->lease_expire) {
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800c4e2:	4290      	cmp	r0, r2
 800c4e4:	eb71 0303 	sbcs.w	r3, r1, r3
 800c4e8:	d30a      	bcc.n	800c500 <mg_tcpip_poll+0x1b4>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 800c4f8:	6978      	ldr	r0, [r7, #20]
 800c4fa:	f7fd fd13 	bl	8009f24 <onstatechange>
 800c4fe:	e029      	b.n	800c554 <mg_tcpip_poll+0x208>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800c506:	4980      	ldr	r1, [pc, #512]	@ (800c708 <mg_tcpip_poll+0x3bc>)
 800c508:	1854      	adds	r4, r2, r1
 800c50a:	f143 0500 	adc.w	r5, r3, #0
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800c514:	42a2      	cmp	r2, r4
 800c516:	41ab      	sbcs	r3, r5
 800c518:	d21c      	bcs.n	800c554 <mg_tcpip_poll+0x208>
                 ((ifp->now / 1000) % 60) == 0) {
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800c520:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c524:	f04f 0300 	mov.w	r3, #0
 800c528:	f7f4 f94e 	bl	80007c8 <__aeabi_uldivmod>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4610      	mov	r0, r2
 800c532:	4619      	mov	r1, r3
 800c534:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 800c538:	f04f 0300 	mov.w	r3, #0
 800c53c:	f7f4 f944 	bl	80007c8 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800c540:	4313      	orrs	r3, r2
 800c542:	d107      	bne.n	800c554 <mg_tcpip_poll+0x208>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	689a      	ldr	r2, [r3, #8]
 800c548:	f04f 33ff 	mov.w	r3, #4294967295
 800c54c:	496f      	ldr	r1, [pc, #444]	@ (800c70c <mg_tcpip_poll+0x3c0>)
 800c54e:	6978      	ldr	r0, [r7, #20]
 800c550:	f7fd ff58 	bl	800a404 <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d019      	beq.n	800c592 <mg_tcpip_poll+0x246>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	697a      	ldr	r2, [r7, #20]
 800c566:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800c568:	697a      	ldr	r2, [r7, #20]
 800c56a:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800c56c:	697a      	ldr	r2, [r7, #20]
 800c56e:	4798      	blx	r3
 800c570:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 800c572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c574:	2b00      	cmp	r3, #0
 800c576:	d024      	beq.n	800c5c2 <mg_tcpip_poll+0x276>
      ifp->nrecv++;
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c57c:	1c5a      	adds	r2, r3, #1
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	671a      	str	r2, [r3, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c588:	4619      	mov	r1, r3
 800c58a:	6978      	ldr	r0, [r7, #20]
 800c58c:	f7ff fdca 	bl	800c124 <mg_tcpip_rx>
 800c590:	e017      	b.n	800c5c2 <mg_tcpip_poll+0x276>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	3334      	adds	r3, #52	@ 0x34
 800c596:	f107 0220 	add.w	r2, r7, #32
 800c59a:	4611      	mov	r1, r2
 800c59c:	4618      	mov	r0, r3
 800c59e:	f001 fb87 	bl	800dcb0 <mg_queue_next>
 800c5a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 800c5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00b      	beq.n	800c5c2 <mg_tcpip_poll+0x276>
      mg_tcpip_rx(ifp, buf, len);
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	6978      	ldr	r0, [r7, #20]
 800c5b2:	f7ff fdb7 	bl	800c124 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	3334      	adds	r3, #52	@ 0x34
 800c5ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f001 fbf5 	bl	800ddac <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ca:	e101      	b.n	800c7d0 <mg_tcpip_poll+0x484>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 800c5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ce:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c5d2:	f003 0301 	and.w	r3, r3, #1
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d008      	beq.n	800c5ee <mg_tcpip_poll+0x2a2>
 800c5dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5de:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c5e2:	f003 0310 	and.w	r3, r3, #16
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f000 80eb 	beq.w	800c7c4 <mg_tcpip_poll+0x478>
 800c5ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5f0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c5f4:	f003 0301 	and.w	r3, r3, #1
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f040 80e2 	bne.w	800c7c4 <mg_tcpip_poll+0x478>
 800c600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c602:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c606:	f003 0308 	and.w	r3, r3, #8
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f040 80d9 	bne.w	800c7c4 <mg_tcpip_poll+0x478>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 800c612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c614:	33b0      	adds	r3, #176	@ 0xb0
 800c616:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c61a:	331c      	adds	r3, #28
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 800c620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c622:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800c626:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c62a:	4290      	cmp	r0, r2
 800c62c:	eb71 0303 	sbcs.w	r3, r1, r3
 800c630:	f080 80cb 	bcs.w	800c7ca <mg_tcpip_poll+0x47e>
      if (s->ttype == MIP_TTYPE_ARP) {
 800c634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c636:	7f9b      	ldrb	r3, [r3, #30]
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d104      	bne.n	800c646 <mg_tcpip_poll+0x2fa>
        mg_error(c, "ARP timeout");
 800c63c:	4934      	ldr	r1, [pc, #208]	@ (800c710 <mg_tcpip_poll+0x3c4>)
 800c63e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c640:	f7f6 f98c 	bl	800295c <mg_error>
 800c644:	e0b9      	b.n	800c7ba <mg_tcpip_poll+0x46e>
      } else if (c->is_udp) {
 800c646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c648:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c64c:	f003 0301 	and.w	r3, r3, #1
 800c650:	b2db      	uxtb	r3, r3
 800c652:	2b00      	cmp	r3, #0
 800c654:	f040 80b8 	bne.w	800c7c8 <mg_tcpip_poll+0x47c>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 800c658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65a:	7f9b      	ldrb	r3, [r3, #30]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d142      	bne.n	800c6e6 <mg_tcpip_poll+0x39a>
 800c660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c662:	691a      	ldr	r2, [r3, #16]
 800c664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d03c      	beq.n	800c6e6 <mg_tcpip_poll+0x39a>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 800c66c:	4b22      	ldr	r3, [pc, #136]	@ (800c6f8 <mg_tcpip_poll+0x3ac>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b03      	cmp	r3, #3
 800c672:	dd0f      	ble.n	800c694 <mg_tcpip_poll+0x348>
 800c674:	4b21      	ldr	r3, [pc, #132]	@ (800c6fc <mg_tcpip_poll+0x3b0>)
 800c676:	f241 72ca 	movw	r2, #6090	@ 0x17ca
 800c67a:	4921      	ldr	r1, [pc, #132]	@ (800c700 <mg_tcpip_poll+0x3b4>)
 800c67c:	2004      	movs	r0, #4
 800c67e:	f7fb fc57 	bl	8007f30 <mg_log_prefix>
 800c682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c684:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	4821      	ldr	r0, [pc, #132]	@ (800c714 <mg_tcpip_poll+0x3c8>)
 800c690:	f7fb fc9e 	bl	8007fd0 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c696:	f103 0618 	add.w	r6, r3, #24
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	613b      	str	r3, [r7, #16]
 800c69e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6a0:	8b1c      	ldrh	r4, [r3, #24]
 800c6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6a4:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f00b f9aa 	bl	8017a04 <mg_ntohl>
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f00b f9a4 	bl	8017a04 <mg_ntohl>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2200      	movs	r2, #0
 800c6c0:	9205      	str	r2, [sp, #20]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	9204      	str	r2, [sp, #16]
 800c6c6:	9303      	str	r3, [sp, #12]
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	9102      	str	r1, [sp, #8]
 800c6cc:	9501      	str	r5, [sp, #4]
 800c6ce:	9400      	str	r4, [sp, #0]
 800c6d0:	2310      	movs	r3, #16
 800c6d2:	693a      	ldr	r2, [r7, #16]
 800c6d4:	4631      	mov	r1, r6
 800c6d6:	6978      	ldr	r0, [r7, #20]
 800c6d8:	f7fe fd2a 	bl	800b130 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6de:	685a      	ldr	r2, [r3, #4]
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e2:	611a      	str	r2, [r3, #16]
 800c6e4:	e069      	b.n	800c7ba <mg_tcpip_poll+0x46e>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e8:	7f9b      	ldrb	r3, [r3, #30]
 800c6ea:	2b03      	cmp	r3, #3
 800c6ec:	d116      	bne.n	800c71c <mg_tcpip_poll+0x3d0>
        mg_error(c, "Connection timeout");
 800c6ee:	490a      	ldr	r1, [pc, #40]	@ (800c718 <mg_tcpip_poll+0x3cc>)
 800c6f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c6f2:	f7f6 f933 	bl	800295c <mg_error>
 800c6f6:	e060      	b.n	800c7ba <mg_tcpip_poll+0x46e>
 800c6f8:	24000240 	.word	0x24000240
 800c6fc:	08029044 	.word	0x08029044
 800c700:	0802597c 	.word	0x0802597c
 800c704:	08026f08 	.word	0x08026f08
 800c708:	001b7740 	.word	0x001b7740
 800c70c:	08028cac 	.word	0x08028cac
 800c710:	08026f18 	.word	0x08026f18
 800c714:	08026f24 	.word	0x08026f24
 800c718:	08026f34 	.word	0x08026f34
      } else if (s->ttype == MIP_TTYPE_FIN) {
 800c71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71e:	7f9b      	ldrb	r3, [r3, #30]
 800c720:	2b04      	cmp	r3, #4
 800c722:	d107      	bne.n	800c734 <mg_tcpip_poll+0x3e8>
        c->is_closing = 1;
 800c724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c726:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800c72a:	f043 0320 	orr.w	r3, r3, #32
 800c72e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 800c732:	e04a      	b.n	800c7ca <mg_tcpip_poll+0x47e>
      } else {
        if (s->tmiss++ > 2) {
 800c734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c736:	7fdb      	ldrb	r3, [r3, #31]
 800c738:	1c5a      	adds	r2, r3, #1
 800c73a:	b2d1      	uxtb	r1, r2
 800c73c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c73e:	77d1      	strb	r1, [r2, #31]
 800c740:	2b02      	cmp	r3, #2
 800c742:	d904      	bls.n	800c74e <mg_tcpip_poll+0x402>
          mg_error(c, "keepalive");
 800c744:	4927      	ldr	r1, [pc, #156]	@ (800c7e4 <mg_tcpip_poll+0x498>)
 800c746:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c748:	f7f6 f908 	bl	800295c <mg_error>
 800c74c:	e035      	b.n	800c7ba <mg_tcpip_poll+0x46e>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 800c74e:	4b26      	ldr	r3, [pc, #152]	@ (800c7e8 <mg_tcpip_poll+0x49c>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b03      	cmp	r3, #3
 800c754:	dd0c      	ble.n	800c770 <mg_tcpip_poll+0x424>
 800c756:	4b25      	ldr	r3, [pc, #148]	@ (800c7ec <mg_tcpip_poll+0x4a0>)
 800c758:	f241 72d7 	movw	r2, #6103	@ 0x17d7
 800c75c:	4924      	ldr	r1, [pc, #144]	@ (800c7f0 <mg_tcpip_poll+0x4a4>)
 800c75e:	2004      	movs	r0, #4
 800c760:	f7fb fbe6 	bl	8007f30 <mg_log_prefix>
 800c764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c768:	4619      	mov	r1, r3
 800c76a:	4822      	ldr	r0, [pc, #136]	@ (800c7f4 <mg_tcpip_poll+0x4a8>)
 800c76c:	f7fb fc30 	bl	8007fd0 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c772:	f103 0618 	add.w	r6, r3, #24
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	613b      	str	r3, [r7, #16]
 800c77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c77c:	8b1c      	ldrh	r4, [r3, #24]
 800c77e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c780:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c786:	3b01      	subs	r3, #1
 800c788:	4618      	mov	r0, r3
 800c78a:	f00b f93b 	bl	8017a04 <mg_ntohl>
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	4618      	mov	r0, r3
 800c796:	f00b f935 	bl	8017a04 <mg_ntohl>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2200      	movs	r2, #0
 800c79e:	9205      	str	r2, [sp, #20]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	9204      	str	r2, [sp, #16]
 800c7a4:	9303      	str	r3, [sp, #12]
 800c7a6:	6879      	ldr	r1, [r7, #4]
 800c7a8:	9102      	str	r1, [sp, #8]
 800c7aa:	9501      	str	r5, [sp, #4]
 800c7ac:	9400      	str	r4, [sp, #0]
 800c7ae:	2310      	movs	r3, #16
 800c7b0:	693a      	ldr	r2, [r7, #16]
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	6978      	ldr	r0, [r7, #20]
 800c7b6:	f7fe fcbb 	bl	800b130 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 800c7ba:	2100      	movs	r1, #0
 800c7bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c7be:	f7fd fad1 	bl	8009d64 <settmout>
 800c7c2:	e002      	b.n	800c7ca <mg_tcpip_poll+0x47e>
      continue;
 800c7c4:	bf00      	nop
 800c7c6:	e000      	b.n	800c7ca <mg_tcpip_poll+0x47e>
        continue;
 800c7c8:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800c7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f47f aefa 	bne.w	800c5cc <mg_tcpip_poll+0x280>
 800c7d8:	e000      	b.n	800c7dc <mg_tcpip_poll+0x490>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800c7da:	bf00      	nop
    }
  }
}
 800c7dc:	373c      	adds	r7, #60	@ 0x3c
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	08026f48 	.word	0x08026f48
 800c7e8:	24000240 	.word	0x24000240
 800c7ec:	08029044 	.word	0x08029044
 800c7f0:	0802597c 	.word	0x0802597c
 800c7f4:	08026f54 	.word	0x08026f54

0800c7f8 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3334      	adds	r3, #52	@ 0x34
 800c808:	f107 0114 	add.w	r1, r7, #20
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	4618      	mov	r0, r3
 800c810:	f001 f9f6 	bl	800dc00 <mg_queue_book>
 800c814:	4602      	mov	r2, r0
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	4293      	cmp	r3, r2
 800c81a:	d811      	bhi.n	800c840 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	68f9      	ldr	r1, [r7, #12]
 800c822:	4618      	mov	r0, r3
 800c824:	f015 fbd3 	bl	8021fce <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	3334      	adds	r3, #52	@ 0x34
 800c82c:	68b9      	ldr	r1, [r7, #8]
 800c82e:	4618      	mov	r0, r3
 800c830:	f001 fa84 	bl	800dd3c <mg_queue_add>
    ifp->nrecv++;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c838:	1c5a      	adds	r2, r3, #1
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	671a      	str	r2, [r3, #112]	@ 0x70
  } else {
    ifp->ndrop++;
  }
}
 800c83e:	e004      	b.n	800c84a <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800c84a:	bf00      	nop
 800c84c:	3718      	adds	r7, #24
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
	...

0800c854 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d12d      	bne.n	800c8c2 <mg_tcpip_init+0x6e>
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	785b      	ldrb	r3, [r3, #1]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d129      	bne.n	800c8c2 <mg_tcpip_init+0x6e>
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	789b      	ldrb	r3, [r3, #2]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d125      	bne.n	800c8c2 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d121      	bne.n	800c8c2 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	791b      	ldrb	r3, [r3, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d11d      	bne.n	800c8c2 <mg_tcpip_init+0x6e>
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	795b      	ldrb	r3, [r3, #5]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d119      	bne.n	800c8c2 <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	2202      	movs	r2, #2
 800c892:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	3301      	adds	r3, #1
 800c898:	2105      	movs	r1, #5
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7f4 fb42 	bl	8000f24 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800c8a0:	4b51      	ldr	r3, [pc, #324]	@ (800c9e8 <mg_tcpip_init+0x194>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	dd0c      	ble.n	800c8c2 <mg_tcpip_init+0x6e>
 800c8a8:	4b50      	ldr	r3, [pc, #320]	@ (800c9ec <mg_tcpip_init+0x198>)
 800c8aa:	f241 72f6 	movw	r2, #6134	@ 0x17f6
 800c8ae:	4950      	ldr	r1, [pc, #320]	@ (800c9f0 <mg_tcpip_init+0x19c>)
 800c8b0:	2002      	movs	r0, #2
 800c8b2:	f7fb fb3d 	bl	8007f30 <mg_log_prefix>
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	494e      	ldr	r1, [pc, #312]	@ (800c9f4 <mg_tcpip_init+0x1a0>)
 800c8bc:	484e      	ldr	r0, [pc, #312]	@ (800c9f8 <mg_tcpip_init+0x1a4>)
 800c8be:	f7fb fb87 	bl	8007fd0 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d019      	beq.n	800c900 <mg_tcpip_init+0xac>
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	6838      	ldr	r0, [r7, #0]
 800c8d4:	4798      	blx	r3
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	f083 0301 	eor.w	r3, r3, #1
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00e      	beq.n	800c900 <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 800c8e2:	4b41      	ldr	r3, [pc, #260]	@ (800c9e8 <mg_tcpip_init+0x194>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	dd7a      	ble.n	800c9e0 <mg_tcpip_init+0x18c>
 800c8ea:	4b40      	ldr	r3, [pc, #256]	@ (800c9ec <mg_tcpip_init+0x198>)
 800c8ec:	f241 72fa 	movw	r2, #6138	@ 0x17fa
 800c8f0:	493f      	ldr	r1, [pc, #252]	@ (800c9f0 <mg_tcpip_init+0x19c>)
 800c8f2:	2001      	movs	r0, #1
 800c8f4:	f7fb fb1c 	bl	8007f30 <mg_log_prefix>
 800c8f8:	4840      	ldr	r0, [pc, #256]	@ (800c9fc <mg_tcpip_init+0x1a8>)
 800c8fa:	f7fb fb69 	bl	8007fd0 <mg_log>
 800c8fe:	e06f      	b.n	800c9e0 <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 800c900:	f240 6304 	movw	r3, #1540	@ 0x604
 800c904:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800c906:	68f9      	ldr	r1, [r7, #12]
 800c908:	2001      	movs	r0, #1
 800c90a:	f013 ffb9 	bl	8020880 <calloc>
 800c90e:	4603      	mov	r3, r0
 800c910:	461a      	mov	r2, r3
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	615a      	str	r2, [r3, #20]
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10a      	bne.n	800c93a <mg_tcpip_init+0xe6>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d001      	beq.n	800c932 <mg_tcpip_init+0xde>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	e001      	b.n	800c936 <mg_tcpip_init+0xe2>
 800c932:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c93e:	4619      	mov	r1, r3
 800c940:	2001      	movs	r0, #1
 800c942:	f013 ff9d 	bl	8020880 <calloc>
 800c946:	4603      	mov	r3, r0
 800c948:	461a      	mov	r2, r3
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 800c94e:	f7f4 fb17 	bl	8000f80 <mg_millis>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    mgr->priv = ifp;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c96e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2230      	movs	r2, #48	@ 0x30
 800c976:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d102      	bne.n	800c986 <mg_tcpip_init+0x132>
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	2201      	movs	r2, #1
 800c984:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	3346      	adds	r3, #70	@ 0x46
 800c98a:	2206      	movs	r2, #6
 800c98c:	21ff      	movs	r1, #255	@ 0xff
 800c98e:	4618      	mov	r0, r3
 800c990:	f015 fa28 	bl	8021de4 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	3368      	adds	r3, #104	@ 0x68
 800c998:	2102      	movs	r1, #2
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7f4 fac2 	bl	8000f24 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800c9a6:	4b16      	ldr	r3, [pc, #88]	@ (800ca00 <mg_tcpip_init+0x1ac>)
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	b29a      	uxth	r2, r3
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	695b      	ldr	r3, [r3, #20]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d003      	beq.n	800c9c2 <mg_tcpip_init+0x16e>
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10e      	bne.n	800c9e0 <mg_tcpip_init+0x18c>
 800c9c2:	4b09      	ldr	r3, [pc, #36]	@ (800c9e8 <mg_tcpip_init+0x194>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	dd0a      	ble.n	800c9e0 <mg_tcpip_init+0x18c>
 800c9ca:	4b08      	ldr	r3, [pc, #32]	@ (800c9ec <mg_tcpip_init+0x198>)
 800c9cc:	f641 020b 	movw	r2, #6155	@ 0x180b
 800c9d0:	4907      	ldr	r1, [pc, #28]	@ (800c9f0 <mg_tcpip_init+0x19c>)
 800c9d2:	2001      	movs	r0, #1
 800c9d4:	f7fb faac 	bl	8007f30 <mg_log_prefix>
 800c9d8:	480a      	ldr	r0, [pc, #40]	@ (800ca04 <mg_tcpip_init+0x1b0>)
 800c9da:	f7fb faf9 	bl	8007fd0 <mg_log>
  }
}
 800c9de:	e7ff      	b.n	800c9e0 <mg_tcpip_init+0x18c>
 800c9e0:	bf00      	nop
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	24000240 	.word	0x24000240
 800c9ec:	08029054 	.word	0x08029054
 800c9f0:	0802597c 	.word	0x0802597c
 800c9f4:	0800d919 	.word	0x0800d919
 800c9f8:	08026f64 	.word	0x08026f64
 800c9fc:	08026f88 	.word	0x08026f88
 800ca00:	ffff8000 	.word	0xffff8000
 800ca04:	080269d8 	.word	0x080269d8

0800ca08 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 800ca08:	b590      	push	{r4, r7, lr}
 800ca0a:	b08d      	sub	sp, #52	@ 0x34
 800ca0c:	af06      	add	r7, sp, #24
 800ca0e:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	33b0      	adds	r3, #176	@ 0xb0
 800ca14:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	8b1b      	ldrh	r3, [r3, #24]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f00b f80b 	bl	8017a36 <mg_ntohs>
 800ca20:	4603      	mov	r3, r0
 800ca22:	4618      	mov	r0, r3
 800ca24:	f00a ffee 	bl	8017a04 <mg_ntohl>
 800ca28:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca30:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	331c      	adds	r3, #28
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	f103 0018 	add.w	r0, r3, #24
 800ca40:	68bc      	ldr	r4, [r7, #8]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	8b1b      	ldrh	r3, [r3, #24]
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	9105      	str	r1, [sp, #20]
 800ca4e:	2100      	movs	r1, #0
 800ca50:	9104      	str	r1, [sp, #16]
 800ca52:	2100      	movs	r1, #0
 800ca54:	9103      	str	r1, [sp, #12]
 800ca56:	6939      	ldr	r1, [r7, #16]
 800ca58:	9102      	str	r1, [sp, #8]
 800ca5a:	9201      	str	r2, [sp, #4]
 800ca5c:	9300      	str	r3, [sp, #0]
 800ca5e:	2302      	movs	r3, #2
 800ca60:	4622      	mov	r2, r4
 800ca62:	4601      	mov	r1, r0
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7fe fb63 	bl	800b130 <tx_tcp>
         0);
}
 800ca6a:	bf00      	nop
 800ca6c:	371c      	adds	r7, #28
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd90      	pop	{r4, r7, pc}

0800ca72 <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b082      	sub	sp, #8
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ca80:	f003 0301 	and.w	r3, r3, #1
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00c      	beq.n	800caa4 <mac_resolved+0x32>
    c->is_connecting = 0;
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800ca90:	f36f 1345 	bfc	r3, #5, #1
 800ca94:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 800ca98:	2200      	movs	r2, #0
 800ca9a:	2104      	movs	r1, #4
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f7f5 ff3d 	bl	800291c <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 800caa2:	e006      	b.n	800cab2 <mac_resolved+0x40>
    send_syn(c);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff ffaf 	bl	800ca08 <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 800caaa:	2103      	movs	r1, #3
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7fd f959 	bl	8009d64 <settmout>
}
 800cab2:	bf00      	nop
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
	...

0800cabc <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08a      	sub	sp, #40	@ 0x28
 800cac0:	af02      	add	r7, sp, #8
 800cac2:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caca:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	331c      	adds	r3, #28
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800cada:	f36f 03c3 	bfc	r3, #3, #1
 800cade:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cae8:	b21b      	sxth	r3, r3
 800caea:	2b00      	cmp	r3, #0
 800caec:	db04      	blt.n	800caf8 <mg_connect_resolved+0x3c>
 800caee:	69fb      	ldr	r3, [r7, #28]
 800caf0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800caf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3308      	adds	r3, #8
 800cafc:	69fa      	ldr	r2, [r7, #28]
 800cafe:	3208      	adds	r2, #8
 800cb00:	6812      	ldr	r2, [r2, #0]
 800cb02:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cb0a:	1c5a      	adds	r2, r3, #1
 800cb0c:	b291      	uxth	r1, r2
 800cb0e:	69fa      	ldr	r2, [r7, #28]
 800cb10:	f8a2 1068 	strh.w	r1, [r2, #104]	@ 0x68
 800cb14:	4618      	mov	r0, r3
 800cb16:	f00a ff8e 	bl	8017a36 <mg_ntohs>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 800cb22:	4b61      	ldr	r3, [pc, #388]	@ (800cca8 <mg_connect_resolved+0x1ec>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	dd15      	ble.n	800cb56 <mg_connect_resolved+0x9a>
 800cb2a:	4b60      	ldr	r3, [pc, #384]	@ (800ccac <mg_connect_resolved+0x1f0>)
 800cb2c:	f641 0230 	movw	r2, #6192	@ 0x1830
 800cb30:	495f      	ldr	r1, [pc, #380]	@ (800ccb0 <mg_connect_resolved+0x1f4>)
 800cb32:	2003      	movs	r0, #3
 800cb34:	f7fb f9fc 	bl	8007f30 <mg_log_prefix>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f103 0208 	add.w	r2, r3, #8
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	331c      	adds	r3, #28
 800cb46:	9301      	str	r3, [sp, #4]
 800cb48:	4b5a      	ldr	r3, [pc, #360]	@ (800ccb4 <mg_connect_resolved+0x1f8>)
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	4a59      	ldr	r2, [pc, #356]	@ (800ccb4 <mg_connect_resolved+0x1f8>)
 800cb50:	4859      	ldr	r0, [pc, #356]	@ (800ccb8 <mg_connect_resolved+0x1fc>)
 800cb52:	f7fb fa3d 	bl	8007fd0 <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 800cb56:	2200      	movs	r2, #0
 800cb58:	2103      	movs	r1, #3
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7f5 fede 	bl	800291c <mg_call>
  c->is_connecting = 1;
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800cb66:	f043 0320 	orr.w	r3, r3, #32
 800cb6a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cb74:	f003 0301 	and.w	r3, r3, #1
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d01a      	beq.n	800cbb4 <mg_connect_resolved+0xf8>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb84:	d008      	beq.n	800cb98 <mg_connect_resolved+0xdc>
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	689a      	ldr	r2, [r3, #8]
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	43db      	mvns	r3, r3
 800cb90:	431a      	orrs	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d10d      	bne.n	800cbb4 <mg_connect_resolved+0xf8>
    struct connstate *s = (struct connstate *) (c + 1);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	33b0      	adds	r3, #176	@ 0xb0
 800cb9c:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	3318      	adds	r3, #24
 800cba2:	2206      	movs	r2, #6
 800cba4:	21ff      	movs	r1, #255	@ 0xff
 800cba6:	4618      	mov	r0, r3
 800cba8:	f015 f91c 	bl	8021de4 <memset>
    mac_resolved(c);
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f7ff ff60 	bl	800ca72 <mac_resolved>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 800cbb2:	e075      	b.n	800cca0 <mg_connect_resolved+0x1e4>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d030      	beq.n	800cc1e <mg_connect_resolved+0x162>
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	689a      	ldr	r2, [r3, #8]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	405a      	eors	r2, r3
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	4013      	ands	r3, r2
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d127      	bne.n	800cc1e <mg_connect_resolved+0x162>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	691a      	ldr	r2, [r3, #16]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d022      	beq.n	800cc1e <mg_connect_resolved+0x162>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 800cbd8:	4b33      	ldr	r3, [pc, #204]	@ (800cca8 <mg_connect_resolved+0x1ec>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	dd0c      	ble.n	800cbfa <mg_connect_resolved+0x13e>
 800cbe0:	4b32      	ldr	r3, [pc, #200]	@ (800ccac <mg_connect_resolved+0x1f0>)
 800cbe2:	f641 023b 	movw	r2, #6203	@ 0x183b
 800cbe6:	4932      	ldr	r1, [pc, #200]	@ (800ccb0 <mg_connect_resolved+0x1f4>)
 800cbe8:	2003      	movs	r0, #3
 800cbea:	f7fb f9a1 	bl	8007f30 <mg_log_prefix>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	4831      	ldr	r0, [pc, #196]	@ (800ccbc <mg_connect_resolved+0x200>)
 800cbf6:	f7fb f9eb 	bl	8007fd0 <mg_log>
    mg_tcpip_arp_request(ifp, rem_ip, NULL);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	4619      	mov	r1, r3
 800cc00:	69f8      	ldr	r0, [r7, #28]
 800cc02:	f7fd f927 	bl	8009e54 <mg_tcpip_arp_request>
    settmout(c, MIP_TTYPE_ARP);
 800cc06:	2102      	movs	r1, #2
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7fd f8ab 	bl	8009d64 <settmout>
    c->is_arplooking = 1;
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800cc14:	f043 0310 	orr.w	r3, r3, #16
 800cc18:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 800cc1c:	e040      	b.n	800cca0 <mg_connect_resolved+0x1e4>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 800cc1e:	f107 030c 	add.w	r3, r7, #12
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800cc28:	2be0      	cmp	r3, #224	@ 0xe0
 800cc2a:	d129      	bne.n	800cc80 <mg_connect_resolved+0x1c4>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	33b0      	adds	r3, #176	@ 0xb0
 800cc30:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 800cc32:	4a23      	ldr	r2, [pc, #140]	@ (800ccc0 <mg_connect_resolved+0x204>)
 800cc34:	f107 0308 	add.w	r3, r7, #8
 800cc38:	6812      	ldr	r2, [r2, #0]
 800cc3a:	4611      	mov	r1, r2
 800cc3c:	8019      	strh	r1, [r3, #0]
 800cc3e:	3302      	adds	r3, #2
 800cc40:	0c12      	lsrs	r2, r2, #16
 800cc42:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	3318      	adds	r3, #24
 800cc48:	461a      	mov	r2, r3
 800cc4a:	f107 0308 	add.w	r3, r7, #8
 800cc4e:	8819      	ldrh	r1, [r3, #0]
 800cc50:	789b      	ldrb	r3, [r3, #2]
 800cc52:	8011      	strh	r1, [r2, #0]
 800cc54:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	3318      	adds	r3, #24
 800cc5a:	1cd8      	adds	r0, r3, #3
 800cc5c:	f107 030c 	add.w	r3, r7, #12
 800cc60:	3301      	adds	r3, #1
 800cc62:	2203      	movs	r2, #3
 800cc64:	4619      	mov	r1, r3
 800cc66:	f015 f9b2 	bl	8021fce <memcpy>
    s->mac[3] &= 0x7F;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	7edb      	ldrb	r3, [r3, #27]
 800cc6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	76da      	strb	r2, [r3, #27]
    mac_resolved(c);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f7ff fefa 	bl	800ca72 <mac_resolved>
  } else {
    struct connstate *s = (struct connstate *) (c + 1);
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}
 800cc7e:	e00f      	b.n	800cca0 <mg_connect_resolved+0x1e4>
    struct connstate *s = (struct connstate *) (c + 1);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	33b0      	adds	r3, #176	@ 0xb0
 800cc84:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	f103 0018 	add.w	r0, r3, #24
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	3346      	adds	r3, #70	@ 0x46
 800cc90:	2206      	movs	r2, #6
 800cc92:	4619      	mov	r1, r3
 800cc94:	f015 f99b 	bl	8021fce <memcpy>
    mac_resolved(c);
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f7ff feea 	bl	800ca72 <mac_resolved>
}
 800cc9e:	e7ff      	b.n	800cca0 <mg_connect_resolved+0x1e4>
 800cca0:	bf00      	nop
 800cca2:	3720      	adds	r7, #32
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	24000240 	.word	0x24000240
 800ccac:	08029064 	.word	0x08029064
 800ccb0:	0802597c 	.word	0x0802597c
 800ccb4:	0800d8cd 	.word	0x0800d8cd
 800ccb8:	08026f9c 	.word	0x08026f9c
 800ccbc:	08026fac 	.word	0x08026fac
 800ccc0:	08026fc0 	.word	0x08026fc0

0800ccc4 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800ccce:	6838      	ldr	r0, [r7, #0]
 800ccd0:	f00a fdd4 	bl	801787c <mg_url_port>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f00a fead 	bl	8017a36 <mg_ntohs>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	461a      	mov	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	831a      	strh	r2, [r3, #24]
  return true;
 800cce4:	2301      	movs	r3, #1
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
	...

0800ccf0 <write_conn>:

static void write_conn(struct mg_connection *c) {
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ccfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd02:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d009      	beq.n	800cd1c <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd10:	461a      	mov	r2, r3
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f005 fb44 	bl	80123a0 <mg_tls_send>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	e008      	b.n	800cd2e <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd24:	461a      	mov	r2, r3
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f7fe fc5a 	bl	800b5e0 <mg_io_send>
 800cd2c:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800cd2e:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd36:	d104      	bne.n	800cd42 <write_conn+0x52>
    mg_error(c, "tx err");
 800cd38:	490c      	ldr	r1, [pc, #48]	@ (800cd6c <write_conn+0x7c>)
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7f5 fe0e 	bl	800295c <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 800cd40:	e010      	b.n	800cd64 <write_conn+0x74>
  } else if (len > 0) {
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	dd0d      	ble.n	800cd64 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	3348      	adds	r3, #72	@ 0x48
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	2100      	movs	r1, #0
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fa f9fd 	bl	8007150 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800cd56:	f107 030c 	add.w	r3, r7, #12
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	2108      	movs	r1, #8
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7f5 fddc 	bl	800291c <mg_call>
}
 800cd64:	bf00      	nop
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	08026fc4 	.word	0x08026fc4

0800cd70 <init_closure>:

static void init_closure(struct mg_connection *c) {
 800cd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd72:	b08f      	sub	sp, #60	@ 0x3c
 800cd74:	af06      	add	r7, sp, #24
 800cd76:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	33b0      	adds	r3, #176	@ 0xb0
 800cd7c:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cd84:	f003 0301 	and.w	r3, r3, #1
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d13f      	bne.n	800ce0e <init_closure+0x9e>
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d137      	bne.n	800ce0e <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cda4:	f003 0320 	and.w	r3, r3, #32
 800cda8:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d12f      	bne.n	800ce0e <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 800cdb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdb4:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	331c      	adds	r3, #28
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	f103 0618 	add.w	r6, r3, #24
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	60bb      	str	r3, [r7, #8]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	8b1c      	ldrh	r4, [r3, #24]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f00a fe15 	bl	8017a04 <mg_ntohl>
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f00a fe0f 	bl	8017a04 <mg_ntohl>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2200      	movs	r2, #0
 800cdea:	9205      	str	r2, [sp, #20]
 800cdec:	2200      	movs	r2, #0
 800cdee:	9204      	str	r2, [sp, #16]
 800cdf0:	9303      	str	r3, [sp, #12]
 800cdf2:	6879      	ldr	r1, [r7, #4]
 800cdf4:	9102      	str	r1, [sp, #8]
 800cdf6:	9501      	str	r5, [sp, #4]
 800cdf8:	9400      	str	r4, [sp, #0]
 800cdfa:	2311      	movs	r3, #17
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	4631      	mov	r1, r6
 800ce00:	69b8      	ldr	r0, [r7, #24]
 800ce02:	f7fe f995 	bl	800b130 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 800ce06:	2104      	movs	r1, #4
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f7fc ffab 	bl	8009d64 <settmout>
  }
}
 800ce0e:	bf00      	nop
 800ce10:	3724      	adds	r7, #36	@ 0x24
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce16 <close_conn>:

static void close_conn(struct mg_connection *c) {
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b084      	sub	sp, #16
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	33b0      	adds	r3, #176	@ 0xb0
 800ce22:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	3320      	adds	r3, #32
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fa f9dc 	bl	80071e6 <mg_iobuf_free>
  mg_close_conn(c);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f7fc fcba 	bl	80097a8 <mg_close_conn>
}
 800ce34:	bf00      	nop
 800ce36:	3710      	adds	r7, #16
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <can_write>:

static bool can_write(struct mg_connection *c) {
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ce4a:	f003 0320 	and.w	r3, r3, #32
 800ce4e:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d11d      	bne.n	800ce90 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ce5a:	f003 0308 	and.w	r3, r3, #8
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d115      	bne.n	800ce90 <can_write+0x54>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d011      	beq.n	800ce90 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ce72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ce76:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d109      	bne.n	800ce90 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ce82:	f003 0310 	and.w	r3, r3, #16
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d101      	bne.n	800ce90 <can_write+0x54>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e000      	b.n	800ce92 <can_write+0x56>
 800ce90:	2300      	movs	r3, #0
 800ce92:	f003 0301 	and.w	r3, r3, #1
 800ce96:	b2db      	uxtb	r3, r3
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800cea4:	b5b0      	push	{r4, r5, r7, lr}
 800cea6:	b08c      	sub	sp, #48	@ 0x30
 800cea8:	af04      	add	r7, sp, #16
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ceb2:	61bb      	str	r3, [r7, #24]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800ceb4:	f7f4 f864 	bl	8000f80 <mg_millis>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	460b      	mov	r3, r1
 800cebc:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ceca:	4608      	mov	r0, r1
 800cecc:	f002 fc16 	bl	800f6fc <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f000 80aa 	beq.w	800d02c <mg_mgr_poll+0x188>
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f000 80a5 	beq.w	800d02c <mg_mgr_poll+0x188>
  mg_tcpip_poll(ifp, now);
 800cee2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cee6:	69b8      	ldr	r0, [r7, #24]
 800cee8:	f7ff fa30 	bl	800c34c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	61fb      	str	r3, [r7, #28]
 800cef2:	e096      	b.n	800d022 <mg_mgr_poll+0x17e>
    tmp = c->next;
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 800cefa:	69fb      	ldr	r3, [r7, #28]
 800cefc:	33b0      	adds	r3, #176	@ 0xb0
 800cefe:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 800cf00:	f107 0308 	add.w	r3, r7, #8
 800cf04:	461a      	mov	r2, r3
 800cf06:	2102      	movs	r1, #2
 800cf08:	69f8      	ldr	r0, [r7, #28]
 800cf0a:	f7f5 fd07 	bl	800291c <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 800cf0e:	4b49      	ldr	r3, [pc, #292]	@ (800d034 <mg_mgr_poll+0x190>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2b03      	cmp	r3, #3
 800cf14:	dd48      	ble.n	800cfa8 <mg_mgr_poll+0x104>
 800cf16:	4b48      	ldr	r3, [pc, #288]	@ (800d038 <mg_mgr_poll+0x194>)
 800cf18:	f641 0281 	movw	r2, #6273	@ 0x1881
 800cf1c:	4947      	ldr	r1, [pc, #284]	@ (800d03c <mg_mgr_poll+0x198>)
 800cf1e:	2004      	movs	r0, #4
 800cf20:	f7fb f806 	bl	8007f30 <mg_log_prefix>
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800cf28:	69fb      	ldr	r3, [r7, #28]
 800cf2a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cf2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d001      	beq.n	800cf3c <mg_mgr_poll+0x98>
 800cf38:	2454      	movs	r4, #84	@ 0x54
 800cf3a:	e000      	b.n	800cf3e <mg_mgr_poll+0x9a>
 800cf3c:	2474      	movs	r4, #116	@ 0x74
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cf44:	f003 0320 	and.w	r3, r3, #32
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d001      	beq.n	800cf52 <mg_mgr_poll+0xae>
 800cf4e:	2543      	movs	r5, #67	@ 0x43
 800cf50:	e000      	b.n	800cf54 <mg_mgr_poll+0xb0>
 800cf52:	2563      	movs	r5, #99	@ 0x63
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cf5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d001      	beq.n	800cf68 <mg_mgr_poll+0xc4>
 800cf64:	2348      	movs	r3, #72	@ 0x48
 800cf66:	e000      	b.n	800cf6a <mg_mgr_poll+0xc6>
 800cf68:	2368      	movs	r3, #104	@ 0x68
 800cf6a:	69fa      	ldr	r2, [r7, #28]
 800cf6c:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 800cf70:	f002 0208 	and.w	r2, r2, #8
 800cf74:	b2d2      	uxtb	r2, r2
 800cf76:	2a00      	cmp	r2, #0
 800cf78:	d001      	beq.n	800cf7e <mg_mgr_poll+0xda>
 800cf7a:	2252      	movs	r2, #82	@ 0x52
 800cf7c:	e000      	b.n	800cf80 <mg_mgr_poll+0xdc>
 800cf7e:	2272      	movs	r2, #114	@ 0x72
 800cf80:	69f9      	ldr	r1, [r7, #28]
 800cf82:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 800cf86:	f001 0120 	and.w	r1, r1, #32
 800cf8a:	b2c9      	uxtb	r1, r1
 800cf8c:	2900      	cmp	r1, #0
 800cf8e:	d001      	beq.n	800cf94 <mg_mgr_poll+0xf0>
 800cf90:	2143      	movs	r1, #67	@ 0x43
 800cf92:	e000      	b.n	800cf96 <mg_mgr_poll+0xf2>
 800cf94:	2163      	movs	r1, #99	@ 0x63
 800cf96:	9102      	str	r1, [sp, #8]
 800cf98:	9201      	str	r2, [sp, #4]
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	462b      	mov	r3, r5
 800cf9e:	4622      	mov	r2, r4
 800cfa0:	4601      	mov	r1, r0
 800cfa2:	4827      	ldr	r0, [pc, #156]	@ (800d040 <mg_mgr_poll+0x19c>)
 800cfa4:	f7fb f814 	bl	8007fd0 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cfae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d00b      	beq.n	800cfd0 <mg_mgr_poll+0x12c>
 800cfb8:	69f8      	ldr	r0, [r7, #28]
 800cfba:	f005 fa85 	bl	80124c8 <mg_tls_pending>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d005      	beq.n	800cfd0 <mg_mgr_poll+0x12c>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	3368      	adds	r3, #104	@ 0x68
 800cfc8:	4619      	mov	r1, r3
 800cfca:	69f8      	ldr	r0, [r7, #28]
 800cfcc:	f7fe fb80 	bl	800b6d0 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 800cfd0:	69f8      	ldr	r0, [r7, #28]
 800cfd2:	f7ff ff33 	bl	800ce3c <can_write>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <mg_mgr_poll+0x13e>
 800cfdc:	69f8      	ldr	r0, [r7, #28]
 800cfde:	f7ff fe87 	bl	800ccf0 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cfe8:	f003 0310 	and.w	r3, r3, #16
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00a      	beq.n	800d008 <mg_mgr_poll+0x164>
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d106      	bne.n	800d008 <mg_mgr_poll+0x164>
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	7f9b      	ldrb	r3, [r3, #30]
 800cffe:	2b04      	cmp	r3, #4
 800d000:	d002      	beq.n	800d008 <mg_mgr_poll+0x164>
      init_closure(c);
 800d002:	69f8      	ldr	r0, [r7, #28]
 800d004:	f7ff feb4 	bl	800cd70 <init_closure>
    if (c->is_closing) close_conn(c);
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d00e:	f003 0320 	and.w	r3, r3, #32
 800d012:	b2db      	uxtb	r3, r3
 800d014:	2b00      	cmp	r3, #0
 800d016:	d002      	beq.n	800d01e <mg_mgr_poll+0x17a>
 800d018:	69f8      	ldr	r0, [r7, #28]
 800d01a:	f7ff fefc 	bl	800ce16 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	61fb      	str	r3, [r7, #28]
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	2b00      	cmp	r3, #0
 800d026:	f47f af65 	bne.w	800cef4 <mg_mgr_poll+0x50>
 800d02a:	e000      	b.n	800d02e <mg_mgr_poll+0x18a>
  if (ifp == NULL || ifp->driver == NULL) return;
 800d02c:	bf00      	nop
  }
  (void) ms;
}
 800d02e:	3720      	adds	r7, #32
 800d030:	46bd      	mov	sp, r7
 800d032:	bdb0      	pop	{r4, r5, r7, pc}
 800d034:	24000240 	.word	0x24000240
 800d038:	08029078 	.word	0x08029078
 800d03c:	0802597c 	.word	0x0802597c
 800d040:	08026fcc 	.word	0x08026fcc

0800d044 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 800d044:	b5b0      	push	{r4, r5, r7, lr}
 800d046:	b08c      	sub	sp, #48	@ 0x30
 800d048:	af04      	add	r7, sp, #16
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d056:	61bb      	str	r3, [r7, #24]
  bool res = false;
 800d058:	2300      	movs	r3, #0
 800d05a:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	331c      	adds	r3, #28
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d004      	beq.n	800d076 <mg_send+0x32>
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d072:	2b04      	cmp	r3, #4
 800d074:	d004      	beq.n	800d080 <mg_send+0x3c>
    mg_error(c, "net down");
 800d076:	4934      	ldr	r1, [pc, #208]	@ (800d148 <mg_send+0x104>)
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f7f5 fc6f 	bl	800295c <mg_error>
 800d07e:	e05e      	b.n	800d13e <mg_send+0xfa>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d086:	f003 0301 	and.w	r3, r3, #1
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d01e      	beq.n	800d0ce <mg_send+0x8a>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d096:	f003 0310 	and.w	r3, r3, #16
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d107      	bne.n	800d0b0 <mg_send+0x6c>
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d0a6:	f003 0308 	and.w	r3, r3, #8
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00e      	beq.n	800d0ce <mg_send+0x8a>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
 800d0b0:	4b26      	ldr	r3, [pc, #152]	@ (800d14c <mg_send+0x108>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b03      	cmp	r3, #3
 800d0b6:	dd42      	ble.n	800d13e <mg_send+0xfa>
 800d0b8:	4b25      	ldr	r3, [pc, #148]	@ (800d150 <mg_send+0x10c>)
 800d0ba:	f641 0297 	movw	r2, #6295	@ 0x1897
 800d0be:	4925      	ldr	r1, [pc, #148]	@ (800d154 <mg_send+0x110>)
 800d0c0:	2004      	movs	r0, #4
 800d0c2:	f7fa ff35 	bl	8007f30 <mg_log_prefix>
 800d0c6:	4824      	ldr	r0, [pc, #144]	@ (800d158 <mg_send+0x114>)
 800d0c8:	f7fa ff82 	bl	8007fd0 <mg_log>
 800d0cc:	e037      	b.n	800d13e <mg_send+0xfa>
  } else if (c->is_udp) {
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d0d4:	f003 0301 	and.w	r3, r3, #1
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d020      	beq.n	800d120 <mg_send+0xdc>
    struct connstate *s = (struct connstate *) (c + 1);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	33b0      	adds	r3, #176	@ 0xb0
 800d0e2:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 800d0e4:	6879      	ldr	r1, [r7, #4]
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f7fe f9ec 	bl	800b4c4 <trim_len>
 800d0ec:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	f103 0018 	add.w	r0, r3, #24
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	689c      	ldr	r4, [r3, #8]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	8b1d      	ldrh	r5, [r3, #24]
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800d102:	6879      	ldr	r1, [r7, #4]
 800d104:	9103      	str	r1, [sp, #12]
 800d106:	68b9      	ldr	r1, [r7, #8]
 800d108:	9102      	str	r1, [sp, #8]
 800d10a:	9201      	str	r2, [sp, #4]
 800d10c:	9300      	str	r3, [sp, #0]
 800d10e:	462b      	mov	r3, r5
 800d110:	4622      	mov	r2, r4
 800d112:	4601      	mov	r1, r0
 800d114:	69b8      	ldr	r0, [r7, #24]
 800d116:	f7fd f806 	bl	800a126 <tx_udp>
    res = true;
 800d11a:	2301      	movs	r3, #1
 800d11c:	77fb      	strb	r3, [r7, #31]
 800d11e:	e00e      	b.n	800d13e <mg_send+0xfa>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	f7f9 ffbd 	bl	80070ac <mg_iobuf_add>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	bf14      	ite	ne
 800d138:	2301      	movne	r3, #1
 800d13a:	2300      	moveq	r3, #0
 800d13c:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 800d13e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3720      	adds	r7, #32
 800d144:	46bd      	mov	sp, r7
 800d146:	bdb0      	pop	{r4, r5, r7, pc}
 800d148:	08026fe0 	.word	0x08026fe0
 800d14c:	24000240 	.word	0x24000240
 800d150:	08029084 	.word	0x08029084
 800d154:	0802597c 	.word	0x0802597c
 800d158:	08026fec 	.word	0x08026fec

0800d15c <mg_ota_begin>:

struct mg_otadata {
  uint32_t crc32, size, timestamp, status;
};

bool mg_ota_begin(size_t new_firmware_size) {
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  bool ok = false;
 800d164:	2300      	movs	r3, #0
 800d166:	75fb      	strb	r3, [r7, #23]
  if (s_size) {
 800d168:	4b33      	ldr	r3, [pc, #204]	@ (800d238 <mg_ota_begin+0xdc>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00e      	beq.n	800d18e <mg_ota_begin+0x32>
    MG_ERROR(("OTA already in progress. Call mg_ota_end()"));
 800d170:	4b32      	ldr	r3, [pc, #200]	@ (800d23c <mg_ota_begin+0xe0>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	dd5a      	ble.n	800d22e <mg_ota_begin+0xd2>
 800d178:	4b31      	ldr	r3, [pc, #196]	@ (800d240 <mg_ota_begin+0xe4>)
 800d17a:	f641 1223 	movw	r2, #6435	@ 0x1923
 800d17e:	4931      	ldr	r1, [pc, #196]	@ (800d244 <mg_ota_begin+0xe8>)
 800d180:	2001      	movs	r0, #1
 800d182:	f7fa fed5 	bl	8007f30 <mg_log_prefix>
 800d186:	4830      	ldr	r0, [pc, #192]	@ (800d248 <mg_ota_begin+0xec>)
 800d188:	f7fa ff22 	bl	8007fd0 <mg_log>
 800d18c:	e04f      	b.n	800d22e <mg_ota_begin+0xd2>
  } else {
    size_t half = mg_flash_size() / 2, max = half - mg_flash_sector_size();
 800d18e:	f018 f824 	bl	80251da <mg_flash_size>
 800d192:	4603      	mov	r3, r0
 800d194:	085b      	lsrs	r3, r3, #1
 800d196:	613b      	str	r3, [r7, #16]
 800d198:	f018 f82c 	bl	80251f4 <mg_flash_sector_size>
 800d19c:	4602      	mov	r2, r0
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	1a9b      	subs	r3, r3, r2
 800d1a2:	60fb      	str	r3, [r7, #12]
    s_crc32 = 0;
 800d1a4:	4b29      	ldr	r3, [pc, #164]	@ (800d24c <mg_ota_begin+0xf0>)
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	601a      	str	r2, [r3, #0]
    s_addr = (char *) mg_flash_start() + half;
 800d1aa:	f018 f80d 	bl	80251c8 <mg_flash_start>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	4a26      	ldr	r2, [pc, #152]	@ (800d250 <mg_ota_begin+0xf4>)
 800d1b6:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Firmware %lu bytes, max %lu", new_firmware_size, max));
 800d1b8:	4b20      	ldr	r3, [pc, #128]	@ (800d23c <mg_ota_begin+0xe0>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	dd0b      	ble.n	800d1d8 <mg_ota_begin+0x7c>
 800d1c0:	4b1f      	ldr	r3, [pc, #124]	@ (800d240 <mg_ota_begin+0xe4>)
 800d1c2:	f641 1228 	movw	r2, #6440	@ 0x1928
 800d1c6:	491f      	ldr	r1, [pc, #124]	@ (800d244 <mg_ota_begin+0xe8>)
 800d1c8:	2003      	movs	r0, #3
 800d1ca:	f7fa feb1 	bl	8007f30 <mg_log_prefix>
 800d1ce:	68fa      	ldr	r2, [r7, #12]
 800d1d0:	6879      	ldr	r1, [r7, #4]
 800d1d2:	4820      	ldr	r0, [pc, #128]	@ (800d254 <mg_ota_begin+0xf8>)
 800d1d4:	f7fa fefc 	bl	8007fd0 <mg_log>
    if (new_firmware_size < max) {
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d216      	bcs.n	800d20e <mg_ota_begin+0xb2>
      ok = true;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	75fb      	strb	r3, [r7, #23]
      s_size = new_firmware_size;
 800d1e4:	4a14      	ldr	r2, [pc, #80]	@ (800d238 <mg_ota_begin+0xdc>)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6013      	str	r3, [r2, #0]
      MG_INFO(("Starting OTA, firmware size %lu", s_size));
 800d1ea:	4b14      	ldr	r3, [pc, #80]	@ (800d23c <mg_ota_begin+0xe0>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	dd1d      	ble.n	800d22e <mg_ota_begin+0xd2>
 800d1f2:	4b13      	ldr	r3, [pc, #76]	@ (800d240 <mg_ota_begin+0xe4>)
 800d1f4:	f641 122c 	movw	r2, #6444	@ 0x192c
 800d1f8:	4912      	ldr	r1, [pc, #72]	@ (800d244 <mg_ota_begin+0xe8>)
 800d1fa:	2002      	movs	r0, #2
 800d1fc:	f7fa fe98 	bl	8007f30 <mg_log_prefix>
 800d200:	4b0d      	ldr	r3, [pc, #52]	@ (800d238 <mg_ota_begin+0xdc>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4619      	mov	r1, r3
 800d206:	4814      	ldr	r0, [pc, #80]	@ (800d258 <mg_ota_begin+0xfc>)
 800d208:	f7fa fee2 	bl	8007fd0 <mg_log>
 800d20c:	e00f      	b.n	800d22e <mg_ota_begin+0xd2>
    } else {
      MG_ERROR(("Firmware %lu is too big to fit %lu", new_firmware_size, max));
 800d20e:	4b0b      	ldr	r3, [pc, #44]	@ (800d23c <mg_ota_begin+0xe0>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	dd0b      	ble.n	800d22e <mg_ota_begin+0xd2>
 800d216:	4b0a      	ldr	r3, [pc, #40]	@ (800d240 <mg_ota_begin+0xe4>)
 800d218:	f641 122e 	movw	r2, #6446	@ 0x192e
 800d21c:	4909      	ldr	r1, [pc, #36]	@ (800d244 <mg_ota_begin+0xe8>)
 800d21e:	2001      	movs	r0, #1
 800d220:	f7fa fe86 	bl	8007f30 <mg_log_prefix>
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	6879      	ldr	r1, [r7, #4]
 800d228:	480c      	ldr	r0, [pc, #48]	@ (800d25c <mg_ota_begin+0x100>)
 800d22a:	f7fa fed1 	bl	8007fd0 <mg_log>
    }
  }
  return ok;
 800d22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d230:	4618      	mov	r0, r3
 800d232:	3718      	adds	r7, #24
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	24000d8c 	.word	0x24000d8c
 800d23c:	24000240 	.word	0x24000240
 800d240:	0802908c 	.word	0x0802908c
 800d244:	0802597c 	.word	0x0802597c
 800d248:	08027000 	.word	0x08027000
 800d24c:	24000d90 	.word	0x24000d90
 800d250:	24000d88 	.word	0x24000d88
 800d254:	0802702c 	.word	0x0802702c
 800d258:	08027048 	.word	0x08027048
 800d25c:	08027068 	.word	0x08027068

0800d260 <mg_ota_write>:

bool mg_ota_write(const void *buf, size_t len) {
 800d260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d264:	b08a      	sub	sp, #40	@ 0x28
 800d266:	af02      	add	r7, sp, #8
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	6039      	str	r1, [r7, #0]
  bool ok = false;
 800d26c:	2300      	movs	r3, #0
 800d26e:	77fb      	strb	r3, [r7, #31]
  if (s_size == 0) {
 800d270:	4b51      	ldr	r3, [pc, #324]	@ (800d3b8 <mg_ota_write+0x158>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10f      	bne.n	800d298 <mg_ota_write+0x38>
    MG_ERROR(("OTA is not started, call mg_ota_begin()"));
 800d278:	4b50      	ldr	r3, [pc, #320]	@ (800d3bc <mg_ota_write+0x15c>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f340 8095 	ble.w	800d3ac <mg_ota_write+0x14c>
 800d282:	4b4f      	ldr	r3, [pc, #316]	@ (800d3c0 <mg_ota_write+0x160>)
 800d284:	f641 1237 	movw	r2, #6455	@ 0x1937
 800d288:	494e      	ldr	r1, [pc, #312]	@ (800d3c4 <mg_ota_write+0x164>)
 800d28a:	2001      	movs	r0, #1
 800d28c:	f7fa fe50 	bl	8007f30 <mg_log_prefix>
 800d290:	484d      	ldr	r0, [pc, #308]	@ (800d3c8 <mg_ota_write+0x168>)
 800d292:	f7fa fe9d 	bl	8007fd0 <mg_log>
 800d296:	e089      	b.n	800d3ac <mg_ota_write+0x14c>
  } else {
    size_t align = mg_flash_write_align();
 800d298:	f017 ffb5 	bl	8025206 <mg_flash_write_align>
 800d29c:	61b8      	str	r0, [r7, #24]
    size_t len_aligned_down = MG_ROUND_DOWN(len, align);
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d007      	beq.n	800d2b4 <mg_ota_write+0x54>
 800d2a4:	683a      	ldr	r2, [r7, #0]
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ac:	69ba      	ldr	r2, [r7, #24]
 800d2ae:	fb02 f303 	mul.w	r3, r2, r3
 800d2b2:	e000      	b.n	800d2b6 <mg_ota_write+0x56>
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	617b      	str	r3, [r7, #20]
    if (len_aligned_down) ok = mg_flash_write(s_addr, buf, len_aligned_down);
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d008      	beq.n	800d2d0 <mg_ota_write+0x70>
 800d2be:	4b43      	ldr	r3, [pc, #268]	@ (800d3cc <mg_ota_write+0x16c>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	697a      	ldr	r2, [r7, #20]
 800d2c4:	6879      	ldr	r1, [r7, #4]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f018 f97c 	bl	80255c4 <mg_flash_write>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	77fb      	strb	r3, [r7, #31]
    if (len_aligned_down < len) {
 800d2d0:	697a      	ldr	r2, [r7, #20]
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d242      	bcs.n	800d35e <mg_ota_write+0xfe>
 800d2d8:	466b      	mov	r3, sp
 800d2da:	469a      	mov	sl, r3
      size_t left = len - len_aligned_down;
 800d2dc:	683a      	ldr	r2, [r7, #0]
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	613b      	str	r3, [r7, #16]
      char tmp[align];
 800d2e4:	69be      	ldr	r6, [r7, #24]
 800d2e6:	4633      	mov	r3, r6
 800d2e8:	3b01      	subs	r3, #1
 800d2ea:	60fb      	str	r3, [r7, #12]
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	46b0      	mov	r8, r6
 800d2f0:	4699      	mov	r9, r3
 800d2f2:	f04f 0200 	mov.w	r2, #0
 800d2f6:	f04f 0300 	mov.w	r3, #0
 800d2fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d2fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d306:	2300      	movs	r3, #0
 800d308:	4634      	mov	r4, r6
 800d30a:	461d      	mov	r5, r3
 800d30c:	f04f 0200 	mov.w	r2, #0
 800d310:	f04f 0300 	mov.w	r3, #0
 800d314:	00eb      	lsls	r3, r5, #3
 800d316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d31a:	00e2      	lsls	r2, r4, #3
 800d31c:	1df3      	adds	r3, r6, #7
 800d31e:	08db      	lsrs	r3, r3, #3
 800d320:	00db      	lsls	r3, r3, #3
 800d322:	ebad 0d03 	sub.w	sp, sp, r3
 800d326:	ab02      	add	r3, sp, #8
 800d328:	3300      	adds	r3, #0
 800d32a:	60bb      	str	r3, [r7, #8]
      memset(tmp, 0xff, sizeof(tmp));
 800d32c:	4632      	mov	r2, r6
 800d32e:	21ff      	movs	r1, #255	@ 0xff
 800d330:	68b8      	ldr	r0, [r7, #8]
 800d332:	f014 fd57 	bl	8021de4 <memset>
      memcpy(tmp, (char *) buf + len_aligned_down, left);
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	4413      	add	r3, r2
 800d33c:	693a      	ldr	r2, [r7, #16]
 800d33e:	4619      	mov	r1, r3
 800d340:	68b8      	ldr	r0, [r7, #8]
 800d342:	f014 fe44 	bl	8021fce <memcpy>
      ok = mg_flash_write(s_addr + len_aligned_down, tmp, sizeof(tmp));
 800d346:	4b21      	ldr	r3, [pc, #132]	@ (800d3cc <mg_ota_write+0x16c>)
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	4413      	add	r3, r2
 800d34e:	4632      	mov	r2, r6
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	4618      	mov	r0, r3
 800d354:	f018 f936 	bl	80255c4 <mg_flash_write>
 800d358:	4603      	mov	r3, r0
 800d35a:	77fb      	strb	r3, [r7, #31]
 800d35c:	46d5      	mov	sp, sl
    }
    s_crc32 = mg_crc32(s_crc32, (char *) buf, len);  // Update CRC
 800d35e:	4b1c      	ldr	r3, [pc, #112]	@ (800d3d0 <mg_ota_write+0x170>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	683a      	ldr	r2, [r7, #0]
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	4618      	mov	r0, r3
 800d368:	f00a fb7c 	bl	8017a64 <mg_crc32>
 800d36c:	4603      	mov	r3, r0
 800d36e:	4a18      	ldr	r2, [pc, #96]	@ (800d3d0 <mg_ota_write+0x170>)
 800d370:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("%#x %p %lu -> %d", s_addr - len, buf, len, ok));
 800d372:	4b12      	ldr	r3, [pc, #72]	@ (800d3bc <mg_ota_write+0x15c>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b02      	cmp	r3, #2
 800d378:	dd12      	ble.n	800d3a0 <mg_ota_write+0x140>
 800d37a:	4b11      	ldr	r3, [pc, #68]	@ (800d3c0 <mg_ota_write+0x160>)
 800d37c:	f641 1244 	movw	r2, #6468	@ 0x1944
 800d380:	4910      	ldr	r1, [pc, #64]	@ (800d3c4 <mg_ota_write+0x164>)
 800d382:	2003      	movs	r0, #3
 800d384:	f7fa fdd4 	bl	8007f30 <mg_log_prefix>
 800d388:	4b10      	ldr	r3, [pc, #64]	@ (800d3cc <mg_ota_write+0x16c>)
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	425b      	negs	r3, r3
 800d390:	18d1      	adds	r1, r2, r3
 800d392:	7ffb      	ldrb	r3, [r7, #31]
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	480e      	ldr	r0, [pc, #56]	@ (800d3d4 <mg_ota_write+0x174>)
 800d39c:	f7fa fe18 	bl	8007fd0 <mg_log>
    s_addr += len;
 800d3a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d3cc <mg_ota_write+0x16c>)
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	4a08      	ldr	r2, [pc, #32]	@ (800d3cc <mg_ota_write+0x16c>)
 800d3aa:	6013      	str	r3, [r2, #0]
  }
  return ok;
 800d3ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3720      	adds	r7, #32
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3b8:	24000d8c 	.word	0x24000d8c
 800d3bc:	24000240 	.word	0x24000240
 800d3c0:	0802909c 	.word	0x0802909c
 800d3c4:	0802597c 	.word	0x0802597c
 800d3c8:	0802708c 	.word	0x0802708c
 800d3cc:	24000d88 	.word	0x24000d88
 800d3d0:	24000d90 	.word	0x24000d90
 800d3d4:	080270b4 	.word	0x080270b4

0800d3d8 <mg_ota_end>:
  return key;
}

static size_t swap_size(void);

bool mg_ota_end(void) {
 800d3d8:	b590      	push	{r4, r7, lr}
 800d3da:	b08f      	sub	sp, #60	@ 0x3c
 800d3dc:	af02      	add	r7, sp, #8
  char *base = (char *) mg_flash_start() + mg_flash_size() / 2;
 800d3de:	f017 fef3 	bl	80251c8 <mg_flash_start>
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	f017 fef9 	bl	80251da <mg_flash_size>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	085b      	lsrs	r3, r3, #1
 800d3ec:	4423      	add	r3, r4
 800d3ee:	627b      	str	r3, [r7, #36]	@ 0x24
  bool ok = false;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (s_size) {
 800d3f6:	4b46      	ldr	r3, [pc, #280]	@ (800d510 <mg_ota_end+0x138>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d06c      	beq.n	800d4d8 <mg_ota_end+0x100>
    size_t size = s_addr - base;
 800d3fe:	4b45      	ldr	r3, [pc, #276]	@ (800d514 <mg_ota_end+0x13c>)
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	623b      	str	r3, [r7, #32]
    uint32_t crc32 = mg_crc32(0, base, s_size);
 800d408:	4b41      	ldr	r3, [pc, #260]	@ (800d510 <mg_ota_end+0x138>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	461a      	mov	r2, r3
 800d40e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d410:	2000      	movs	r0, #0
 800d412:	f00a fb27 	bl	8017a64 <mg_crc32>
 800d416:	61f8      	str	r0, [r7, #28]
    if (size == s_size && crc32 == s_crc32) {
 800d418:	4b3d      	ldr	r3, [pc, #244]	@ (800d510 <mg_ota_end+0x138>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	6a3a      	ldr	r2, [r7, #32]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d125      	bne.n	800d46e <mg_ota_end+0x96>
 800d422:	4b3d      	ldr	r3, [pc, #244]	@ (800d518 <mg_ota_end+0x140>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	69fa      	ldr	r2, [r7, #28]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d120      	bne.n	800d46e <mg_ota_end+0x96>
      uint32_t now = (uint32_t) (mg_now() / 1000);
 800d42c:	f001 f982 	bl	800e734 <mg_now>
 800d430:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d434:	f04f 0300 	mov.w	r3, #0
 800d438:	f7f3 f9c6 	bl	80007c8 <__aeabi_uldivmod>
 800d43c:	4602      	mov	r2, r0
 800d43e:	460b      	mov	r3, r1
 800d440:	4613      	mov	r3, r2
 800d442:	61bb      	str	r3, [r7, #24]
      struct mg_otadata od = {crc32, size, now, MG_OTA_FIRST_BOOT};
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	607b      	str	r3, [r7, #4]
 800d448:	6a3b      	ldr	r3, [r7, #32]
 800d44a:	60bb      	str	r3, [r7, #8]
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	60fb      	str	r3, [r7, #12]
 800d450:	2301      	movs	r3, #1
 800d452:	613b      	str	r3, [r7, #16]
      uint32_t key = mg_fwkey(MG_FIRMWARE_PREVIOUS);
 800d454:	2001      	movs	r0, #1
 800d456:	f018 f985 	bl	8025764 <mg_fwkey>
 800d45a:	6178      	str	r0, [r7, #20]
      ok = mg_flash_save(NULL, key, &od, sizeof(od));
 800d45c:	1d3a      	adds	r2, r7, #4
 800d45e:	2310      	movs	r3, #16
 800d460:	6979      	ldr	r1, [r7, #20]
 800d462:	2000      	movs	r0, #0
 800d464:	f7f4 faa6 	bl	80019b4 <mg_flash_save>
 800d468:	4603      	mov	r3, r0
 800d46a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    MG_DEBUG(("CRC: %x/%x, size: %lu/%lu, status: %s", s_crc32, crc32, s_size,
 800d46e:	4b2b      	ldr	r3, [pc, #172]	@ (800d51c <mg_ota_end+0x144>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2b02      	cmp	r3, #2
 800d474:	dd19      	ble.n	800d4aa <mg_ota_end+0xd2>
 800d476:	4b2a      	ldr	r3, [pc, #168]	@ (800d520 <mg_ota_end+0x148>)
 800d478:	f44f 52cb 	mov.w	r2, #6496	@ 0x1960
 800d47c:	4929      	ldr	r1, [pc, #164]	@ (800d524 <mg_ota_end+0x14c>)
 800d47e:	2003      	movs	r0, #3
 800d480:	f7fa fd56 	bl	8007f30 <mg_log_prefix>
 800d484:	4b24      	ldr	r3, [pc, #144]	@ (800d518 <mg_ota_end+0x140>)
 800d486:	6819      	ldr	r1, [r3, #0]
 800d488:	4b21      	ldr	r3, [pc, #132]	@ (800d510 <mg_ota_end+0x138>)
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d490:	2b00      	cmp	r3, #0
 800d492:	d001      	beq.n	800d498 <mg_ota_end+0xc0>
 800d494:	4b24      	ldr	r3, [pc, #144]	@ (800d528 <mg_ota_end+0x150>)
 800d496:	e000      	b.n	800d49a <mg_ota_end+0xc2>
 800d498:	4b24      	ldr	r3, [pc, #144]	@ (800d52c <mg_ota_end+0x154>)
 800d49a:	9301      	str	r3, [sp, #4]
 800d49c:	6a3b      	ldr	r3, [r7, #32]
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	69fa      	ldr	r2, [r7, #28]
 800d4a4:	4822      	ldr	r0, [pc, #136]	@ (800d530 <mg_ota_end+0x158>)
 800d4a6:	f7fa fd93 	bl	8007fd0 <mg_log>
              size, ok ? "ok" : "fail"));
    s_size = 0;
 800d4aa:	4b19      	ldr	r3, [pc, #100]	@ (800d510 <mg_ota_end+0x138>)
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	601a      	str	r2, [r3, #0]
    if (ok) {
 800d4b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d00f      	beq.n	800d4d8 <mg_ota_end+0x100>
      size_t sz = 0;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (mg_flash_bank() == 0) {
 800d4bc:	f017 feab 	bl	8025216 <mg_flash_bank>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d102      	bne.n	800d4cc <mg_ota_end+0xf4>
        // No dual bank support.
        sz = swap_size();
 800d4c6:	f000 f837 	bl	800d538 <swap_size>
 800d4ca:	62b8      	str	r0, [r7, #40]	@ 0x28
      }
      ok = mg_flash_swap_bank(sz);
 800d4cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4ce:	f018 f839 	bl	8025544 <mg_flash_swap_bank>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }
  MG_INFO(("Finishing OTA: %s", ok ? "ok" : "fail"));
 800d4d8:	4b10      	ldr	r3, [pc, #64]	@ (800d51c <mg_ota_end+0x144>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	dd11      	ble.n	800d504 <mg_ota_end+0x12c>
 800d4e0:	4b0f      	ldr	r3, [pc, #60]	@ (800d520 <mg_ota_end+0x148>)
 800d4e2:	f641 126c 	movw	r2, #6508	@ 0x196c
 800d4e6:	490f      	ldr	r1, [pc, #60]	@ (800d524 <mg_ota_end+0x14c>)
 800d4e8:	2002      	movs	r0, #2
 800d4ea:	f7fa fd21 	bl	8007f30 <mg_log_prefix>
 800d4ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d001      	beq.n	800d4fa <mg_ota_end+0x122>
 800d4f6:	4b0c      	ldr	r3, [pc, #48]	@ (800d528 <mg_ota_end+0x150>)
 800d4f8:	e000      	b.n	800d4fc <mg_ota_end+0x124>
 800d4fa:	4b0c      	ldr	r3, [pc, #48]	@ (800d52c <mg_ota_end+0x154>)
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	480d      	ldr	r0, [pc, #52]	@ (800d534 <mg_ota_end+0x15c>)
 800d500:	f7fa fd66 	bl	8007fd0 <mg_log>
  return ok;
 800d504:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3734      	adds	r7, #52	@ 0x34
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd90      	pop	{r4, r7, pc}
 800d510:	24000d8c 	.word	0x24000d8c
 800d514:	24000d88 	.word	0x24000d88
 800d518:	24000d90 	.word	0x24000d90
 800d51c:	24000240 	.word	0x24000240
 800d520:	080290ac 	.word	0x080290ac
 800d524:	0802597c 	.word	0x0802597c
 800d528:	08025b34 	.word	0x08025b34
 800d52c:	08025b38 	.word	0x08025b38
 800d530:	080270c8 	.word	0x080270c8
 800d534:	080270f0 	.word	0x080270f0

0800d538 <swap_size>:
  // MG_DEBUG(("Loaded OTA data. fw %d, bank %d, key %p", fw, bank, key));
  // mg_hexdump(&od, sizeof(od));
  return od;
}

static size_t swap_size(void) {
 800d538:	b580      	push	{r7, lr}
 800d53a:	b08a      	sub	sp, #40	@ 0x28
 800d53c:	af00      	add	r7, sp, #0
  struct mg_otadata curr = mg_otadata(MG_FIRMWARE_CURRENT);
 800d53e:	f107 0314 	add.w	r3, r7, #20
 800d542:	2100      	movs	r1, #0
 800d544:	4618      	mov	r0, r3
 800d546:	f018 f931 	bl	80257ac <mg_otadata>
  struct mg_otadata prev = mg_otadata(MG_FIRMWARE_PREVIOUS);
 800d54a:	1d3b      	adds	r3, r7, #4
 800d54c:	2101      	movs	r1, #1
 800d54e:	4618      	mov	r0, r3
 800d550:	f018 f92c 	bl	80257ac <mg_otadata>
  size_t sz = 0;
 800d554:	2300      	movs	r3, #0
 800d556:	627b      	str	r3, [r7, #36]	@ 0x24
  if (curr.status != MG_OTA_UNAVAILABLE && prev.status != MG_OTA_UNAVAILABLE) {
 800d558:	6a3b      	ldr	r3, [r7, #32]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d008      	beq.n	800d570 <swap_size+0x38>
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d005      	beq.n	800d570 <swap_size+0x38>
    // We know exact sizes of both firmwares, use MAX(firmware1, firmware2)
    sz = (size_t) (curr.size > prev.size ? curr.size : prev.size);
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	4293      	cmp	r3, r2
 800d56a:	bf38      	it	cc
 800d56c:	4613      	movcc	r3, r2
 800d56e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return sz;
 800d570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d572:	4618      	mov	r0, r3
 800d574:	3728      	adds	r7, #40	@ 0x28
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b084      	sub	sp, #16
 800d57e:	af00      	add	r7, sp, #0
 800d580:	4603      	mov	r3, r0
 800d582:	6039      	str	r1, [r7, #0]
 800d584:	71fb      	strb	r3, [r7, #7]
 800d586:	4613      	mov	r3, r2
 800d588:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 800d58e:	79bb      	ldrb	r3, [r7, #6]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d00d      	beq.n	800d5b0 <mg_pfn_iobuf_private+0x36>
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	1c9a      	adds	r2, r3, #2
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d906      	bls.n	800d5b0 <mg_pfn_iobuf_private+0x36>
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	3302      	adds	r3, #2
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f7f9 fcf2 	bl	8006f94 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	689b      	ldr	r3, [r3, #8]
 800d5b4:	1c9a      	adds	r2, r3, #2
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d811      	bhi.n	800d5e2 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	1c58      	adds	r0, r3, #1
 800d5c8:	68f9      	ldr	r1, [r7, #12]
 800d5ca:	6088      	str	r0, [r1, #8]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	79fa      	ldrb	r2, [r7, #7]
 800d5d0:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	4413      	add	r3, r2
 800d5dc:	2200      	movs	r2, #0
 800d5de:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 800d5e0:	e00f      	b.n	800d602 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	689a      	ldr	r2, [r3, #8]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d209      	bcs.n	800d602 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	1c58      	adds	r0, r3, #1
 800d5f8:	68f9      	ldr	r1, [r7, #12]
 800d5fa:	6088      	str	r0, [r1, #8]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	2200      	movs	r2, #0
 800d600:	701a      	strb	r2, [r3, #0]
}
 800d602:	bf00      	nop
 800d604:	3710      	adds	r7, #16
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b082      	sub	sp, #8
 800d60e:	af00      	add	r7, sp, #0
 800d610:	4603      	mov	r3, r0
 800d612:	6039      	str	r1, [r7, #0]
 800d614:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 800d616:	79fb      	ldrb	r3, [r7, #7]
 800d618:	2200      	movs	r2, #0
 800d61a:	6839      	ldr	r1, [r7, #0]
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7ff ffac 	bl	800d57a <mg_pfn_iobuf_private>
}
 800d622:	bf00      	nop
 800d624:	3708      	adds	r7, #8
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b082      	sub	sp, #8
 800d62e:	af00      	add	r7, sp, #0
 800d630:	4603      	mov	r3, r0
 800d632:	6039      	str	r1, [r7, #0]
 800d634:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 800d636:	79fb      	ldrb	r3, [r7, #7]
 800d638:	2201      	movs	r2, #1
 800d63a:	6839      	ldr	r1, [r7, #0]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff ff9c 	bl	800d57a <mg_pfn_iobuf_private>
}
 800d642:	bf00      	nop
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
	...

0800d64c <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b08a      	sub	sp, #40	@ 0x28
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	607a      	str	r2, [r7, #4]
 800d658:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	617b      	str	r3, [r7, #20]
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	61bb      	str	r3, [r7, #24]
 800d662:	2300      	movs	r3, #0
 800d664:	61fb      	str	r3, [r7, #28]
 800d666:	2300      	movs	r3, #0
 800d668:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 800d66a:	f107 0114 	add.w	r1, r7, #20
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	4809      	ldr	r0, [pc, #36]	@ (800d698 <mg_vsnprintf+0x4c>)
 800d674:	f7f5 fe20 	bl	80032b8 <mg_vxprintf>
 800d678:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 800d67a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d204      	bcs.n	800d68c <mg_vsnprintf+0x40>
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d686:	4413      	add	r3, r2
 800d688:	2200      	movs	r2, #0
 800d68a:	701a      	strb	r2, [r3, #0]
  return n;
 800d68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3728      	adds	r7, #40	@ 0x28
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	0800d60b 	.word	0x0800d60b

0800d69c <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 800d69c:	b40c      	push	{r2, r3}
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b084      	sub	sp, #16
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 800d6a8:	f107 031c 	add.w	r3, r7, #28
 800d6ac:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 800d6ae:	f107 0308 	add.w	r3, r7, #8
 800d6b2:	69ba      	ldr	r2, [r7, #24]
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7ff ffc8 	bl	800d64c <mg_vsnprintf>
 800d6bc:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 800d6be:	68fb      	ldr	r3, [r7, #12]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d6ca:	b002      	add	sp, #8
 800d6cc:	4770      	bx	lr
	...

0800d6d0 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60bb      	str	r3, [r7, #8]
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60fb      	str	r3, [r7, #12]
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	613b      	str	r3, [r7, #16]
 800d6e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d6ea:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 800d6ec:	f107 0108 	add.w	r1, r7, #8
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	4803      	ldr	r0, [pc, #12]	@ (800d704 <mg_vmprintf+0x34>)
 800d6f6:	f7f5 fddf 	bl	80032b8 <mg_vxprintf>
  return (char *) io.buf;
 800d6fa:	68bb      	ldr	r3, [r7, #8]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	0800d62b 	.word	0x0800d62b

0800d708 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 800d708:	b40f      	push	{r0, r1, r2, r3}
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b082      	sub	sp, #8
 800d70e:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 800d710:	f107 0314 	add.w	r3, r7, #20
 800d714:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 800d716:	463b      	mov	r3, r7
 800d718:	4619      	mov	r1, r3
 800d71a:	6938      	ldr	r0, [r7, #16]
 800d71c:	f7ff ffd8 	bl	800d6d0 <mg_vmprintf>
 800d720:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 800d722:	687b      	ldr	r3, [r7, #4]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d72e:	b004      	add	sp, #16
 800d730:	4770      	bx	lr

0800d732 <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 800d732:	b580      	push	{r7, lr}
 800d734:	b082      	sub	sp, #8
 800d736:	af00      	add	r7, sp, #0
 800d738:	4603      	mov	r3, r0
 800d73a:	6039      	str	r1, [r7, #0]
 800d73c:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 800d73e:	79fb      	ldrb	r3, [r7, #7]
 800d740:	4618      	mov	r0, r3
 800d742:	f014 f993 	bl	8021a6c <putchar>
  (void) param;
}
 800d746:	bf00      	nop
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
	...

0800d750 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 800d750:	b580      	push	{r7, lr}
 800d752:	b088      	sub	sp, #32
 800d754:	af04      	add	r7, sp, #16
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	4618      	mov	r0, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	3301      	adds	r3, #1
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	461a      	mov	r2, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	3302      	adds	r3, #2
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	4619      	mov	r1, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	3303      	adds	r3, #3
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	9302      	str	r3, [sp, #8]
 800d77a:	9101      	str	r1, [sp, #4]
 800d77c:	9200      	str	r2, [sp, #0]
 800d77e:	4603      	mov	r3, r0
 800d780:	4a04      	ldr	r2, [pc, #16]	@ (800d794 <print_ip4+0x44>)
 800d782:	68b9      	ldr	r1, [r7, #8]
 800d784:	68f8      	ldr	r0, [r7, #12]
 800d786:	f7f5 fd7c 	bl	8003282 <mg_xprintf>
 800d78a:	4603      	mov	r3, r0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	0802716c 	.word	0x0802716c

0800d798 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 800d798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d79c:	b08e      	sub	sp, #56	@ 0x38
 800d79e:	af08      	add	r7, sp, #32
 800d7a0:	6178      	str	r0, [r7, #20]
 800d7a2:	6139      	str	r1, [r7, #16]
 800d7a4:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	881b      	ldrh	r3, [r3, #0]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f00a f943 	bl	8017a36 <mg_ntohs>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	3302      	adds	r3, #2
 800d7b8:	881b      	ldrh	r3, [r3, #0]
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f00a f93b 	bl	8017a36 <mg_ntohs>
 800d7c0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d7c2:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	881b      	ldrh	r3, [r3, #0]
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f00a f933 	bl	8017a36 <mg_ntohs>
 800d7d0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d7d2:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	3306      	adds	r3, #6
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f00a f92b 	bl	8017a36 <mg_ntohs>
 800d7e0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d7e2:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	3308      	adds	r3, #8
 800d7e8:	881b      	ldrh	r3, [r3, #0]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f00a f923 	bl	8017a36 <mg_ntohs>
 800d7f0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d7f2:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	330a      	adds	r3, #10
 800d7f8:	881b      	ldrh	r3, [r3, #0]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f00a f91b 	bl	8017a36 <mg_ntohs>
 800d800:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d802:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	330c      	adds	r3, #12
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	4618      	mov	r0, r3
 800d80c:	f00a f913 	bl	8017a36 <mg_ntohs>
 800d810:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d812:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	330e      	adds	r3, #14
 800d818:	881b      	ldrh	r3, [r3, #0]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f00a f90b 	bl	8017a36 <mg_ntohs>
 800d820:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800d822:	9306      	str	r3, [sp, #24]
 800d824:	683a      	ldr	r2, [r7, #0]
 800d826:	9205      	str	r2, [sp, #20]
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	9204      	str	r2, [sp, #16]
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	9303      	str	r3, [sp, #12]
 800d830:	9602      	str	r6, [sp, #8]
 800d832:	9501      	str	r5, [sp, #4]
 800d834:	9400      	str	r4, [sp, #0]
 800d836:	4643      	mov	r3, r8
 800d838:	4a05      	ldr	r2, [pc, #20]	@ (800d850 <print_ip6+0xb8>)
 800d83a:	6939      	ldr	r1, [r7, #16]
 800d83c:	6978      	ldr	r0, [r7, #20]
 800d83e:	f7f5 fd20 	bl	8003282 <mg_xprintf>
 800d842:	4603      	mov	r3, r0
}
 800d844:	4618      	mov	r0, r3
 800d846:	3718      	adds	r7, #24
 800d848:	46bd      	mov	sp, r7
 800d84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d84e:	bf00      	nop
 800d850:	08027178 	.word	0x08027178

0800d854 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 800d854:	b580      	push	{r7, lr}
 800d856:	b086      	sub	sp, #24
 800d858:	af00      	add	r7, sp, #0
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	1d19      	adds	r1, r3, #4
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	6011      	str	r1, [r2, #0]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	68b9      	ldr	r1, [r7, #8]
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f7ff ff6c 	bl	800d750 <print_ip4>
 800d878:	4603      	mov	r3, r0
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3718      	adds	r7, #24
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 800d882:	b580      	push	{r7, lr}
 800d884:	b086      	sub	sp, #24
 800d886:	af00      	add	r7, sp, #0
 800d888:	60f8      	str	r0, [r7, #12]
 800d88a:	60b9      	str	r1, [r7, #8]
 800d88c:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	1d19      	adds	r1, r3, #4
 800d894:	687a      	ldr	r2, [r7, #4]
 800d896:	6011      	str	r1, [r2, #0]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	7cdb      	ldrb	r3, [r3, #19]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d007      	beq.n	800d8b4 <mg_print_ip+0x32>
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	68b9      	ldr	r1, [r7, #8]
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	f7ff ff74 	bl	800d798 <print_ip6>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	e006      	b.n	800d8c2 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	68b9      	ldr	r1, [r7, #8]
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f7ff ff48 	bl	800d750 <print_ip4>
 800d8c0:	4603      	mov	r3, r0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3718      	adds	r7, #24
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
	...

0800d8cc <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b088      	sub	sp, #32
 800d8d0:	af02      	add	r7, sp, #8
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	1d19      	adds	r1, r3, #4
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	6011      	str	r1, [r2, #0]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	8a1b      	ldrh	r3, [r3, #16]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f00a f8a3 	bl	8017a36 <mg_ntohs>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	9301      	str	r3, [sp, #4]
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	4b05      	ldr	r3, [pc, #20]	@ (800d910 <mg_print_ip_port+0x44>)
 800d8fa:	4a06      	ldr	r2, [pc, #24]	@ (800d914 <mg_print_ip_port+0x48>)
 800d8fc:	68b9      	ldr	r1, [r7, #8]
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f7f5 fcbf 	bl	8003282 <mg_xprintf>
 800d904:	4603      	mov	r3, r0
}
 800d906:	4618      	mov	r0, r3
 800d908:	3718      	adds	r7, #24
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	0800d883 	.word	0x0800d883
 800d914:	08027194 	.word	0x08027194

0800d918 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 800d918:	b5b0      	push	{r4, r5, r7, lr}
 800d91a:	b08c      	sub	sp, #48	@ 0x30
 800d91c:	af06      	add	r7, sp, #24
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	1d19      	adds	r1, r3, #4
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	6011      	str	r1, [r2, #0]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	461d      	mov	r5, r3
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	3301      	adds	r3, #1
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	461a      	mov	r2, r3
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	3302      	adds	r3, #2
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	3303      	adds	r3, #3
 800d94c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800d94e:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	3304      	adds	r3, #4
 800d954:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800d956:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	3305      	adds	r3, #5
 800d95c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800d95e:	9304      	str	r3, [sp, #16]
 800d960:	9403      	str	r4, [sp, #12]
 800d962:	9002      	str	r0, [sp, #8]
 800d964:	9101      	str	r1, [sp, #4]
 800d966:	9200      	str	r2, [sp, #0]
 800d968:	462b      	mov	r3, r5
 800d96a:	4a05      	ldr	r2, [pc, #20]	@ (800d980 <mg_print_mac+0x68>)
 800d96c:	68b9      	ldr	r1, [r7, #8]
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f7f5 fc87 	bl	8003282 <mg_xprintf>
 800d974:	4603      	mov	r3, r0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3718      	adds	r7, #24
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bdb0      	pop	{r4, r5, r7, pc}
 800d97e:	bf00      	nop
 800d980:	0802719c 	.word	0x0802719c

0800d984 <mg_esc>:

static char mg_esc(int c, bool esc) {
 800d984:	b480      	push	{r7}
 800d986:	b087      	sub	sp, #28
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	460b      	mov	r3, r1
 800d98e:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 800d990:	4b19      	ldr	r3, [pc, #100]	@ (800d9f8 <mg_esc+0x74>)
 800d992:	613b      	str	r3, [r7, #16]
 800d994:	4b19      	ldr	r3, [pc, #100]	@ (800d9fc <mg_esc+0x78>)
 800d996:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d001      	beq.n	800d9a2 <mg_esc+0x1e>
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	e000      	b.n	800d9a4 <mg_esc+0x20>
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	617b      	str	r3, [r7, #20]
 800d9a6:	e01b      	b.n	800d9e0 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d112      	bne.n	800d9da <mg_esc+0x56>
 800d9b4:	78fb      	ldrb	r3, [r7, #3]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d007      	beq.n	800d9ca <mg_esc+0x46>
 800d9ba:	697a      	ldr	r2, [r7, #20]
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	e00f      	b.n	800d9ea <mg_esc+0x66>
 800d9ca:	697a      	ldr	r2, [r7, #20]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	e007      	b.n	800d9ea <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	617b      	str	r3, [r7, #20]
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d1df      	bne.n	800d9a8 <mg_esc+0x24>
  }
  return 0;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	371c      	adds	r7, #28
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	080268e0 	.word	0x080268e0
 800d9fc:	080268e8 	.word	0x080268e8

0800da00 <mg_escape>:

static char mg_escape(int c) {
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 800da08:	2101      	movs	r1, #1
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7ff ffba 	bl	800d984 <mg_esc>
 800da10:	4603      	mov	r3, r0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3708      	adds	r7, #8
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b088      	sub	sp, #32
 800da1e:	af00      	add	r7, sp, #0
 800da20:	60f8      	str	r0, [r7, #12]
 800da22:	60b9      	str	r1, [r7, #8]
 800da24:	607a      	str	r2, [r7, #4]
 800da26:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 800da28:	2300      	movs	r3, #0
 800da2a:	61fb      	str	r3, [r7, #28]
 800da2c:	2300      	movs	r3, #0
 800da2e:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 800da30:	2300      	movs	r3, #0
 800da32:	61fb      	str	r3, [r7, #28]
 800da34:	e023      	b.n	800da7e <qcpy+0x64>
    char c = mg_escape(buf[i]);
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	4413      	add	r3, r2
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	4618      	mov	r0, r3
 800da40:	f7ff ffde 	bl	800da00 <mg_escape>
 800da44:	4603      	mov	r3, r0
 800da46:	75fb      	strb	r3, [r7, #23]
    if (c) {
 800da48:	7dfb      	ldrb	r3, [r7, #23]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d00c      	beq.n	800da68 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	68b9      	ldr	r1, [r7, #8]
 800da52:	205c      	movs	r0, #92	@ 0x5c
 800da54:	4798      	blx	r3
 800da56:	7dfa      	ldrb	r2, [r7, #23]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	68b9      	ldr	r1, [r7, #8]
 800da5c:	4610      	mov	r0, r2
 800da5e:	4798      	blx	r3
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	3301      	adds	r3, #1
 800da64:	61bb      	str	r3, [r7, #24]
 800da66:	e007      	b.n	800da78 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	4413      	add	r3, r2
 800da6e:	781a      	ldrb	r2, [r3, #0]
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	68b9      	ldr	r1, [r7, #8]
 800da74:	4610      	mov	r0, r2
 800da76:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 800da78:	69fb      	ldr	r3, [r7, #28]
 800da7a:	3301      	adds	r3, #1
 800da7c:	61fb      	str	r3, [r7, #28]
 800da7e:	69fa      	ldr	r2, [r7, #28]
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	429a      	cmp	r2, r3
 800da84:	d205      	bcs.n	800da92 <qcpy+0x78>
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	4413      	add	r3, r2
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1d1      	bne.n	800da36 <qcpy+0x1c>
    }
  }
  return i + extra;
 800da92:	69fa      	ldr	r2, [r7, #28]
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	4413      	add	r3, r2
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3720      	adds	r7, #32
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b088      	sub	sp, #32
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	1d19      	adds	r1, r3, #4
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	6011      	str	r1, [r2, #0]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	1d19      	adds	r1, r3, #4
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	6011      	str	r1, [r2, #0]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 800dac8:	4b16      	ldr	r3, [pc, #88]	@ (800db24 <mg_print_hex+0x84>)
 800daca:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 800dacc:	2300      	movs	r3, #0
 800dace:	61fb      	str	r3, [r7, #28]
 800dad0:	e01e      	b.n	800db10 <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	4413      	add	r3, r2
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	091b      	lsrs	r3, r3, #4
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	f003 030f 	and.w	r3, r3, #15
 800dae2:	693a      	ldr	r2, [r7, #16]
 800dae4:	4413      	add	r3, r2
 800dae6:	781a      	ldrb	r2, [r3, #0]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	68b9      	ldr	r1, [r7, #8]
 800daec:	4610      	mov	r0, r2
 800daee:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	4413      	add	r3, r2
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	f003 030f 	and.w	r3, r3, #15
 800dafc:	693a      	ldr	r2, [r7, #16]
 800dafe:	4413      	add	r3, r2
 800db00:	781a      	ldrb	r2, [r3, #0]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	68b9      	ldr	r1, [r7, #8]
 800db06:	4610      	mov	r0, r2
 800db08:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	3301      	adds	r3, #1
 800db0e:	61fb      	str	r3, [r7, #28]
 800db10:	69fa      	ldr	r2, [r7, #28]
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	429a      	cmp	r2, r3
 800db16:	d3dc      	bcc.n	800dad2 <mg_print_hex+0x32>
  }
  return 2 * bl;
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	005b      	lsls	r3, r3, #1
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3720      	adds	r7, #32
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	08025d30 	.word	0x08025d30

0800db28 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 800db28:	b580      	push	{r7, lr}
 800db2a:	b086      	sub	sp, #24
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	1d19      	adds	r1, r3, #4
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	6011      	str	r1, [r2, #0]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	1d19      	adds	r1, r3, #4
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	6011      	str	r1, [r2, #0]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d109      	bne.n	800db6a <mg_print_esc+0x42>
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d004      	beq.n	800db66 <mg_print_esc+0x3e>
 800db5c:	6938      	ldr	r0, [r7, #16]
 800db5e:	f7f2 fc1f 	bl	80003a0 <strlen>
 800db62:	4603      	mov	r3, r0
 800db64:	e000      	b.n	800db68 <mg_print_esc+0x40>
 800db66:	2300      	movs	r3, #0
 800db68:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	693a      	ldr	r2, [r7, #16]
 800db6e:	68b9      	ldr	r1, [r7, #8]
 800db70:	68f8      	ldr	r0, [r7, #12]
 800db72:	f7ff ff52 	bl	800da1a <qcpy>
 800db76:	4603      	mov	r3, r0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3718      	adds	r7, #24
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 800db88:	2300      	movs	r3, #0
 800db8a:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 800db8c:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	4413      	add	r3, r2
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	689a      	ldr	r2, [r3, #8]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	4413      	add	r3, r2
 800dba6:	1d1a      	adds	r2, r3, #4
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d906      	bls.n	800dbbe <mg_queue_read_len+0x3e>
 800dbb0:	4b05      	ldr	r3, [pc, #20]	@ (800dbc8 <mg_queue_read_len+0x48>)
 800dbb2:	4a06      	ldr	r2, [pc, #24]	@ (800dbcc <mg_queue_read_len+0x4c>)
 800dbb4:	f641 21c9 	movw	r1, #6857	@ 0x1ac9
 800dbb8:	4805      	ldr	r0, [pc, #20]	@ (800dbd0 <mg_queue_read_len+0x50>)
 800dbba:	f012 fe3f 	bl	802083c <__assert_func>
  return n;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3710      	adds	r7, #16
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	08027200 	.word	0x08027200
 800dbcc:	080290d4 	.word	0x080290d4
 800dbd0:	0802597c 	.word	0x0802597c

0800dbd4 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 800dbd4:	b480      	push	{r7}
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	4413      	add	r3, r2
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 800dbf0:	f3bf 8f5b 	dmb	ish
}
 800dbf4:	bf00      	nop
 800dbf6:	3714      	adds	r7, #20
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b086      	sub	sp, #24
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	617b      	str	r3, [r7, #20]
 800dc10:	2308      	movs	r3, #8
 800dc12:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	68da      	ldr	r2, [r3, #12]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d312      	bcc.n	800dc46 <mg_queue_book+0x46>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	68da      	ldr	r2, [r3, #12]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	441a      	add	r2, r3
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	441a      	add	r2, r3
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d808      	bhi.n	800dc46 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	685a      	ldr	r2, [r3, #4]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	1ad2      	subs	r2, r2, r3
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	617b      	str	r3, [r7, #20]
 800dc44:	e011      	b.n	800dc6a <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	68da      	ldr	r2, [r3, #12]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d30b      	bcc.n	800dc6a <mg_queue_book+0x6a>
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	693a      	ldr	r2, [r7, #16]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d206      	bcs.n	800dc6a <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	68f8      	ldr	r0, [r7, #12]
 800dc60:	f7ff ffb8 	bl	800dbd4 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2200      	movs	r2, #0
 800dc68:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	68da      	ldr	r2, [r3, #12]
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	441a      	add	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	441a      	add	r2, r3
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d207      	bcs.n	800dc8e <mg_queue_book+0x8e>
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	689a      	ldr	r2, [r3, #8]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	1ad2      	subs	r2, r2, r3
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	1ad3      	subs	r3, r2, r3
 800dc8c:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d007      	beq.n	800dca4 <mg_queue_book+0xa4>
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	3304      	adds	r3, #4
 800dc9e:	441a      	add	r2, r3
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	601a      	str	r2, [r3, #0]
  return space;
 800dca4:	697b      	ldr	r3, [r7, #20]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3718      	adds	r7, #24
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
	...

0800dcb0 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	689a      	ldr	r2, [r3, #8]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d013      	beq.n	800dcf2 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f7ff ff58 	bl	800db80 <mg_queue_read_len>
 800dcd0:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d10c      	bne.n	800dcf2 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68da      	ldr	r2, [r3, #12]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d903      	bls.n	800dcf2 <mg_queue_next+0x42>
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f7ff ff48 	bl	800db80 <mg_queue_read_len>
 800dcf0:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d007      	beq.n	800dd08 <mg_queue_next+0x58>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	3304      	adds	r3, #4
 800dd02:	441a      	add	r2, r3
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	689a      	ldr	r2, [r3, #8]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	441a      	add	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d906      	bls.n	800dd26 <mg_queue_next+0x76>
 800dd18:	4b05      	ldr	r3, [pc, #20]	@ (800dd30 <mg_queue_next+0x80>)
 800dd1a:	4a06      	ldr	r2, [pc, #24]	@ (800dd34 <mg_queue_next+0x84>)
 800dd1c:	f641 21ea 	movw	r1, #6890	@ 0x1aea
 800dd20:	4805      	ldr	r0, [pc, #20]	@ (800dd38 <mg_queue_next+0x88>)
 800dd22:	f012 fd8b 	bl	802083c <__assert_func>
  return len;
 800dd26:	68fb      	ldr	r3, [r7, #12]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	08027224 	.word	0x08027224
 800dd34:	080290e8 	.word	0x080290e8
 800dd38:	0802597c 	.word	0x0802597c

0800dd3c <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d106      	bne.n	800dd5a <mg_queue_add+0x1e>
 800dd4c:	4b13      	ldr	r3, [pc, #76]	@ (800dd9c <mg_queue_add+0x60>)
 800dd4e:	4a14      	ldr	r2, [pc, #80]	@ (800dda0 <mg_queue_add+0x64>)
 800dd50:	f641 21ef 	movw	r1, #6895	@ 0x1aef
 800dd54:	4813      	ldr	r0, [pc, #76]	@ (800dda4 <mg_queue_add+0x68>)
 800dd56:	f012 fd71 	bl	802083c <__assert_func>
  mg_queue_write_len(q, len);
 800dd5a:	6839      	ldr	r1, [r7, #0]
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f7ff ff39 	bl	800dbd4 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	68da      	ldr	r2, [r3, #12]
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	4413      	add	r3, r2
 800dd6a:	f103 0208 	add.w	r2, r3, #8
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d906      	bls.n	800dd84 <mg_queue_add+0x48>
 800dd76:	4b0c      	ldr	r3, [pc, #48]	@ (800dda8 <mg_queue_add+0x6c>)
 800dd78:	4a09      	ldr	r2, [pc, #36]	@ (800dda0 <mg_queue_add+0x64>)
 800dd7a:	f641 21f1 	movw	r1, #6897	@ 0x1af1
 800dd7e:	4809      	ldr	r0, [pc, #36]	@ (800dda4 <mg_queue_add+0x68>)
 800dd80:	f012 fd5c 	bl	802083c <__assert_func>
  q->head += len + sizeof(uint32_t);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	68da      	ldr	r2, [r3, #12]
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	1d1a      	adds	r2, r3, #4
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	60da      	str	r2, [r3, #12]
}
 800dd92:	bf00      	nop
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	08027240 	.word	0x08027240
 800dda0:	080290f8 	.word	0x080290f8
 800dda4:	0802597c 	.word	0x0802597c
 800dda8:	08027248 	.word	0x08027248

0800ddac <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	689a      	ldr	r2, [r3, #8]
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	1d1a      	adds	r2, r3, #4
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	1d1a      	adds	r2, r3, #4
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d906      	bls.n	800dde0 <mg_queue_del+0x34>
 800ddd2:	4b05      	ldr	r3, [pc, #20]	@ (800dde8 <mg_queue_del+0x3c>)
 800ddd4:	4a05      	ldr	r2, [pc, #20]	@ (800ddec <mg_queue_del+0x40>)
 800ddd6:	f641 21f7 	movw	r1, #6903	@ 0x1af7
 800ddda:	4805      	ldr	r0, [pc, #20]	@ (800ddf0 <mg_queue_del+0x44>)
 800dddc:	f012 fd2e 	bl	802083c <__assert_func>
}
 800dde0:	bf00      	nop
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	08027278 	.word	0x08027278
 800ddec:	08029108 	.word	0x08029108
 800ddf0:	0802597c 	.word	0x0802597c

0800ddf4 <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 800de02:	6879      	ldr	r1, [r7, #4]
 800de04:	f04f 0200 	mov.w	r2, #0
 800de08:	f04f 0300 	mov.w	r3, #0
 800de0c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4a0e      	ldr	r2, [pc, #56]	@ (800de4c <mg_sha256_init+0x58>)
 800de14:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4a0d      	ldr	r2, [pc, #52]	@ (800de50 <mg_sha256_init+0x5c>)
 800de1a:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a0d      	ldr	r2, [pc, #52]	@ (800de54 <mg_sha256_init+0x60>)
 800de20:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4a0c      	ldr	r2, [pc, #48]	@ (800de58 <mg_sha256_init+0x64>)
 800de26:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a0c      	ldr	r2, [pc, #48]	@ (800de5c <mg_sha256_init+0x68>)
 800de2c:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a0b      	ldr	r2, [pc, #44]	@ (800de60 <mg_sha256_init+0x6c>)
 800de32:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4a0b      	ldr	r2, [pc, #44]	@ (800de64 <mg_sha256_init+0x70>)
 800de38:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4a0a      	ldr	r2, [pc, #40]	@ (800de68 <mg_sha256_init+0x74>)
 800de3e:	61da      	str	r2, [r3, #28]
}
 800de40:	bf00      	nop
 800de42:	370c      	adds	r7, #12
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr
 800de4c:	6a09e667 	.word	0x6a09e667
 800de50:	bb67ae85 	.word	0xbb67ae85
 800de54:	3c6ef372 	.word	0x3c6ef372
 800de58:	a54ff53a 	.word	0xa54ff53a
 800de5c:	510e527f 	.word	0x510e527f
 800de60:	9b05688c 	.word	0x9b05688c
 800de64:	1f83d9ab 	.word	0x1f83d9ab
 800de68:	5be0cd19 	.word	0x5be0cd19

0800de6c <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 800de6c:	b480      	push	{r7}
 800de6e:	b0cf      	sub	sp, #316	@ 0x13c
 800de70:	af00      	add	r7, sp, #0
 800de72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800de76:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800de7a:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 800de7c:	2300      	movs	r3, #0
 800de7e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800de82:	2300      	movs	r3, #0
 800de84:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800de88:	e043      	b.n	800df12 <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800de8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800de8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800de98:	4413      	add	r3, r2
 800de9a:	332c      	adds	r3, #44	@ 0x2c
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 800dea0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dea4:	3301      	adds	r3, #1
 800dea6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800deaa:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800deae:	6809      	ldr	r1, [r1, #0]
 800deb0:	440b      	add	r3, r1
 800deb2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800deb6:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800deb8:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 800deba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800debe:	3302      	adds	r3, #2
 800dec0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800dec4:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800dec8:	6809      	ldr	r1, [r1, #0]
 800deca:	440b      	add	r3, r1
 800decc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ded0:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 800ded2:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 800ded4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800ded8:	3203      	adds	r2, #3
 800deda:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800dede:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800dee2:	6809      	ldr	r1, [r1, #0]
 800dee4:	440a      	add	r2, r1
 800dee6:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800deea:	ea43 0102 	orr.w	r1, r3, r2
 800deee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800def2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800def6:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800defa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 800defe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800df02:	3301      	adds	r3, #1
 800df04:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800df08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800df0c:	3304      	adds	r3, #4
 800df0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800df12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800df16:	2b0f      	cmp	r3, #15
 800df18:	ddb7      	ble.n	800de8a <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 800df1a:	e069      	b.n	800dff0 <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 800df1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800df20:	1e9a      	subs	r2, r3, #2
 800df22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df26:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800df2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df2e:	ea4f 4273 	mov.w	r2, r3, ror #17
 800df32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800df36:	1e99      	subs	r1, r3, #2
 800df38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df3c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800df40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df44:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800df48:	405a      	eors	r2, r3
 800df4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800df4e:	1e99      	subs	r1, r3, #2
 800df50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df54:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800df58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df5c:	0a9b      	lsrs	r3, r3, #10
 800df5e:	405a      	eors	r2, r3
 800df60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800df64:	1fd9      	subs	r1, r3, #7
 800df66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800df6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df72:	441a      	add	r2, r3
 800df74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800df78:	f1a3 010f 	sub.w	r1, r3, #15
 800df7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df80:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800df84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df88:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800df8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800df90:	f1a3 000f 	sub.w	r0, r3, #15
 800df94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800df98:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800df9c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800dfa0:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800dfa4:	4059      	eors	r1, r3
 800dfa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dfaa:	f1a3 000f 	sub.w	r0, r3, #15
 800dfae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dfb2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dfb6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800dfba:	08db      	lsrs	r3, r3, #3
 800dfbc:	404b      	eors	r3, r1
 800dfbe:	441a      	add	r2, r3
 800dfc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dfc4:	f1a3 0110 	sub.w	r1, r3, #16
 800dfc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dfcc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dfd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfd4:	18d1      	adds	r1, r2, r3
 800dfd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dfda:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dfde:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800dfe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 800dfe6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dfea:	3301      	adds	r3, #1
 800dfec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800dff0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dff4:	2b3f      	cmp	r3, #63	@ 0x3f
 800dff6:	dd91      	ble.n	800df1c <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 800dff8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dffc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 800e008:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e00c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 800e018:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e01c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 800e028:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e02c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 800e038:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e03c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	691b      	ldr	r3, [r3, #16]
 800e044:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 800e048:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e04c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	695b      	ldr	r3, [r3, #20]
 800e054:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 800e058:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e05c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	699b      	ldr	r3, [r3, #24]
 800e064:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 800e068:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e06c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	69db      	ldr	r3, [r3, #28]
 800e074:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 800e078:	2300      	movs	r3, #0
 800e07a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800e07e:	e078      	b.n	800e172 <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 800e080:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e084:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800e088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e08c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800e090:	405a      	eors	r2, r3
 800e092:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e096:	ea4f 6373 	mov.w	r3, r3, ror #25
 800e09a:	405a      	eors	r2, r3
 800e09c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e0a0:	441a      	add	r2, r3
 800e0a2:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 800e0a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e0aa:	4019      	ands	r1, r3
 800e0ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e0b0:	43d8      	mvns	r0, r3
 800e0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0b6:	4003      	ands	r3, r0
 800e0b8:	404b      	eors	r3, r1
 800e0ba:	441a      	add	r2, r3
 800e0bc:	496e      	ldr	r1, [pc, #440]	@ (800e278 <mg_sha256_chunk+0x40c>)
 800e0be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e0c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e0c6:	441a      	add	r2, r3
 800e0c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e0cc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e0d0:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800e0d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e0d8:	4413      	add	r3, r2
 800e0da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 800e0de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e0e2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800e0e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e0ea:	ea4f 3373 	mov.w	r3, r3, ror #13
 800e0ee:	405a      	eors	r2, r3
 800e0f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e0f4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800e0f8:	405a      	eors	r2, r3
 800e0fa:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800e0fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e102:	4059      	eors	r1, r3
 800e104:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e108:	4019      	ands	r1, r3
 800e10a:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800e10e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e112:	4003      	ands	r3, r0
 800e114:	404b      	eors	r3, r1
 800e116:	4413      	add	r3, r2
 800e118:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 800e11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e120:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 800e124:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e128:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 800e12c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e130:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 800e134:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e138:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e13c:	4413      	add	r3, r2
 800e13e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 800e142:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e146:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 800e14a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e14e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 800e152:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e156:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 800e15a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800e15e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800e162:	4413      	add	r3, r2
 800e164:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 800e168:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e16c:	3301      	adds	r3, #1
 800e16e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800e172:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e176:	2b3f      	cmp	r3, #63	@ 0x3f
 800e178:	dd82      	ble.n	800e080 <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 800e17a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e17e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e18a:	441a      	add	r2, r3
 800e18c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e190:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 800e198:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e19c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e1a8:	441a      	add	r2, r3
 800e1aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e1ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 800e1b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e1ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	689a      	ldr	r2, [r3, #8]
 800e1c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e1c6:	441a      	add	r2, r3
 800e1c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e1cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 800e1d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e1d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	68da      	ldr	r2, [r3, #12]
 800e1e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e1e4:	441a      	add	r2, r3
 800e1e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e1ea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 800e1f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e1f6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	691a      	ldr	r2, [r3, #16]
 800e1fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e202:	441a      	add	r2, r3
 800e204:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e208:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 800e210:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e214:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	695a      	ldr	r2, [r3, #20]
 800e21c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e220:	441a      	add	r2, r3
 800e222:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e226:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 800e22e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e232:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	699a      	ldr	r2, [r3, #24]
 800e23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e23e:	441a      	add	r2, r3
 800e240:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e244:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 800e24c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e250:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	69da      	ldr	r2, [r3, #28]
 800e258:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e25c:	441a      	add	r2, r3
 800e25e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e262:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	61da      	str	r2, [r3, #28]
}
 800e26a:	bf00      	nop
 800e26c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr
 800e278:	08028cb4 	.word	0x08028cb4

0800e27c <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 800e27c:	b5b0      	push	{r4, r5, r7, lr}
 800e27e:	b086      	sub	sp, #24
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 800e288:	2300      	movs	r3, #0
 800e28a:	617b      	str	r3, [r7, #20]
 800e28c:	e026      	b.n	800e2dc <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	441a      	add	r2, r3
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e298:	7811      	ldrb	r1, [r2, #0]
 800e29a:	68fa      	ldr	r2, [r7, #12]
 800e29c:	4413      	add	r3, r2
 800e29e:	460a      	mov	r2, r1
 800e2a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2a8:	1c5a      	adds	r2, r3, #1
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	629a      	str	r2, [r3, #40]	@ 0x28
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2b2:	2b40      	cmp	r3, #64	@ 0x40
 800e2b4:	d10f      	bne.n	800e2d6 <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f7ff fdd8 	bl	800de6c <mg_sha256_chunk>
      ctx->bits += 512;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2c2:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 800e2c6:	f143 0500 	adc.w	r5, r3, #0
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	617b      	str	r3, [r7, #20]
 800e2dc:	697a      	ldr	r2, [r7, #20]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d3d4      	bcc.n	800e28e <mg_sha256_update+0x12>
    }
  }
}
 800e2e4:	bf00      	nop
 800e2e6:	bf00      	nop
 800e2e8:	3718      	adds	r7, #24
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bdb0      	pop	{r4, r5, r7, pc}

0800e2ee <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 800e2ee:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e2f2:	b084      	sub	sp, #16
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2fe:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2b37      	cmp	r3, #55	@ 0x37
 800e304:	d814      	bhi.n	800e330 <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	1c5a      	adds	r2, r3, #1
 800e30a:	60fa      	str	r2, [r7, #12]
 800e30c:	683a      	ldr	r2, [r7, #0]
 800e30e:	4413      	add	r3, r2
 800e310:	2280      	movs	r2, #128	@ 0x80
 800e312:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 800e316:	e007      	b.n	800e328 <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	60fa      	str	r2, [r7, #12]
 800e31e:	683a      	ldr	r2, [r7, #0]
 800e320:	4413      	add	r3, r2
 800e322:	2200      	movs	r2, #0
 800e324:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2b37      	cmp	r3, #55	@ 0x37
 800e32c:	d9f4      	bls.n	800e318 <mg_sha256_final+0x2a>
 800e32e:	e01d      	b.n	800e36c <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	1c5a      	adds	r2, r3, #1
 800e334:	60fa      	str	r2, [r7, #12]
 800e336:	683a      	ldr	r2, [r7, #0]
 800e338:	4413      	add	r3, r2
 800e33a:	2280      	movs	r2, #128	@ 0x80
 800e33c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 800e340:	e007      	b.n	800e352 <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	1c5a      	adds	r2, r3, #1
 800e346:	60fa      	str	r2, [r7, #12]
 800e348:	683a      	ldr	r2, [r7, #0]
 800e34a:	4413      	add	r3, r2
 800e34c:	2200      	movs	r2, #0
 800e34e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2b3f      	cmp	r3, #63	@ 0x3f
 800e356:	d9f4      	bls.n	800e342 <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 800e358:	6838      	ldr	r0, [r7, #0]
 800e35a:	f7ff fd87 	bl	800de6c <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	332c      	adds	r3, #44	@ 0x2c
 800e362:	2238      	movs	r2, #56	@ 0x38
 800e364:	2100      	movs	r1, #0
 800e366:	4618      	mov	r0, r3
 800e368:	f013 fd3c 	bl	8021de4 <memset>
  }

  ctx->bits += ctx->len * 8;
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e372:	6839      	ldr	r1, [r7, #0]
 800e374:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800e376:	00c9      	lsls	r1, r1, #3
 800e378:	2000      	movs	r0, #0
 800e37a:	460c      	mov	r4, r1
 800e37c:	4605      	mov	r5, r0
 800e37e:	eb12 0804 	adds.w	r8, r2, r4
 800e382:	eb43 0905 	adc.w	r9, r3, r5
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e392:	b2d2      	uxtb	r2, r2
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e3a0:	f04f 0200 	mov.w	r2, #0
 800e3a4:	f04f 0300 	mov.w	r3, #0
 800e3a8:	0a02      	lsrs	r2, r0, #8
 800e3aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e3ae:	0a0b      	lsrs	r3, r1, #8
 800e3b0:	b2d2      	uxtb	r2, r2
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e3be:	f04f 0200 	mov.w	r2, #0
 800e3c2:	f04f 0300 	mov.w	r3, #0
 800e3c6:	0c02      	lsrs	r2, r0, #16
 800e3c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e3cc:	0c0b      	lsrs	r3, r1, #16
 800e3ce:	b2d2      	uxtb	r2, r2
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e3dc:	f04f 0200 	mov.w	r2, #0
 800e3e0:	f04f 0300 	mov.w	r3, #0
 800e3e4:	0e02      	lsrs	r2, r0, #24
 800e3e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e3ea:	0e0b      	lsrs	r3, r1, #24
 800e3ec:	b2d2      	uxtb	r2, r2
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e3fa:	f04f 0200 	mov.w	r2, #0
 800e3fe:	f04f 0300 	mov.w	r3, #0
 800e402:	000a      	movs	r2, r1
 800e404:	2300      	movs	r3, #0
 800e406:	b2d2      	uxtb	r2, r2
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e414:	f04f 0200 	mov.w	r2, #0
 800e418:	f04f 0300 	mov.w	r3, #0
 800e41c:	0a0a      	lsrs	r2, r1, #8
 800e41e:	2300      	movs	r3, #0
 800e420:	b2d2      	uxtb	r2, r2
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e42e:	f04f 0200 	mov.w	r2, #0
 800e432:	f04f 0300 	mov.w	r3, #0
 800e436:	0c0a      	lsrs	r2, r1, #16
 800e438:	2300      	movs	r3, #0
 800e43a:	b2d2      	uxtb	r2, r2
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e448:	f04f 0200 	mov.w	r2, #0
 800e44c:	f04f 0300 	mov.w	r3, #0
 800e450:	0e0a      	lsrs	r2, r1, #24
 800e452:	2300      	movs	r3, #0
 800e454:	b2d2      	uxtb	r2, r2
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 800e45c:	6838      	ldr	r0, [r7, #0]
 800e45e:	f7ff fd05 	bl	800de6c <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 800e462:	2300      	movs	r3, #0
 800e464:	60fb      	str	r3, [r7, #12]
 800e466:	e071      	b.n	800e54c <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f1c3 0303 	rsb	r3, r3, #3
 800e472:	00db      	lsls	r3, r3, #3
 800e474:	fa22 f103 	lsr.w	r1, r2, r3
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	4413      	add	r3, r2
 800e47e:	b2ca      	uxtb	r2, r1
 800e480:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	685a      	ldr	r2, [r3, #4]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f1c3 0303 	rsb	r3, r3, #3
 800e48c:	00db      	lsls	r3, r3, #3
 800e48e:	fa22 f103 	lsr.w	r1, r2, r3
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	3304      	adds	r3, #4
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	4413      	add	r3, r2
 800e49a:	b2ca      	uxtb	r2, r1
 800e49c:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	689a      	ldr	r2, [r3, #8]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f1c3 0303 	rsb	r3, r3, #3
 800e4a8:	00db      	lsls	r3, r3, #3
 800e4aa:	fa22 f103 	lsr.w	r1, r2, r3
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	3308      	adds	r3, #8
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	b2ca      	uxtb	r2, r1
 800e4b8:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	68da      	ldr	r2, [r3, #12]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f1c3 0303 	rsb	r3, r3, #3
 800e4c4:	00db      	lsls	r3, r3, #3
 800e4c6:	fa22 f103 	lsr.w	r1, r2, r3
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	330c      	adds	r3, #12
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	b2ca      	uxtb	r2, r1
 800e4d4:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	691a      	ldr	r2, [r3, #16]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f1c3 0303 	rsb	r3, r3, #3
 800e4e0:	00db      	lsls	r3, r3, #3
 800e4e2:	fa22 f103 	lsr.w	r1, r2, r3
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3310      	adds	r3, #16
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	b2ca      	uxtb	r2, r1
 800e4f0:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	695a      	ldr	r2, [r3, #20]
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f1c3 0303 	rsb	r3, r3, #3
 800e4fc:	00db      	lsls	r3, r3, #3
 800e4fe:	fa22 f103 	lsr.w	r1, r2, r3
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3314      	adds	r3, #20
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	4413      	add	r3, r2
 800e50a:	b2ca      	uxtb	r2, r1
 800e50c:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	699a      	ldr	r2, [r3, #24]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f1c3 0303 	rsb	r3, r3, #3
 800e518:	00db      	lsls	r3, r3, #3
 800e51a:	fa22 f103 	lsr.w	r1, r2, r3
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	3318      	adds	r3, #24
 800e522:	687a      	ldr	r2, [r7, #4]
 800e524:	4413      	add	r3, r2
 800e526:	b2ca      	uxtb	r2, r1
 800e528:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	69da      	ldr	r2, [r3, #28]
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f1c3 0303 	rsb	r3, r3, #3
 800e534:	00db      	lsls	r3, r3, #3
 800e536:	fa22 f103 	lsr.w	r1, r2, r3
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	331c      	adds	r3, #28
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	4413      	add	r3, r2
 800e542:	b2ca      	uxtb	r2, r1
 800e544:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	3301      	adds	r3, #1
 800e54a:	60fb      	str	r3, [r7, #12]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2b03      	cmp	r3, #3
 800e550:	d98a      	bls.n	800e468 <mg_sha256_final+0x17a>
  }
}
 800e552:	bf00      	nop
 800e554:	bf00      	nop
 800e556:	3710      	adds	r7, #16
 800e558:	46bd      	mov	sp, r7
 800e55a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e55e <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 800e55e:	b590      	push	{r4, r7, lr}
 800e560:	b0d3      	sub	sp, #332	@ 0x14c
 800e562:	af00      	add	r7, sp, #0
 800e564:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 800e568:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 800e56c:	6020      	str	r0, [r4, #0]
 800e56e:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 800e572:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 800e576:	6001      	str	r1, [r0, #0]
 800e578:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800e57c:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 800e580:	600a      	str	r2, [r1, #0]
 800e582:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800e586:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 800e58a:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 800e58c:	2300      	movs	r3, #0
 800e58e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e592:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800e596:	223c      	movs	r2, #60	@ 0x3c
 800e598:	2100      	movs	r1, #0
 800e59a:	4618      	mov	r0, r3
 800e59c:	f013 fc22 	bl	8021de4 <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 800e5a0:	f107 0310 	add.w	r3, r7, #16
 800e5a4:	2240      	movs	r2, #64	@ 0x40
 800e5a6:	2136      	movs	r1, #54	@ 0x36
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f013 fc1b 	bl	8021de4 <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 800e5ae:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e5b2:	2240      	movs	r2, #64	@ 0x40
 800e5b4:	215c      	movs	r1, #92	@ 0x5c
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f013 fc14 	bl	8021de4 <memset>
  if (keysz < 64) {
 800e5bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e5c0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b3f      	cmp	r3, #63	@ 0x3f
 800e5c8:	d815      	bhi.n	800e5f6 <mg_hmac_sha256+0x98>
    if (keysz > 0) memmove(k, key, keysz);
 800e5ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e5ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d029      	beq.n	800e62c <mg_hmac_sha256+0xce>
 800e5d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e5dc:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800e5e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e5e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800e5e8:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 800e5ec:	6812      	ldr	r2, [r2, #0]
 800e5ee:	6819      	ldr	r1, [r3, #0]
 800e5f0:	f013 fbde 	bl	8021db0 <memmove>
 800e5f4:	e01a      	b.n	800e62c <mg_hmac_sha256+0xce>
  } else {
    mg_sha256_init(&ctx);
 800e5f6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7ff fbfa 	bl	800ddf4 <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 800e600:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e604:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800e608:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e60c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800e610:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800e614:	6812      	ldr	r2, [r2, #0]
 800e616:	6819      	ldr	r1, [r3, #0]
 800e618:	f7ff fe30 	bl	800e27c <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 800e61c:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800e620:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800e624:	4611      	mov	r1, r2
 800e626:	4618      	mov	r0, r3
 800e628:	f7ff fe61 	bl	800e2ee <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 800e62c:	2300      	movs	r3, #0
 800e62e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800e632:	e032      	b.n	800e69a <mg_hmac_sha256+0x13c>
    i_pad[i] ^= k[i];
 800e634:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e638:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800e63c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e640:	4413      	add	r3, r2
 800e642:	781a      	ldrb	r2, [r3, #0]
 800e644:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800e648:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e64c:	440b      	add	r3, r1
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	4053      	eors	r3, r2
 800e652:	b2d9      	uxtb	r1, r3
 800e654:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e658:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800e65c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e660:	4413      	add	r3, r2
 800e662:	460a      	mov	r2, r1
 800e664:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 800e666:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e66a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e66e:	4413      	add	r3, r2
 800e670:	781a      	ldrb	r2, [r3, #0]
 800e672:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800e676:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e67a:	440b      	add	r3, r1
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	4053      	eors	r3, r2
 800e680:	b2d9      	uxtb	r1, r3
 800e682:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800e686:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e68a:	4413      	add	r3, r2
 800e68c:	460a      	mov	r2, r1
 800e68e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 800e690:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e694:	3301      	adds	r3, #1
 800e696:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800e69a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e69e:	2b3f      	cmp	r3, #63	@ 0x3f
 800e6a0:	d9c8      	bls.n	800e634 <mg_hmac_sha256+0xd6>
  }
  mg_sha256_init(&ctx);
 800e6a2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7ff fba4 	bl	800ddf4 <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 800e6ac:	f107 0110 	add.w	r1, r7, #16
 800e6b0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e6b4:	2240      	movs	r2, #64	@ 0x40
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7ff fde0 	bl	800e27c <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 800e6bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e6c0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800e6c4:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800e6c8:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800e6cc:	6819      	ldr	r1, [r3, #0]
 800e6ce:	f7ff fdd5 	bl	800e27c <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 800e6d2:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800e6d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e6da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800e6de:	4611      	mov	r1, r2
 800e6e0:	6818      	ldr	r0, [r3, #0]
 800e6e2:	f7ff fe04 	bl	800e2ee <mg_sha256_final>
  mg_sha256_init(&ctx);
 800e6e6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7ff fb82 	bl	800ddf4 <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 800e6f0:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800e6f4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800e6f8:	2240      	movs	r2, #64	@ 0x40
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7ff fdbe 	bl	800e27c <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 800e700:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e704:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800e708:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800e70c:	2220      	movs	r2, #32
 800e70e:	6819      	ldr	r1, [r3, #0]
 800e710:	f7ff fdb4 	bl	800e27c <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 800e714:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800e718:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e71c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800e720:	4611      	mov	r1, r2
 800e722:	6818      	ldr	r0, [r3, #0]
 800e724:	f7ff fde3 	bl	800e2ee <mg_sha256_final>
}
 800e728:	bf00      	nop
 800e72a:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd90      	pop	{r4, r7, pc}
	...

0800e734 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 800e734:	b5b0      	push	{r4, r5, r7, lr}
 800e736:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 800e738:	f7f2 fc22 	bl	8000f80 <mg_millis>
 800e73c:	4b05      	ldr	r3, [pc, #20]	@ (800e754 <mg_now+0x20>)
 800e73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e742:	1884      	adds	r4, r0, r2
 800e744:	eb41 0503 	adc.w	r5, r1, r3
 800e748:	4622      	mov	r2, r4
 800e74a:	462b      	mov	r3, r5
}
 800e74c:	4610      	mov	r0, r2
 800e74e:	4619      	mov	r1, r3
 800e750:	bdb0      	pop	{r4, r5, r7, pc}
 800e752:	bf00      	nop
 800e754:	24000d98 	.word	0x24000d98

0800e758 <gettimestamp>:

static int64_t gettimestamp(const uint32_t *data) {
 800e758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e75c:	b086      	sub	sp, #24
 800e75e:	af00      	add	r7, sp, #0
 800e760:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4618      	mov	r0, r3
 800e768:	f009 f94c 	bl	8017a04 <mg_ntohl>
 800e76c:	6178      	str	r0, [r7, #20]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	3304      	adds	r3, #4
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4618      	mov	r0, r3
 800e776:	f009 f945 	bl	8017a04 <mg_ntohl>
 800e77a:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d003      	beq.n	800e78a <gettimestamp+0x32>
 800e782:	697a      	ldr	r2, [r7, #20]
 800e784:	4b2e      	ldr	r3, [pc, #184]	@ (800e840 <gettimestamp+0xe8>)
 800e786:	4413      	add	r3, r2
 800e788:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	2200      	movs	r2, #0
 800e78e:	4698      	mov	r8, r3
 800e790:	4691      	mov	r9, r2
 800e792:	4642      	mov	r2, r8
 800e794:	464b      	mov	r3, r9
 800e796:	f04f 0000 	mov.w	r0, #0
 800e79a:	f04f 0100 	mov.w	r1, #0
 800e79e:	0159      	lsls	r1, r3, #5
 800e7a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e7a4:	0150      	lsls	r0, r2, #5
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	ebb2 0408 	subs.w	r4, r2, r8
 800e7ae:	eb63 0509 	sbc.w	r5, r3, r9
 800e7b2:	f04f 0200 	mov.w	r2, #0
 800e7b6:	f04f 0300 	mov.w	r3, #0
 800e7ba:	00ab      	lsls	r3, r5, #2
 800e7bc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e7c0:	00a2      	lsls	r2, r4, #2
 800e7c2:	4614      	mov	r4, r2
 800e7c4:	461d      	mov	r5, r3
 800e7c6:	eb14 0a08 	adds.w	sl, r4, r8
 800e7ca:	eb45 0b09 	adc.w	fp, r5, r9
 800e7ce:	f04f 0200 	mov.w	r2, #0
 800e7d2:	f04f 0300 	mov.w	r3, #0
 800e7d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e7da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e7de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e7e2:	4692      	mov	sl, r2
 800e7e4:	469b      	mov	fp, r3
 800e7e6:	4654      	mov	r4, sl
 800e7e8:	465d      	mov	r5, fp
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	ee07 3a90 	vmov	s15, r3
 800e7f0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800e7f4:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 800e830 <gettimestamp+0xd8>
 800e7f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e7fc:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 800e838 <gettimestamp+0xe0>
 800e800:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e804:	ec51 0b17 	vmov	r0, r1, d7
 800e808:	f7f1 fff6 	bl	80007f8 <__aeabi_d2lz>
 800e80c:	4602      	mov	r2, r0
 800e80e:	460b      	mov	r3, r1
 800e810:	18a1      	adds	r1, r4, r2
 800e812:	6039      	str	r1, [r7, #0]
 800e814:	eb45 0303 	adc.w	r3, r5, r3
 800e818:	607b      	str	r3, [r7, #4]
 800e81a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800e81e:	4610      	mov	r0, r2
 800e820:	4619      	mov	r1, r3
 800e822:	3718      	adds	r7, #24
 800e824:	46bd      	mov	sp, r7
 800e826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e82a:	bf00      	nop
 800e82c:	f3af 8000 	nop.w
 800e830:	ffe00000 	.word	0xffe00000
 800e834:	41efffff 	.word	0x41efffff
 800e838:	00000000 	.word	0x00000000
 800e83c:	408f4000 	.word	0x408f4000
 800e840:	7c558180 	.word	0x7c558180

0800e844 <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 800e844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e848:	b096      	sub	sp, #88	@ 0x58
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	61f8      	str	r0, [r7, #28]
 800e84e:	61b9      	str	r1, [r7, #24]
  int64_t epoch_milliseconds = -1;
 800e850:	f04f 32ff 	mov.w	r2, #4294967295
 800e854:	f04f 33ff 	mov.w	r3, #4294967295
 800e858:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  int mode = len > 0 ? buf[0] & 7 : 0;
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d004      	beq.n	800e86c <mg_sntp_parse+0x28>
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	f003 0307 	and.w	r3, r3, #7
 800e86a:	e000      	b.n	800e86e <mg_sntp_parse+0x2a>
 800e86c:	2300      	movs	r3, #0
 800e86e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d006      	beq.n	800e884 <mg_sntp_parse+0x40>
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	08db      	lsrs	r3, r3, #3
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	f003 0307 	and.w	r3, r3, #7
 800e882:	e000      	b.n	800e886 <mg_sntp_parse+0x42>
 800e884:	2300      	movs	r3, #0
 800e886:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (len < 48) {
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e88c:	d810      	bhi.n	800e8b0 <mg_sntp_parse+0x6c>
    MG_ERROR(("%s", "corrupt packet"));
 800e88e:	4b5c      	ldr	r3, [pc, #368]	@ (800ea00 <mg_sntp_parse+0x1bc>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	f340 80ab 	ble.w	800e9ee <mg_sntp_parse+0x1aa>
 800e898:	4b5a      	ldr	r3, [pc, #360]	@ (800ea04 <mg_sntp_parse+0x1c0>)
 800e89a:	f641 5201 	movw	r2, #7425	@ 0x1d01
 800e89e:	495a      	ldr	r1, [pc, #360]	@ (800ea08 <mg_sntp_parse+0x1c4>)
 800e8a0:	2001      	movs	r0, #1
 800e8a2:	f7f9 fb45 	bl	8007f30 <mg_log_prefix>
 800e8a6:	4959      	ldr	r1, [pc, #356]	@ (800ea0c <mg_sntp_parse+0x1c8>)
 800e8a8:	4859      	ldr	r0, [pc, #356]	@ (800ea10 <mg_sntp_parse+0x1cc>)
 800e8aa:	f7f9 fb91 	bl	8007fd0 <mg_log>
 800e8ae:	e09e      	b.n	800e9ee <mg_sntp_parse+0x1aa>
  } else if (mode != 4 && mode != 5) {
 800e8b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8b2:	2b04      	cmp	r3, #4
 800e8b4:	d013      	beq.n	800e8de <mg_sntp_parse+0x9a>
 800e8b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8b8:	2b05      	cmp	r3, #5
 800e8ba:	d010      	beq.n	800e8de <mg_sntp_parse+0x9a>
    MG_ERROR(("%s", "not a server reply"));
 800e8bc:	4b50      	ldr	r3, [pc, #320]	@ (800ea00 <mg_sntp_parse+0x1bc>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f340 8094 	ble.w	800e9ee <mg_sntp_parse+0x1aa>
 800e8c6:	4b4f      	ldr	r3, [pc, #316]	@ (800ea04 <mg_sntp_parse+0x1c0>)
 800e8c8:	f641 5203 	movw	r2, #7427	@ 0x1d03
 800e8cc:	494e      	ldr	r1, [pc, #312]	@ (800ea08 <mg_sntp_parse+0x1c4>)
 800e8ce:	2001      	movs	r0, #1
 800e8d0:	f7f9 fb2e 	bl	8007f30 <mg_log_prefix>
 800e8d4:	494f      	ldr	r1, [pc, #316]	@ (800ea14 <mg_sntp_parse+0x1d0>)
 800e8d6:	484e      	ldr	r0, [pc, #312]	@ (800ea10 <mg_sntp_parse+0x1cc>)
 800e8d8:	f7f9 fb7a 	bl	8007fd0 <mg_log>
 800e8dc:	e087      	b.n	800e9ee <mg_sntp_parse+0x1aa>
  } else if (buf[1] == 0) {
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d10f      	bne.n	800e908 <mg_sntp_parse+0xc4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 800e8e8:	4b45      	ldr	r3, [pc, #276]	@ (800ea00 <mg_sntp_parse+0x1bc>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	dd7e      	ble.n	800e9ee <mg_sntp_parse+0x1aa>
 800e8f0:	4b44      	ldr	r3, [pc, #272]	@ (800ea04 <mg_sntp_parse+0x1c0>)
 800e8f2:	f641 5205 	movw	r2, #7429	@ 0x1d05
 800e8f6:	4944      	ldr	r1, [pc, #272]	@ (800ea08 <mg_sntp_parse+0x1c4>)
 800e8f8:	2001      	movs	r0, #1
 800e8fa:	f7f9 fb19 	bl	8007f30 <mg_log_prefix>
 800e8fe:	4946      	ldr	r1, [pc, #280]	@ (800ea18 <mg_sntp_parse+0x1d4>)
 800e900:	4843      	ldr	r0, [pc, #268]	@ (800ea10 <mg_sntp_parse+0x1cc>)
 800e902:	f7f9 fb65 	bl	8007fd0 <mg_log>
 800e906:	e072      	b.n	800e9ee <mg_sntp_parse+0x1aa>
  } else if (version == 4 || version == 3) {
 800e908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e90a:	2b04      	cmp	r3, #4
 800e90c:	d002      	beq.n	800e914 <mg_sntp_parse+0xd0>
 800e90e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e910:	2b03      	cmp	r3, #3
 800e912:	d15d      	bne.n	800e9d0 <mg_sntp_parse+0x18c>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 800e914:	69fb      	ldr	r3, [r7, #28]
 800e916:	3318      	adds	r3, #24
 800e918:	4618      	mov	r0, r3
 800e91a:	f7ff ff1d 	bl	800e758 <gettimestamp>
 800e91e:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	3320      	adds	r3, #32
 800e926:	4618      	mov	r0, r3
 800e928:	f7ff ff16 	bl	800e758 <gettimestamp>
 800e92c:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	3328      	adds	r3, #40	@ 0x28
 800e934:	4618      	mov	r0, r3
 800e936:	f7ff ff0f 	bl	800e758 <gettimestamp>
 800e93a:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
    int64_t now = (int64_t) mg_millis();
 800e93e:	f7f2 fb1f 	bl	8000f80 <mg_millis>
 800e942:	4602      	mov	r2, r0
 800e944:	460b      	mov	r3, r1
 800e946:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 800e94a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800e94e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e952:	ebb0 0802 	subs.w	r8, r0, r2
 800e956:	eb61 0903 	sbc.w	r9, r1, r3
 800e95a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800e95e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e962:	1a84      	subs	r4, r0, r2
 800e964:	eb61 0503 	sbc.w	r5, r1, r3
 800e968:	ebb8 0304 	subs.w	r3, r8, r4
 800e96c:	60bb      	str	r3, [r7, #8]
 800e96e:	eb69 0305 	sbc.w	r3, r9, r5
 800e972:	60fb      	str	r3, [r7, #12]
 800e974:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e978:	e9c7 3408 	strd	r3, r4, [r7, #32]
    epoch_milliseconds = transmit_time + latency / 2;
 800e97c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e980:	2b00      	cmp	r3, #0
 800e982:	da06      	bge.n	800e992 <mg_sntp_parse+0x14e>
 800e984:	1c51      	adds	r1, r2, #1
 800e986:	6039      	str	r1, [r7, #0]
 800e988:	f143 0300 	adc.w	r3, r3, #0
 800e98c:	607b      	str	r3, [r7, #4]
 800e98e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e992:	f04f 0000 	mov.w	r0, #0
 800e996:	f04f 0100 	mov.w	r1, #0
 800e99a:	0850      	lsrs	r0, r2, #1
 800e99c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800e9a0:	1059      	asrs	r1, r3, #1
 800e9a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e9a6:	eb12 0a00 	adds.w	sl, r2, r0
 800e9aa:	eb43 0b01 	adc.w	fp, r3, r1
 800e9ae:	e9c7 ab14 	strd	sl, fp, [r7, #80]	@ 0x50
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 800e9b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e9b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e9ba:	1a84      	subs	r4, r0, r2
 800e9bc:	613c      	str	r4, [r7, #16]
 800e9be:	eb61 0303 	sbc.w	r3, r1, r3
 800e9c2:	617b      	str	r3, [r7, #20]
 800e9c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e9c8:	4914      	ldr	r1, [pc, #80]	@ (800ea1c <mg_sntp_parse+0x1d8>)
 800e9ca:	e9c1 2300 	strd	r2, r3, [r1]
  } else if (version == 4 || version == 3) {
 800e9ce:	e00e      	b.n	800e9ee <mg_sntp_parse+0x1aa>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 800e9d0:	4b0b      	ldr	r3, [pc, #44]	@ (800ea00 <mg_sntp_parse+0x1bc>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	dd0a      	ble.n	800e9ee <mg_sntp_parse+0x1aa>
 800e9d8:	4b0a      	ldr	r3, [pc, #40]	@ (800ea04 <mg_sntp_parse+0x1c0>)
 800e9da:	f641 5210 	movw	r2, #7440	@ 0x1d10
 800e9de:	490a      	ldr	r1, [pc, #40]	@ (800ea08 <mg_sntp_parse+0x1c4>)
 800e9e0:	2001      	movs	r0, #1
 800e9e2:	f7f9 faa5 	bl	8007f30 <mg_log_prefix>
 800e9e6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e9e8:	480d      	ldr	r0, [pc, #52]	@ (800ea20 <mg_sntp_parse+0x1dc>)
 800e9ea:	f7f9 faf1 	bl	8007fd0 <mg_log>
  }
  return epoch_milliseconds;
 800e9ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
}
 800e9f2:	4610      	mov	r0, r2
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	3758      	adds	r7, #88	@ 0x58
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9fe:	bf00      	nop
 800ea00:	24000240 	.word	0x24000240
 800ea04:	08029118 	.word	0x08029118
 800ea08:	0802597c 	.word	0x0802597c
 800ea0c:	08027350 	.word	0x08027350
 800ea10:	08025d14 	.word	0x08025d14
 800ea14:	08027360 	.word	0x08027360
 800ea18:	08027374 	.word	0x08027374
 800ea1c:	24000d98 	.word	0x24000d98
 800ea20:	08027390 	.word	0x08027390

0800ea24 <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 800ea24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ea28:	b088      	sub	sp, #32
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	60f8      	str	r0, [r7, #12]
 800ea2e:	60b9      	str	r1, [r7, #8]
 800ea30:	607a      	str	r2, [r7, #4]
  uint64_t *expiration_time = (uint64_t *) c->data;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	3388      	adds	r3, #136	@ 0x88
 800ea36:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d10c      	bne.n	800ea58 <sntp_cb+0x34>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 800ea3e:	f7f2 fa9f 	bl	8000f80 <mg_millis>
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800ea4a:	1854      	adds	r4, r2, r1
 800ea4c:	f143 0500 	adc.w	r5, r3, #0
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	e9c3 4500 	strd	r4, r5, [r3]
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) ev_data;
}
 800ea56:	e05d      	b.n	800eb14 <sntp_cb+0xf0>
  } else if (ev == MG_EV_CONNECT) {
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	2b04      	cmp	r3, #4
 800ea5c:	d103      	bne.n	800ea66 <sntp_cb+0x42>
    mg_sntp_request(c);
 800ea5e:	68f8      	ldr	r0, [r7, #12]
 800ea60:	f000 f86a 	bl	800eb38 <mg_sntp_request>
}
 800ea64:	e056      	b.n	800eb14 <sntp_cb+0xf0>
  } else if (ev == MG_EV_READ) {
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	2b07      	cmp	r3, #7
 800ea6a:	d141      	bne.n	800eaf0 <sntp_cb+0xcc>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea74:	4619      	mov	r1, r3
 800ea76:	4610      	mov	r0, r2
 800ea78:	f7ff fee4 	bl	800e844 <mg_sntp_parse>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 800ea84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ea88:	2a01      	cmp	r2, #1
 800ea8a:	f173 0300 	sbcs.w	r3, r3, #0
 800ea8e:	db27      	blt.n	800eae0 <sntp_cb+0xbc>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 800ea90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ea94:	4614      	mov	r4, r2
 800ea96:	461d      	mov	r5, r3
 800ea98:	f7f2 fa72 	bl	8000f80 <mg_millis>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	ebb4 0802 	subs.w	r8, r4, r2
 800eaa4:	eb65 0903 	sbc.w	r9, r5, r3
 800eaa8:	4b1d      	ldr	r3, [pc, #116]	@ (800eb20 <sntp_cb+0xfc>)
 800eaaa:	e9c3 8900 	strd	r8, r9, [r3]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 800eaae:	f107 0310 	add.w	r3, r7, #16
 800eab2:	461a      	mov	r2, r3
 800eab4:	2112      	movs	r1, #18
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f7f3 ff30 	bl	800291c <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 800eabc:	4b19      	ldr	r3, [pc, #100]	@ (800eb24 <sntp_cb+0x100>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2b02      	cmp	r3, #2
 800eac2:	dd0d      	ble.n	800eae0 <sntp_cb+0xbc>
 800eac4:	4b18      	ldr	r3, [pc, #96]	@ (800eb28 <sntp_cb+0x104>)
 800eac6:	f44f 52e9 	mov.w	r2, #7456	@ 0x1d20
 800eaca:	4918      	ldr	r1, [pc, #96]	@ (800eb2c <sntp_cb+0x108>)
 800eacc:	2003      	movs	r0, #3
 800eace:	f7f9 fa2f 	bl	8007f30 <mg_log_prefix>
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ead6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eada:	4815      	ldr	r0, [pc, #84]	@ (800eb30 <sntp_cb+0x10c>)
 800eadc:	f7f9 fa78 	bl	8007fd0 <mg_log>
    c->is_closing = 1;
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800eae6:	f043 0320 	orr.w	r3, r3, #32
 800eaea:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 800eaee:	e011      	b.n	800eb14 <sntp_cb+0xf0>
  } else if (ev == MG_EV_POLL) {
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	d10e      	bne.n	800eb14 <sntp_cb+0xf0>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 800eaf6:	f7f2 fa43 	bl	8000f80 <mg_millis>
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb00:	4282      	cmp	r2, r0
 800eb02:	418b      	sbcs	r3, r1
 800eb04:	d206      	bcs.n	800eb14 <sntp_cb+0xf0>
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800eb0c:	f043 0320 	orr.w	r3, r3, #32
 800eb10:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 800eb14:	bf00      	nop
 800eb16:	3720      	adds	r7, #32
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800eb1e:	bf00      	nop
 800eb20:	24000d98 	.word	0x24000d98
 800eb24:	24000240 	.word	0x24000240
 800eb28:	08029128 	.word	0x08029128
 800eb2c:	0802597c 	.word	0x0802597c
 800eb30:	080273a8 	.word	0x080273a8
 800eb34:	00000000 	.word	0x00000000

0800eb38 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 800eb38:	b590      	push	{r4, r7, lr}
 800eb3a:	b095      	sub	sp, #84	@ 0x54
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800eb46:	f003 0308 	and.w	r3, r3, #8
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d011      	beq.n	800eb74 <mg_sntp_request+0x3c>
    MG_ERROR(("%lu wait until resolved", c->id));
 800eb50:	4b37      	ldr	r3, [pc, #220]	@ (800ec30 <mg_sntp_request+0xf8>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	dd5f      	ble.n	800ec18 <mg_sntp_request+0xe0>
 800eb58:	4b36      	ldr	r3, [pc, #216]	@ (800ec34 <mg_sntp_request+0xfc>)
 800eb5a:	f641 522d 	movw	r2, #7469	@ 0x1d2d
 800eb5e:	4936      	ldr	r1, [pc, #216]	@ (800ec38 <mg_sntp_request+0x100>)
 800eb60:	2001      	movs	r0, #1
 800eb62:	f7f9 f9e5 	bl	8007f30 <mg_log_prefix>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	4833      	ldr	r0, [pc, #204]	@ (800ec3c <mg_sntp_request+0x104>)
 800eb6e:	f7f9 fa2f 	bl	8007fd0 <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 800eb72:	e051      	b.n	800ec18 <mg_sntp_request+0xe0>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 800eb74:	f7f2 fa04 	bl	8000f80 <mg_millis>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    uint8_t buf[48] = {0};
 800eb80:	2300      	movs	r3, #0
 800eb82:	60bb      	str	r3, [r7, #8]
 800eb84:	f107 030c 	add.w	r3, r7, #12
 800eb88:	222c      	movs	r2, #44	@ 0x2c
 800eb8a:	2100      	movs	r1, #0
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f013 f929 	bl	8021de4 <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 800eb92:	f107 0308 	add.w	r3, r7, #8
 800eb96:	3328      	adds	r3, #40	@ 0x28
 800eb98:	647b      	str	r3, [r7, #68]	@ 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 800eb9a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800eb9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eba2:	f04f 0300 	mov.w	r3, #0
 800eba6:	f7f1 fdbf 	bl	8000728 <__aeabi_ldivmod>
 800ebaa:	4610      	mov	r0, r2
 800ebac:	4619      	mov	r1, r3
 800ebae:	f7f1 fd8d 	bl	80006cc <__aeabi_l2d>
 800ebb2:	ec41 0b15 	vmov	d5, r0, r1
 800ebb6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 800ec20 <mg_sntp_request+0xe8>
 800ebba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800ebbe:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 800ec28 <mg_sntp_request+0xf0>
 800ebc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ebc6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 800ebca:	2323      	movs	r3, #35	@ 0x23
 800ebcc:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 800ebce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800ebd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ebd6:	f04f 0300 	mov.w	r3, #0
 800ebda:	f7f1 fda5 	bl	8000728 <__aeabi_ldivmod>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	4b17      	ldr	r3, [pc, #92]	@ (800ec40 <mg_sntp_request+0x108>)
 800ebe4:	4413      	add	r3, r2
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f008 ff0c 	bl	8017a04 <mg_ntohl>
 800ebec:	4602      	mov	r2, r0
 800ebee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebf0:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 800ebf2:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800ebf6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ebfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebfc:	1d1c      	adds	r4, r3, #4
 800ebfe:	ee17 0a90 	vmov	r0, s15
 800ec02:	f008 feff 	bl	8017a04 <mg_ntohl>
 800ec06:	4603      	mov	r3, r0
 800ec08:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 800ec0a:	f107 0308 	add.w	r3, r7, #8
 800ec0e:	2230      	movs	r2, #48	@ 0x30
 800ec10:	4619      	mov	r1, r3
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f7fe fa16 	bl	800d044 <mg_send>
}
 800ec18:	bf00      	nop
 800ec1a:	3754      	adds	r7, #84	@ 0x54
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd90      	pop	{r4, r7, pc}
 800ec20:	00000000 	.word	0x00000000
 800ec24:	408f4000 	.word	0x408f4000
 800ec28:	ffe00000 	.word	0xffe00000
 800ec2c:	41efffff 	.word	0x41efffff
 800ec30:	24000240 	.word	0x24000240
 800ec34:	08029130 	.word	0x08029130
 800ec38:	0802597c 	.word	0x0802597c
 800ec3c:	080273cc 	.word	0x080273cc
 800ec40:	83aa7e80 	.word	0x83aa7e80

0800ec44 <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b086      	sub	sp, #24
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	607a      	str	r2, [r7, #4]
 800ec50:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800ec52:	2300      	movs	r3, #0
 800ec54:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d101      	bne.n	800ec60 <mg_sntp_connect+0x1c>
 800ec5c:	4b0c      	ldr	r3, [pc, #48]	@ (800ec90 <mg_sntp_connect+0x4c>)
 800ec5e:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	68b9      	ldr	r1, [r7, #8]
 800ec66:	68f8      	ldr	r0, [r7, #12]
 800ec68:	f7fa fe06 	bl	8009878 <mg_connect>
 800ec6c:	6178      	str	r0, [r7, #20]
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d008      	beq.n	800ec86 <mg_sntp_connect+0x42>
    c->pfn = sntp_cb;
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	4a07      	ldr	r2, [pc, #28]	@ (800ec94 <mg_sntp_connect+0x50>)
 800ec78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 800ec7c:	68ba      	ldr	r2, [r7, #8]
 800ec7e:	2101      	movs	r1, #1
 800ec80:	6978      	ldr	r0, [r7, #20]
 800ec82:	f7ff fecf 	bl	800ea24 <sntp_cb>
  }
  return c;
 800ec86:	697b      	ldr	r3, [r7, #20]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3718      	adds	r7, #24
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	080273e4 	.word	0x080273e4
 800ec94:	0800ea25 	.word	0x0800ea25

0800ec98 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 800eca4:	4b05      	ldr	r3, [pc, #20]	@ (800ecbc <mg_http_serve_ssi+0x24>)
 800eca6:	2200      	movs	r2, #0
 800eca8:	f240 11f5 	movw	r1, #501	@ 0x1f5
 800ecac:	68f8      	ldr	r0, [r7, #12]
 800ecae:	f7f6 fba1 	bl	80053f4 <mg_http_reply>
  (void) root, (void) fullpath;
}
 800ecb2:	bf00      	nop
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	08027400 	.word	0x08027400

0800ecc0 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b084      	sub	sp, #16
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	60bb      	str	r3, [r7, #8]
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d004      	beq.n	800ecde <mg_str_s+0x1e>
 800ecd4:	6838      	ldr	r0, [r7, #0]
 800ecd6:	f7f1 fb63 	bl	80003a0 <strlen>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	e000      	b.n	800ece0 <mg_str_s+0x20>
 800ecde:	2300      	movs	r3, #0
 800ece0:	60fb      	str	r3, [r7, #12]
  return str;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	461a      	mov	r2, r3
 800ece6:	f107 0308 	add.w	r3, r7, #8
 800ecea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ecee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 800ecfa:	b480      	push	{r7}
 800ecfc:	b087      	sub	sp, #28
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	60f8      	str	r0, [r7, #12]
 800ed02:	60b9      	str	r1, [r7, #8]
 800ed04:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	613b      	str	r3, [r7, #16]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	617b      	str	r3, [r7, #20]
  return str;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	461a      	mov	r2, r3
 800ed12:	f107 0310 	add.w	r3, r7, #16
 800ed16:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ed1a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	371c      	adds	r7, #28
 800ed22:	46bd      	mov	sp, r7
 800ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed28:	4770      	bx	lr

0800ed2a <mg_tolc>:

static int mg_tolc(char c) {
 800ed2a:	b480      	push	{r7}
 800ed2c:	b083      	sub	sp, #12
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	4603      	mov	r3, r0
 800ed32:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 800ed34:	79fb      	ldrb	r3, [r7, #7]
 800ed36:	2b40      	cmp	r3, #64	@ 0x40
 800ed38:	d905      	bls.n	800ed46 <mg_tolc+0x1c>
 800ed3a:	79fb      	ldrb	r3, [r7, #7]
 800ed3c:	2b5a      	cmp	r3, #90	@ 0x5a
 800ed3e:	d802      	bhi.n	800ed46 <mg_tolc+0x1c>
 800ed40:	79fb      	ldrb	r3, [r7, #7]
 800ed42:	3320      	adds	r3, #32
 800ed44:	e000      	b.n	800ed48 <mg_tolc+0x1e>
 800ed46:	79fb      	ldrb	r3, [r7, #7]
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr

0800ed54 <mg_strdup>:
    diff = c - d;
  } while (diff == 0 && s1[-1] != '\0');
  return diff;
}

struct mg_str mg_strdup(const struct mg_str s) {
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b088      	sub	sp, #32
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	1d3b      	adds	r3, r7, #4
 800ed5e:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 800ed62:	2300      	movs	r3, #0
 800ed64:	617b      	str	r3, [r7, #20]
 800ed66:	2300      	movs	r3, #0
 800ed68:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d01c      	beq.n	800edaa <mg_strdup+0x56>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d019      	beq.n	800edaa <mg_strdup+0x56>
    char *sc = (char *) calloc(1, s.len + 1);
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	2001      	movs	r0, #1
 800ed7e:	f011 fd7f 	bl	8020880 <calloc>
 800ed82:	4603      	mov	r3, r0
 800ed84:	61fb      	str	r3, [r7, #28]
    if (sc != NULL) {
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00e      	beq.n	800edaa <mg_strdup+0x56>
      memcpy(sc, s.buf, s.len);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	68ba      	ldr	r2, [r7, #8]
 800ed90:	4619      	mov	r1, r3
 800ed92:	69f8      	ldr	r0, [r7, #28]
 800ed94:	f013 f91b 	bl	8021fce <memcpy>
      sc[s.len] = '\0';
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	69fa      	ldr	r2, [r7, #28]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	2200      	movs	r2, #0
 800eda0:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	461a      	mov	r2, r3
 800edae:	f107 0314 	add.w	r3, r7, #20
 800edb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800edb6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	3720      	adds	r7, #32
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 800edc2:	b490      	push	{r4, r7}
 800edc4:	b088      	sub	sp, #32
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	f107 0408 	add.w	r4, r7, #8
 800edcc:	e884 0003 	stmia.w	r4, {r0, r1}
 800edd0:	4639      	mov	r1, r7
 800edd2:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 800edd6:	2300      	movs	r3, #0
 800edd8:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800edda:	e019      	b.n	800ee10 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 800eddc:	68ba      	ldr	r2, [r7, #8]
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	4413      	add	r3, r2
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 800ede6:	683a      	ldr	r2, [r7, #0]
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	4413      	add	r3, r2
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 800edf0:	69ba      	ldr	r2, [r7, #24]
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	da02      	bge.n	800edfe <mg_strcmp+0x3c>
 800edf8:	f04f 33ff 	mov.w	r3, #4294967295
 800edfc:	e01e      	b.n	800ee3c <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 800edfe:	69ba      	ldr	r2, [r7, #24]
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	dd01      	ble.n	800ee0a <mg_strcmp+0x48>
 800ee06:	2301      	movs	r3, #1
 800ee08:	e018      	b.n	800ee3c <mg_strcmp+0x7a>
    i++;
 800ee0a:	69fb      	ldr	r3, [r7, #28]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	69fa      	ldr	r2, [r7, #28]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d203      	bcs.n	800ee20 <mg_strcmp+0x5e>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	69fa      	ldr	r2, [r7, #28]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d3dd      	bcc.n	800eddc <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	69fa      	ldr	r2, [r7, #28]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d201      	bcs.n	800ee2c <mg_strcmp+0x6a>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e007      	b.n	800ee3c <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	69fa      	ldr	r2, [r7, #28]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d202      	bcs.n	800ee3a <mg_strcmp+0x78>
 800ee34:	f04f 33ff 	mov.w	r3, #4294967295
 800ee38:	e000      	b.n	800ee3c <mg_strcmp+0x7a>
  return 0;
 800ee3a:	2300      	movs	r3, #0
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3720      	adds	r7, #32
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bc90      	pop	{r4, r7}
 800ee44:	4770      	bx	lr

0800ee46 <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 800ee46:	b590      	push	{r4, r7, lr}
 800ee48:	b089      	sub	sp, #36	@ 0x24
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	f107 0408 	add.w	r4, r7, #8
 800ee50:	e884 0003 	stmia.w	r4, {r0, r1}
 800ee54:	4639      	mov	r1, r7
 800ee56:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800ee5e:	e01f      	b.n	800eea0 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 800ee60:	68ba      	ldr	r2, [r7, #8]
 800ee62:	69fb      	ldr	r3, [r7, #28]
 800ee64:	4413      	add	r3, r2
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7ff ff5e 	bl	800ed2a <mg_tolc>
 800ee6e:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 800ee70:	683a      	ldr	r2, [r7, #0]
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	4413      	add	r3, r2
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7ff ff56 	bl	800ed2a <mg_tolc>
 800ee7e:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 800ee80:	69ba      	ldr	r2, [r7, #24]
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	da02      	bge.n	800ee8e <mg_strcasecmp+0x48>
 800ee88:	f04f 33ff 	mov.w	r3, #4294967295
 800ee8c:	e01e      	b.n	800eecc <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 800ee8e:	69ba      	ldr	r2, [r7, #24]
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	dd01      	ble.n	800ee9a <mg_strcasecmp+0x54>
 800ee96:	2301      	movs	r3, #1
 800ee98:	e018      	b.n	800eecc <mg_strcasecmp+0x86>
    i++;
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	69fa      	ldr	r2, [r7, #28]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d203      	bcs.n	800eeb0 <mg_strcasecmp+0x6a>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	69fa      	ldr	r2, [r7, #28]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d3d7      	bcc.n	800ee60 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	69fa      	ldr	r2, [r7, #28]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d201      	bcs.n	800eebc <mg_strcasecmp+0x76>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e007      	b.n	800eecc <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	69fa      	ldr	r2, [r7, #28]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d202      	bcs.n	800eeca <mg_strcasecmp+0x84>
 800eec4:	f04f 33ff 	mov.w	r3, #4294967295
 800eec8:	e000      	b.n	800eecc <mg_strcasecmp+0x86>
  return 0;
 800eeca:	2300      	movs	r3, #0
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3724      	adds	r7, #36	@ 0x24
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd90      	pop	{r4, r7, pc}

0800eed4 <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 800eed4:	b490      	push	{r4, r7}
 800eed6:	b088      	sub	sp, #32
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	f107 0408 	add.w	r4, r7, #8
 800eede:	e884 0003 	stmia.w	r4, {r0, r1}
 800eee2:	4639      	mov	r1, r7
 800eee4:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 800eee8:	2300      	movs	r3, #0
 800eeea:	61fb      	str	r3, [r7, #28]
 800eeec:	2300      	movs	r3, #0
 800eeee:	61bb      	str	r3, [r7, #24]
 800eef0:	2300      	movs	r3, #0
 800eef2:	617b      	str	r3, [r7, #20]
 800eef4:	2300      	movs	r3, #0
 800eef6:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 800eef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	f000 80ba 	beq.w	800f074 <mg_match+0x1a0>
 800ef00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef02:	2200      	movs	r2, #0
 800ef04:	601a      	str	r2, [r3, #0]
 800ef06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef08:	2200      	movs	r2, #0
 800ef0a:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 800ef0c:	e0b2      	b.n	800f074 <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	69fa      	ldr	r2, [r7, #28]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d25b      	bcs.n	800efce <mg_match+0xfa>
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	69ba      	ldr	r2, [r7, #24]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d257      	bcs.n	800efce <mg_match+0xfa>
        (p.buf[i] == '?' ||
 800ef1e:	683a      	ldr	r2, [r7, #0]
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	4413      	add	r3, r2
 800ef24:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 800ef26:	2b3f      	cmp	r3, #63	@ 0x3f
 800ef28:	d015      	beq.n	800ef56 <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 800ef2a:	683a      	ldr	r2, [r7, #0]
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	4413      	add	r3, r2
 800ef30:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 800ef32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef34:	d04b      	beq.n	800efce <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 800ef36:	683a      	ldr	r2, [r7, #0]
 800ef38:	69fb      	ldr	r3, [r7, #28]
 800ef3a:	4413      	add	r3, r2
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	2b23      	cmp	r3, #35	@ 0x23
 800ef40:	d045      	beq.n	800efce <mg_match+0xfa>
 800ef42:	68ba      	ldr	r2, [r7, #8]
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	4413      	add	r3, r2
 800ef48:	781a      	ldrb	r2, [r3, #0]
 800ef4a:	6839      	ldr	r1, [r7, #0]
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	440b      	add	r3, r1
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d13b      	bne.n	800efce <mg_match+0xfa>
      if (caps == NULL) {
 800ef56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d031      	beq.n	800efc0 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 800ef5c:	683a      	ldr	r2, [r7, #0]
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	4413      	add	r3, r2
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	2b3f      	cmp	r3, #63	@ 0x3f
 800ef66:	d111      	bne.n	800ef8c <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 800ef68:	68ba      	ldr	r2, [r7, #8]
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	441a      	add	r2, r3
 800ef6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef70:	601a      	str	r2, [r3, #0]
 800ef72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef74:	2201      	movs	r2, #1
 800ef76:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 800ef78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef7a:	3308      	adds	r3, #8
 800ef7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef80:	2200      	movs	r2, #0
 800ef82:	601a      	str	r2, [r3, #0]
 800ef84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef86:	2200      	movs	r2, #0
 800ef88:	605a      	str	r2, [r3, #4]
 800ef8a:	e019      	b.n	800efc0 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 800ef8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d015      	beq.n	800efc0 <mg_match+0xec>
 800ef94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d111      	bne.n	800efc0 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 800ef9c:	68ba      	ldr	r2, [r7, #8]
 800ef9e:	69bb      	ldr	r3, [r7, #24]
 800efa0:	441a      	add	r2, r3
 800efa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	461a      	mov	r2, r3
 800efaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efac:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 800efae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efb0:	3308      	adds	r3, #8
 800efb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800efb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efb6:	2200      	movs	r2, #0
 800efb8:	605a      	str	r2, [r3, #4]
 800efba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efbc:	2200      	movs	r2, #0
 800efbe:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	3301      	adds	r3, #1
 800efc4:	61fb      	str	r3, [r7, #28]
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	3301      	adds	r3, #1
 800efca:	61bb      	str	r3, [r7, #24]
 800efcc:	e052      	b.n	800f074 <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	69fa      	ldr	r2, [r7, #28]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d222      	bcs.n	800f01c <mg_match+0x148>
 800efd6:	683a      	ldr	r2, [r7, #0]
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	4413      	add	r3, r2
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	2b2a      	cmp	r3, #42	@ 0x2a
 800efe0:	d005      	beq.n	800efee <mg_match+0x11a>
 800efe2:	683a      	ldr	r2, [r7, #0]
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	4413      	add	r3, r2
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	2b23      	cmp	r3, #35	@ 0x23
 800efec:	d116      	bne.n	800f01c <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 800efee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00b      	beq.n	800f00c <mg_match+0x138>
 800eff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d107      	bne.n	800f00c <mg_match+0x138>
 800effc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800effe:	2200      	movs	r2, #0
 800f000:	605a      	str	r2, [r3, #4]
 800f002:	68ba      	ldr	r2, [r7, #8]
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	441a      	add	r2, r3
 800f008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f00a:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	1c5a      	adds	r2, r3, #1
 800f010:	61fa      	str	r2, [r7, #28]
 800f012:	617b      	str	r3, [r7, #20]
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	3301      	adds	r3, #1
 800f018:	613b      	str	r3, [r7, #16]
 800f01a:	e02b      	b.n	800f074 <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d025      	beq.n	800f06e <mg_match+0x19a>
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	693a      	ldr	r2, [r7, #16]
 800f026:	429a      	cmp	r2, r3
 800f028:	d821      	bhi.n	800f06e <mg_match+0x19a>
 800f02a:	683a      	ldr	r2, [r7, #0]
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	4413      	add	r3, r2
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	2b23      	cmp	r3, #35	@ 0x23
 800f034:	d005      	beq.n	800f042 <mg_match+0x16e>
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	69bb      	ldr	r3, [r7, #24]
 800f03a:	4413      	add	r3, r2
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	2b2f      	cmp	r3, #47	@ 0x2f
 800f040:	d015      	beq.n	800f06e <mg_match+0x19a>
      i = ni, j = nj;
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	61fb      	str	r3, [r7, #28]
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 800f04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d010      	beq.n	800f072 <mg_match+0x19e>
 800f050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d10c      	bne.n	800f072 <mg_match+0x19e>
 800f058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d108      	bne.n	800f072 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 800f060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f062:	3b08      	subs	r3, #8
 800f064:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f068:	2200      	movs	r2, #0
 800f06a:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 800f06c:	e001      	b.n	800f072 <mg_match+0x19e>
      }
    } else {
      return false;
 800f06e:	2300      	movs	r3, #0
 800f070:	e01f      	b.n	800f0b2 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 800f072:	bf00      	nop
  while (i < p.len || j < s.len) {
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	69fa      	ldr	r2, [r7, #28]
 800f078:	429a      	cmp	r2, r3
 800f07a:	f4ff af48 	bcc.w	800ef0e <mg_match+0x3a>
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	69ba      	ldr	r2, [r7, #24]
 800f082:	429a      	cmp	r2, r3
 800f084:	f4ff af43 	bcc.w	800ef0e <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 800f088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d010      	beq.n	800f0b0 <mg_match+0x1dc>
 800f08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00c      	beq.n	800f0b0 <mg_match+0x1dc>
 800f096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d108      	bne.n	800f0b0 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 800f09e:	68ba      	ldr	r2, [r7, #8]
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	441a      	add	r2, r3
 800f0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ae:	605a      	str	r2, [r3, #4]
  }
  return true;
 800f0b0:	2301      	movs	r3, #1
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3720      	adds	r7, #32
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bc90      	pop	{r4, r7}
 800f0ba:	4770      	bx	lr

0800f0bc <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 800f0bc:	b590      	push	{r4, r7, lr}
 800f0be:	b089      	sub	sp, #36	@ 0x24
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	f107 0410 	add.w	r4, r7, #16
 800f0c6:	e884 0003 	stmia.w	r4, {r0, r1}
 800f0ca:	60fa      	str	r2, [r7, #12]
 800f0cc:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d002      	beq.n	800f0da <mg_span+0x1e>
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d101      	bne.n	800f0de <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 800f0da:	2300      	movs	r3, #0
 800f0dc:	e047      	b.n	800f16e <mg_span+0xb2>
  } else {
    size_t len = 0;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 800f0e2:	e002      	b.n	800f0ea <mg_span+0x2e>
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	61fb      	str	r3, [r7, #28]
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	69fa      	ldr	r2, [r7, #28]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d207      	bcs.n	800f102 <mg_span+0x46>
 800f0f2:	693a      	ldr	r2, [r7, #16]
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d1f0      	bne.n	800f0e4 <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d00c      	beq.n	800f122 <mg_span+0x66>
 800f108:	6939      	ldr	r1, [r7, #16]
 800f10a:	68fc      	ldr	r4, [r7, #12]
 800f10c:	463b      	mov	r3, r7
 800f10e:	69fa      	ldr	r2, [r7, #28]
 800f110:	4618      	mov	r0, r3
 800f112:	f7ff fdf2 	bl	800ecfa <mg_str_n>
 800f116:	4622      	mov	r2, r4
 800f118:	463b      	mov	r3, r7
 800f11a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f11e:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d010      	beq.n	800f14a <mg_span+0x8e>
 800f128:	693a      	ldr	r2, [r7, #16]
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	18d1      	adds	r1, r2, r3
 800f12e:	697a      	ldr	r2, [r7, #20]
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	1ad2      	subs	r2, r2, r3
 800f134:	68bc      	ldr	r4, [r7, #8]
 800f136:	463b      	mov	r3, r7
 800f138:	4618      	mov	r0, r3
 800f13a:	f7ff fdde 	bl	800ecfa <mg_str_n>
 800f13e:	4622      	mov	r2, r4
 800f140:	463b      	mov	r3, r7
 800f142:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f146:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d00d      	beq.n	800f16c <mg_span+0xb0>
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	69fa      	ldr	r2, [r7, #28]
 800f154:	429a      	cmp	r2, r3
 800f156:	d209      	bcs.n	800f16c <mg_span+0xb0>
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	1c5a      	adds	r2, r3, #1
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	601a      	str	r2, [r3, #0]
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	1e5a      	subs	r2, r3, #1
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	605a      	str	r2, [r3, #4]
    return true;
 800f16c:	2301      	movs	r3, #1
  }
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3724      	adds	r7, #36	@ 0x24
 800f172:	46bd      	mov	sp, r7
 800f174:	bd90      	pop	{r4, r7, pc}

0800f176 <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 800f176:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f17a:	b0a5      	sub	sp, #148	@ 0x94
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800f182:	e884 0003 	stmia.w	r4, {r0, r1}
 800f186:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800f188:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 800f18a:	2300      	movs	r3, #0
 800f18c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f190:	2300      	movs	r3, #0
 800f192:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 800f196:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d016      	beq.n	800f1cc <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 800f19e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1a2:	2b02      	cmp	r3, #2
 800f1a4:	d00d      	beq.n	800f1c2 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 800f1a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1aa:	2b04      	cmp	r3, #4
 800f1ac:	d104      	bne.n	800f1b8 <mg_str_to_num+0x42>
 800f1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f1b2:	f04f 0300 	mov.w	r3, #0
 800f1b6:	e00d      	b.n	800f1d4 <mg_str_to_num+0x5e>
 800f1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c0:	e008      	b.n	800f1d4 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 800f1c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f1c6:	f04f 0300 	mov.w	r3, #0
 800f1ca:	e003      	b.n	800f1d4 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 800f1cc:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 800f1d0:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 800f1d4:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 800f1d8:	f04f 0200 	mov.w	r2, #0
 800f1dc:	f04f 0300 	mov.w	r3, #0
 800f1e0:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 800f1e4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800f1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ec:	bf08      	it	eq
 800f1ee:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800f1f2:	d105      	bne.n	800f200 <mg_str_to_num+0x8a>
 800f1f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1f8:	2b08      	cmp	r3, #8
 800f1fa:	d001      	beq.n	800f200 <mg_str_to_num+0x8a>
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	e1e8      	b.n	800f5d2 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 800f200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f202:	2b00      	cmp	r3, #0
 800f204:	d12d      	bne.n	800f262 <mg_str_to_num+0xec>
 800f206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d92a      	bls.n	800f262 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 800f20c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f20e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f212:	4413      	add	r3, r2
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	2b30      	cmp	r3, #48	@ 0x30
 800f218:	d121      	bne.n	800f25e <mg_str_to_num+0xe8>
      i++;
 800f21a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f21e:	3301      	adds	r3, #1
 800f220:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 800f224:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f22a:	4413      	add	r3, r2
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	2b62      	cmp	r3, #98	@ 0x62
 800f230:	d00a      	beq.n	800f248 <mg_str_to_num+0xd2>
 800f232:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f234:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f238:	4413      	add	r3, r2
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	2b78      	cmp	r3, #120	@ 0x78
 800f23e:	d101      	bne.n	800f244 <mg_str_to_num+0xce>
 800f240:	2310      	movs	r3, #16
 800f242:	e002      	b.n	800f24a <mg_str_to_num+0xd4>
 800f244:	230a      	movs	r3, #10
 800f246:	e000      	b.n	800f24a <mg_str_to_num+0xd4>
 800f248:	2302      	movs	r3, #2
 800f24a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 800f24c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f24e:	2b0a      	cmp	r3, #10
 800f250:	d007      	beq.n	800f262 <mg_str_to_num+0xec>
 800f252:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f256:	3301      	adds	r3, #1
 800f258:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f25c:	e001      	b.n	800f262 <mg_str_to_num+0xec>
    } else {
      base = 10;
 800f25e:	230a      	movs	r3, #10
 800f260:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 800f262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f264:	2b10      	cmp	r3, #16
 800f266:	f000 8178 	beq.w	800f55a <mg_str_to_num+0x3e4>
 800f26a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f26c:	2b10      	cmp	r3, #16
 800f26e:	f300 817d 	bgt.w	800f56c <mg_str_to_num+0x3f6>
 800f272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f274:	2b02      	cmp	r3, #2
 800f276:	d052      	beq.n	800f31e <mg_str_to_num+0x1a8>
 800f278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f27a:	2b0a      	cmp	r3, #10
 800f27c:	f000 80cd 	beq.w	800f41a <mg_str_to_num+0x2a4>
 800f280:	e174      	b.n	800f56c <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 800f282:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f284:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f288:	4413      	add	r3, r2
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	3b30      	subs	r3, #48	@ 0x30
 800f28e:	17da      	asrs	r2, r3, #31
 800f290:	633b      	str	r3, [r7, #48]	@ 0x30
 800f292:	637a      	str	r2, [r7, #52]	@ 0x34
 800f294:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800f298:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 800f29c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f2a0:	f04f 0200 	mov.w	r2, #0
 800f2a4:	f04f 0300 	mov.w	r3, #0
 800f2a8:	0842      	lsrs	r2, r0, #1
 800f2aa:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800f2ae:	084b      	lsrs	r3, r1, #1
 800f2b0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f2b4:	4282      	cmp	r2, r0
 800f2b6:	418b      	sbcs	r3, r1
 800f2b8:	d201      	bcs.n	800f2be <mg_str_to_num+0x148>
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	e189      	b.n	800f5d2 <mg_str_to_num+0x45c>
        result *= 2;
 800f2be:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f2c2:	1891      	adds	r1, r2, r2
 800f2c4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f2c6:	415b      	adcs	r3, r3
 800f2c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f2ca:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800f2ce:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 800f2d2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f2d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f2da:	1a85      	subs	r5, r0, r2
 800f2dc:	eb61 0603 	sbc.w	r6, r1, r3
 800f2e0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f2e4:	4295      	cmp	r5, r2
 800f2e6:	eb76 0303 	sbcs.w	r3, r6, r3
 800f2ea:	d201      	bcs.n	800f2f0 <mg_str_to_num+0x17a>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	e170      	b.n	800f5d2 <mg_str_to_num+0x45c>
        result += digit;
 800f2f0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f2f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f2f8:	1884      	adds	r4, r0, r2
 800f2fa:	623c      	str	r4, [r7, #32]
 800f2fc:	eb41 0303 	adc.w	r3, r1, r3
 800f300:	627b      	str	r3, [r7, #36]	@ 0x24
 800f302:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f306:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 800f30a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f30e:	3301      	adds	r3, #1
 800f310:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f314:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f318:	3301      	adds	r3, #1
 800f31a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 800f31e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f320:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f324:	429a      	cmp	r2, r3
 800f326:	f080 8123 	bcs.w	800f570 <mg_str_to_num+0x3fa>
 800f32a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f32c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f330:	4413      	add	r3, r2
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	2b30      	cmp	r3, #48	@ 0x30
 800f336:	d0a4      	beq.n	800f282 <mg_str_to_num+0x10c>
 800f338:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f33a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f33e:	4413      	add	r3, r2
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	2b31      	cmp	r3, #49	@ 0x31
 800f344:	d09d      	beq.n	800f282 <mg_str_to_num+0x10c>
      }
      break;
 800f346:	e113      	b.n	800f570 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 800f348:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f34a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f34e:	4413      	add	r3, r2
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	3b30      	subs	r3, #48	@ 0x30
 800f354:	17da      	asrs	r2, r3, #31
 800f356:	61bb      	str	r3, [r7, #24]
 800f358:	61fa      	str	r2, [r7, #28]
 800f35a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f35e:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 800f362:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f366:	f04f 020a 	mov.w	r2, #10
 800f36a:	f04f 0300 	mov.w	r3, #0
 800f36e:	f7f1 fa2b 	bl	80007c8 <__aeabi_uldivmod>
 800f372:	4602      	mov	r2, r0
 800f374:	460b      	mov	r3, r1
 800f376:	4610      	mov	r0, r2
 800f378:	4619      	mov	r1, r3
 800f37a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f37e:	4290      	cmp	r0, r2
 800f380:	eb71 0303 	sbcs.w	r3, r1, r3
 800f384:	d201      	bcs.n	800f38a <mg_str_to_num+0x214>
 800f386:	2300      	movs	r3, #0
 800f388:	e123      	b.n	800f5d2 <mg_str_to_num+0x45c>
        result *= 10;
 800f38a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800f38e:	4622      	mov	r2, r4
 800f390:	462b      	mov	r3, r5
 800f392:	f04f 0000 	mov.w	r0, #0
 800f396:	f04f 0100 	mov.w	r1, #0
 800f39a:	0099      	lsls	r1, r3, #2
 800f39c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800f3a0:	0090      	lsls	r0, r2, #2
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	eb12 0804 	adds.w	r8, r2, r4
 800f3aa:	eb43 0905 	adc.w	r9, r3, r5
 800f3ae:	eb18 0308 	adds.w	r3, r8, r8
 800f3b2:	613b      	str	r3, [r7, #16]
 800f3b4:	eb49 0309 	adc.w	r3, r9, r9
 800f3b8:	617b      	str	r3, [r7, #20]
 800f3ba:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800f3be:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 800f3c2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f3c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800f3ca:	1a84      	subs	r4, r0, r2
 800f3cc:	63bc      	str	r4, [r7, #56]	@ 0x38
 800f3ce:	eb61 0303 	sbc.w	r3, r1, r3
 800f3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3d4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f3d8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800f3dc:	4621      	mov	r1, r4
 800f3de:	4291      	cmp	r1, r2
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	eb71 0303 	sbcs.w	r3, r1, r3
 800f3e6:	d201      	bcs.n	800f3ec <mg_str_to_num+0x276>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	e0f2      	b.n	800f5d2 <mg_str_to_num+0x45c>
        result += digit;
 800f3ec:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f3f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800f3f4:	1884      	adds	r4, r0, r2
 800f3f6:	60bc      	str	r4, [r7, #8]
 800f3f8:	eb41 0303 	adc.w	r3, r1, r3
 800f3fc:	60fb      	str	r3, [r7, #12]
 800f3fe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f402:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 800f406:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f40a:	3301      	adds	r3, #1
 800f40c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f410:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f414:	3301      	adds	r3, #1
 800f416:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 800f41a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f41c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f420:	429a      	cmp	r2, r3
 800f422:	f080 80a7 	bcs.w	800f574 <mg_str_to_num+0x3fe>
 800f426:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f42c:	4413      	add	r3, r2
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	2b2f      	cmp	r3, #47	@ 0x2f
 800f432:	f240 809f 	bls.w	800f574 <mg_str_to_num+0x3fe>
 800f436:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f438:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f43c:	4413      	add	r3, r2
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	2b39      	cmp	r3, #57	@ 0x39
 800f442:	d981      	bls.n	800f348 <mg_str_to_num+0x1d2>
      }
      break;
 800f444:	e096      	b.n	800f574 <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 800f446:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f448:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f44c:	4413      	add	r3, r2
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 800f454:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f458:	2b2f      	cmp	r3, #47	@ 0x2f
 800f45a:	d90a      	bls.n	800f472 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 800f45c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f460:	2b39      	cmp	r3, #57	@ 0x39
 800f462:	d806      	bhi.n	800f472 <mg_str_to_num+0x2fc>
 800f464:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f468:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 800f46a:	17da      	asrs	r2, r3, #31
 800f46c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f46e:	647a      	str	r2, [r7, #68]	@ 0x44
 800f470:	e023      	b.n	800f4ba <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800f472:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f476:	2b40      	cmp	r3, #64	@ 0x40
 800f478:	d90a      	bls.n	800f490 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 800f47a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f47e:	2b46      	cmp	r3, #70	@ 0x46
 800f480:	d806      	bhi.n	800f490 <mg_str_to_num+0x31a>
 800f482:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f486:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800f488:	17da      	asrs	r2, r3, #31
 800f48a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f48c:	647a      	str	r2, [r7, #68]	@ 0x44
 800f48e:	e014      	b.n	800f4ba <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 800f490:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f494:	2b60      	cmp	r3, #96	@ 0x60
 800f496:	d90a      	bls.n	800f4ae <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800f498:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f49c:	2b66      	cmp	r3, #102	@ 0x66
 800f49e:	d806      	bhi.n	800f4ae <mg_str_to_num+0x338>
 800f4a0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f4a4:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 800f4a6:	17da      	asrs	r2, r3, #31
 800f4a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f4aa:	647a      	str	r2, [r7, #68]	@ 0x44
 800f4ac:	e005      	b.n	800f4ba <mg_str_to_num+0x344>
 800f4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b2:	f04f 34ff 	mov.w	r4, #4294967295
 800f4b6:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 800f4ba:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800f4be:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 800f4c2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800f4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ca:	bf08      	it	eq
 800f4cc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800f4d0:	d04a      	beq.n	800f568 <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 800f4d2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f4d6:	f04f 0200 	mov.w	r2, #0
 800f4da:	f04f 0300 	mov.w	r3, #0
 800f4de:	0902      	lsrs	r2, r0, #4
 800f4e0:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800f4e4:	090b      	lsrs	r3, r1, #4
 800f4e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f4ea:	4282      	cmp	r2, r0
 800f4ec:	418b      	sbcs	r3, r1
 800f4ee:	d201      	bcs.n	800f4f4 <mg_str_to_num+0x37e>
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	e06e      	b.n	800f5d2 <mg_str_to_num+0x45c>
        result *= 16;
 800f4f4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f4f8:	f04f 0200 	mov.w	r2, #0
 800f4fc:	f04f 0300 	mov.w	r3, #0
 800f500:	010b      	lsls	r3, r1, #4
 800f502:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800f506:	0102      	lsls	r2, r0, #4
 800f508:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 800f50c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f510:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800f514:	ebb0 0a02 	subs.w	sl, r0, r2
 800f518:	eb61 0b03 	sbc.w	fp, r1, r3
 800f51c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f520:	4592      	cmp	sl, r2
 800f522:	eb7b 0303 	sbcs.w	r3, fp, r3
 800f526:	d201      	bcs.n	800f52c <mg_str_to_num+0x3b6>
 800f528:	2300      	movs	r3, #0
 800f52a:	e052      	b.n	800f5d2 <mg_str_to_num+0x45c>
        result += digit;
 800f52c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f530:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800f534:	1884      	adds	r4, r0, r2
 800f536:	603c      	str	r4, [r7, #0]
 800f538:	eb41 0303 	adc.w	r3, r1, r3
 800f53c:	607b      	str	r3, [r7, #4]
 800f53e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f542:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 800f546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f54a:	3301      	adds	r3, #1
 800f54c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f550:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f554:	3301      	adds	r3, #1
 800f556:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 800f55a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f55c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f560:	429a      	cmp	r2, r3
 800f562:	f4ff af70 	bcc.w	800f446 <mg_str_to_num+0x2d0>
      }
      break;
 800f566:	e006      	b.n	800f576 <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 800f568:	bf00      	nop
      break;
 800f56a:	e004      	b.n	800f576 <mg_str_to_num+0x400>
    default:
      return false;
 800f56c:	2300      	movs	r3, #0
 800f56e:	e030      	b.n	800f5d2 <mg_str_to_num+0x45c>
      break;
 800f570:	bf00      	nop
 800f572:	e000      	b.n	800f576 <mg_str_to_num+0x400>
      break;
 800f574:	bf00      	nop
  }
  if (ndigits == 0) return false;
 800f576:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d101      	bne.n	800f582 <mg_str_to_num+0x40c>
 800f57e:	2300      	movs	r3, #0
 800f580:	e027      	b.n	800f5d2 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 800f582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f584:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f588:	429a      	cmp	r2, r3
 800f58a:	d001      	beq.n	800f590 <mg_str_to_num+0x41a>
 800f58c:	2300      	movs	r3, #0
 800f58e:	e020      	b.n	800f5d2 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 800f590:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f594:	2b01      	cmp	r3, #1
 800f596:	d104      	bne.n	800f5a2 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 800f598:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 800f59c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f59e:	701a      	strb	r2, [r3, #0]
 800f5a0:	e016      	b.n	800f5d0 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 800f5a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f5a6:	2b02      	cmp	r3, #2
 800f5a8:	d104      	bne.n	800f5b4 <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 800f5aa:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 800f5ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5b0:	801a      	strh	r2, [r3, #0]
 800f5b2:	e00d      	b.n	800f5d0 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 800f5b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f5b8:	2b04      	cmp	r3, #4
 800f5ba:	d104      	bne.n	800f5c6 <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 800f5bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f5c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5c2:	601a      	str	r2, [r3, #0]
 800f5c4:	e004      	b.n	800f5d0 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 800f5c6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800f5c8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f5cc:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 800f5d0:	2301      	movs	r3, #1
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3794      	adds	r7, #148	@ 0x94
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f5dc <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 800f5dc:	b480      	push	{r7}
 800f5de:	b085      	sub	sp, #20
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	60f8      	str	r0, [r7, #12]
 800f5e4:	60b9      	str	r1, [r7, #8]
 800f5e6:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	601a      	str	r2, [r3, #0]
 800f5f0:	68b9      	ldr	r1, [r7, #8]
 800f5f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5f6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800f5fa:	68b9      	ldr	r1, [r7, #8]
 800f5fc:	f04f 0200 	mov.w	r2, #0
 800f600:	f04f 0300 	mov.w	r3, #0
 800f604:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	69ba      	ldr	r2, [r7, #24]
 800f60c:	619a      	str	r2, [r3, #24]
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	69fa      	ldr	r2, [r7, #28]
 800f612:	61da      	str	r2, [r3, #28]
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	6a3a      	ldr	r2, [r7, #32]
 800f618:	621a      	str	r2, [r3, #32]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681a      	ldr	r2, [r3, #0]
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	625a      	str	r2, [r3, #36]	@ 0x24
  *head = t;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	68ba      	ldr	r2, [r7, #8]
 800f626:	601a      	str	r2, [r3, #0]
}
 800f628:	bf00      	nop
 800f62a:	3714      	adds	r7, #20
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr

0800f634 <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 800f634:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f638:	b086      	sub	sp, #24
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	6178      	str	r0, [r7, #20]
 800f63e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 800f642:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f64a:	eb10 0a02 	adds.w	sl, r0, r2
 800f64e:	eb41 0b03 	adc.w	fp, r1, r3
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f658:	4592      	cmp	sl, r2
 800f65a:	eb7b 0303 	sbcs.w	r3, fp, r3
 800f65e:	d206      	bcs.n	800f66e <mg_timer_expired+0x3a>
 800f660:	6979      	ldr	r1, [r7, #20]
 800f662:	f04f 0200 	mov.w	r2, #0
 800f666:	f04f 0300 	mov.w	r3, #0
 800f66a:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f674:	4313      	orrs	r3, r2
 800f676:	d10d      	bne.n	800f694 <mg_timer_expired+0x60>
 800f678:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f67c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f680:	1886      	adds	r6, r0, r2
 800f682:	603e      	str	r6, [r7, #0]
 800f684:	eb41 0303 	adc.w	r3, r1, r3
 800f688:	607b      	str	r3, [r7, #4]
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f690:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f69e:	4290      	cmp	r0, r2
 800f6a0:	eb71 0303 	sbcs.w	r3, r1, r3
 800f6a4:	d201      	bcs.n	800f6aa <mg_timer_expired+0x76>
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	e022      	b.n	800f6f0 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f6b4:	ebb0 0802 	subs.w	r8, r0, r2
 800f6b8:	eb61 0903 	sbc.w	r9, r1, r3
 800f6bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f6c0:	4542      	cmp	r2, r8
 800f6c2:	eb73 0309 	sbcs.w	r3, r3, r9
 800f6c6:	d207      	bcs.n	800f6d8 <mg_timer_expired+0xa4>
 800f6c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f6cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f6d0:	1884      	adds	r4, r0, r2
 800f6d2:	eb41 0503 	adc.w	r5, r1, r3
 800f6d6:	e007      	b.n	800f6e8 <mg_timer_expired+0xb4>
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f6de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f6e2:	1884      	adds	r4, r0, r2
 800f6e4:	eb41 0503 	adc.w	r5, r1, r3
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 800f6ee:	2301      	movs	r3, #1
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3718      	adds	r7, #24
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f6fa:	4770      	bx	lr

0800f6fc <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 800f6fc:	b590      	push	{r4, r7, lr}
 800f6fe:	b08b      	sub	sp, #44	@ 0x2c
 800f700:	af02      	add	r7, sp, #8
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	61fb      	str	r3, [r7, #28]
 800f70e:	e054      	b.n	800f7ba <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f716:	4313      	orrs	r3, r2
 800f718:	d10d      	bne.n	800f736 <mg_timer_poll+0x3a>
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	699b      	ldr	r3, [r3, #24]
 800f71e:	f003 0302 	and.w	r3, r3, #2
 800f722:	2b00      	cmp	r3, #0
 800f724:	d007      	beq.n	800f736 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	699b      	ldr	r3, [r3, #24]
 800f72a:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d101      	bne.n	800f736 <mg_timer_poll+0x3a>
 800f732:	2301      	movs	r3, #1
 800f734:	e000      	b.n	800f738 <mg_timer_poll+0x3c>
 800f736:	2300      	movs	r3, #0
 800f738:	76fb      	strb	r3, [r7, #27]
 800f73a:	7efb      	ldrb	r3, [r7, #27]
 800f73c:	f003 0301 	and.w	r3, r3, #1
 800f740:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	f103 0410 	add.w	r4, r3, #16
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f74e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f752:	e9cd 2300 	strd	r2, r3, [sp]
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	4620      	mov	r0, r4
 800f75c:	f7ff ff6a 	bl	800f634 <mg_timer_expired>
 800f760:	4603      	mov	r3, r0
 800f762:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f768:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 800f76a:	7efb      	ldrb	r3, [r7, #27]
 800f76c:	f083 0301 	eor.w	r3, r3, #1
 800f770:	b2db      	uxtb	r3, r3
 800f772:	2b00      	cmp	r3, #0
 800f774:	d005      	beq.n	800f782 <mg_timer_poll+0x86>
 800f776:	7ebb      	ldrb	r3, [r7, #26]
 800f778:	f083 0301 	eor.w	r3, r3, #1
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d118      	bne.n	800f7b4 <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	699b      	ldr	r3, [r3, #24]
 800f786:	f003 0301 	and.w	r3, r3, #1
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d105      	bne.n	800f79a <mg_timer_poll+0x9e>
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	699b      	ldr	r3, [r3, #24]
 800f792:	f003 0304 	and.w	r3, r3, #4
 800f796:	2b00      	cmp	r3, #0
 800f798:	d105      	bne.n	800f7a6 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	69db      	ldr	r3, [r3, #28]
 800f79e:	69fa      	ldr	r2, [r7, #28]
 800f7a0:	6a12      	ldr	r2, [r2, #32]
 800f7a2:	4610      	mov	r0, r2
 800f7a4:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	699b      	ldr	r3, [r3, #24]
 800f7aa:	f043 0204 	orr.w	r2, r3, #4
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	619a      	str	r2, [r3, #24]
 800f7b2:	e000      	b.n	800f7b6 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 800f7b4:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	61fb      	str	r3, [r7, #28]
 800f7ba:	69fb      	ldr	r3, [r7, #28]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d1a7      	bne.n	800f710 <mg_timer_poll+0x14>
  }
}
 800f7c0:	bf00      	nop
 800f7c2:	bf00      	nop
 800f7c4:	3724      	adds	r7, #36	@ 0x24
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd90      	pop	{r4, r7, pc}
	...

0800f7cc <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b086      	sub	sp, #24
 800f7d0:	af02      	add	r7, sp, #8
 800f7d2:	60f8      	str	r0, [r7, #12]
 800f7d4:	60b9      	str	r1, [r7, #8]
 800f7d6:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
 800f7d8:	4b0b      	ldr	r3, [pc, #44]	@ (800f808 <mg_tls_hexdump+0x3c>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b03      	cmp	r3, #3
 800f7de:	dd0e      	ble.n	800f7fe <mg_tls_hexdump+0x32>
 800f7e0:	4b0a      	ldr	r3, [pc, #40]	@ (800f80c <mg_tls_hexdump+0x40>)
 800f7e2:	f242 6262 	movw	r2, #9826	@ 0x2662
 800f7e6:	490a      	ldr	r1, [pc, #40]	@ (800f810 <mg_tls_hexdump+0x44>)
 800f7e8:	2004      	movs	r0, #4
 800f7ea:	f7f8 fba1 	bl	8007f30 <mg_log_prefix>
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	9300      	str	r3, [sp, #0]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4a07      	ldr	r2, [pc, #28]	@ (800f814 <mg_tls_hexdump+0x48>)
 800f7f6:	68f9      	ldr	r1, [r7, #12]
 800f7f8:	4807      	ldr	r0, [pc, #28]	@ (800f818 <mg_tls_hexdump+0x4c>)
 800f7fa:	f7f8 fbe9 	bl	8007fd0 <mg_log>
}
 800f7fe:	bf00      	nop
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	24000240 	.word	0x24000240
 800f80c:	08029140 	.word	0x08029140
 800f810:	0802597c 	.word	0x0802597c
 800f814:	0800daa1 	.word	0x0800daa1
 800f818:	08027410 	.word	0x08027410

0800f81c <mg_der_to_tlv>:
  uint32_t len;
  uint8_t *value;
};

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 800f81c:	b480      	push	{r7}
 800f81e:	b087      	sub	sp, #28
 800f820:	af00      	add	r7, sp, #0
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	60b9      	str	r1, [r7, #8]
 800f826:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	2b01      	cmp	r3, #1
 800f82c:	d802      	bhi.n	800f834 <mg_der_to_tlv+0x18>
    return -1;
 800f82e:	f04f 33ff 	mov.w	r3, #4294967295
 800f832:	e041      	b.n	800f8b8 <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	781a      	ldrb	r2, [r3, #0]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	3301      	adds	r3, #1
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	461a      	mov	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	1c9a      	adds	r2, r3, #2
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	685b      	ldr	r3, [r3, #4]
 800f854:	2b7f      	cmp	r3, #127	@ 0x7f
 800f856:	d921      	bls.n	800f89c <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	3b80      	subs	r3, #128	@ 0x80
 800f85e:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2200      	movs	r2, #0
 800f864:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 800f866:	2300      	movs	r3, #0
 800f868:	617b      	str	r3, [r7, #20]
 800f86a:	e00d      	b.n	800f888 <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	021b      	lsls	r3, r3, #8
 800f872:	697a      	ldr	r2, [r7, #20]
 800f874:	3202      	adds	r2, #2
 800f876:	68f9      	ldr	r1, [r7, #12]
 800f878:	440a      	add	r2, r1
 800f87a:	7812      	ldrb	r2, [r2, #0]
 800f87c:	431a      	orrs	r2, r3
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	3301      	adds	r3, #1
 800f886:	617b      	str	r3, [r7, #20]
 800f888:	697a      	ldr	r2, [r7, #20]
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d3ed      	bcc.n	800f86c <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	3302      	adds	r3, #2
 800f894:	68fa      	ldr	r2, [r7, #12]
 800f896:	441a      	add	r2, r3
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 800f89c:	68fa      	ldr	r2, [r7, #12]
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	441a      	add	r2, r3
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6899      	ldr	r1, [r3, #8]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	685b      	ldr	r3, [r3, #4]
 800f8aa:	440b      	add	r3, r1
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d202      	bcs.n	800f8b6 <mg_der_to_tlv+0x9a>
    return -1;
 800f8b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8b4:	e000      	b.n	800f8b8 <mg_der_to_tlv+0x9c>
  }
  return 0;
 800f8b6:	2300      	movs	r3, #0
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	371c      	adds	r7, #28
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr

0800f8c4 <mg_der_find>:

static int mg_der_find(uint8_t *der, size_t dersz, uint8_t *oid, size_t oidsz,
                       struct mg_der_tlv *tlv) {
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b08c      	sub	sp, #48	@ 0x30
 800f8c8:	af02      	add	r7, sp, #8
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	60b9      	str	r1, [r7, #8]
 800f8ce:	607a      	str	r2, [r7, #4]
 800f8d0:	603b      	str	r3, [r7, #0]
  uint8_t *p, *end;
  struct mg_der_tlv child = {0, 0, NULL};
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	743b      	strb	r3, [r7, #16]
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	617b      	str	r3, [r7, #20]
 800f8da:	2300      	movs	r3, #0
 800f8dc:	61bb      	str	r3, [r7, #24]
  if (mg_der_to_tlv(der, dersz, tlv) < 0) {
 800f8de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8e0:	68b9      	ldr	r1, [r7, #8]
 800f8e2:	68f8      	ldr	r0, [r7, #12]
 800f8e4:	f7ff ff9a 	bl	800f81c <mg_der_to_tlv>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	da02      	bge.n	800f8f4 <mg_der_find+0x30>
    return -1;                  // invalid DER
 800f8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f8f2:	e052      	b.n	800f99a <mg_der_find+0xd6>
  } else if (tlv->type == 6) {  // found OID, check value
 800f8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	2b06      	cmp	r3, #6
 800f8fa:	d112      	bne.n	800f922 <mg_der_find+0x5e>
    return (tlv->len == oidsz && memcmp(tlv->value, oid, oidsz) == 0);
 800f8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	683a      	ldr	r2, [r7, #0]
 800f902:	429a      	cmp	r2, r3
 800f904:	d10b      	bne.n	800f91e <mg_der_find+0x5a>
 800f906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f908:	689b      	ldr	r3, [r3, #8]
 800f90a:	683a      	ldr	r2, [r7, #0]
 800f90c:	6879      	ldr	r1, [r7, #4]
 800f90e:	4618      	mov	r0, r3
 800f910:	f012 fa3e 	bl	8021d90 <memcmp>
 800f914:	4603      	mov	r3, r0
 800f916:	2b00      	cmp	r3, #0
 800f918:	d101      	bne.n	800f91e <mg_der_find+0x5a>
 800f91a:	2301      	movs	r3, #1
 800f91c:	e03d      	b.n	800f99a <mg_der_find+0xd6>
 800f91e:	2300      	movs	r3, #0
 800f920:	e03b      	b.n	800f99a <mg_der_find+0xd6>
  } else if ((tlv->type & 0x20) == 0) {
 800f922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	f003 0320 	and.w	r3, r3, #32
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d101      	bne.n	800f932 <mg_der_find+0x6e>
    return 0;  // Primitive, but not OID: not found
 800f92e:	2300      	movs	r3, #0
 800f930:	e033      	b.n	800f99a <mg_der_find+0xd6>
  }
  // Constructed object: scan children
  p = tlv->value;
 800f932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f934:	689b      	ldr	r3, [r3, #8]
 800f936:	627b      	str	r3, [r7, #36]	@ 0x24
  end = tlv->value + tlv->len;
 800f938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f93a:	689a      	ldr	r2, [r3, #8]
 800f93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	4413      	add	r3, r2
 800f942:	623b      	str	r3, [r7, #32]
  while (end > p) {
 800f944:	e024      	b.n	800f990 <mg_der_find+0xcc>
    int r;
    mg_der_to_tlv(p, (size_t) (end - p), &child);
 800f946:	6a3a      	ldr	r2, [r7, #32]
 800f948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f94a:	1ad3      	subs	r3, r2, r3
 800f94c:	4619      	mov	r1, r3
 800f94e:	f107 0310 	add.w	r3, r7, #16
 800f952:	461a      	mov	r2, r3
 800f954:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f956:	f7ff ff61 	bl	800f81c <mg_der_to_tlv>
    r = mg_der_find(p, (size_t) (end - p), oid, oidsz, tlv);
 800f95a:	6a3a      	ldr	r2, [r7, #32]
 800f95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f95e:	1ad3      	subs	r3, r2, r3
 800f960:	4619      	mov	r1, r3
 800f962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f964:	9300      	str	r3, [sp, #0]
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f96c:	f7ff ffaa 	bl	800f8c4 <mg_der_find>
 800f970:	61f8      	str	r0, [r7, #28]
    if (r < 0) return -1;  // error
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	2b00      	cmp	r3, #0
 800f976:	da02      	bge.n	800f97e <mg_der_find+0xba>
 800f978:	f04f 33ff 	mov.w	r3, #4294967295
 800f97c:	e00d      	b.n	800f99a <mg_der_find+0xd6>
    if (r > 0) return 1;   // found OID!
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	2b00      	cmp	r3, #0
 800f982:	dd01      	ble.n	800f988 <mg_der_find+0xc4>
 800f984:	2301      	movs	r3, #1
 800f986:	e008      	b.n	800f99a <mg_der_find+0xd6>
    p = child.value + child.len;
 800f988:	69ba      	ldr	r2, [r7, #24]
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	4413      	add	r3, r2
 800f98e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (end > p) {
 800f990:	6a3a      	ldr	r2, [r7, #32]
 800f992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f994:	429a      	cmp	r2, r3
 800f996:	d8d6      	bhi.n	800f946 <mg_der_find+0x82>
  }
  return 0;  // not found
 800f998:	2300      	movs	r3, #0
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3728      	adds	r7, #40	@ 0x28
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}

0800f9a2 <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 800f9a2:	b480      	push	{r7}
 800f9a4:	b083      	sub	sp, #12
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9ae:	2b04      	cmp	r3, #4
 800f9b0:	d914      	bls.n	800f9dc <mg_tls_got_record+0x3a>
         c->rtls.len >=
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f9ba:	3203      	adds	r2, #3
 800f9bc:	7812      	ldrb	r2, [r2, #0]
 800f9be:	0212      	lsls	r2, r2, #8
 800f9c0:	b211      	sxth	r1, r2
 800f9c2:	687a      	ldr	r2, [r7, #4]
 800f9c4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f9c6:	3204      	adds	r2, #4
 800f9c8:	7812      	ldrb	r2, [r2, #0]
 800f9ca:	b212      	sxth	r2, r2
 800f9cc:	430a      	orrs	r2, r1
 800f9ce:	b212      	sxth	r2, r2
 800f9d0:	b292      	uxth	r2, r2
 800f9d2:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d301      	bcc.n	800f9dc <mg_tls_got_record+0x3a>
 800f9d8:	2301      	movs	r3, #1
 800f9da:	e000      	b.n	800f9de <mg_tls_got_record+0x3c>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	f003 0301 	and.w	r3, r3, #1
 800f9e2:	b2db      	uxtb	r3, r3
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	370c      	adds	r7, #12
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	3368      	adds	r3, #104	@ 0x68
 800f9fc:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	3303      	adds	r3, #3
 800fa04:	781b      	ldrb	r3, [r3, #0]
 800fa06:	021b      	lsls	r3, r3, #8
 800fa08:	b21a      	sxth	r2, r3
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	3304      	adds	r3, #4
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	b21b      	sxth	r3, r3
 800fa14:	4313      	orrs	r3, r2
 800fa16:	b21b      	sxth	r3, r3
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	3305      	adds	r3, #5
 800fa1c:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 800fa1e:	897b      	ldrh	r3, [r7, #10]
 800fa20:	461a      	mov	r2, r3
 800fa22:	2100      	movs	r1, #0
 800fa24:	68f8      	ldr	r0, [r7, #12]
 800fa26:	f7f7 fb93 	bl	8007150 <mg_iobuf_del>
}
 800fa2a:	bf00      	nop
 800fa2c:	3710      	adds	r7, #16
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
	...

0800fa34 <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b086      	sub	sp, #24
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fa42:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	695b      	ldr	r3, [r3, #20]
 800fa4c:	4413      	add	r3, r2
 800fa4e:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	699b      	ldr	r3, [r3, #24]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d033      	beq.n	800fac0 <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	041a      	lsls	r2, r3, #16
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	3302      	adds	r3, #2
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	021b      	lsls	r3, r3, #8
 800fa68:	4313      	orrs	r3, r2
 800fa6a:	693a      	ldr	r2, [r7, #16]
 800fa6c:	3203      	adds	r2, #3
 800fa6e:	7812      	ldrb	r2, [r2, #0]
 800fa70:	4313      	orrs	r3, r2
 800fa72:	3304      	adds	r3, #4
 800fa74:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	699b      	ldr	r3, [r3, #24]
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d904      	bls.n	800fa8a <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 800fa80:	4911      	ldr	r1, [pc, #68]	@ (800fac8 <mg_tls_drop_message+0x94>)
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f7f2 ff6a 	bl	800295c <mg_error>
    return;
 800fa88:	e01b      	b.n	800fac2 <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	3320      	adds	r3, #32
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	6939      	ldr	r1, [r7, #16]
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fe fbf2 	bl	800e27c <mg_sha256_update>
  tls->recv_offset += len;
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	695a      	ldr	r2, [r3, #20]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	441a      	add	r2, r3
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	699a      	ldr	r2, [r3, #24]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	1ad2      	subs	r2, r2, r3
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	699b      	ldr	r3, [r3, #24]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d104      	bne.n	800fac2 <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f7ff ff99 	bl	800f9f0 <mg_tls_drop_record>
 800fabe:	e000      	b.n	800fac2 <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 800fac0:	bf00      	nop
  }
}
 800fac2:	3718      	adds	r7, #24
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	08027418 	.word	0x08027418

0800facc <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 800facc:	b590      	push	{r4, r7, lr}
 800face:	b0d1      	sub	sp, #324	@ 0x144
 800fad0:	af02      	add	r7, sp, #8
 800fad2:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 800fad6:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 800fada:	6020      	str	r0, [r4, #0]
 800fadc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800fae0:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 800fae4:	6001      	str	r1, [r0, #0]
 800fae6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800faea:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800faee:	600a      	str	r2, [r1, #0]
 800faf0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800faf4:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800faf8:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 800fafa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fafe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fb02:	6818      	ldr	r0, [r3, #0]
 800fb04:	f7f0 fc4c 	bl	80003a0 <strlen>
 800fb08:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 800fb0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fb10:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fb14:	4618      	mov	r0, r3
 800fb16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	f012 f961 	bl	8021de4 <memset>
 800fb22:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800fb26:	b2da      	uxtb	r2, r3
 800fb28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fb2c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fb30:	705a      	strb	r2, [r3, #1]
 800fb32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fb36:	b2da      	uxtb	r2, r3
 800fb38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fb3c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fb40:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 800fb42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d00c      	beq.n	800fb64 <mg_tls_derive_secret+0x98>
 800fb4a:	f107 0314 	add.w	r3, r7, #20
 800fb4e:	3303      	adds	r3, #3
 800fb50:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fb54:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 800fb58:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800fb5c:	6809      	ldr	r1, [r1, #0]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f012 f926 	bl	8021db0 <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 800fb64:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fb68:	3303      	adds	r3, #3
 800fb6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800fb6e:	b2d1      	uxtb	r1, r2
 800fb70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fb74:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800fb78:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 800fb7a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d00e      	beq.n	800fba0 <mg_tls_derive_secret+0xd4>
 800fb82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fb86:	3304      	adds	r3, #4
 800fb88:	f107 0214 	add.w	r2, r7, #20
 800fb8c:	18d0      	adds	r0, r2, r3
 800fb8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fb92:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800fb96:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800fb9a:	6819      	ldr	r1, [r3, #0]
 800fb9c:	f012 f908 	bl	8021db0 <memmove>
  packed[4 + labelsz + datasz] = 1;
 800fba0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800fba4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fba8:	4413      	add	r3, r2
 800fbaa:	3304      	adds	r3, #4
 800fbac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fbb0:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800fbb4:	2101      	movs	r1, #1
 800fbb6:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 800fbb8:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800fbbc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fbc0:	4413      	add	r3, r2
 800fbc2:	3305      	adds	r3, #5
 800fbc4:	f107 0414 	add.w	r4, r7, #20
 800fbc8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fbcc:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800fbd0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800fbd4:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 800fbd8:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800fbdc:	9300      	str	r3, [sp, #0]
 800fbde:	4623      	mov	r3, r4
 800fbe0:	6812      	ldr	r2, [r2, #0]
 800fbe2:	6809      	ldr	r1, [r1, #0]
 800fbe4:	f7fe fcbb 	bl	800e55e <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 800fbe8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800fbec:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 800fbf6:	f012 f8db 	bl	8021db0 <memmove>
}
 800fbfa:	bf00      	nop
 800fbfc:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd90      	pop	{r4, r7, pc}

0800fc04 <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b0cc      	sub	sp, #304	@ 0x130
 800fc08:	af04      	add	r7, sp, #16
 800fc0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fc0e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fc12:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800fc14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fc18:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fc22:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 800fc26:	2320      	movs	r3, #32
 800fc28:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 800fc2c:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800fc30:	2320      	movs	r3, #32
 800fc32:	9300      	str	r3, [sp, #0]
 800fc34:	4b89      	ldr	r3, [pc, #548]	@ (800fe5c <mg_tls_generate_handshake_keys+0x258>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	2100      	movs	r1, #0
 800fc3a:	f7fe fc90 	bl	800e55e <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 800fc3e:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800fc42:	2320      	movs	r3, #32
 800fc44:	9302      	str	r3, [sp, #8]
 800fc46:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	2320      	movs	r3, #32
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	4b83      	ldr	r3, [pc, #524]	@ (800fe60 <mg_tls_generate_handshake_keys+0x25c>)
 800fc52:	2220      	movs	r2, #32
 800fc54:	4883      	ldr	r0, [pc, #524]	@ (800fe64 <mg_tls_generate_handshake_keys+0x260>)
 800fc56:	f7ff ff39 	bl	800facc <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 800fc5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fc5e:	f503 7032 	add.w	r0, r3, #712	@ 0x2c8
                 sizeof(pre_extract_secret), tls->x25519_sec,
 800fc62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fc66:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 800fc68:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800fc6c:	2220      	movs	r2, #32
 800fc6e:	9200      	str	r2, [sp, #0]
 800fc70:	2220      	movs	r2, #32
 800fc72:	f7fe fc74 	bl	800e55e <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 800fc76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fc7a:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800fc7e:	2220      	movs	r2, #32
 800fc80:	4619      	mov	r1, r3
 800fc82:	4879      	ldr	r0, [pc, #484]	@ (800fe68 <mg_tls_generate_handshake_keys+0x264>)
 800fc84:	f7ff fda2 	bl	800f7cc <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800fc88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fc8c:	f103 0120 	add.w	r1, r3, #32
 800fc90:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800fc94:	2270      	movs	r2, #112	@ 0x70
 800fc96:	4618      	mov	r0, r3
 800fc98:	f012 f88a 	bl	8021db0 <memmove>
  mg_sha256_final(hello_hash, &sha256);
 800fc9c:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800fca0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800fca4:	4611      	mov	r1, r2
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fe fb21 	bl	800e2ee <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 800fcac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800fcb0:	2220      	movs	r2, #32
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	486d      	ldr	r0, [pc, #436]	@ (800fe6c <mg_tls_generate_handshake_keys+0x268>)
 800fcb6:	f7ff fd89 	bl	800f7cc <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 800fcba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fcbe:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800fcc2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800fcc6:	2320      	movs	r3, #32
 800fcc8:	9302      	str	r3, [sp, #8]
 800fcca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fcce:	9301      	str	r3, [sp, #4]
 800fcd0:	2320      	movs	r3, #32
 800fcd2:	9300      	str	r3, [sp, #0]
 800fcd4:	4613      	mov	r3, r2
 800fcd6:	2220      	movs	r2, #32
 800fcd8:	4865      	ldr	r0, [pc, #404]	@ (800fe70 <mg_tls_generate_handshake_keys+0x26c>)
 800fcda:	f7ff fef7 	bl	800facc <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 800fcde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fce2:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800fce6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800fcea:	2320      	movs	r3, #32
 800fcec:	9302      	str	r3, [sp, #8]
 800fcee:	f107 0308 	add.w	r3, r7, #8
 800fcf2:	9301      	str	r3, [sp, #4]
 800fcf4:	2320      	movs	r3, #32
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	4613      	mov	r3, r2
 800fcfa:	2220      	movs	r2, #32
 800fcfc:	485d      	ldr	r0, [pc, #372]	@ (800fe74 <mg_tls_generate_handshake_keys+0x270>)
 800fcfe:	f7ff fee5 	bl	800facc <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 800fd02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd06:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 800fd0a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fd0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fd12:	9202      	str	r2, [sp, #8]
 800fd14:	9301      	str	r3, [sp, #4]
 800fd16:	2300      	movs	r3, #0
 800fd18:	9300      	str	r3, [sp, #0]
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	2220      	movs	r2, #32
 800fd1e:	4856      	ldr	r0, [pc, #344]	@ (800fe78 <mg_tls_generate_handshake_keys+0x274>)
 800fd20:	f7ff fed4 	bl	800facc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 800fd24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd28:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 800fd2c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fd30:	220c      	movs	r2, #12
 800fd32:	9202      	str	r2, [sp, #8]
 800fd34:	9301      	str	r3, [sp, #4]
 800fd36:	2300      	movs	r3, #0
 800fd38:	9300      	str	r3, [sp, #0]
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	2220      	movs	r2, #32
 800fd3e:	484f      	ldr	r0, [pc, #316]	@ (800fe7c <mg_tls_generate_handshake_keys+0x278>)
 800fd40:	f7ff fec4 	bl	800facc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 800fd44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd48:	f503 7345 	add.w	r3, r3, #788	@ 0x314
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 800fd4c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fd50:	2220      	movs	r2, #32
 800fd52:	9202      	str	r2, [sp, #8]
 800fd54:	9301      	str	r3, [sp, #4]
 800fd56:	2300      	movs	r3, #0
 800fd58:	9300      	str	r3, [sp, #0]
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	2220      	movs	r2, #32
 800fd5e:	4848      	ldr	r0, [pc, #288]	@ (800fe80 <mg_tls_generate_handshake_keys+0x27c>)
 800fd60:	f7ff feb4 	bl	800facc <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 800fd64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd68:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 800fd6c:	f107 0108 	add.w	r1, r7, #8
 800fd70:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fd74:	9202      	str	r2, [sp, #8]
 800fd76:	9301      	str	r3, [sp, #4]
 800fd78:	2300      	movs	r3, #0
 800fd7a:	9300      	str	r3, [sp, #0]
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	2220      	movs	r2, #32
 800fd80:	483d      	ldr	r0, [pc, #244]	@ (800fe78 <mg_tls_generate_handshake_keys+0x274>)
 800fd82:	f7ff fea3 	bl	800facc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 800fd86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fd8a:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 800fd8e:	f107 0108 	add.w	r1, r7, #8
 800fd92:	220c      	movs	r2, #12
 800fd94:	9202      	str	r2, [sp, #8]
 800fd96:	9301      	str	r3, [sp, #4]
 800fd98:	2300      	movs	r3, #0
 800fd9a:	9300      	str	r3, [sp, #0]
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	2220      	movs	r2, #32
 800fda0:	4836      	ldr	r0, [pc, #216]	@ (800fe7c <mg_tls_generate_handshake_keys+0x278>)
 800fda2:	f7ff fe93 	bl	800facc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 800fda6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fdaa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 800fdae:	f107 0108 	add.w	r1, r7, #8
 800fdb2:	2220      	movs	r2, #32
 800fdb4:	9202      	str	r2, [sp, #8]
 800fdb6:	9301      	str	r3, [sp, #4]
 800fdb8:	2300      	movs	r3, #0
 800fdba:	9300      	str	r3, [sp, #0]
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	2220      	movs	r2, #32
 800fdc0:	482f      	ldr	r0, [pc, #188]	@ (800fe80 <mg_tls_generate_handshake_keys+0x27c>)
 800fdc2:	f7ff fe83 	bl	800facc <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 800fdc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fdca:	2220      	movs	r2, #32
 800fdcc:	4619      	mov	r1, r3
 800fdce:	482d      	ldr	r0, [pc, #180]	@ (800fe84 <mg_tls_generate_handshake_keys+0x280>)
 800fdd0:	f7ff fcfc 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 800fdd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fdd8:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800fddc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fde0:	4619      	mov	r1, r3
 800fde2:	4829      	ldr	r0, [pc, #164]	@ (800fe88 <mg_tls_generate_handshake_keys+0x284>)
 800fde4:	f7ff fcf2 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 800fde8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fdec:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800fdf0:	220c      	movs	r2, #12
 800fdf2:	4619      	mov	r1, r3
 800fdf4:	4825      	ldr	r0, [pc, #148]	@ (800fe8c <mg_tls_generate_handshake_keys+0x288>)
 800fdf6:	f7ff fce9 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 800fdfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fdfe:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800fe02:	2220      	movs	r2, #32
 800fe04:	4619      	mov	r1, r3
 800fe06:	4822      	ldr	r0, [pc, #136]	@ (800fe90 <mg_tls_generate_handshake_keys+0x28c>)
 800fe08:	f7ff fce0 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 800fe0c:	f107 0308 	add.w	r3, r7, #8
 800fe10:	2220      	movs	r2, #32
 800fe12:	4619      	mov	r1, r3
 800fe14:	481f      	ldr	r0, [pc, #124]	@ (800fe94 <mg_tls_generate_handshake_keys+0x290>)
 800fe16:	f7ff fcd9 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 800fe1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fe1e:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800fe22:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fe26:	4619      	mov	r1, r3
 800fe28:	481b      	ldr	r0, [pc, #108]	@ (800fe98 <mg_tls_generate_handshake_keys+0x294>)
 800fe2a:	f7ff fccf 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 800fe2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fe32:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 800fe36:	220c      	movs	r2, #12
 800fe38:	4619      	mov	r1, r3
 800fe3a:	4818      	ldr	r0, [pc, #96]	@ (800fe9c <mg_tls_generate_handshake_keys+0x298>)
 800fe3c:	f7ff fcc6 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 800fe40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fe44:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800fe48:	2220      	movs	r2, #32
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	4814      	ldr	r0, [pc, #80]	@ (800fea0 <mg_tls_generate_handshake_keys+0x29c>)
 800fe4e:	f7ff fcbd 	bl	800f7cc <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 800fe52:	bf00      	nop
 800fe54:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	24000da0 	.word	0x24000da0
 800fe60:	24000248 	.word	0x24000248
 800fe64:	08027424 	.word	0x08027424
 800fe68:	08027434 	.word	0x08027434
 800fe6c:	08027440 	.word	0x08027440
 800fe70:	0802744c 	.word	0x0802744c
 800fe74:	08027460 	.word	0x08027460
 800fe78:	08027474 	.word	0x08027474
 800fe7c:	08027480 	.word	0x08027480
 800fe80:	0802748c 	.word	0x0802748c
 800fe84:	0802749c 	.word	0x0802749c
 800fe88:	080274ac 	.word	0x080274ac
 800fe8c:	080274b4 	.word	0x080274b4
 800fe90:	080274bc 	.word	0x080274bc
 800fe94:	080274c8 	.word	0x080274c8
 800fe98:	080274d8 	.word	0x080274d8
 800fe9c:	080274e0 	.word	0x080274e0
 800fea0:	080274e8 	.word	0x080274e8

0800fea4 <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b0cc      	sub	sp, #304	@ 0x130
 800fea8:	af04      	add	r7, sp, #16
 800feaa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800feae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800feb2:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800feb4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800feb8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fec2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 800fec6:	2320      	movs	r3, #32
 800fec8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800fecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fed0:	f103 0120 	add.w	r1, r3, #32
 800fed4:	f107 0308 	add.w	r3, r7, #8
 800fed8:	2270      	movs	r2, #112	@ 0x70
 800feda:	4618      	mov	r0, r3
 800fedc:	f011 ff68 	bl	8021db0 <memmove>
  mg_sha256_final(hash, &sha256);
 800fee0:	f107 0208 	add.w	r2, r7, #8
 800fee4:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800fee8:	4611      	mov	r1, r2
 800feea:	4618      	mov	r0, r3
 800feec:	f7fe f9ff 	bl	800e2ee <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 800fef0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fef4:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800fef8:	2320      	movs	r3, #32
 800fefa:	9302      	str	r3, [sp, #8]
 800fefc:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800ff00:	9301      	str	r3, [sp, #4]
 800ff02:	2320      	movs	r3, #32
 800ff04:	9300      	str	r3, [sp, #0]
 800ff06:	4b64      	ldr	r3, [pc, #400]	@ (8010098 <mg_tls_generate_application_keys+0x1f4>)
 800ff08:	2220      	movs	r2, #32
 800ff0a:	4864      	ldr	r0, [pc, #400]	@ (801009c <mg_tls_generate_application_keys+0x1f8>)
 800ff0c:	f7ff fdde 	bl	800facc <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 800ff10:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 800ff14:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800ff18:	2320      	movs	r3, #32
 800ff1a:	9300      	str	r3, [sp, #0]
 800ff1c:	4b60      	ldr	r3, [pc, #384]	@ (80100a0 <mg_tls_generate_application_keys+0x1fc>)
 800ff1e:	2220      	movs	r2, #32
 800ff20:	f7fe fb1d 	bl	800e55e <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 800ff24:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 800ff28:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 800ff2c:	2320      	movs	r3, #32
 800ff2e:	9302      	str	r3, [sp, #8]
 800ff30:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	2320      	movs	r3, #32
 800ff38:	9300      	str	r3, [sp, #0]
 800ff3a:	4613      	mov	r3, r2
 800ff3c:	2220      	movs	r2, #32
 800ff3e:	4859      	ldr	r0, [pc, #356]	@ (80100a4 <mg_tls_generate_application_keys+0x200>)
 800ff40:	f7ff fdc4 	bl	800facc <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 800ff44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff48:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 800ff4c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800ff50:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800ff54:	9202      	str	r2, [sp, #8]
 800ff56:	9301      	str	r3, [sp, #4]
 800ff58:	2300      	movs	r3, #0
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	2220      	movs	r2, #32
 800ff60:	4851      	ldr	r0, [pc, #324]	@ (80100a8 <mg_tls_generate_application_keys+0x204>)
 800ff62:	f7ff fdb3 	bl	800facc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 800ff66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff6a:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 800ff6e:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800ff72:	220c      	movs	r2, #12
 800ff74:	9202      	str	r2, [sp, #8]
 800ff76:	9301      	str	r3, [sp, #4]
 800ff78:	2300      	movs	r3, #0
 800ff7a:	9300      	str	r3, [sp, #0]
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	2220      	movs	r2, #32
 800ff80:	484a      	ldr	r0, [pc, #296]	@ (80100ac <mg_tls_generate_application_keys+0x208>)
 800ff82:	f7ff fda3 	bl	800facc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 800ff86:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 800ff8a:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 800ff8e:	2320      	movs	r3, #32
 800ff90:	9302      	str	r3, [sp, #8]
 800ff92:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800ff96:	9301      	str	r3, [sp, #4]
 800ff98:	2320      	movs	r3, #32
 800ff9a:	9300      	str	r3, [sp, #0]
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	2220      	movs	r2, #32
 800ffa0:	4843      	ldr	r0, [pc, #268]	@ (80100b0 <mg_tls_generate_application_keys+0x20c>)
 800ffa2:	f7ff fd93 	bl	800facc <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 800ffa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffaa:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 800ffae:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800ffb2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800ffb6:	9202      	str	r2, [sp, #8]
 800ffb8:	9301      	str	r3, [sp, #4]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	9300      	str	r3, [sp, #0]
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	2220      	movs	r2, #32
 800ffc2:	4839      	ldr	r0, [pc, #228]	@ (80100a8 <mg_tls_generate_application_keys+0x204>)
 800ffc4:	f7ff fd82 	bl	800facc <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 800ffc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffcc:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 800ffd0:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800ffd4:	220c      	movs	r2, #12
 800ffd6:	9202      	str	r2, [sp, #8]
 800ffd8:	9301      	str	r3, [sp, #4]
 800ffda:	2300      	movs	r3, #0
 800ffdc:	9300      	str	r3, [sp, #0]
 800ffde:	2300      	movs	r3, #0
 800ffe0:	2220      	movs	r2, #32
 800ffe2:	4832      	ldr	r0, [pc, #200]	@ (80100ac <mg_tls_generate_application_keys+0x208>)
 800ffe4:	f7ff fd72 	bl	800facc <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 800ffe8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800ffec:	2220      	movs	r2, #32
 800ffee:	4619      	mov	r1, r3
 800fff0:	4830      	ldr	r0, [pc, #192]	@ (80100b4 <mg_tls_generate_application_keys+0x210>)
 800fff2:	f7ff fbeb 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 800fff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fffa:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800fffe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8010002:	4619      	mov	r1, r3
 8010004:	482c      	ldr	r0, [pc, #176]	@ (80100b8 <mg_tls_generate_application_keys+0x214>)
 8010006:	f7ff fbe1 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 801000a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801000e:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8010012:	220c      	movs	r2, #12
 8010014:	4619      	mov	r1, r3
 8010016:	4829      	ldr	r0, [pc, #164]	@ (80100bc <mg_tls_generate_application_keys+0x218>)
 8010018:	f7ff fbd8 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 801001c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010020:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8010024:	2220      	movs	r2, #32
 8010026:	4619      	mov	r1, r3
 8010028:	4825      	ldr	r0, [pc, #148]	@ (80100c0 <mg_tls_generate_application_keys+0x21c>)
 801002a:	f7ff fbcf 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 801002e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8010032:	2220      	movs	r2, #32
 8010034:	4619      	mov	r1, r3
 8010036:	4823      	ldr	r0, [pc, #140]	@ (80100c4 <mg_tls_generate_application_keys+0x220>)
 8010038:	f7ff fbc8 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 801003c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010040:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8010044:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8010048:	4619      	mov	r1, r3
 801004a:	481f      	ldr	r0, [pc, #124]	@ (80100c8 <mg_tls_generate_application_keys+0x224>)
 801004c:	f7ff fbbe 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8010050:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010054:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8010058:	220c      	movs	r2, #12
 801005a:	4619      	mov	r1, r3
 801005c:	481b      	ldr	r0, [pc, #108]	@ (80100cc <mg_tls_generate_application_keys+0x228>)
 801005e:	f7ff fbb5 	bl	800f7cc <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8010062:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010066:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801006a:	2220      	movs	r2, #32
 801006c:	4619      	mov	r1, r3
 801006e:	4818      	ldr	r0, [pc, #96]	@ (80100d0 <mg_tls_generate_application_keys+0x22c>)
 8010070:	f7ff fbac 	bl	800f7cc <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 8010074:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010078:	2200      	movs	r2, #0
 801007a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 801007e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010082:	f8d3 22c4 	ldr.w	r2, [r3, #708]	@ 0x2c4
 8010086:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801008a:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 801008e:	bf00      	nop
 8010090:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}
 8010098:	24000248 	.word	0x24000248
 801009c:	08027424 	.word	0x08027424
 80100a0:	24000da0 	.word	0x24000da0
 80100a4:	080274f4 	.word	0x080274f4
 80100a8:	08027474 	.word	0x08027474
 80100ac:	08027480 	.word	0x08027480
 80100b0:	08027508 	.word	0x08027508
 80100b4:	0802751c 	.word	0x0802751c
 80100b8:	080274ac 	.word	0x080274ac
 80100bc:	080274b4 	.word	0x080274b4
 80100c0:	080274bc 	.word	0x080274bc
 80100c4:	0802752c 	.word	0x0802752c
 80100c8:	080274d8 	.word	0x080274d8
 80100cc:	080274e0 	.word	0x080274e0
 80100d0:	080274e8 	.word	0x080274e8

080100d4 <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b09a      	sub	sp, #104	@ 0x68
 80100d8:	af04      	add	r7, sp, #16
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	60b9      	str	r1, [r7, #8]
 80100de:	607a      	str	r2, [r7, #4]
 80100e0:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80100e8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 80100ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100ec:	3304      	adds	r3, #4
 80100ee:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	3311      	adds	r3, #17
 80100f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 80100f6:	2317      	movs	r3, #23
 80100f8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80100fc:	2303      	movs	r3, #3
 80100fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8010102:	2303      	movs	r3, #3
 8010104:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8010108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801010a:	0a1b      	lsrs	r3, r3, #8
 801010c:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 801010e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8010112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010114:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8010116:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 801011a:	2317      	movs	r3, #23
 801011c:	773b      	strb	r3, [r7, #28]
 801011e:	2303      	movs	r3, #3
 8010120:	777b      	strb	r3, [r7, #29]
 8010122:	2303      	movs	r3, #3
 8010124:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 8010126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010128:	0a1b      	lsrs	r3, r3, #8
 801012a:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 801012c:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 801012e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010130:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8010132:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801013c:	f003 0302 	and.w	r3, r3, #2
 8010140:	b2db      	uxtb	r3, r3
 8010142:	2b00      	cmp	r3, #0
 8010144:	d003      	beq.n	801014e <mg_tls_encrypt+0x7a>
 8010146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010148:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801014c:	e002      	b.n	8010154 <mg_tls_encrypt+0x80>
 801014e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010154:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801015c:	f003 0302 	and.w	r3, r3, #2
 8010160:	b2db      	uxtb	r3, r3
 8010162:	2b00      	cmp	r3, #0
 8010164:	d003      	beq.n	801016e <mg_tls_encrypt+0x9a>
 8010166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010168:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 801016c:	e002      	b.n	8010174 <mg_tls_encrypt+0xa0>
 801016e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010170:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  uint8_t *key =
 8010174:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801017c:	f003 0302 	and.w	r3, r3, #2
 8010180:	b2db      	uxtb	r3, r3
 8010182:	2b00      	cmp	r3, #0
 8010184:	d003      	beq.n	801018e <mg_tls_encrypt+0xba>
 8010186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010188:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 801018c:	e002      	b.n	8010194 <mg_tls_encrypt+0xc0>
 801018e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010190:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  uint8_t *iv =
 8010194:	643b      	str	r3, [r7, #64]	@ 0x40

#if !CHACHA20
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 8010196:	f107 0310 	add.w	r3, r7, #16
 801019a:	220c      	movs	r2, #12
 801019c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801019e:	4618      	mov	r0, r3
 80101a0:	f011 fe06 	bl	8021db0 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 80101a4:	7e3a      	ldrb	r2, [r7, #24]
 80101a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101a8:	0e1b      	lsrs	r3, r3, #24
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	4053      	eors	r3, r2
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 80101b2:	7e7a      	ldrb	r2, [r7, #25]
 80101b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101b6:	0c1b      	lsrs	r3, r3, #16
 80101b8:	b2db      	uxtb	r3, r3
 80101ba:	4053      	eors	r3, r2
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 80101c0:	7eba      	ldrb	r2, [r7, #26]
 80101c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101c4:	0a1b      	lsrs	r3, r3, #8
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	4053      	eors	r3, r2
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 80101ce:	7efa      	ldrb	r2, [r7, #27]
 80101d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	4053      	eors	r3, r2
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 80101da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80101dc:	6899      	ldr	r1, [r3, #8]
 80101de:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80101e2:	2305      	movs	r3, #5
 80101e4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80101e6:	f7f6 ff61 	bl	80070ac <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 80101ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80101ec:	689a      	ldr	r2, [r3, #8]
 80101ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101f0:	4413      	add	r3, r2
 80101f2:	4619      	mov	r1, r3
 80101f4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80101f6:	f7f6 fecd 	bl	8006f94 <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 80101fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	4413      	add	r3, r2
 8010204:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 8010206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801020c:	6899      	ldr	r1, [r3, #8]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	440b      	add	r3, r1
 8010212:	3301      	adds	r3, #1
 8010214:	4413      	add	r3, r2
 8010216:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 8010218:	687a      	ldr	r2, [r7, #4]
 801021a:	68b9      	ldr	r1, [r7, #8]
 801021c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801021e:	f011 fdc7 	bl	8021db0 <memmove>
  outmsg[msgsz] = msgtype;
 8010222:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	4413      	add	r3, r2
 8010228:	78fa      	ldrb	r2, [r7, #3]
 801022a:	701a      	strb	r2, [r3, #0]
#if CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 801022c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010230:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) calloc(1, maxlen + 256 + 1);
 8010232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010234:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8010238:	4619      	mov	r1, r3
 801023a:	2001      	movs	r0, #1
 801023c:	f010 fb20 	bl	8020880 <calloc>
 8010240:	4603      	mov	r3, r0
 8010242:	633b      	str	r3, [r7, #48]	@ 0x30
    if (enc == NULL) {
 8010244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010246:	2b00      	cmp	r3, #0
 8010248:	d104      	bne.n	8010254 <mg_tls_encrypt+0x180>
      mg_error(c, "TLS OOM");
 801024a:	491f      	ldr	r1, [pc, #124]	@ (80102c8 <mg_tls_encrypt+0x1f4>)
 801024c:	68f8      	ldr	r0, [r7, #12]
 801024e:	f7f2 fb85 	bl	800295c <mg_error>
 8010252:	e035      	b.n	80102c0 <mg_tls_encrypt+0x1ec>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	3301      	adds	r3, #1
 8010258:	f107 011c 	add.w	r1, r7, #28
 801025c:	f107 0210 	add.w	r2, r7, #16
 8010260:	9302      	str	r3, [sp, #8]
 8010262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010264:	9301      	str	r3, [sp, #4]
 8010266:	2305      	movs	r3, #5
 8010268:	9300      	str	r3, [sp, #0]
 801026a:	460b      	mov	r3, r1
 801026c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801026e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010270:	f004 f89d 	bl	80143ae <mg_chacha20_poly1305_encrypt>
 8010274:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 8010276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010278:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801027a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801027c:	f011 fd98 	bl	8021db0 <memmove>
      free(enc);
 8010280:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010282:	f010 fb21 	bl	80208c8 <free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801028c:	f003 0302 	and.w	r3, r3, #2
 8010290:	b2db      	uxtb	r3, r3
 8010292:	2b00      	cmp	r3, #0
 8010294:	d007      	beq.n	80102a6 <mg_tls_encrypt+0x1d2>
 8010296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010298:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801029c:	1c5a      	adds	r2, r3, #1
 801029e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 80102a4:	e006      	b.n	80102b4 <mg_tls_encrypt+0x1e0>
 80102a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80102ac:	1c5a      	adds	r2, r3, #1
 80102ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102b0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  wio->len += encsz;
 80102b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102b6:	689a      	ldr	r2, [r3, #8]
 80102b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102ba:	441a      	add	r2, r3
 80102bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102be:	609a      	str	r2, [r3, #8]
}
 80102c0:	3758      	adds	r7, #88	@ 0x58
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}
 80102c6:	bf00      	nop
 80102c8:	0802753c 	.word	0x0802753c

080102cc <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b092      	sub	sp, #72	@ 0x48
 80102d0:	af02      	add	r7, sp, #8
 80102d2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80102da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	3368      	adds	r3, #104	@ 0x68
 80102e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80102e8:	f003 0302 	and.w	r3, r3, #2
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d003      	beq.n	80102fa <mg_tls_recv_record+0x2e>
 80102f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80102f8:	e002      	b.n	8010300 <mg_tls_recv_record+0x34>
 80102fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010300:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010308:	f003 0302 	and.w	r3, r3, #2
 801030c:	b2db      	uxtb	r3, r3
 801030e:	2b00      	cmp	r3, #0
 8010310:	d003      	beq.n	801031a <mg_tls_recv_record+0x4e>
 8010312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010314:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8010318:	e002      	b.n	8010320 <mg_tls_recv_record+0x54>
 801031a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801031c:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  uint8_t *key =
 8010320:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010328:	f003 0302 	and.w	r3, r3, #2
 801032c:	b2db      	uxtb	r3, r3
 801032e:	2b00      	cmp	r3, #0
 8010330:	d003      	beq.n	801033a <mg_tls_recv_record+0x6e>
 8010332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010334:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8010338:	e002      	b.n	8010340 <mg_tls_recv_record+0x74>
 801033a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801033c:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  uint8_t *iv =
 8010340:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 8010342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010344:	699b      	ldr	r3, [r3, #24]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d001      	beq.n	801034e <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 801034a:	2300      	movs	r3, #0
 801034c:	e0bc      	b.n	80104c8 <mg_tls_recv_record+0x1fc>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f7ff fb27 	bl	800f9a2 <mg_tls_got_record>
 8010354:	4603      	mov	r3, r0
 8010356:	f083 0301 	eor.w	r3, r3, #1
 801035a:	b2db      	uxtb	r3, r3
 801035c:	2b00      	cmp	r3, #0
 801035e:	d002      	beq.n	8010366 <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 8010360:	f06f 0301 	mvn.w	r3, #1
 8010364:	e0b0      	b.n	80104c8 <mg_tls_recv_record+0x1fc>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 8010366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	2b17      	cmp	r3, #23
 801036e:	d026      	beq.n	80103be <mg_tls_recv_record+0xf2>
      break;
    } else if (rio->buf[0] ==
 8010370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	2b14      	cmp	r3, #20
 8010378:	d103      	bne.n	8010382 <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f7ff fb38 	bl	800f9f0 <mg_tls_drop_record>
 8010380:	e7e5      	b.n	801034e <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 8010382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	2b15      	cmp	r3, #21
 801038a:	d111      	bne.n	80103b0 <mg_tls_recv_record+0xe4>
      MG_INFO(("TLS ALERT packet received"));
 801038c:	4b50      	ldr	r3, [pc, #320]	@ (80104d0 <mg_tls_recv_record+0x204>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b01      	cmp	r3, #1
 8010392:	dd09      	ble.n	80103a8 <mg_tls_recv_record+0xdc>
 8010394:	4b4f      	ldr	r3, [pc, #316]	@ (80104d4 <mg_tls_recv_record+0x208>)
 8010396:	f242 729d 	movw	r2, #10141	@ 0x279d
 801039a:	494f      	ldr	r1, [pc, #316]	@ (80104d8 <mg_tls_recv_record+0x20c>)
 801039c:	2002      	movs	r0, #2
 801039e:	f7f7 fdc7 	bl	8007f30 <mg_log_prefix>
 80103a2:	484e      	ldr	r0, [pc, #312]	@ (80104dc <mg_tls_recv_record+0x210>)
 80103a4:	f7f7 fe14 	bl	8007fd0 <mg_log>
      mg_tls_drop_record(c);
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f7ff fb21 	bl	800f9f0 <mg_tls_drop_record>
 80103ae:	e7ce      	b.n	801034e <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 80103b0:	494b      	ldr	r1, [pc, #300]	@ (80104e0 <mg_tls_recv_record+0x214>)
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7f2 fad2 	bl	800295c <mg_error>
      return -1;
 80103b8:	f04f 33ff 	mov.w	r3, #4294967295
 80103bc:	e084      	b.n	80104c8 <mg_tls_recv_record+0x1fc>
      break;
 80103be:	bf00      	nop

#if !CHACHA20
  mg_gcm_initialize();
#endif

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 80103c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	3303      	adds	r3, #3
 80103c6:	781b      	ldrb	r3, [r3, #0]
 80103c8:	021b      	lsls	r3, r3, #8
 80103ca:	b21a      	sxth	r2, r3
 80103cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	3304      	adds	r3, #4
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	b21b      	sxth	r3, r3
 80103d6:	4313      	orrs	r3, r2
 80103d8:	b21b      	sxth	r3, r3
 80103da:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 80103dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	3305      	adds	r3, #5
 80103e2:	627b      	str	r3, [r7, #36]	@ 0x24
  memmove(nonce, iv, sizeof(nonce));
 80103e4:	f107 030c 	add.w	r3, r7, #12
 80103e8:	220c      	movs	r2, #12
 80103ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80103ec:	4618      	mov	r0, r3
 80103ee:	f011 fcdf 	bl	8021db0 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 80103f2:	7d3a      	ldrb	r2, [r7, #20]
 80103f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103f6:	0e1b      	lsrs	r3, r3, #24
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	4053      	eors	r3, r2
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8010400:	7d7a      	ldrb	r2, [r7, #21]
 8010402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010404:	0c1b      	lsrs	r3, r3, #16
 8010406:	b2db      	uxtb	r3, r3
 8010408:	4053      	eors	r3, r2
 801040a:	b2db      	uxtb	r3, r3
 801040c:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 801040e:	7dba      	ldrb	r2, [r7, #22]
 8010410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010412:	0a1b      	lsrs	r3, r3, #8
 8010414:	b2db      	uxtb	r3, r3
 8010416:	4053      	eors	r3, r2
 8010418:	b2db      	uxtb	r3, r3
 801041a:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 801041c:	7dfa      	ldrb	r2, [r7, #23]
 801041e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010420:	b2db      	uxtb	r3, r3
 8010422:	4053      	eors	r3, r2
 8010424:	b2db      	uxtb	r3, r3
 8010426:	75fb      	strb	r3, [r7, #23]
#if CHACHA20
  {
    uint8_t *dec = (uint8_t *) calloc(1, msgsz);
 8010428:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801042a:	4619      	mov	r1, r3
 801042c:	2001      	movs	r0, #1
 801042e:	f010 fa27 	bl	8020880 <calloc>
 8010432:	4603      	mov	r3, r0
 8010434:	623b      	str	r3, [r7, #32]
    size_t n;
    if (dec == NULL) {
 8010436:	6a3b      	ldr	r3, [r7, #32]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d106      	bne.n	801044a <mg_tls_recv_record+0x17e>
      mg_error(c, "TLS OOM");
 801043c:	4929      	ldr	r1, [pc, #164]	@ (80104e4 <mg_tls_recv_record+0x218>)
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f7f2 fa8c 	bl	800295c <mg_error>
      return -1;
 8010444:	f04f 33ff 	mov.w	r3, #4294967295
 8010448:	e03e      	b.n	80104c8 <mg_tls_recv_record+0x1fc>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 801044a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801044c:	f107 020c 	add.w	r2, r7, #12
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010454:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010456:	6a38      	ldr	r0, [r7, #32]
 8010458:	f003 ffe1 	bl	801441e <mg_chacha20_poly1305_decrypt>
 801045c:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 801045e:	69fa      	ldr	r2, [r7, #28]
 8010460:	6a39      	ldr	r1, [r7, #32]
 8010462:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010464:	f011 fca4 	bl	8021db0 <memmove>
    free(dec);
 8010468:	6a38      	ldr	r0, [r7, #32]
 801046a:	f010 fa2d 	bl	80208c8 <free>
    mg_error(c, "wrong size");
    return -1;
  }
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif
  r = msgsz - 16 - 1;
 801046e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010470:	3b11      	subs	r3, #17
 8010472:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 8010474:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010476:	3b11      	subs	r3, #17
 8010478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801047a:	4413      	add	r3, r2
 801047c:	781a      	ldrb	r2, [r3, #0]
 801047e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010480:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 8010482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010486:	6812      	ldr	r2, [r2, #0]
 8010488:	1a9a      	subs	r2, r3, r2
 801048a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801048c:	615a      	str	r2, [r3, #20]
  tls->recv_len = msgsz - 16 - 1;
 801048e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010490:	3b11      	subs	r3, #17
 8010492:	461a      	mov	r2, r3
 8010494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010496:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801049e:	f003 0302 	and.w	r3, r3, #2
 80104a2:	b2db      	uxtb	r3, r3
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d007      	beq.n	80104b8 <mg_tls_recv_record+0x1ec>
 80104a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80104ae:	1c5a      	adds	r2, r3, #1
 80104b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104b2:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
 80104b6:	e006      	b.n	80104c6 <mg_tls_recv_record+0x1fa>
 80104b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80104be:	1c5a      	adds	r2, r3, #1
 80104c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104c2:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
  return r;
 80104c6:	69bb      	ldr	r3, [r7, #24]
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3740      	adds	r7, #64	@ 0x40
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	24000240 	.word	0x24000240
 80104d4:	08029150 	.word	0x08029150
 80104d8:	0802597c 	.word	0x0802597c
 80104dc:	08027544 	.word	0x08027544
 80104e0:	08027560 	.word	0x08027560
 80104e4:	0802753c 	.word	0x0802753c

080104e8 <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], int is_client) {
 80104e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104ea:	b0d5      	sub	sp, #340	@ 0x154
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80104f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80104f6:	6018      	str	r0, [r3, #0]
 80104f8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80104fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8010500:	6019      	str	r1, [r3, #0]
 8010502:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010506:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801050a:	601a      	str	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801050c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010510:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801051a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 801051e:	4b41      	ldr	r3, [pc, #260]	@ (8010624 <mg_tls_calc_cert_verify_hash+0x13c>)
 8010520:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8010524:	461d      	mov	r5, r3
 8010526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801052a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801052c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801052e:	682b      	ldr	r3, [r5, #0]
 8010530:	8023      	strh	r3, [r4, #0]
  uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 8010532:	4b3d      	ldr	r3, [pc, #244]	@ (8010628 <mg_tls_calc_cert_verify_hash+0x140>)
 8010534:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8010538:	461d      	mov	r5, r3
 801053a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801053c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801053e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010542:	682b      	ldr	r3, [r5, #0]
 8010544:	8023      	strh	r3, [r4, #0]
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 8010546:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801054a:	2240      	movs	r2, #64	@ 0x40
 801054c:	2120      	movs	r1, #32
 801054e:	4618      	mov	r0, r3
 8010550:	f011 fc48 	bl	8021de4 <memset>
  if (is_client) {
 8010554:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010558:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d018      	beq.n	8010594 <mg_tls_calc_cert_verify_hash+0xac>
    memmove(sig_content + 64, client_context, sizeof(client_context));
 8010562:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8010566:	3340      	adds	r3, #64	@ 0x40
 8010568:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 801056c:	469c      	mov	ip, r3
 801056e:	f104 0e20 	add.w	lr, r4, #32
 8010572:	4665      	mov	r5, ip
 8010574:	4626      	mov	r6, r4
 8010576:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010578:	6028      	str	r0, [r5, #0]
 801057a:	6069      	str	r1, [r5, #4]
 801057c:	60aa      	str	r2, [r5, #8]
 801057e:	60eb      	str	r3, [r5, #12]
 8010580:	3410      	adds	r4, #16
 8010582:	f10c 0c10 	add.w	ip, ip, #16
 8010586:	4574      	cmp	r4, lr
 8010588:	d1f3      	bne.n	8010572 <mg_tls_calc_cert_verify_hash+0x8a>
 801058a:	4662      	mov	r2, ip
 801058c:	4623      	mov	r3, r4
 801058e:	881b      	ldrh	r3, [r3, #0]
 8010590:	8013      	strh	r3, [r2, #0]
 8010592:	e017      	b.n	80105c4 <mg_tls_calc_cert_verify_hash+0xdc>
  } else {
    memmove(sig_content + 64, server_context, sizeof(server_context));
 8010594:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8010598:	3340      	adds	r3, #64	@ 0x40
 801059a:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 801059e:	469c      	mov	ip, r3
 80105a0:	f104 0e20 	add.w	lr, r4, #32
 80105a4:	4665      	mov	r5, ip
 80105a6:	4626      	mov	r6, r4
 80105a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80105aa:	6028      	str	r0, [r5, #0]
 80105ac:	6069      	str	r1, [r5, #4]
 80105ae:	60aa      	str	r2, [r5, #8]
 80105b0:	60eb      	str	r3, [r5, #12]
 80105b2:	3410      	adds	r4, #16
 80105b4:	f10c 0c10 	add.w	ip, ip, #16
 80105b8:	4574      	cmp	r4, lr
 80105ba:	d1f3      	bne.n	80105a4 <mg_tls_calc_cert_verify_hash+0xbc>
 80105bc:	4662      	mov	r2, ip
 80105be:	4623      	mov	r3, r4
 80105c0:	881b      	ldrh	r3, [r3, #0]
 80105c2:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80105c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80105c8:	f103 0120 	add.w	r1, r3, #32
 80105cc:	f107 0310 	add.w	r3, r7, #16
 80105d0:	2270      	movs	r2, #112	@ 0x70
 80105d2:	4618      	mov	r0, r3
 80105d4:	f011 fbec 	bl	8021db0 <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 80105d8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80105dc:	3362      	adds	r3, #98	@ 0x62
 80105de:	f107 0210 	add.w	r2, r7, #16
 80105e2:	4611      	mov	r1, r2
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7fd fe82 	bl	800e2ee <mg_sha256_final>

  mg_sha256_init(&sha256);
 80105ea:	f107 0310 	add.w	r3, r7, #16
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7fd fc00 	bl	800ddf4 <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 80105f4:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80105f8:	f107 0310 	add.w	r3, r7, #16
 80105fc:	2282      	movs	r2, #130	@ 0x82
 80105fe:	4618      	mov	r0, r3
 8010600:	f7fd fe3c 	bl	800e27c <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 8010604:	f107 0210 	add.w	r2, r7, #16
 8010608:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801060c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8010610:	4611      	mov	r1, r2
 8010612:	6818      	ldr	r0, [r3, #0]
 8010614:	f7fd fe6b 	bl	800e2ee <mg_sha256_final>
}
 8010618:	bf00      	nop
 801061a:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 801061e:	46bd      	mov	sp, r7
 8010620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010622:	bf00      	nop
 8010624:	08027574 	.word	0x08027574
 8010628:	08027598 	.word	0x08027598

0801062c <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 801062c:	b580      	push	{r7, lr}
 801062e:	b08c      	sub	sp, #48	@ 0x30
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801063a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	3368      	adds	r3, #104	@ 0x68
 8010640:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f7ff f9ad 	bl	800f9a2 <mg_tls_got_record>
 8010648:	4603      	mov	r3, r0
 801064a:	f083 0301 	eor.w	r3, r3, #1
 801064e:	b2db      	uxtb	r3, r3
 8010650:	2b00      	cmp	r3, #0
 8010652:	d002      	beq.n	801065a <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 8010654:	f06f 0301 	mvn.w	r3, #1
 8010658:	e14b      	b.n	80108f2 <mg_tls_server_recv_hello+0x2c6>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 801065a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	2b16      	cmp	r3, #22
 8010662:	d105      	bne.n	8010670 <mg_tls_server_recv_hello+0x44>
 8010664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	3305      	adds	r3, #5
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	2b01      	cmp	r3, #1
 801066e:	d006      	beq.n	801067e <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 8010670:	49a2      	ldr	r1, [pc, #648]	@ (80108fc <mg_tls_server_recv_hello+0x2d0>)
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f7f2 f972 	bl	800295c <mg_error>
    return -1;
 8010678:	f04f 33ff 	mov.w	r3, #4294967295
 801067c:	e139      	b.n	80108f2 <mg_tls_server_recv_hello+0x2c6>
  }
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 801067e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	3303      	adds	r3, #3
 8010684:	781b      	ldrb	r3, [r3, #0]
 8010686:	021b      	lsls	r3, r3, #8
 8010688:	b21a      	sxth	r2, r3
 801068a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	3304      	adds	r3, #4
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	b21b      	sxth	r3, r3
 8010694:	4313      	orrs	r3, r2
 8010696:	b21b      	sxth	r3, r3
 8010698:	847b      	strh	r3, [r7, #34]	@ 0x22
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 801069a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801069c:	f103 0020 	add.w	r0, r3, #32
 80106a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	3305      	adds	r3, #5
 80106a6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80106a8:	4619      	mov	r1, r3
 80106aa:	f7fd fde7 	bl	800e27c <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 80106ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106b0:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80106b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	330b      	adds	r3, #11
 80106ba:	2220      	movs	r2, #32
 80106bc:	4619      	mov	r1, r3
 80106be:	f011 fb77 	bl	8021db0 <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 80106c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80106ca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 80106ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80106d2:	2b20      	cmp	r3, #32
 80106d4:	d10b      	bne.n	80106ee <mg_tls_server_recv_hello+0xc2>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 80106d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106d8:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 80106dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	332c      	adds	r3, #44	@ 0x2c
 80106e2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80106e6:	4619      	mov	r1, r3
 80106e8:	f011 fb62 	bl	8021db0 <memmove>
 80106ec:	e011      	b.n	8010712 <mg_tls_server_recv_hello+0xe6>
  } else if (session_id_len != 0) {
 80106ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d00d      	beq.n	8010712 <mg_tls_server_recv_hello+0xe6>
    MG_INFO(("bad session id len"));
 80106f6:	4b82      	ldr	r3, [pc, #520]	@ (8010900 <mg_tls_server_recv_hello+0x2d4>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	2b01      	cmp	r3, #1
 80106fc:	dd09      	ble.n	8010712 <mg_tls_server_recv_hello+0xe6>
 80106fe:	4b81      	ldr	r3, [pc, #516]	@ (8010904 <mg_tls_server_recv_hello+0x2d8>)
 8010700:	f242 72fd 	movw	r2, #10237	@ 0x27fd
 8010704:	4980      	ldr	r1, [pc, #512]	@ (8010908 <mg_tls_server_recv_hello+0x2dc>)
 8010706:	2002      	movs	r0, #2
 8010708:	f7f7 fc12 	bl	8007f30 <mg_log_prefix>
 801070c:	487f      	ldr	r0, [pc, #508]	@ (801090c <mg_tls_server_recv_hello+0x2e0>)
 801070e:	f7f7 fc5f 	bl	8007fd0 <mg_log>
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 8010712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010714:	681a      	ldr	r2, [r3, #0]
 8010716:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801071a:	332c      	adds	r3, #44	@ 0x2c
 801071c:	4413      	add	r3, r2
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	021b      	lsls	r3, r3, #8
 8010722:	b21a      	sxth	r2, r3
 8010724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010726:	6819      	ldr	r1, [r3, #0]
 8010728:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801072c:	332d      	adds	r3, #45	@ 0x2d
 801072e:	440b      	add	r3, r1
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	b21b      	sxth	r3, r3
 8010734:	4313      	orrs	r3, r2
 8010736:	b21b      	sxth	r3, r3
 8010738:	83fb      	strh	r3, [r7, #30]
  if (cipher_suites_len > (rio->len - 46 - session_id_len)) goto fail;
 801073a:	8bfa      	ldrh	r2, [r7, #30]
 801073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073e:	6899      	ldr	r1, [r3, #8]
 8010740:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010744:	1acb      	subs	r3, r1, r3
 8010746:	3b2e      	subs	r3, #46	@ 0x2e
 8010748:	429a      	cmp	r2, r3
 801074a:	f200 80c5 	bhi.w	80108d8 <mg_tls_server_recv_hello+0x2ac>
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 801074e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010750:	681a      	ldr	r2, [r3, #0]
 8010752:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8010756:	8bfb      	ldrh	r3, [r7, #30]
 8010758:	440b      	add	r3, r1
 801075a:	3330      	adds	r3, #48	@ 0x30
 801075c:	4413      	add	r3, r2
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	021b      	lsls	r3, r3, #8
 8010762:	b21a      	sxth	r2, r3
 8010764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010766:	6819      	ldr	r1, [r3, #0]
 8010768:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 801076c:	8bfb      	ldrh	r3, [r7, #30]
 801076e:	4403      	add	r3, r0
 8010770:	3331      	adds	r3, #49	@ 0x31
 8010772:	440b      	add	r3, r1
 8010774:	781b      	ldrb	r3, [r3, #0]
 8010776:	b21b      	sxth	r3, r3
 8010778:	4313      	orrs	r3, r2
 801077a:	b21b      	sxth	r3, r3
 801077c:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 801077e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8010786:	8bfb      	ldrh	r3, [r7, #30]
 8010788:	440b      	add	r3, r1
 801078a:	3332      	adds	r3, #50	@ 0x32
 801078c:	4413      	add	r3, r2
 801078e:	61bb      	str	r3, [r7, #24]
  if (ext_len > (rio->len - 50 - session_id_len - cipher_suites_len)) goto fail;
 8010790:	8bba      	ldrh	r2, [r7, #28]
 8010792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010794:	6899      	ldr	r1, [r3, #8]
 8010796:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801079a:	1ac9      	subs	r1, r1, r3
 801079c:	8bfb      	ldrh	r3, [r7, #30]
 801079e:	1acb      	subs	r3, r1, r3
 80107a0:	3b32      	subs	r3, #50	@ 0x32
 80107a2:	429a      	cmp	r2, r3
 80107a4:	f200 809a 	bhi.w	80108dc <mg_tls_server_recv_hello+0x2b0>
  for (j = 0; j < ext_len;) {
 80107a8:	2300      	movs	r3, #0
 80107aa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80107ac:	e08e      	b.n	80108cc <mg_tls_server_recv_hello+0x2a0>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 80107ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80107b0:	3302      	adds	r3, #2
 80107b2:	69ba      	ldr	r2, [r7, #24]
 80107b4:	4413      	add	r3, r2
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	021b      	lsls	r3, r3, #8
 80107ba:	b21a      	sxth	r2, r3
 80107bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80107be:	3303      	adds	r3, #3
 80107c0:	69b9      	ldr	r1, [r7, #24]
 80107c2:	440b      	add	r3, r1
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	b21b      	sxth	r3, r3
 80107c8:	4313      	orrs	r3, r2
 80107ca:	b21b      	sxth	r3, r3
 80107cc:	82fb      	strh	r3, [r7, #22]
    if (ext[j] != 0x00 ||
 80107ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80107d0:	69ba      	ldr	r2, [r7, #24]
 80107d2:	4413      	add	r3, r2
 80107d4:	781b      	ldrb	r3, [r3, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d106      	bne.n	80107e8 <mg_tls_server_recv_hello+0x1bc>
        ext[j + 1] != 0x33) {  // not a key share extension, ignore
 80107da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80107dc:	3301      	adds	r3, #1
 80107de:	69ba      	ldr	r2, [r7, #24]
 80107e0:	4413      	add	r3, r2
 80107e2:	781b      	ldrb	r3, [r3, #0]
    if (ext[j] != 0x00 ||
 80107e4:	2b33      	cmp	r3, #51	@ 0x33
 80107e6:	d006      	beq.n	80107f6 <mg_tls_server_recv_hello+0x1ca>
      j += (uint16_t) (n + 4);
 80107e8:	8afa      	ldrh	r2, [r7, #22]
 80107ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80107ec:	4413      	add	r3, r2
 80107ee:	b29b      	uxth	r3, r3
 80107f0:	3304      	adds	r3, #4
 80107f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 80107f4:	e06a      	b.n	80108cc <mg_tls_server_recv_hello+0x2a0>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 80107f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80107f8:	3304      	adds	r3, #4
 80107fa:	69ba      	ldr	r2, [r7, #24]
 80107fc:	4413      	add	r3, r2
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	021b      	lsls	r3, r3, #8
 8010802:	b21a      	sxth	r2, r3
 8010804:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010806:	3305      	adds	r3, #5
 8010808:	69b9      	ldr	r1, [r7, #24]
 801080a:	440b      	add	r3, r1
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	b21b      	sxth	r3, r3
 8010810:	4313      	orrs	r3, r2
 8010812:	b21b      	sxth	r3, r3
 8010814:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 8010816:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010818:	3306      	adds	r3, #6
 801081a:	69ba      	ldr	r2, [r7, #24]
 801081c:	4413      	add	r3, r2
 801081e:	613b      	str	r3, [r7, #16]
    if (key_exchange_len >
 8010820:	8aba      	ldrh	r2, [r7, #20]
        rio->len - (uint16_t) ((size_t) key_exchange - (size_t) rio->buf) - 2)
 8010822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010824:	689b      	ldr	r3, [r3, #8]
 8010826:	6939      	ldr	r1, [r7, #16]
 8010828:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801082a:	6800      	ldr	r0, [r0, #0]
 801082c:	1a09      	subs	r1, r1, r0
 801082e:	b289      	uxth	r1, r1
 8010830:	1a5b      	subs	r3, r3, r1
 8010832:	3b02      	subs	r3, #2
    if (key_exchange_len >
 8010834:	429a      	cmp	r2, r3
 8010836:	d853      	bhi.n	80108e0 <mg_tls_server_recv_hello+0x2b4>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 8010838:	2300      	movs	r3, #0
 801083a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801083c:	e03c      	b.n	80108b8 <mg_tls_server_recv_hello+0x28c>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 801083e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010840:	3302      	adds	r3, #2
 8010842:	693a      	ldr	r2, [r7, #16]
 8010844:	4413      	add	r3, r2
 8010846:	781b      	ldrb	r3, [r3, #0]
 8010848:	021b      	lsls	r3, r3, #8
 801084a:	b21a      	sxth	r2, r3
 801084c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801084e:	3303      	adds	r3, #3
 8010850:	6939      	ldr	r1, [r7, #16]
 8010852:	440b      	add	r3, r1
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	b21b      	sxth	r3, r3
 8010858:	4313      	orrs	r3, r2
 801085a:	b21b      	sxth	r3, r3
 801085c:	81fb      	strh	r3, [r7, #14]
      if (m > (key_exchange_len - k - 4)) goto fail;
 801085e:	8aba      	ldrh	r2, [r7, #20]
 8010860:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010862:	1ad3      	subs	r3, r2, r3
 8010864:	1eda      	subs	r2, r3, #3
 8010866:	89fb      	ldrh	r3, [r7, #14]
 8010868:	429a      	cmp	r2, r3
 801086a:	dd3b      	ble.n	80108e4 <mg_tls_server_recv_hello+0x2b8>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 801086c:	89fb      	ldrh	r3, [r7, #14]
 801086e:	2b20      	cmp	r3, #32
 8010870:	d11c      	bne.n	80108ac <mg_tls_server_recv_hello+0x280>
 8010872:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010874:	693a      	ldr	r2, [r7, #16]
 8010876:	4413      	add	r3, r2
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d116      	bne.n	80108ac <mg_tls_server_recv_hello+0x280>
 801087e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010880:	3301      	adds	r3, #1
 8010882:	693a      	ldr	r2, [r7, #16]
 8010884:	4413      	add	r3, r2
 8010886:	781b      	ldrb	r3, [r3, #0]
 8010888:	2b1d      	cmp	r3, #29
 801088a:	d10f      	bne.n	80108ac <mg_tls_server_recv_hello+0x280>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 801088c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801088e:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8010892:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010894:	3304      	adds	r3, #4
 8010896:	693a      	ldr	r2, [r7, #16]
 8010898:	4413      	add	r3, r2
 801089a:	89fa      	ldrh	r2, [r7, #14]
 801089c:	4619      	mov	r1, r3
 801089e:	f011 fa87 	bl	8021db0 <memmove>
        mg_tls_drop_record(c);
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7ff f8a4 	bl	800f9f0 <mg_tls_drop_record>
        return 0;
 80108a8:	2300      	movs	r3, #0
 80108aa:	e022      	b.n	80108f2 <mg_tls_server_recv_hello+0x2c6>
      }
      k += (uint16_t) (m + 4);
 80108ac:	89fa      	ldrh	r2, [r7, #14]
 80108ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80108b0:	4413      	add	r3, r2
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	3304      	adds	r3, #4
 80108b6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 80108b8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80108ba:	8abb      	ldrh	r3, [r7, #20]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d3be      	bcc.n	801083e <mg_tls_server_recv_hello+0x212>
    }
    j += (uint16_t) (n + 4);
 80108c0:	8afa      	ldrh	r2, [r7, #22]
 80108c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80108c4:	4413      	add	r3, r2
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	3304      	adds	r3, #4
 80108ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 80108cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80108ce:	8bbb      	ldrh	r3, [r7, #28]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	f4ff af6c 	bcc.w	80107ae <mg_tls_server_recv_hello+0x182>
  }
fail:
 80108d6:	e006      	b.n	80108e6 <mg_tls_server_recv_hello+0x2ba>
  if (cipher_suites_len > (rio->len - 46 - session_id_len)) goto fail;
 80108d8:	bf00      	nop
 80108da:	e004      	b.n	80108e6 <mg_tls_server_recv_hello+0x2ba>
  if (ext_len > (rio->len - 50 - session_id_len - cipher_suites_len)) goto fail;
 80108dc:	bf00      	nop
 80108de:	e002      	b.n	80108e6 <mg_tls_server_recv_hello+0x2ba>
      goto fail;
 80108e0:	bf00      	nop
 80108e2:	e000      	b.n	80108e6 <mg_tls_server_recv_hello+0x2ba>
      if (m > (key_exchange_len - k - 4)) goto fail;
 80108e4:	bf00      	nop
  mg_error(c, "bad client hello");
 80108e6:	490a      	ldr	r1, [pc, #40]	@ (8010910 <mg_tls_server_recv_hello+0x2e4>)
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7f2 f837 	bl	800295c <mg_error>
  return -1;
 80108ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3730      	adds	r7, #48	@ 0x30
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	080275bc 	.word	0x080275bc
 8010900:	24000240 	.word	0x24000240
 8010904:	08029164 	.word	0x08029164
 8010908:	0802597c 	.word	0x0802597c
 801090c:	080275d8 	.word	0x080275d8
 8010910:	080275ec 	.word	0x080275ec

08010914 <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 8010914:	b5b0      	push	{r4, r5, r7, lr}
 8010916:	b0b4      	sub	sp, #208	@ 0xd0
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010922:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 8010926:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801092a:	3304      	adds	r3, #4
 801092c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 8010930:	4a4c      	ldr	r2, [pc, #304]	@ (8010a64 <mg_tls_server_send_hello+0x150>)
 8010932:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010936:	4611      	mov	r1, r2
 8010938:	227a      	movs	r2, #122	@ 0x7a
 801093a:	4618      	mov	r0, r3
 801093c:	f011 fb47 	bl	8021fce <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG");
 8010940:	f107 030c 	add.w	r3, r7, #12
 8010944:	2120      	movs	r1, #32
 8010946:	4618      	mov	r0, r3
 8010948:	f7f0 faec 	bl	8000f24 <mg_random>
 801094c:	4603      	mov	r3, r0
 801094e:	f083 0301 	eor.w	r3, r3, #1
 8010952:	b2db      	uxtb	r3, r3
 8010954:	2b00      	cmp	r3, #0
 8010956:	d003      	beq.n	8010960 <mg_tls_server_send_hello+0x4c>
 8010958:	4943      	ldr	r1, [pc, #268]	@ (8010a68 <mg_tls_server_send_hello+0x154>)
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7f1 fffe 	bl	800295c <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 8010960:	f107 010c 	add.w	r1, r7, #12
 8010964:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8010968:	2301      	movs	r3, #1
 801096a:	4a40      	ldr	r2, [pc, #256]	@ (8010a6c <mg_tls_server_send_hello+0x158>)
 801096c:	f006 fdbe 	bl	80174ec <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 8010970:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010974:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8010978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801097c:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8010980:	f107 010c 	add.w	r1, r7, #12
 8010984:	2301      	movs	r3, #1
 8010986:	f006 fdb1 	bl	80174ec <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 801098a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801098e:	33f0      	adds	r3, #240	@ 0xf0
 8010990:	2220      	movs	r2, #32
 8010992:	4619      	mov	r1, r3
 8010994:	4836      	ldr	r0, [pc, #216]	@ (8010a70 <mg_tls_server_send_hello+0x15c>)
 8010996:	f7fe ff19 	bl	800f7cc <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 801099a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801099e:	3306      	adds	r3, #6
 80109a0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80109a4:	3290      	adds	r2, #144	@ 0x90
 80109a6:	6815      	ldr	r5, [r2, #0]
 80109a8:	6854      	ldr	r4, [r2, #4]
 80109aa:	6890      	ldr	r0, [r2, #8]
 80109ac:	68d1      	ldr	r1, [r2, #12]
 80109ae:	601d      	str	r5, [r3, #0]
 80109b0:	605c      	str	r4, [r3, #4]
 80109b2:	6098      	str	r0, [r3, #8]
 80109b4:	60d9      	str	r1, [r3, #12]
 80109b6:	6915      	ldr	r5, [r2, #16]
 80109b8:	6954      	ldr	r4, [r2, #20]
 80109ba:	6990      	ldr	r0, [r2, #24]
 80109bc:	69d1      	ldr	r1, [r2, #28]
 80109be:	611d      	str	r5, [r3, #16]
 80109c0:	615c      	str	r4, [r3, #20]
 80109c2:	6198      	str	r0, [r3, #24]
 80109c4:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 80109c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80109ca:	3327      	adds	r3, #39	@ 0x27
 80109cc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80109d0:	32b0      	adds	r2, #176	@ 0xb0
 80109d2:	6815      	ldr	r5, [r2, #0]
 80109d4:	6854      	ldr	r4, [r2, #4]
 80109d6:	6890      	ldr	r0, [r2, #8]
 80109d8:	68d1      	ldr	r1, [r2, #12]
 80109da:	601d      	str	r5, [r3, #0]
 80109dc:	605c      	str	r4, [r3, #4]
 80109de:	6098      	str	r0, [r3, #8]
 80109e0:	60d9      	str	r1, [r3, #12]
 80109e2:	6915      	ldr	r5, [r2, #16]
 80109e4:	6954      	ldr	r4, [r2, #20]
 80109e6:	6990      	ldr	r0, [r2, #24]
 80109e8:	69d1      	ldr	r1, [r2, #28]
 80109ea:	611d      	str	r5, [r3, #16]
 80109ec:	615c      	str	r4, [r3, #20]
 80109ee:	6198      	str	r0, [r3, #24]
 80109f0:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 80109f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80109f6:	3354      	adds	r3, #84	@ 0x54
 80109f8:	461d      	mov	r5, r3
 80109fa:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80109fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a00:	6028      	str	r0, [r5, #0]
 8010a02:	6069      	str	r1, [r5, #4]
 8010a04:	60aa      	str	r2, [r5, #8]
 8010a06:	60eb      	str	r3, [r5, #12]
 8010a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a0a:	6128      	str	r0, [r5, #16]
 8010a0c:	6169      	str	r1, [r5, #20]
 8010a0e:	61aa      	str	r2, [r5, #24]
 8010a10:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 8010a12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010a16:	6899      	ldr	r1, [r3, #8]
 8010a18:	2305      	movs	r3, #5
 8010a1a:	4a16      	ldr	r2, [pc, #88]	@ (8010a74 <mg_tls_server_send_hello+0x160>)
 8010a1c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8010a20:	f7f6 fb44 	bl	80070ac <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 8010a24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010a28:	6899      	ldr	r1, [r3, #8]
 8010a2a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8010a2e:	237a      	movs	r3, #122	@ 0x7a
 8010a30:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8010a34:	f7f6 fb3a 	bl	80070ac <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 8010a38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010a3c:	3320      	adds	r3, #32
 8010a3e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010a42:	227a      	movs	r2, #122	@ 0x7a
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fd fc19 	bl	800e27c <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 8010a4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010a4e:	6899      	ldr	r1, [r3, #8]
 8010a50:	2306      	movs	r3, #6
 8010a52:	4a09      	ldr	r2, [pc, #36]	@ (8010a78 <mg_tls_server_send_hello+0x164>)
 8010a54:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8010a58:	f7f6 fb28 	bl	80070ac <mg_iobuf_add>
}
 8010a5c:	bf00      	nop
 8010a5e:	37d0      	adds	r7, #208	@ 0xd0
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bdb0      	pop	{r4, r5, r7, pc}
 8010a64:	08027624 	.word	0x08027624
 8010a68:	08027600 	.word	0x08027600
 8010a6c:	08028e68 	.word	0x08028e68
 8010a70:	08027604 	.word	0x08027604
 8010a74:	08027614 	.word	0x08027614
 8010a78:	0802761c 	.word	0x0802761c

08010a7c <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b086      	sub	sp, #24
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010a8a:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 8010a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8010ac4 <mg_tls_server_send_ext+0x48>)
 8010a8e:	f107 030c 	add.w	r3, r7, #12
 8010a92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a96:	6018      	str	r0, [r3, #0]
 8010a98:	3304      	adds	r3, #4
 8010a9a:	8019      	strh	r1, [r3, #0]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	3320      	adds	r3, #32
 8010aa0:	f107 010c 	add.w	r1, r7, #12
 8010aa4:	2206      	movs	r2, #6
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f7fd fbe8 	bl	800e27c <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 8010aac:	f107 010c 	add.w	r1, r7, #12
 8010ab0:	2316      	movs	r3, #22
 8010ab2:	2206      	movs	r2, #6
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f7ff fb0d 	bl	80100d4 <mg_tls_encrypt>
}
 8010aba:	bf00      	nop
 8010abc:	3718      	adds	r7, #24
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	080276a0 	.word	0x080276a0

08010ac8 <mg_tls_server_send_cert>:

static void mg_tls_server_send_cert(struct mg_connection *c) {
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b086      	sub	sp, #24
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010ad6:	617b      	str	r3, [r7, #20]
  // server DER certificate (empty)
  size_t n = tls->cert_der.len;
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8010ade:	613b      	str	r3, [r7, #16]
  uint8_t *cert = (uint8_t *) calloc(1, 13 + n);
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	330d      	adds	r3, #13
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	2001      	movs	r0, #1
 8010ae8:	f00f feca 	bl	8020880 <calloc>
 8010aec:	4603      	mov	r3, r0
 8010aee:	60fb      	str	r3, [r7, #12]
  if (cert == NULL) {
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d104      	bne.n	8010b00 <mg_tls_server_send_cert+0x38>
    mg_error(c, "tls cert oom");
 8010af6:	493a      	ldr	r1, [pc, #232]	@ (8010be0 <mg_tls_server_send_cert+0x118>)
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f7f1 ff2f 	bl	800295c <mg_error>
    return;
 8010afe:	e06b      	b.n	8010bd8 <mg_tls_server_send_cert+0x110>
  }
  cert[0] = 0x0b;                                // handshake header
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	220b      	movs	r2, #11
 8010b04:	701a      	strb	r2, [r3, #0]
  cert[1] = (uint8_t) (((n + 9) >> 16) & 255U);  // 3 bytes: payload length
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	3309      	adds	r3, #9
 8010b0a:	0c1a      	lsrs	r2, r3, #16
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	3301      	adds	r3, #1
 8010b10:	b2d2      	uxtb	r2, r2
 8010b12:	701a      	strb	r2, [r3, #0]
  cert[2] = (uint8_t) (((n + 9) >> 8) & 255U);
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	3309      	adds	r3, #9
 8010b18:	0a1a      	lsrs	r2, r3, #8
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	3302      	adds	r3, #2
 8010b1e:	b2d2      	uxtb	r2, r2
 8010b20:	701a      	strb	r2, [r3, #0]
  cert[3] = (uint8_t) ((n + 9) & 255U);
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	b2da      	uxtb	r2, r3
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	3303      	adds	r3, #3
 8010b2a:	3209      	adds	r2, #9
 8010b2c:	b2d2      	uxtb	r2, r2
 8010b2e:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                   // request context
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	3304      	adds	r3, #4
 8010b34:	2200      	movs	r2, #0
 8010b36:	701a      	strb	r2, [r3, #0]
  cert[5] = (uint8_t) (((n + 5) >> 16) & 255U);  // 3 bytes: cert (s) length
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	3305      	adds	r3, #5
 8010b3c:	0c1a      	lsrs	r2, r3, #16
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	3305      	adds	r3, #5
 8010b42:	b2d2      	uxtb	r2, r2
 8010b44:	701a      	strb	r2, [r3, #0]
  cert[6] = (uint8_t) (((n + 5) >> 8) & 255U);
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	3305      	adds	r3, #5
 8010b4a:	0a1a      	lsrs	r2, r3, #8
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	3306      	adds	r3, #6
 8010b50:	b2d2      	uxtb	r2, r2
 8010b52:	701a      	strb	r2, [r3, #0]
  cert[7] = (uint8_t) ((n + 5) & 255U);
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	3307      	adds	r3, #7
 8010b5c:	3205      	adds	r2, #5
 8010b5e:	b2d2      	uxtb	r2, r2
 8010b60:	701a      	strb	r2, [r3, #0]
  cert[8] =
      (uint8_t) (((n) >> 16) & 255U);  // 3 bytes: first (and only) cert len
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	0c1a      	lsrs	r2, r3, #16
  cert[8] =
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	3308      	adds	r3, #8
      (uint8_t) (((n) >> 16) & 255U);  // 3 bytes: first (and only) cert len
 8010b6a:	b2d2      	uxtb	r2, r2
  cert[8] =
 8010b6c:	701a      	strb	r2, [r3, #0]
  cert[9] = (uint8_t) (((n) >> 8) & 255U);
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	0a1a      	lsrs	r2, r3, #8
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	3309      	adds	r3, #9
 8010b76:	b2d2      	uxtb	r2, r2
 8010b78:	701a      	strb	r2, [r3, #0]
  cert[10] = (uint8_t) (n & 255U);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	330a      	adds	r3, #10
 8010b7e:	693a      	ldr	r2, [r7, #16]
 8010b80:	b2d2      	uxtb	r2, r2
 8010b82:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, n);
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f103 000b 	add.w	r0, r3, #11
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8010b90:	693a      	ldr	r2, [r7, #16]
 8010b92:	4619      	mov	r1, r3
 8010b94:	f011 f90c 	bl	8021db0 <memmove>
  cert[11 + n] = cert[12 + n] = 0;  // certificate extensions (none)
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	330c      	adds	r3, #12
 8010b9c:	68fa      	ldr	r2, [r7, #12]
 8010b9e:	4413      	add	r3, r2
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	701a      	strb	r2, [r3, #0]
 8010ba4:	693a      	ldr	r2, [r7, #16]
 8010ba6:	320b      	adds	r2, #11
 8010ba8:	68f9      	ldr	r1, [r7, #12]
 8010baa:	440a      	add	r2, r1
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	7013      	strb	r3, [r2, #0]
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	f103 0020 	add.w	r0, r3, #32
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	330d      	adds	r3, #13
 8010bba:	461a      	mov	r2, r3
 8010bbc:	68f9      	ldr	r1, [r7, #12]
 8010bbe:	f7fd fb5d 	bl	800e27c <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	f103 020d 	add.w	r2, r3, #13
 8010bc8:	2316      	movs	r3, #22
 8010bca:	68f9      	ldr	r1, [r7, #12]
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f7ff fa81 	bl	80100d4 <mg_tls_encrypt>
  free(cert);
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f00f fe78 	bl	80208c8 <free>
}
 8010bd8:	3718      	adds	r7, #24
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	080276a8 	.word	0x080276a8

08010be4 <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	3318      	adds	r3, #24
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7fd f8fd 	bl	800ddf4 <mg_sha256_init>
}
 8010bfa:	bf00      	nop
 8010bfc:	3710      	adds	r7, #16
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}

08010c02 <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b086      	sub	sp, #24
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	60f8      	str	r0, [r7, #12]
 8010c0a:	60b9      	str	r1, [r7, #8]
 8010c0c:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	3318      	adds	r3, #24
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	68b9      	ldr	r1, [r7, #8]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7fd fb2e 	bl	800e27c <mg_sha256_update>
}
 8010c20:	bf00      	nop
 8010c22:	3718      	adds	r7, #24
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}

08010c28 <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	3318      	adds	r3, #24
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	6838      	ldr	r0, [r7, #0]
 8010c3e:	f7fd fb56 	bl	800e2ee <mg_sha256_final>
}
 8010c42:	bf00      	nop
 8010c44:	3710      	adds	r7, #16
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
	...

08010c4c <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, int is_client) {
 8010c4c:	b590      	push	{r4, r7, lr}
 8010c4e:	b0f9      	sub	sp, #484	@ 0x1e4
 8010c50:	af02      	add	r7, sp, #8
 8010c52:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010c56:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010c5a:	6018      	str	r0, [r3, #0]
 8010c5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010c60:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8010c64:	6019      	str	r1, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010c66:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010c6a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010c74:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 8010c78:	4a8f      	ldr	r2, [pc, #572]	@ (8010eb8 <mg_tls_send_cert_verify+0x26c>)
 8010c7a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8010c7e:	6810      	ldr	r0, [r2, #0]
 8010c80:	6851      	ldr	r1, [r2, #4]
 8010c82:	c303      	stmia	r3!, {r0, r1}
 8010c84:	7a12      	ldrb	r2, [r2, #8]
 8010c86:	701a      	strb	r2, [r3, #0]
 8010c88:	f207 1379 	addw	r3, r7, #377	@ 0x179
 8010c8c:	2249      	movs	r2, #73	@ 0x49
 8010c8e:	2100      	movs	r1, #0
 8010c90:	4618      	mov	r0, r3
 8010c92:	f011 f8a7 	bl	8021de4 <memset>
  size_t sigsz, verifysz = 0;
 8010c96:	2300      	movs	r3, #0
 8010c98:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8010ca2:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	601a      	str	r2, [r3, #0]
 8010caa:	605a      	str	r2, [r3, #4]
 8010cac:	609a      	str	r2, [r3, #8]
 8010cae:	60da      	str	r2, [r3, #12]
 8010cb0:	611a      	str	r2, [r3, #16]
 8010cb2:	615a      	str	r2, [r3, #20]
 8010cb4:	619a      	str	r2, [r3, #24]
 8010cb6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	601a      	str	r2, [r3, #0]
 8010cc2:	3304      	adds	r3, #4
 8010cc4:	227c      	movs	r2, #124	@ 0x7c
 8010cc6:	2100      	movs	r1, #0
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f011 f88b 	bl	8021de4 <memset>
  struct SHA256_HashContext ctx = {
 8010cce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010cd2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	2388      	movs	r3, #136	@ 0x88
 8010cda:	461a      	mov	r2, r3
 8010cdc:	2100      	movs	r1, #0
 8010cde:	f011 f881 	bl	8021de4 <memset>
 8010ce2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010ce6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010cea:	4a74      	ldr	r2, [pc, #464]	@ (8010ebc <mg_tls_send_cert_verify+0x270>)
 8010cec:	601a      	str	r2, [r3, #0]
 8010cee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010cf2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010cf6:	4a72      	ldr	r2, [pc, #456]	@ (8010ec0 <mg_tls_send_cert_verify+0x274>)
 8010cf8:	605a      	str	r2, [r3, #4]
 8010cfa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010cfe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010d02:	4a70      	ldr	r2, [pc, #448]	@ (8010ec4 <mg_tls_send_cert_verify+0x278>)
 8010d04:	609a      	str	r2, [r3, #8]
 8010d06:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010d0a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010d0e:	2240      	movs	r2, #64	@ 0x40
 8010d10:	60da      	str	r2, [r3, #12]
 8010d12:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010d16:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010d1a:	2220      	movs	r2, #32
 8010d1c:	611a      	str	r2, [r3, #16]
 8010d1e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010d22:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010d26:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8010d2a:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 8010d2c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010d30:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8010d34:	2200      	movs	r2, #0
 8010d36:	601a      	str	r2, [r3, #0]
 8010d38:	3304      	adds	r3, #4
 8010d3a:	223c      	movs	r2, #60	@ 0x3c
 8010d3c:	2100      	movs	r1, #0
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f011 f850 	bl	8021de4 <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 8010d44:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010d48:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 8010d4c:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8010d50:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010d54:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010d58:	6812      	ldr	r2, [r2, #0]
 8010d5a:	6818      	ldr	r0, [r3, #0]
 8010d5c:	f7ff fbc4 	bl	80104e8 <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 8010d60:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8010d64:	f503 7490 	add.w	r4, r3, #288	@ 0x120
 8010d68:	f004 fb6c 	bl	8015444 <mg_uecc_secp256r1>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8010d72:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8010d76:	9301      	str	r3, [sp, #4]
 8010d78:	f107 0308 	add.w	r3, r7, #8
 8010d7c:	9300      	str	r3, [sp, #0]
 8010d7e:	4613      	mov	r3, r2
 8010d80:	2220      	movs	r2, #32
 8010d82:	4620      	mov	r0, r4
 8010d84:	f005 fbce 	bl	8016524 <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 8010d88:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010d8c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	b25b      	sxtb	r3, r3
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	09db      	lsrs	r3, r3, #7
 8010d98:	b2db      	uxtb	r3, r3
 8010d9a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 8010d9e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010da2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8010da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010daa:	b25b      	sxtb	r3, r3
 8010dac:	b2db      	uxtb	r3, r3
 8010dae:	09db      	lsrs	r3, r3, #7
 8010db0:	b2db      	uxtb	r3, r3
 8010db2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 8010db6:	2330      	movs	r3, #48	@ 0x30
 8010db8:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 8010dbc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010dc0:	b2da      	uxtb	r2, r3
 8010dc2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	4413      	add	r3, r2
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	3344      	adds	r3, #68	@ 0x44
 8010dce:	b2db      	uxtb	r3, r3
 8010dd0:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 8010dd4:	2302      	movs	r3, #2
 8010dd6:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 8010dda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	3320      	adds	r3, #32
 8010de2:	b2db      	uxtb	r3, r3
 8010de4:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 8010de8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010dec:	330c      	adds	r3, #12
 8010dee:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8010df2:	4413      	add	r3, r2
 8010df4:	f107 0108 	add.w	r1, r7, #8
 8010df8:	2220      	movs	r2, #32
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f010 ffd8 	bl	8021db0 <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 8010e00:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010e04:	332c      	adds	r3, #44	@ 0x2c
 8010e06:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8010e0a:	443b      	add	r3, r7
 8010e0c:	2202      	movs	r2, #2
 8010e0e:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 8010e12:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8010e16:	b2da      	uxtb	r2, r3
 8010e18:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010e1c:	332d      	adds	r3, #45	@ 0x2d
 8010e1e:	3220      	adds	r2, #32
 8010e20:	b2d2      	uxtb	r2, r2
 8010e22:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8010e26:	443b      	add	r3, r7
 8010e28:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 8010e2c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8010e30:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8010e34:	4413      	add	r3, r2
 8010e36:	332e      	adds	r3, #46	@ 0x2e
 8010e38:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8010e3c:	18d0      	adds	r0, r2, r3
 8010e3e:	f107 0308 	add.w	r3, r7, #8
 8010e42:	3320      	adds	r3, #32
 8010e44:	2220      	movs	r2, #32
 8010e46:	4619      	mov	r1, r3
 8010e48:	f010 ffb2 	bl	8021db0 <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 8010e4c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8010e50:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 8010e54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8010e58:	4413      	add	r3, r2
 8010e5a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 8010e5e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8010e62:	3308      	adds	r3, #8
 8010e64:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 8010e68:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	3304      	adds	r3, #4
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 8010e76:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 8010e80:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8010e84:	3320      	adds	r3, #32
 8010e86:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8010e8a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fd f9f4 	bl	800e27c <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 8010e94:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8010e98:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010e9c:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 8010ea0:	2316      	movs	r3, #22
 8010ea2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8010ea6:	6800      	ldr	r0, [r0, #0]
 8010ea8:	f7ff f914 	bl	80100d4 <mg_tls_encrypt>
}
 8010eac:	bf00      	nop
 8010eae:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd90      	pop	{r4, r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	080276b8 	.word	0x080276b8
 8010ebc:	08010be5 	.word	0x08010be5
 8010ec0:	08010c03 	.word	0x08010c03
 8010ec4:	08010c29 	.word	0x08010c29

08010ec8 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b0b4      	sub	sp, #208	@ 0xd0
 8010ecc:	af02      	add	r7, sp, #8
 8010ece:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010ed6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  struct mg_iobuf *wio = &tls->send;
 8010eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010ede:	3304      	adds	r3, #4
 8010ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8010ee4:	4a28      	ldr	r2, [pc, #160]	@ (8010f88 <mg_tls_server_send_finish+0xc0>)
 8010ee6:	f107 030c 	add.w	r3, r7, #12
 8010eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010eee:	6018      	str	r0, [r3, #0]
 8010ef0:	3304      	adds	r3, #4
 8010ef2:	7019      	strb	r1, [r3, #0]
 8010ef4:	f107 0311 	add.w	r3, r7, #17
 8010ef8:	221f      	movs	r2, #31
 8010efa:	2100      	movs	r1, #0
 8010efc:	4618      	mov	r0, r3
 8010efe:	f010 ff71 	bl	8021de4 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8010f02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010f06:	f103 0120 	add.w	r1, r3, #32
 8010f0a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010f0e:	2270      	movs	r2, #112	@ 0x70
 8010f10:	4618      	mov	r0, r3
 8010f12:	f010 ff4d 	bl	8021db0 <memmove>
  mg_sha256_final(hash, &sha256);
 8010f16:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8010f1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010f1e:	4611      	mov	r1, r2
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7fd f9e4 	bl	800e2ee <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 8010f26:	f107 000c 	add.w	r0, r7, #12
 8010f2a:	3004      	adds	r0, #4
 8010f2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010f30:	f503 7145 	add.w	r1, r3, #788	@ 0x314
 8010f34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010f38:	2220      	movs	r2, #32
 8010f3a:	9200      	str	r2, [sp, #0]
 8010f3c:	2220      	movs	r2, #32
 8010f3e:	f7fd fb0e 	bl	800e55e <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8010f42:	f107 010c 	add.w	r1, r7, #12
 8010f46:	2316      	movs	r3, #22
 8010f48:	2224      	movs	r2, #36	@ 0x24
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7ff f8c2 	bl	80100d4 <mg_tls_encrypt>
  mg_io_send(c, wio->buf, wio->len);
 8010f50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010f54:	6819      	ldr	r1, [r3, #0]
 8010f56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010f5a:	689b      	ldr	r3, [r3, #8]
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f7fa fb3e 	bl	800b5e0 <mg_io_send>
  wio->len = 0;
 8010f64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010f68:	2200      	movs	r2, #0
 8010f6a:	609a      	str	r2, [r3, #8]

  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 8010f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010f70:	3320      	adds	r3, #32
 8010f72:	f107 010c 	add.w	r1, r7, #12
 8010f76:	2224      	movs	r2, #36	@ 0x24
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7fd f97f 	bl	800e27c <mg_sha256_update>
}
 8010f7e:	bf00      	nop
 8010f80:	37c8      	adds	r7, #200	@ 0xc8
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	080276c4 	.word	0x080276c4

08010f8c <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b0a0      	sub	sp, #128	@ 0x80
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010f9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 8010f9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010f9e:	f107 0008 	add.w	r0, r7, #8
 8010fa2:	3320      	adds	r3, #32
 8010fa4:	2270      	movs	r2, #112	@ 0x70
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	f011 f811 	bl	8021fce <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f7ff f98d 	bl	80102cc <mg_tls_recv_record>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	da02      	bge.n	8010fbe <mg_tls_server_recv_finish+0x32>
    return -1;
 8010fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8010fbc:	e01f      	b.n	8010ffe <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010fc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010fc4:	695b      	ldr	r3, [r3, #20]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 8010fca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	2b14      	cmp	r3, #20
 8010fd0:	d009      	beq.n	8010fe6 <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 8010fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	490b      	ldr	r1, [pc, #44]	@ (8011008 <mg_tls_server_recv_finish+0x7c>)
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f7f1 fcbe 	bl	800295c <mg_error>
    return -1;
 8010fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fe4:	e00b      	b.n	8010ffe <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f7fe fd24 	bl	800fa34 <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 8010fec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010fee:	3320      	adds	r3, #32
 8010ff0:	f107 0108 	add.w	r1, r7, #8
 8010ff4:	2270      	movs	r2, #112	@ 0x70
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f010 ffe9 	bl	8021fce <memcpy>
  return 0;
 8010ffc:	2300      	movs	r3, #0
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3780      	adds	r7, #128	@ 0x80
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}
 8011006:	bf00      	nop
 8011008:	080276e8 	.word	0x080276e8

0801100c <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 801100c:	b5b0      	push	{r4, r5, r7, lr}
 801100e:	b0c4      	sub	sp, #272	@ 0x110
 8011010:	af00      	add	r7, sp, #0
 8011012:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011016:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801101a:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801101c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011020:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801102a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  struct mg_iobuf *wio = &tls->send;
 801102e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011032:	3304      	adds	r3, #4
 8011034:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

  uint8_t x25519_pub[X25519_BYTES];

  // the only signature algorithm we actually support
  uint8_t secp256r1_sig_algs[8] = {
 8011038:	4a28      	ldr	r2, [pc, #160]	@ (80110dc <mg_tls_client_send_hello+0xd0>)
 801103a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 801103e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011042:	e883 0003 	stmia.w	r3, {r0, r1}
      0x00, 0x0d, 0x00, 0x04, 0x00, 0x02, 0x04, 0x03,
  };
  // all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 8011046:	4b26      	ldr	r3, [pc, #152]	@ (80110e0 <mg_tls_client_send_hello+0xd4>)
 8011048:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 801104c:	461d      	mov	r5, r3
 801104e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011056:	682b      	ldr	r3, [r5, #0]
 8011058:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 801105a:	4a22      	ldr	r2, [pc, #136]	@ (80110e4 <mg_tls_client_send_hello+0xd8>)
 801105c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8011060:	ca07      	ldmia	r2, {r0, r1, r2}
 8011062:	c303      	stmia	r3!, {r0, r1}
 8011064:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 8011066:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801106a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801106e:	4a1e      	ldr	r2, [pc, #120]	@ (80110e8 <mg_tls_client_send_hello+0xdc>)
 8011070:	4618      	mov	r0, r3
 8011072:	4611      	mov	r1, r2
 8011074:	2391      	movs	r3, #145	@ 0x91
 8011076:	461a      	mov	r2, r3
 8011078:	f010 ffa9 	bl	8021fce <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 801107c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011080:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8011084:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  size_t hostnamesz = strlen(tls->hostname);
 8011088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801108c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8011090:	4618      	mov	r0, r3
 8011092:	f7ef f985 	bl	80003a0 <strlen>
 8011096:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 801109a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d003      	beq.n	80110aa <mg_tls_client_send_hello+0x9e>
 80110a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80110a6:	3309      	adds	r3, #9
 80110a8:	e000      	b.n	80110ac <mg_tls_client_send_hello+0xa0>
 80110aa:	2300      	movs	r3, #0
 80110ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  uint8_t *sig_alg = tls->skip_verification ? all_sig_algs : secp256r1_sig_algs;
 80110b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80110b4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d002      	beq.n	80110c2 <mg_tls_client_send_hello+0xb6>
 80110bc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80110c0:	e001      	b.n	80110c6 <mg_tls_client_send_hello+0xba>
 80110c2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80110c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 80110ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80110ce:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d00a      	beq.n	80110ec <mg_tls_client_send_hello+0xe0>
 80110d6:	2322      	movs	r3, #34	@ 0x22
 80110d8:	e009      	b.n	80110ee <mg_tls_client_send_hello+0xe2>
 80110da:	bf00      	nop
 80110dc:	0802770c 	.word	0x0802770c
 80110e0:	08027714 	.word	0x08027714
 80110e4:	08027738 	.word	0x08027738
 80110e8:	08027744 	.word	0x08027744
 80110ec:	2308      	movs	r3, #8
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 80110ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 80110f2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80110f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110fa:	4413      	add	r3, r2
 80110fc:	338c      	adds	r3, #140	@ 0x8c
 80110fe:	0a1b      	lsrs	r3, r3, #8
 8011100:	b2da      	uxtb	r2, r3
 8011102:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801110a:	70da      	strb	r2, [r3, #3]
 801110c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011110:	b2da      	uxtb	r2, r3
 8011112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011116:	b2db      	uxtb	r3, r3
 8011118:	4413      	add	r3, r2
 801111a:	b2db      	uxtb	r3, r3
 801111c:	3b74      	subs	r3, #116	@ 0x74
 801111e:	b2da      	uxtb	r2, r3
 8011120:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011128:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 801112a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801112e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011132:	4413      	add	r3, r2
 8011134:	3388      	adds	r3, #136	@ 0x88
 8011136:	0a1b      	lsrs	r3, r3, #8
 8011138:	b2da      	uxtb	r2, r3
 801113a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801113e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011142:	71da      	strb	r2, [r3, #7]
 8011144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011148:	b2da      	uxtb	r2, r3
 801114a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801114e:	b2db      	uxtb	r3, r3
 8011150:	4413      	add	r3, r2
 8011152:	b2db      	uxtb	r3, r3
 8011154:	3b78      	subs	r3, #120	@ 0x78
 8011156:	b2da      	uxtb	r2, r3
 8011158:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801115c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011160:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 8011162:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8011166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801116a:	4413      	add	r3, r2
 801116c:	333d      	adds	r3, #61	@ 0x3d
 801116e:	0a1b      	lsrs	r3, r3, #8
 8011170:	b2da      	uxtb	r2, r3
 8011172:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801117a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 801117e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011182:	b2da      	uxtb	r2, r3
 8011184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011188:	b2db      	uxtb	r3, r3
 801118a:	4413      	add	r3, r2
 801118c:	b2db      	uxtb	r3, r3
 801118e:	333d      	adds	r3, #61	@ 0x3d
 8011190:	b2da      	uxtb	r2, r3
 8011192:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801119a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 801119e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d026      	beq.n	80111f4 <mg_tls_client_send_hello+0x1e8>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 80111a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80111aa:	3305      	adds	r3, #5
 80111ac:	0a1b      	lsrs	r3, r3, #8
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 80111b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	3305      	adds	r3, #5
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 80111c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80111c6:	3303      	adds	r3, #3
 80111c8:	0a1b      	lsrs	r3, r3, #8
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 80111d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	3303      	adds	r3, #3
 80111d8:	b2db      	uxtb	r3, r3
 80111da:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 80111de:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80111e2:	0a1b      	lsrs	r3, r3, #8
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 80111ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 80111f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80111f8:	33d0      	adds	r3, #208	@ 0xd0
 80111fa:	2120      	movs	r1, #32
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7ef fe91 	bl	8000f24 <mg_random>
 8011202:	4603      	mov	r3, r0
 8011204:	f083 0301 	eor.w	r3, r3, #1
 8011208:	b2db      	uxtb	r3, r3
 801120a:	2b00      	cmp	r3, #0
 801120c:	d007      	beq.n	801121e <mg_tls_client_send_hello+0x212>
 801120e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011212:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011216:	4974      	ldr	r1, [pc, #464]	@ (80113e8 <mg_tls_client_send_hello+0x3dc>)
 8011218:	6818      	ldr	r0, [r3, #0]
 801121a:	f7f1 fb9f 	bl	800295c <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 801121e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011222:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 8011226:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 801122a:	2301      	movs	r3, #1
 801122c:	4a6f      	ldr	r2, [pc, #444]	@ (80113ec <mg_tls_client_send_hello+0x3e0>)
 801122e:	f006 f95d 	bl	80174ec <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 8011232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011236:	33b0      	adds	r3, #176	@ 0xb0
 8011238:	2120      	movs	r1, #32
 801123a:	4618      	mov	r0, r3
 801123c:	f7ef fe72 	bl	8000f24 <mg_random>
 8011240:	4603      	mov	r3, r0
 8011242:	f083 0301 	eor.w	r3, r3, #1
 8011246:	b2db      	uxtb	r3, r3
 8011248:	2b00      	cmp	r3, #0
 801124a:	d007      	beq.n	801125c <mg_tls_client_send_hello+0x250>
 801124c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011250:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011254:	4964      	ldr	r1, [pc, #400]	@ (80113e8 <mg_tls_client_send_hello+0x3dc>)
 8011256:	6818      	ldr	r0, [r3, #0]
 8011258:	f7f1 fb80 	bl	800295c <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 801125c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011260:	3390      	adds	r3, #144	@ 0x90
 8011262:	2120      	movs	r1, #32
 8011264:	4618      	mov	r0, r3
 8011266:	f7ef fe5d 	bl	8000f24 <mg_random>
 801126a:	4603      	mov	r3, r0
 801126c:	f083 0301 	eor.w	r3, r3, #1
 8011270:	b2db      	uxtb	r3, r3
 8011272:	2b00      	cmp	r3, #0
 8011274:	d007      	beq.n	8011286 <mg_tls_client_send_hello+0x27a>
 8011276:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801127a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801127e:	495a      	ldr	r1, [pc, #360]	@ (80113e8 <mg_tls_client_send_hello+0x3dc>)
 8011280:	6818      	ldr	r0, [r3, #0]
 8011282:	f7f1 fb6b 	bl	800295c <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 8011286:	f107 0308 	add.w	r3, r7, #8
 801128a:	330b      	adds	r3, #11
 801128c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8011290:	3290      	adds	r2, #144	@ 0x90
 8011292:	6815      	ldr	r5, [r2, #0]
 8011294:	6854      	ldr	r4, [r2, #4]
 8011296:	6890      	ldr	r0, [r2, #8]
 8011298:	68d1      	ldr	r1, [r2, #12]
 801129a:	601d      	str	r5, [r3, #0]
 801129c:	605c      	str	r4, [r3, #4]
 801129e:	6098      	str	r0, [r3, #8]
 80112a0:	60d9      	str	r1, [r3, #12]
 80112a2:	6915      	ldr	r5, [r2, #16]
 80112a4:	6954      	ldr	r4, [r2, #20]
 80112a6:	6990      	ldr	r0, [r2, #24]
 80112a8:	69d1      	ldr	r1, [r2, #28]
 80112aa:	611d      	str	r5, [r3, #16]
 80112ac:	615c      	str	r4, [r3, #20]
 80112ae:	6198      	str	r0, [r3, #24]
 80112b0:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 80112b2:	f107 0308 	add.w	r3, r7, #8
 80112b6:	332c      	adds	r3, #44	@ 0x2c
 80112b8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80112bc:	32b0      	adds	r2, #176	@ 0xb0
 80112be:	6815      	ldr	r5, [r2, #0]
 80112c0:	6854      	ldr	r4, [r2, #4]
 80112c2:	6890      	ldr	r0, [r2, #8]
 80112c4:	68d1      	ldr	r1, [r2, #12]
 80112c6:	601d      	str	r5, [r3, #0]
 80112c8:	605c      	str	r4, [r3, #4]
 80112ca:	6098      	str	r0, [r3, #8]
 80112cc:	60d9      	str	r1, [r3, #12]
 80112ce:	6915      	ldr	r5, [r2, #16]
 80112d0:	6954      	ldr	r4, [r2, #20]
 80112d2:	6990      	ldr	r0, [r2, #24]
 80112d4:	69d1      	ldr	r1, [r2, #28]
 80112d6:	611d      	str	r5, [r3, #16]
 80112d8:	615c      	str	r4, [r3, #20]
 80112da:	6198      	str	r0, [r3, #24]
 80112dc:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 80112de:	f107 0308 	add.w	r3, r7, #8
 80112e2:	335e      	adds	r3, #94	@ 0x5e
 80112e4:	461d      	mov	r5, r3
 80112e6:	f107 04d4 	add.w	r4, r7, #212	@ 0xd4
 80112ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112ec:	6028      	str	r0, [r5, #0]
 80112ee:	6069      	str	r1, [r5, #4]
 80112f0:	60aa      	str	r2, [r5, #8]
 80112f2:	60eb      	str	r3, [r5, #12]
 80112f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112f6:	6128      	str	r0, [r5, #16]
 80112f8:	6169      	str	r1, [r5, #20]
 80112fa:	61aa      	str	r2, [r5, #24]
 80112fc:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 80112fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8011302:	6899      	ldr	r1, [r3, #8]
 8011304:	f107 0208 	add.w	r2, r7, #8
 8011308:	2391      	movs	r3, #145	@ 0x91
 801130a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 801130e:	f7f5 fecd 	bl	80070ac <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 8011312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011316:	f103 0020 	add.w	r0, r3, #32
 801131a:	f107 0308 	add.w	r3, r7, #8
 801131e:	3305      	adds	r3, #5
 8011320:	228c      	movs	r2, #140	@ 0x8c
 8011322:	4619      	mov	r1, r3
 8011324:	f7fc ffaa 	bl	800e27c <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 8011328:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801132c:	6899      	ldr	r1, [r3, #8]
 801132e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011332:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8011336:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 801133a:	f7f5 feb7 	bl	80070ac <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 801133e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011342:	3320      	adds	r3, #32
 8011344:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8011348:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 801134c:	4618      	mov	r0, r3
 801134e:	f7fc ff95 	bl	800e27c <mg_sha256_update>
  if (hostnamesz > 0) {
 8011352:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8011356:	2b00      	cmp	r3, #0
 8011358:	d027      	beq.n	80113aa <mg_tls_client_send_hello+0x39e>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 801135a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801135e:	6899      	ldr	r1, [r3, #8]
 8011360:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8011364:	2309      	movs	r3, #9
 8011366:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 801136a:	f7f5 fe9f 	bl	80070ac <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 801136e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8011372:	6899      	ldr	r1, [r3, #8]
 8011374:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8011378:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801137c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8011380:	f7f5 fe94 	bl	80070ac <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 8011384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011388:	3320      	adds	r3, #32
 801138a:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 801138e:	2209      	movs	r2, #9
 8011390:	4618      	mov	r0, r3
 8011392:	f7fc ff73 	bl	800e27c <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 8011396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801139a:	3320      	adds	r3, #32
 801139c:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80113a0:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7fc ff69 	bl	800e27c <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 80113aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80113ae:	6899      	ldr	r1, [r3, #8]
 80113b0:	2306      	movs	r3, #6
 80113b2:	4a0f      	ldr	r2, [pc, #60]	@ (80113f0 <mg_tls_client_send_hello+0x3e4>)
 80113b4:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80113b8:	f7f5 fe78 	bl	80070ac <mg_iobuf_add>
  mg_io_send(c, wio->buf, wio->len);
 80113bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80113c0:	6819      	ldr	r1, [r3, #0]
 80113c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80113c6:	689a      	ldr	r2, [r3, #8]
 80113c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80113cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80113d0:	6818      	ldr	r0, [r3, #0]
 80113d2:	f7fa f905 	bl	800b5e0 <mg_io_send>
  wio->len = 0;
 80113d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80113da:	2200      	movs	r2, #0
 80113dc:	609a      	str	r2, [r3, #8]
}
 80113de:	bf00      	nop
 80113e0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bdb0      	pop	{r4, r5, r7, pc}
 80113e8:	08027600 	.word	0x08027600
 80113ec:	08028e68 	.word	0x08028e68
 80113f0:	0802761c 	.word	0x0802761c

080113f4 <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b08a      	sub	sp, #40	@ 0x28
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011402:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	3368      	adds	r3, #104	@ 0x68
 8011408:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f7fe fac9 	bl	800f9a2 <mg_tls_got_record>
 8011410:	4603      	mov	r3, r0
 8011412:	f083 0301 	eor.w	r3, r3, #1
 8011416:	b2db      	uxtb	r3, r3
 8011418:	2b00      	cmp	r3, #0
 801141a:	d002      	beq.n	8011422 <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 801141c:	f06f 0301 	mvn.w	r3, #1
 8011420:	e103      	b.n	801162a <mg_tls_client_recv_hello+0x236>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	2b16      	cmp	r3, #22
 801142a:	d105      	bne.n	8011438 <mg_tls_client_recv_hello+0x44>
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	3305      	adds	r3, #5
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	2b02      	cmp	r3, #2
 8011436:	d032      	beq.n	801149e <mg_tls_client_recv_hello+0xaa>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	2b15      	cmp	r3, #21
 8011440:	d10f      	bne.n	8011462 <mg_tls_client_recv_hello+0x6e>
 8011442:	69fb      	ldr	r3, [r7, #28]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	2b06      	cmp	r3, #6
 8011448:	d90b      	bls.n	8011462 <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	3306      	adds	r3, #6
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	461a      	mov	r2, r3
 8011454:	4977      	ldr	r1, [pc, #476]	@ (8011634 <mg_tls_client_recv_hello+0x240>)
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f7f1 fa80 	bl	800295c <mg_error>
      return -1;
 801145c:	f04f 33ff 	mov.w	r3, #4294967295
 8011460:	e0e3      	b.n	801162a <mg_tls_client_recv_hello+0x236>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
 8011462:	4b75      	ldr	r3, [pc, #468]	@ (8011638 <mg_tls_client_recv_hello+0x244>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	2b01      	cmp	r3, #1
 8011468:	dd12      	ble.n	8011490 <mg_tls_client_recv_hello+0x9c>
 801146a:	4b74      	ldr	r3, [pc, #464]	@ (801163c <mg_tls_client_recv_hello+0x248>)
 801146c:	f642 1256 	movw	r2, #10582	@ 0x2956
 8011470:	4973      	ldr	r1, [pc, #460]	@ (8011640 <mg_tls_client_recv_hello+0x24c>)
 8011472:	2002      	movs	r0, #2
 8011474:	f7f6 fd5c 	bl	8007f30 <mg_log_prefix>
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	4619      	mov	r1, r3
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	3305      	adds	r3, #5
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	461a      	mov	r2, r3
 801148a:	486e      	ldr	r0, [pc, #440]	@ (8011644 <mg_tls_client_recv_hello+0x250>)
 801148c:	f7f6 fda0 	bl	8007fd0 <mg_log>
    mg_error(c, "not a server hello packet");
 8011490:	496d      	ldr	r1, [pc, #436]	@ (8011648 <mg_tls_client_recv_hello+0x254>)
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f7f1 fa62 	bl	800295c <mg_error>
    return -1;
 8011498:	f04f 33ff 	mov.w	r3, #4294967295
 801149c:	e0c5      	b.n	801162a <mg_tls_client_recv_hello+0x236>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 801149e:	69fb      	ldr	r3, [r7, #28]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	3303      	adds	r3, #3
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	021b      	lsls	r3, r3, #8
 80114a8:	b21a      	sxth	r2, r3
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	3304      	adds	r3, #4
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	b21b      	sxth	r3, r3
 80114b4:	4313      	orrs	r3, r2
 80114b6:	b21b      	sxth	r3, r3
 80114b8:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 80114ba:	6a3b      	ldr	r3, [r7, #32]
 80114bc:	f103 0020 	add.w	r0, r3, #32
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	3305      	adds	r3, #5
 80114c6:	8b7a      	ldrh	r2, [r7, #26]
 80114c8:	4619      	mov	r1, r3
 80114ca:	f7fc fed7 	bl	800e27c <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 80114ce:	69fb      	ldr	r3, [r7, #28]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	334f      	adds	r3, #79	@ 0x4f
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	021b      	lsls	r3, r3, #8
 80114d8:	b21a      	sxth	r2, r3
 80114da:	69fb      	ldr	r3, [r7, #28]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	3350      	adds	r3, #80	@ 0x50
 80114e0:	781b      	ldrb	r3, [r3, #0]
 80114e2:	b21b      	sxth	r3, r3
 80114e4:	4313      	orrs	r3, r2
 80114e6:	b21b      	sxth	r3, r3
 80114e8:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 80114ea:	69fb      	ldr	r3, [r7, #28]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	3351      	adds	r3, #81	@ 0x51
 80114f0:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 80114f2:	8b3a      	ldrh	r2, [r7, #24]
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	689b      	ldr	r3, [r3, #8]
 80114f8:	3b51      	subs	r3, #81	@ 0x51
 80114fa:	429a      	cmp	r2, r3
 80114fc:	f200 808c 	bhi.w	8011618 <mg_tls_client_recv_hello+0x224>

  for (j = 0; j < ext_len;) {
 8011500:	2300      	movs	r3, #0
 8011502:	627b      	str	r3, [r7, #36]	@ 0x24
 8011504:	e082      	b.n	801160c <mg_tls_client_recv_hello+0x218>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 8011506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011508:	697a      	ldr	r2, [r7, #20]
 801150a:	4413      	add	r3, r2
 801150c:	781b      	ldrb	r3, [r3, #0]
 801150e:	021b      	lsls	r3, r3, #8
 8011510:	b21a      	sxth	r2, r3
 8011512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011514:	3301      	adds	r3, #1
 8011516:	6979      	ldr	r1, [r7, #20]
 8011518:	440b      	add	r3, r1
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	b21b      	sxth	r3, r3
 801151e:	4313      	orrs	r3, r2
 8011520:	b21b      	sxth	r3, r3
 8011522:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 8011524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011526:	3302      	adds	r3, #2
 8011528:	697a      	ldr	r2, [r7, #20]
 801152a:	4413      	add	r3, r2
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	021b      	lsls	r3, r3, #8
 8011530:	b21a      	sxth	r2, r3
 8011532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011534:	3303      	adds	r3, #3
 8011536:	6979      	ldr	r1, [r7, #20]
 8011538:	440b      	add	r3, r1
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	b21b      	sxth	r3, r3
 801153e:	4313      	orrs	r3, r2
 8011540:	b21b      	sxth	r3, r3
 8011542:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 8011544:	8b3a      	ldrh	r2, [r7, #24]
 8011546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011548:	1ad3      	subs	r3, r2, r3
 801154a:	1eda      	subs	r2, r3, #3
 801154c:	8a3b      	ldrh	r3, [r7, #16]
 801154e:	429a      	cmp	r2, r3
 8011550:	dd64      	ble.n	801161c <mg_tls_client_recv_hello+0x228>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 8011552:	8a7b      	ldrh	r3, [r7, #18]
 8011554:	2b33      	cmp	r3, #51	@ 0x33
 8011556:	d007      	beq.n	8011568 <mg_tls_client_recv_hello+0x174>
      j += (uint16_t) (ext_len2 + 4);
 8011558:	8a3b      	ldrh	r3, [r7, #16]
 801155a:	3304      	adds	r3, #4
 801155c:	b29b      	uxth	r3, r3
 801155e:	461a      	mov	r2, r3
 8011560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011562:	4413      	add	r3, r2
 8011564:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 8011566:	e051      	b.n	801160c <mg_tls_client_recv_hello+0x218>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 8011568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801156a:	3304      	adds	r3, #4
 801156c:	697a      	ldr	r2, [r7, #20]
 801156e:	4413      	add	r3, r2
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	021b      	lsls	r3, r3, #8
 8011574:	b21a      	sxth	r2, r3
 8011576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011578:	3305      	adds	r3, #5
 801157a:	6979      	ldr	r1, [r7, #20]
 801157c:	440b      	add	r3, r1
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	b21b      	sxth	r3, r3
 8011582:	4313      	orrs	r3, r2
 8011584:	b21b      	sxth	r3, r3
 8011586:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 8011588:	89fb      	ldrh	r3, [r7, #14]
 801158a:	2b1d      	cmp	r3, #29
 801158c:	d006      	beq.n	801159c <mg_tls_client_recv_hello+0x1a8>
      mg_error(c, "bad key exchange group");
 801158e:	492f      	ldr	r1, [pc, #188]	@ (801164c <mg_tls_client_recv_hello+0x258>)
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f7f1 f9e3 	bl	800295c <mg_error>
      return -1;
 8011596:	f04f 33ff 	mov.w	r3, #4294967295
 801159a:	e046      	b.n	801162a <mg_tls_client_recv_hello+0x236>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 801159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801159e:	3306      	adds	r3, #6
 80115a0:	697a      	ldr	r2, [r7, #20]
 80115a2:	4413      	add	r3, r2
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	021b      	lsls	r3, r3, #8
 80115a8:	b21a      	sxth	r2, r3
 80115aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ac:	3307      	adds	r3, #7
 80115ae:	6979      	ldr	r1, [r7, #20]
 80115b0:	440b      	add	r3, r1
 80115b2:	781b      	ldrb	r3, [r3, #0]
 80115b4:	b21b      	sxth	r3, r3
 80115b6:	4313      	orrs	r3, r2
 80115b8:	b21b      	sxth	r3, r3
 80115ba:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 80115bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115be:	3308      	adds	r3, #8
 80115c0:	697a      	ldr	r2, [r7, #20]
 80115c2:	4413      	add	r3, r2
 80115c4:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 80115c6:	89bb      	ldrh	r3, [r7, #12]
 80115c8:	2b20      	cmp	r3, #32
 80115ca:	d006      	beq.n	80115da <mg_tls_client_recv_hello+0x1e6>
      mg_error(c, "bad key exchange length");
 80115cc:	4920      	ldr	r1, [pc, #128]	@ (8011650 <mg_tls_client_recv_hello+0x25c>)
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f7f1 f9c4 	bl	800295c <mg_error>
      return -1;
 80115d4:	f04f 33ff 	mov.w	r3, #4294967295
 80115d8:	e027      	b.n	801162a <mg_tls_client_recv_hello+0x236>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 80115da:	6a3b      	ldr	r3, [r7, #32]
 80115dc:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 80115e0:	6a3b      	ldr	r3, [r7, #32]
 80115e2:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 80115e6:	2301      	movs	r3, #1
 80115e8:	68ba      	ldr	r2, [r7, #8]
 80115ea:	f005 ff7f 	bl	80174ec <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 80115ee:	6a3b      	ldr	r3, [r7, #32]
 80115f0:	33f0      	adds	r3, #240	@ 0xf0
 80115f2:	2220      	movs	r2, #32
 80115f4:	4619      	mov	r1, r3
 80115f6:	4817      	ldr	r0, [pc, #92]	@ (8011654 <mg_tls_client_recv_hello+0x260>)
 80115f8:	f7fe f8e8 	bl	800f7cc <mg_tls_hexdump>
    mg_tls_drop_record(c);
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f7fe f9f7 	bl	800f9f0 <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f7fe fafe 	bl	800fc04 <mg_tls_generate_handshake_keys>
    return 0;
 8011608:	2300      	movs	r3, #0
 801160a:	e00e      	b.n	801162a <mg_tls_client_recv_hello+0x236>
  for (j = 0; j < ext_len;) {
 801160c:	8b3b      	ldrh	r3, [r7, #24]
 801160e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011610:	429a      	cmp	r2, r3
 8011612:	f6ff af78 	blt.w	8011506 <mg_tls_client_recv_hello+0x112>
  }
fail:
 8011616:	e002      	b.n	801161e <mg_tls_client_recv_hello+0x22a>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 8011618:	bf00      	nop
 801161a:	e000      	b.n	801161e <mg_tls_client_recv_hello+0x22a>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 801161c:	bf00      	nop
  mg_error(c, "bad client hello");
 801161e:	490e      	ldr	r1, [pc, #56]	@ (8011658 <mg_tls_client_recv_hello+0x264>)
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f7f1 f99b 	bl	800295c <mg_error>
  return -1;
 8011626:	f04f 33ff 	mov.w	r3, #4294967295
}
 801162a:	4618      	mov	r0, r3
 801162c:	3728      	adds	r7, #40	@ 0x28
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop
 8011634:	080277d8 	.word	0x080277d8
 8011638:	24000240 	.word	0x24000240
 801163c:	08029180 	.word	0x08029180
 8011640:	0802597c 	.word	0x0802597c
 8011644:	080277e8 	.word	0x080277e8
 8011648:	08027808 	.word	0x08027808
 801164c:	08027824 	.word	0x08027824
 8011650:	0802783c 	.word	0x0802783c
 8011654:	08027854 	.word	0x08027854
 8011658:	080275ec 	.word	0x080275ec

0801165c <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 801165c:	b580      	push	{r7, lr}
 801165e:	b084      	sub	sp, #16
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801166a:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f7fe fe2d 	bl	80102cc <mg_tls_recv_record>
 8011672:	4603      	mov	r3, r0
 8011674:	2b00      	cmp	r3, #0
 8011676:	da02      	bge.n	801167e <mg_tls_client_recv_ext+0x22>
    return -1;
 8011678:	f04f 33ff 	mov.w	r3, #4294967295
 801167c:	e017      	b.n	80116ae <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	695b      	ldr	r3, [r3, #20]
 8011686:	4413      	add	r3, r2
 8011688:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	2b08      	cmp	r3, #8
 8011690:	d009      	beq.n	80116a6 <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	461a      	mov	r2, r3
 8011698:	4907      	ldr	r1, [pc, #28]	@ (80116b8 <mg_tls_client_recv_ext+0x5c>)
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7f1 f95e 	bl	800295c <mg_error>
    return -1;
 80116a0:	f04f 33ff 	mov.w	r3, #4294967295
 80116a4:	e003      	b.n	80116ae <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f7fe f9c4 	bl	800fa34 <mg_tls_drop_message>
  return 0;
 80116ac:	2300      	movs	r3, #0
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	08027864 	.word	0x08027864

080116bc <mg_tls_client_recv_cert>:

static int mg_tls_client_recv_cert(struct mg_connection *c) {
 80116bc:	b580      	push	{r7, lr}
 80116be:	b09a      	sub	sp, #104	@ 0x68
 80116c0:	af02      	add	r7, sp, #8
 80116c2:	6078      	str	r0, [r7, #4]
  uint8_t *cert;
  uint32_t certsz;
  struct mg_der_tlv oid, pubkey, seq, subj;
  int subj_match = 0;
 80116c4:	2300      	movs	r3, #0
 80116c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  struct tls_data *tls = (struct tls_data *) c->tls;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80116ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f7fe fdfb 	bl	80102cc <mg_tls_recv_record>
 80116d6:	4603      	mov	r3, r0
 80116d8:	2b00      	cmp	r3, #0
 80116da:	da02      	bge.n	80116e2 <mg_tls_client_recv_cert+0x26>
    return -1;
 80116dc:	f04f 33ff 	mov.w	r3, #4294967295
 80116e0:	e191      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80116e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80116e8:	695b      	ldr	r3, [r3, #20]
 80116ea:	4413      	add	r3, r2
 80116ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 80116ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	2b0d      	cmp	r3, #13
 80116f4:	d117      	bne.n	8011726 <mg_tls_client_recv_cert+0x6a>
    MG_VERBOSE(("got certificate request"));
 80116f6:	4b9f      	ldr	r3, [pc, #636]	@ (8011974 <mg_tls_client_recv_cert+0x2b8>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2b03      	cmp	r3, #3
 80116fc:	dd09      	ble.n	8011712 <mg_tls_client_recv_cert+0x56>
 80116fe:	4b9e      	ldr	r3, [pc, #632]	@ (8011978 <mg_tls_client_recv_cert+0x2bc>)
 8011700:	f642 129f 	movw	r2, #10655	@ 0x299f
 8011704:	499d      	ldr	r1, [pc, #628]	@ (801197c <mg_tls_client_recv_cert+0x2c0>)
 8011706:	2004      	movs	r0, #4
 8011708:	f7f6 fc12 	bl	8007f30 <mg_log_prefix>
 801170c:	489c      	ldr	r0, [pc, #624]	@ (8011980 <mg_tls_client_recv_cert+0x2c4>)
 801170e:	f7f6 fc5f 	bl	8007fd0 <mg_log>
    mg_tls_drop_message(c);
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f7fe f98e 	bl	800fa34 <mg_tls_drop_message>
    tls->cert_requested = 1;
 8011718:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801171a:	2201      	movs	r2, #1
 801171c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    return -1;
 8011720:	f04f 33ff 	mov.w	r3, #4294967295
 8011724:	e16f      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
  }
  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 8011726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011728:	781b      	ldrb	r3, [r3, #0]
 801172a:	2b0b      	cmp	r3, #11
 801172c:	d009      	beq.n	8011742 <mg_tls_client_recv_cert+0x86>
    mg_error(c, "expected server certificate but got msg 0x%02x", recv_buf[0]);
 801172e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	461a      	mov	r2, r3
 8011734:	4993      	ldr	r1, [pc, #588]	@ (8011984 <mg_tls_client_recv_cert+0x2c8>)
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f7f1 f910 	bl	800295c <mg_error>
    return -1;
 801173c:	f04f 33ff 	mov.w	r3, #4294967295
 8011740:	e161      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
  }
  if (tls->skip_verification) {
 8011742:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011744:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011748:	2b00      	cmp	r3, #0
 801174a:	d004      	beq.n	8011756 <mg_tls_client_recv_cert+0x9a>
    mg_tls_drop_message(c);
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f7fe f971 	bl	800fa34 <mg_tls_drop_message>
    return 0;
 8011752:	2300      	movs	r3, #0
 8011754:	e157      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
  }

  if (tls->recv_len < 11) {
 8011756:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011758:	699b      	ldr	r3, [r3, #24]
 801175a:	2b0a      	cmp	r3, #10
 801175c:	d806      	bhi.n	801176c <mg_tls_client_recv_cert+0xb0>
    mg_error(c, "certificate list too short");
 801175e:	498a      	ldr	r1, [pc, #552]	@ (8011988 <mg_tls_client_recv_cert+0x2cc>)
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f7f1 f8fb 	bl	800295c <mg_error>
    return -1;
 8011766:	f04f 33ff 	mov.w	r3, #4294967295
 801176a:	e14c      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
  }

  cert = recv_buf + 11;
 801176c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801176e:	330b      	adds	r3, #11
 8011770:	653b      	str	r3, [r7, #80]	@ 0x50
  certsz = MG_LOAD_BE24(recv_buf + 8);
 8011772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011774:	3308      	adds	r3, #8
 8011776:	781b      	ldrb	r3, [r3, #0]
 8011778:	041a      	lsls	r2, r3, #16
 801177a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801177c:	3309      	adds	r3, #9
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	021b      	lsls	r3, r3, #8
 8011782:	4313      	orrs	r3, r2
 8011784:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011786:	320a      	adds	r2, #10
 8011788:	7812      	ldrb	r2, [r2, #0]
 801178a:	4313      	orrs	r3, r2
 801178c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (certsz > tls->recv_len - 11) {
 801178e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011790:	699b      	ldr	r3, [r3, #24]
 8011792:	3b0b      	subs	r3, #11
 8011794:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011796:	429a      	cmp	r2, r3
 8011798:	d90a      	bls.n	80117b0 <mg_tls_client_recv_cert+0xf4>
    mg_error(c, "certificate too long: %d vs %d", certsz, tls->recv_len - 11);
 801179a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801179c:	699b      	ldr	r3, [r3, #24]
 801179e:	3b0b      	subs	r3, #11
 80117a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80117a2:	497a      	ldr	r1, [pc, #488]	@ (801198c <mg_tls_client_recv_cert+0x2d0>)
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f7f1 f8d9 	bl	800295c <mg_error>
    return -1;
 80117aa:	f04f 33ff 	mov.w	r3, #4294967295
 80117ae:	e12a      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
  }

  do {
    // secp256r1 public key
    if (mg_der_find(cert, certsz,
 80117b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	2308      	movs	r3, #8
 80117b8:	4a75      	ldr	r2, [pc, #468]	@ (8011990 <mg_tls_client_recv_cert+0x2d4>)
 80117ba:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80117bc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80117be:	f7fe f881 	bl	800f8c4 <mg_der_find>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	da06      	bge.n	80117d6 <mg_tls_client_recv_cert+0x11a>
                    (uint8_t *) "\x2A\x86\x48\xCE\x3D\x03\x01\x07", 8,
                    &oid) < 0) {
      mg_error(c, "certificate secp256r1 public key OID not found");
 80117c8:	4972      	ldr	r1, [pc, #456]	@ (8011994 <mg_tls_client_recv_cert+0x2d8>)
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f7f1 f8c6 	bl	800295c <mg_error>
      return -1;
 80117d0:	f04f 33ff 	mov.w	r3, #4294967295
 80117d4:	e117      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
    }
    if (mg_der_to_tlv(oid.value + oid.len,
 80117d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80117d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117da:	18d0      	adds	r0, r2, r3
                      (size_t) (cert + certsz - (oid.value + oid.len)),
 80117dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80117de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117e0:	441a      	add	r2, r3
 80117e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80117e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117e6:	440b      	add	r3, r1
 80117e8:	1ad3      	subs	r3, r2, r3
    if (mg_der_to_tlv(oid.value + oid.len,
 80117ea:	4619      	mov	r1, r3
 80117ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80117f0:	461a      	mov	r2, r3
 80117f2:	f7fe f813 	bl	800f81c <mg_der_to_tlv>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	da06      	bge.n	801180a <mg_tls_client_recv_cert+0x14e>
                      &pubkey) < 0) {
      mg_error(c, "certificate secp256r1 public key not found");
 80117fc:	4966      	ldr	r1, [pc, #408]	@ (8011998 <mg_tls_client_recv_cert+0x2dc>)
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f7f1 f8ac 	bl	800295c <mg_error>
      return -1;
 8011804:	f04f 33ff 	mov.w	r3, #4294967295
 8011808:	e0fd      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
    }

    // expect BIT STRING, unpadded, uncompressed: [0]+[4]+32+32 content bytes
    if (pubkey.type != 3 || pubkey.len != 66 || pubkey.value[0] != 0 ||
 801180a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801180e:	2b03      	cmp	r3, #3
 8011810:	d10b      	bne.n	801182a <mg_tls_client_recv_cert+0x16e>
 8011812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011814:	2b42      	cmp	r3, #66	@ 0x42
 8011816:	d108      	bne.n	801182a <mg_tls_client_recv_cert+0x16e>
 8011818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d104      	bne.n	801182a <mg_tls_client_recv_cert+0x16e>
        pubkey.value[1] != 4) {
 8011820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011822:	3301      	adds	r3, #1
 8011824:	781b      	ldrb	r3, [r3, #0]
    if (pubkey.type != 3 || pubkey.len != 66 || pubkey.value[0] != 0 ||
 8011826:	2b04      	cmp	r3, #4
 8011828:	d006      	beq.n	8011838 <mg_tls_client_recv_cert+0x17c>
      mg_error(c, "unsupported public key bitstring encoding");
 801182a:	495c      	ldr	r1, [pc, #368]	@ (801199c <mg_tls_client_recv_cert+0x2e0>)
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f7f1 f895 	bl	800295c <mg_error>
      return -1;
 8011832:	f04f 33ff 	mov.w	r3, #4294967295
 8011836:	e0e6      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
    }
    memmove(tls->pubkey, pubkey.value + 2, pubkey.len - 2);
 8011838:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801183a:	f203 205e 	addw	r0, r3, #606	@ 0x25e
 801183e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011840:	1c99      	adds	r1, r3, #2
 8011842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011844:	3b02      	subs	r3, #2
 8011846:	461a      	mov	r2, r3
 8011848:	f010 fab2 	bl	8021db0 <memmove>
  } while (0);

  // Subject Alternative Names
  do {
    if (mg_der_find(cert, certsz, (uint8_t *) "\x55\x1d\x11", 3, &oid) < 0) {
 801184c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011850:	9300      	str	r3, [sp, #0]
 8011852:	2303      	movs	r3, #3
 8011854:	4a52      	ldr	r2, [pc, #328]	@ (80119a0 <mg_tls_client_recv_cert+0x2e4>)
 8011856:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011858:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801185a:	f7fe f833 	bl	800f8c4 <mg_der_find>
 801185e:	4603      	mov	r3, r0
 8011860:	2b00      	cmp	r3, #0
 8011862:	da06      	bge.n	8011872 <mg_tls_client_recv_cert+0x1b6>
      mg_error(c, "certificate does not contain subject alternative names");
 8011864:	494f      	ldr	r1, [pc, #316]	@ (80119a4 <mg_tls_client_recv_cert+0x2e8>)
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f7f1 f878 	bl	800295c <mg_error>
      return -1;
 801186c:	f04f 33ff 	mov.w	r3, #4294967295
 8011870:	e0c9      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
    }
    if (mg_der_to_tlv(oid.value + oid.len,
 8011872:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011876:	18d0      	adds	r0, r2, r3
                      (size_t) (cert + certsz - (oid.value + oid.len)),
 8011878:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801187a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801187c:	441a      	add	r2, r3
 801187e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011882:	440b      	add	r3, r1
 8011884:	1ad3      	subs	r3, r2, r3
    if (mg_der_to_tlv(oid.value + oid.len,
 8011886:	4619      	mov	r1, r3
 8011888:	f107 0318 	add.w	r3, r7, #24
 801188c:	461a      	mov	r2, r3
 801188e:	f7fd ffc5 	bl	800f81c <mg_der_to_tlv>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	da06      	bge.n	80118a6 <mg_tls_client_recv_cert+0x1ea>
                      &seq) < 0) {
      mg_error(c, "certificate subject alternative names not found");
 8011898:	4943      	ldr	r1, [pc, #268]	@ (80119a8 <mg_tls_client_recv_cert+0x2ec>)
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f7f1 f85e 	bl	800295c <mg_error>
      return -1;
 80118a0:	f04f 33ff 	mov.w	r3, #4294967295
 80118a4:	e0af      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &seq) < 0) {
 80118a6:	6a3b      	ldr	r3, [r7, #32]
 80118a8:	69f9      	ldr	r1, [r7, #28]
 80118aa:	f107 0218 	add.w	r2, r7, #24
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7fd ffb4 	bl	800f81c <mg_der_to_tlv>
 80118b4:	4603      	mov	r3, r0
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	da06      	bge.n	80118c8 <mg_tls_client_recv_cert+0x20c>
      mg_error(
 80118ba:	493c      	ldr	r1, [pc, #240]	@ (80119ac <mg_tls_client_recv_cert+0x2f0>)
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f7f1 f84d 	bl	800295c <mg_error>
          c,
          "certificate subject alternative names is not a constructed object");
      return -1;
 80118c2:	f04f 33ff 	mov.w	r3, #4294967295
 80118c6:	e09e      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
    }
    MG_VERBOSE(("verify hostname %s", tls->hostname));
 80118c8:	4b2a      	ldr	r3, [pc, #168]	@ (8011974 <mg_tls_client_recv_cert+0x2b8>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2b03      	cmp	r3, #3
 80118ce:	f340 8081 	ble.w	80119d4 <mg_tls_client_recv_cert+0x318>
 80118d2:	4b29      	ldr	r3, [pc, #164]	@ (8011978 <mg_tls_client_recv_cert+0x2bc>)
 80118d4:	f642 12e3 	movw	r2, #10723	@ 0x29e3
 80118d8:	4928      	ldr	r1, [pc, #160]	@ (801197c <mg_tls_client_recv_cert+0x2c0>)
 80118da:	2004      	movs	r0, #4
 80118dc:	f7f6 fb28 	bl	8007f30 <mg_log_prefix>
 80118e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118e2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80118e6:	4619      	mov	r1, r3
 80118e8:	4831      	ldr	r0, [pc, #196]	@ (80119b0 <mg_tls_client_recv_cert+0x2f4>)
 80118ea:	f7f6 fb71 	bl	8007fd0 <mg_log>
    while (seq.len > 0) {
 80118ee:	e071      	b.n	80119d4 <mg_tls_client_recv_cert+0x318>
      if (mg_der_to_tlv(seq.value, seq.len, &subj) < 0) {
 80118f0:	6a3b      	ldr	r3, [r7, #32]
 80118f2:	69f9      	ldr	r1, [r7, #28]
 80118f4:	f107 020c 	add.w	r2, r7, #12
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7fd ff8f 	bl	800f81c <mg_der_to_tlv>
 80118fe:	4603      	mov	r3, r0
 8011900:	2b00      	cmp	r3, #0
 8011902:	da06      	bge.n	8011912 <mg_tls_client_recv_cert+0x256>
        mg_error(c, "bad subject alternative name");
 8011904:	492b      	ldr	r1, [pc, #172]	@ (80119b4 <mg_tls_client_recv_cert+0x2f8>)
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7f1 f828 	bl	800295c <mg_error>
        return -1;
 801190c:	f04f 33ff 	mov.w	r3, #4294967295
 8011910:	e079      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
      }
      MG_VERBOSE(("subj=%.*s", subj.len, subj.value));
 8011912:	4b18      	ldr	r3, [pc, #96]	@ (8011974 <mg_tls_client_recv_cert+0x2b8>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	2b03      	cmp	r3, #3
 8011918:	dd0c      	ble.n	8011934 <mg_tls_client_recv_cert+0x278>
 801191a:	4b17      	ldr	r3, [pc, #92]	@ (8011978 <mg_tls_client_recv_cert+0x2bc>)
 801191c:	f642 12e9 	movw	r2, #10729	@ 0x29e9
 8011920:	4916      	ldr	r1, [pc, #88]	@ (801197c <mg_tls_client_recv_cert+0x2c0>)
 8011922:	2004      	movs	r0, #4
 8011924:	f7f6 fb04 	bl	8007f30 <mg_log_prefix>
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	697a      	ldr	r2, [r7, #20]
 801192c:	4619      	mov	r1, r3
 801192e:	4822      	ldr	r0, [pc, #136]	@ (80119b8 <mg_tls_client_recv_cert+0x2fc>)
 8011930:	f7f6 fb4e 	bl	8007fd0 <mg_log>
      if (mg_match(mg_str((const char *) tls->hostname),
 8011934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011936:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 801193a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801193e:	4611      	mov	r1, r2
 8011940:	4618      	mov	r0, r3
 8011942:	f7fd f9bd 	bl	800ecc0 <mg_str_s>
                   mg_str_n((const char *) subj.value, subj.len), NULL)) {
 8011946:	6979      	ldr	r1, [r7, #20]
 8011948:	693a      	ldr	r2, [r7, #16]
      if (mg_match(mg_str((const char *) tls->hostname),
 801194a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801194e:	4618      	mov	r0, r3
 8011950:	f7fd f9d3 	bl	800ecfa <mg_str_n>
 8011954:	2300      	movs	r3, #0
 8011956:	9300      	str	r3, [sp, #0]
 8011958:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801195c:	cb0c      	ldmia	r3, {r2, r3}
 801195e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8011962:	c903      	ldmia	r1, {r0, r1}
 8011964:	f7fd fab6 	bl	800eed4 <mg_match>
 8011968:	4603      	mov	r3, r0
 801196a:	2b00      	cmp	r3, #0
 801196c:	d026      	beq.n	80119bc <mg_tls_client_recv_cert+0x300>
        subj_match = 1;
 801196e:	2301      	movs	r3, #1
 8011970:	65fb      	str	r3, [r7, #92]	@ 0x5c
        break;
 8011972:	e032      	b.n	80119da <mg_tls_client_recv_cert+0x31e>
 8011974:	24000240 	.word	0x24000240
 8011978:	0802919c 	.word	0x0802919c
 801197c:	0802597c 	.word	0x0802597c
 8011980:	08027894 	.word	0x08027894
 8011984:	080278ac 	.word	0x080278ac
 8011988:	080278dc 	.word	0x080278dc
 801198c:	080278f8 	.word	0x080278f8
 8011990:	08027918 	.word	0x08027918
 8011994:	08027924 	.word	0x08027924
 8011998:	08027954 	.word	0x08027954
 801199c:	08027980 	.word	0x08027980
 80119a0:	080279ac 	.word	0x080279ac
 80119a4:	080279b0 	.word	0x080279b0
 80119a8:	080279e8 	.word	0x080279e8
 80119ac:	08027a18 	.word	0x08027a18
 80119b0:	08027a5c 	.word	0x08027a5c
 80119b4:	08027a70 	.word	0x08027a70
 80119b8:	08027a90 	.word	0x08027a90
      }
      seq.len = (uint32_t) (seq.value + seq.len - (subj.value + subj.len));
 80119bc:	6a3a      	ldr	r2, [r7, #32]
 80119be:	69fb      	ldr	r3, [r7, #28]
 80119c0:	441a      	add	r2, r3
 80119c2:	6979      	ldr	r1, [r7, #20]
 80119c4:	693b      	ldr	r3, [r7, #16]
 80119c6:	440b      	add	r3, r1
 80119c8:	1ad3      	subs	r3, r2, r3
 80119ca:	61fb      	str	r3, [r7, #28]
      seq.value = subj.value + subj.len;
 80119cc:	697a      	ldr	r2, [r7, #20]
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	4413      	add	r3, r2
 80119d2:	623b      	str	r3, [r7, #32]
    while (seq.len > 0) {
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d18a      	bne.n	80118f0 <mg_tls_client_recv_cert+0x234>
    }
    if (!subj_match) {
 80119da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d106      	bne.n	80119ee <mg_tls_client_recv_cert+0x332>
      mg_error(c, "certificate did not match the hostname");
 80119e0:	490b      	ldr	r1, [pc, #44]	@ (8011a10 <mg_tls_client_recv_cert+0x354>)
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f7f0 ffba 	bl	800295c <mg_error>
      return -1;
 80119e8:	f04f 33ff 	mov.w	r3, #4294967295
 80119ec:	e00b      	b.n	8011a06 <mg_tls_client_recv_cert+0x34a>
    }
  } while (0);

  mg_tls_drop_message(c);
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f7fe f820 	bl	800fa34 <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, 0);
 80119f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119f6:	f203 239e 	addw	r3, r3, #670	@ 0x29e
 80119fa:	2200      	movs	r2, #0
 80119fc:	4619      	mov	r1, r3
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f7fe fd72 	bl	80104e8 <mg_tls_calc_cert_verify_hash>
  return 0;
 8011a04:	2300      	movs	r3, #0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3760      	adds	r7, #96	@ 0x60
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	08027a9c 	.word	0x08027a9c

08011a14 <mg_tls_client_recv_cert_verify>:

static int mg_tls_client_recv_cert_verify(struct mg_connection *c) {
 8011a14:	b5b0      	push	{r4, r5, r7, lr}
 8011a16:	b0a0      	sub	sp, #128	@ 0x80
 8011a18:	af02      	add	r7, sp, #8
 8011a1a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011a22:	677b      	str	r3, [r7, #116]	@ 0x74
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f7fe fc51 	bl	80102cc <mg_tls_recv_record>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	da02      	bge.n	8011a36 <mg_tls_client_recv_cert_verify+0x22>
    return -1;
 8011a30:	f04f 33ff 	mov.w	r3, #4294967295
 8011a34:	e09a      	b.n	8011b6c <mg_tls_client_recv_cert_verify+0x158>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8011a3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a3c:	695b      	ldr	r3, [r3, #20]
 8011a3e:	4413      	add	r3, r2
 8011a40:	673b      	str	r3, [r7, #112]	@ 0x70
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 8011a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	2b0f      	cmp	r3, #15
 8011a48:	d009      	beq.n	8011a5e <mg_tls_client_recv_cert_verify+0x4a>
    mg_error(c, "expected server certificate verify but got msg 0x%02x", recv_buf[0]);
 8011a4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	461a      	mov	r2, r3
 8011a50:	4948      	ldr	r1, [pc, #288]	@ (8011b74 <mg_tls_client_recv_cert_verify+0x160>)
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f7f0 ff82 	bl	800295c <mg_error>
    return -1;
 8011a58:	f04f 33ff 	mov.w	r3, #4294967295
 8011a5c:	e086      	b.n	8011b6c <mg_tls_client_recv_cert_verify+0x158>
  }
  // Ignore CertificateVerify is strict checks are not required
  if (tls->skip_verification) {
 8011a5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a60:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d004      	beq.n	8011a72 <mg_tls_client_recv_cert_verify+0x5e>
    mg_tls_drop_message(c);
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f7fd ffe3 	bl	800fa34 <mg_tls_drop_message>
    return 0;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	e07c      	b.n	8011b6c <mg_tls_client_recv_cert_verify+0x158>

  // Extract certificate signature and verify it using pubkey and sighash
  do {
    uint8_t sig[64];
    struct mg_der_tlv seq, a, b;
    if (mg_der_to_tlv(recv_buf + 8, tls->recv_len - 8, &seq) < 0) {
 8011a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011a74:	f103 0008 	add.w	r0, r3, #8
 8011a78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a7a:	699b      	ldr	r3, [r3, #24]
 8011a7c:	3b08      	subs	r3, #8
 8011a7e:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8011a82:	4619      	mov	r1, r3
 8011a84:	f7fd feca 	bl	800f81c <mg_der_to_tlv>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	da06      	bge.n	8011a9c <mg_tls_client_recv_cert_verify+0x88>
      mg_error(c, "verification message is not an ASN.1 DER sequence");
 8011a8e:	493a      	ldr	r1, [pc, #232]	@ (8011b78 <mg_tls_client_recv_cert_verify+0x164>)
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f7f0 ff63 	bl	800295c <mg_error>
      return -1;
 8011a96:	f04f 33ff 	mov.w	r3, #4294967295
 8011a9a:	e067      	b.n	8011b6c <mg_tls_client_recv_cert_verify+0x158>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &a) < 0) {
 8011a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011a9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011aa0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7fd feb9 	bl	800f81c <mg_der_to_tlv>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	da06      	bge.n	8011abe <mg_tls_client_recv_cert_verify+0xaa>
      mg_error(c, "missing first part of the signature");
 8011ab0:	4932      	ldr	r1, [pc, #200]	@ (8011b7c <mg_tls_client_recv_cert_verify+0x168>)
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f7f0 ff52 	bl	800295c <mg_error>
      return -1;
 8011ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8011abc:	e056      	b.n	8011b6c <mg_tls_client_recv_cert_verify+0x158>
    }
    if (mg_der_to_tlv(a.value + a.len, seq.len - a.len, &b) < 0) {
 8011abe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011ac0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ac2:	18d0      	adds	r0, r2, r3
 8011ac4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ac8:	1ad3      	subs	r3, r2, r3
 8011aca:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8011ace:	4619      	mov	r1, r3
 8011ad0:	f7fd fea4 	bl	800f81c <mg_der_to_tlv>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	da06      	bge.n	8011ae8 <mg_tls_client_recv_cert_verify+0xd4>
      mg_error(c, "missing second part of the signature");
 8011ada:	4929      	ldr	r1, [pc, #164]	@ (8011b80 <mg_tls_client_recv_cert_verify+0x16c>)
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f7f0 ff3d 	bl	800295c <mg_error>
      return -1;
 8011ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae6:	e041      	b.n	8011b6c <mg_tls_client_recv_cert_verify+0x158>
    }
    // Integers may be padded with zeroes
    if (a.len > 32) {
 8011ae8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011aea:	2b20      	cmp	r3, #32
 8011aec:	d906      	bls.n	8011afc <mg_tls_client_recv_cert_verify+0xe8>
      a.value = a.value + (a.len - 32);
 8011aee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011af0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011af2:	3b20      	subs	r3, #32
 8011af4:	4413      	add	r3, r2
 8011af6:	663b      	str	r3, [r7, #96]	@ 0x60
      a.len = 32;
 8011af8:	2320      	movs	r3, #32
 8011afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
    if (b.len > 32) {
 8011afc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011afe:	2b20      	cmp	r3, #32
 8011b00:	d906      	bls.n	8011b10 <mg_tls_client_recv_cert_verify+0xfc>
      b.value = b.value + (b.len - 32);
 8011b02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b06:	3b20      	subs	r3, #32
 8011b08:	4413      	add	r3, r2
 8011b0a:	657b      	str	r3, [r7, #84]	@ 0x54
      b.len = 32;
 8011b0c:	2320      	movs	r3, #32
 8011b0e:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    memmove(sig, a.value, a.len);
 8011b10:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011b12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011b14:	f107 030c 	add.w	r3, r7, #12
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f010 f949 	bl	8021db0 <memmove>
    memmove(sig + 32, b.value, b.len);
 8011b1e:	f107 030c 	add.w	r3, r7, #12
 8011b22:	3320      	adds	r3, #32
 8011b24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011b26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f010 f941 	bl	8021db0 <memmove>

    if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 8011b2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b30:	f203 245e 	addw	r4, r3, #606	@ 0x25e
 8011b34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b36:	f203 259e 	addw	r5, r3, #670	@ 0x29e
 8011b3a:	f003 fc83 	bl	8015444 <mg_uecc_secp256r1>
 8011b3e:	4602      	mov	r2, r0
 8011b40:	f107 030c 	add.w	r3, r7, #12
 8011b44:	9200      	str	r2, [sp, #0]
 8011b46:	2220      	movs	r2, #32
 8011b48:	4629      	mov	r1, r5
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	f004 fe16 	bl	801677c <mg_uecc_verify>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d006      	beq.n	8011b64 <mg_tls_client_recv_cert_verify+0x150>
                       mg_uecc_secp256r1()) != 1) {
      mg_error(c, "failed to verify certificate");
 8011b56:	490b      	ldr	r1, [pc, #44]	@ (8011b84 <mg_tls_client_recv_cert_verify+0x170>)
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f7f0 feff 	bl	800295c <mg_error>
      return -1;
 8011b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b62:	e003      	b.n	8011b6c <mg_tls_client_recv_cert_verify+0x158>
    }
  } while (0);

  mg_tls_drop_message(c);
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f7fd ff65 	bl	800fa34 <mg_tls_drop_message>
  return 0;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3778      	adds	r7, #120	@ 0x78
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bdb0      	pop	{r4, r5, r7, pc}
 8011b74:	08027ac4 	.word	0x08027ac4
 8011b78:	08027afc 	.word	0x08027afc
 8011b7c:	08027b30 	.word	0x08027b30
 8011b80:	08027b54 	.word	0x08027b54
 8011b84:	08027b7c 	.word	0x08027b7c

08011b88 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011b96:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f7fe fb97 	bl	80102cc <mg_tls_recv_record>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	da02      	bge.n	8011baa <mg_tls_client_recv_finish+0x22>
    return -1;
 8011ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba8:	e017      	b.n	8011bda <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	695b      	ldr	r3, [r3, #20]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	2b14      	cmp	r3, #20
 8011bbc:	d009      	beq.n	8011bd2 <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	4907      	ldr	r1, [pc, #28]	@ (8011be4 <mg_tls_client_recv_finish+0x5c>)
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f7f0 fec8 	bl	800295c <mg_error>
    return -1;
 8011bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8011bd0:	e003      	b.n	8011bda <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f7fd ff2e 	bl	800fa34 <mg_tls_drop_message>
  return 0;
 8011bd8:	2300      	movs	r3, #0
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3710      	adds	r7, #16
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}
 8011be2:	bf00      	nop
 8011be4:	08027b9c 	.word	0x08027b9c

08011be8 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b0b4      	sub	sp, #208	@ 0xd0
 8011bec:	af02      	add	r7, sp, #8
 8011bee:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011bf6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  struct mg_iobuf *wio = &tls->send;
 8011bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011bfe:	3304      	adds	r3, #4
 8011c00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8011c04:	4a23      	ldr	r2, [pc, #140]	@ (8011c94 <mg_tls_client_send_finish+0xac>)
 8011c06:	f107 030c 	add.w	r3, r7, #12
 8011c0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c0e:	6018      	str	r0, [r3, #0]
 8011c10:	3304      	adds	r3, #4
 8011c12:	7019      	strb	r1, [r3, #0]
 8011c14:	f107 0311 	add.w	r3, r7, #17
 8011c18:	221f      	movs	r2, #31
 8011c1a:	2100      	movs	r1, #0
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f010 f8e1 	bl	8021de4 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8011c22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011c26:	f103 0120 	add.w	r1, r3, #32
 8011c2a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011c2e:	2270      	movs	r2, #112	@ 0x70
 8011c30:	4618      	mov	r0, r3
 8011c32:	f010 f8bd 	bl	8021db0 <memmove>
  mg_sha256_final(hash, &sha256);
 8011c36:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8011c3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011c3e:	4611      	mov	r1, r2
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7fc fb54 	bl	800e2ee <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 8011c46:	f107 000c 	add.w	r0, r7, #12
 8011c4a:	3004      	adds	r0, #4
 8011c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011c50:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 8011c54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011c58:	2220      	movs	r2, #32
 8011c5a:	9200      	str	r2, [sp, #0]
 8011c5c:	2220      	movs	r2, #32
 8011c5e:	f7fc fc7e 	bl	800e55e <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8011c62:	f107 010c 	add.w	r1, r7, #12
 8011c66:	2316      	movs	r3, #22
 8011c68:	2224      	movs	r2, #36	@ 0x24
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f7fe fa32 	bl	80100d4 <mg_tls_encrypt>
  mg_io_send(c, wio->buf, wio->len);
 8011c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011c74:	6819      	ldr	r1, [r3, #0]
 8011c76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011c7a:	689b      	ldr	r3, [r3, #8]
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7f9 fcae 	bl	800b5e0 <mg_io_send>
  wio->len = 0;
 8011c84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011c88:	2200      	movs	r2, #0
 8011c8a:	609a      	str	r2, [r3, #8]
}
 8011c8c:	bf00      	nop
 8011c8e:	37c8      	adds	r7, #200	@ 0xc8
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	080276c4 	.word	0x080276c4

08011c98 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b0e4      	sub	sp, #400	@ 0x190
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011ca2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011ca6:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011ca8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011cac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011cb6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  switch (tls->state) {
 8011cba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	2b05      	cmp	r3, #5
 8011cc2:	f200 80d1 	bhi.w	8011e68 <mg_tls_client_handshake+0x1d0>
 8011cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8011ccc <mg_tls_client_handshake+0x34>)
 8011cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ccc:	08011ce5 	.word	0x08011ce5
 8011cd0:	08011cfb 	.word	0x08011cfb
 8011cd4:	08011d19 	.word	0x08011d19
 8011cd8:	08011d37 	.word	0x08011d37
 8011cdc:	08011d55 	.word	0x08011d55
 8011ce0:	08011d73 	.word	0x08011d73
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 8011ce4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011ce8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011cec:	6818      	ldr	r0, [r3, #0]
 8011cee:	f7ff f98d 	bl	801100c <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 8011cf2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011cf6:	2201      	movs	r2, #1
 8011cf8:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 8011cfa:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011cfe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011d02:	6818      	ldr	r0, [r3, #0]
 8011d04:	f7ff fb76 	bl	80113f4 <mg_tls_client_recv_hello>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	f2c0 80b9 	blt.w	8011e82 <mg_tls_client_handshake+0x1ea>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 8011d10:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011d14:	2202      	movs	r2, #2
 8011d16:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 8011d18:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011d1c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011d20:	6818      	ldr	r0, [r3, #0]
 8011d22:	f7ff fc9b 	bl	801165c <mg_tls_client_recv_ext>
 8011d26:	4603      	mov	r3, r0
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	f2c0 80ac 	blt.w	8011e86 <mg_tls_client_handshake+0x1ee>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 8011d2e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011d32:	2203      	movs	r2, #3
 8011d34:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_client_recv_cert(c) < 0) {
 8011d36:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011d3a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011d3e:	6818      	ldr	r0, [r3, #0]
 8011d40:	f7ff fcbc 	bl	80116bc <mg_tls_client_recv_cert>
 8011d44:	4603      	mov	r3, r0
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	f2c0 809f 	blt.w	8011e8a <mg_tls_client_handshake+0x1f2>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 8011d4c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011d50:	2204      	movs	r2, #4
 8011d52:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_client_recv_cert_verify(c) < 0) {
 8011d54:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011d58:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011d5c:	6818      	ldr	r0, [r3, #0]
 8011d5e:	f7ff fe59 	bl	8011a14 <mg_tls_client_recv_cert_verify>
 8011d62:	4603      	mov	r3, r0
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	f2c0 8092 	blt.w	8011e8e <mg_tls_client_handshake+0x1f6>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISHED;
 8011d6a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011d6e:	2205      	movs	r2, #5
 8011d70:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISHED:
      if (mg_tls_client_recv_finish(c) < 0) {
 8011d72:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011d76:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011d7a:	6818      	ldr	r0, [r3, #0]
 8011d7c:	f7ff ff04 	bl	8011b88 <mg_tls_client_recv_finish>
 8011d80:	4603      	mov	r3, r0
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	f2c0 8085 	blt.w	8011e92 <mg_tls_client_handshake+0x1fa>
        break;
      }
      if (tls->cert_requested) {
 8011d88:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011d8c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d04b      	beq.n	8011e2c <mg_tls_client_handshake+0x194>
        /* for mTLS we should generate application keys at this point
         * but then restore handshake keys and continue with
         * the rest of the handshake */
        struct tls_enc app_keys;
        struct tls_enc hs_keys = tls->enc;
 8011d94:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011d98:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8011d9c:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8011da0:	22c0      	movs	r2, #192	@ 0xc0
 8011da2:	4619      	mov	r1, r3
 8011da4:	f010 f913 	bl	8021fce <memcpy>
        mg_tls_generate_application_keys(c);
 8011da8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011dac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011db0:	6818      	ldr	r0, [r3, #0]
 8011db2:	f7fe f877 	bl	800fea4 <mg_tls_generate_application_keys>
        app_keys = tls->enc;
 8011db6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011dba:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 8011dbe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011dc2:	4610      	mov	r0, r2
 8011dc4:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8011dc8:	22c0      	movs	r2, #192	@ 0xc0
 8011dca:	4619      	mov	r1, r3
 8011dcc:	f010 f8ff 	bl	8021fce <memcpy>
        tls->enc = hs_keys;
 8011dd0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011dd4:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8011dd8:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8011ddc:	22c0      	movs	r2, #192	@ 0xc0
 8011dde:	4618      	mov	r0, r3
 8011de0:	f010 f8f5 	bl	8021fce <memcpy>
        mg_tls_server_send_cert(c);
 8011de4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011de8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011dec:	6818      	ldr	r0, [r3, #0]
 8011dee:	f7fe fe6b 	bl	8010ac8 <mg_tls_server_send_cert>
        mg_tls_send_cert_verify(c, 1);
 8011df2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011df6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011dfa:	2101      	movs	r1, #1
 8011dfc:	6818      	ldr	r0, [r3, #0]
 8011dfe:	f7fe ff25 	bl	8010c4c <mg_tls_send_cert_verify>
        mg_tls_client_send_finish(c);
 8011e02:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011e06:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011e0a:	6818      	ldr	r0, [r3, #0]
 8011e0c:	f7ff feec 	bl	8011be8 <mg_tls_client_send_finish>
        tls->enc = app_keys;
 8011e10:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011e14:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8011e18:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 8011e1c:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8011e20:	4611      	mov	r1, r2
 8011e22:	22c0      	movs	r2, #192	@ 0xc0
 8011e24:	4618      	mov	r0, r3
 8011e26:	f010 f8d2 	bl	8021fce <memcpy>
 8011e2a:	e00d      	b.n	8011e48 <mg_tls_client_handshake+0x1b0>
      } else {
        mg_tls_client_send_finish(c);
 8011e2c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011e30:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011e34:	6818      	ldr	r0, [r3, #0]
 8011e36:	f7ff fed7 	bl	8011be8 <mg_tls_client_send_finish>
        mg_tls_generate_application_keys(c);
 8011e3a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011e3e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011e42:	6818      	ldr	r0, [r3, #0]
 8011e44:	f7fe f82e 	bl	800fea4 <mg_tls_generate_application_keys>
      }
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 8011e48:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011e4c:	2206      	movs	r2, #6
 8011e4e:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 8011e50:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011e54:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011e5e:	f36f 13c7 	bfc	r3, #7, #1
 8011e62:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      break;
 8011e66:	e015      	b.n	8011e94 <mg_tls_client_handshake+0x1fc>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 8011e68:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	461a      	mov	r2, r3
 8011e70:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011e74:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011e78:	4909      	ldr	r1, [pc, #36]	@ (8011ea0 <mg_tls_client_handshake+0x208>)
 8011e7a:	6818      	ldr	r0, [r3, #0]
 8011e7c:	f7f0 fd6e 	bl	800295c <mg_error>
      break;
 8011e80:	e008      	b.n	8011e94 <mg_tls_client_handshake+0x1fc>
        break;
 8011e82:	bf00      	nop
 8011e84:	e006      	b.n	8011e94 <mg_tls_client_handshake+0x1fc>
        break;
 8011e86:	bf00      	nop
 8011e88:	e004      	b.n	8011e94 <mg_tls_client_handshake+0x1fc>
        break;
 8011e8a:	bf00      	nop
 8011e8c:	e002      	b.n	8011e94 <mg_tls_client_handshake+0x1fc>
        break;
 8011e8e:	bf00      	nop
 8011e90:	e000      	b.n	8011e94 <mg_tls_client_handshake+0x1fc>
        break;
 8011e92:	bf00      	nop
  }
}
 8011e94:	bf00      	nop
 8011e96:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	08027bc8 	.word	0x08027bc8

08011ea4 <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b084      	sub	sp, #16
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011eb2:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	2b07      	cmp	r3, #7
 8011eba:	d002      	beq.n	8011ec2 <mg_tls_server_handshake+0x1e>
 8011ebc:	2b08      	cmp	r3, #8
 8011ebe:	d01c      	beq.n	8011efa <mg_tls_server_handshake+0x56>
 8011ec0:	e02f      	b.n	8011f22 <mg_tls_server_handshake+0x7e>
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f7fe fbb2 	bl	801062c <mg_tls_server_recv_hello>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	db31      	blt.n	8011f32 <mg_tls_server_handshake+0x8e>
        return;
      }
      mg_tls_server_send_hello(c);
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f7fe fd20 	bl	8010914 <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f7fd fe95 	bl	800fc04 <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f7fe fdce 	bl	8010a7c <mg_tls_server_send_ext>
      mg_tls_server_send_cert(c);
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7fe fdf1 	bl	8010ac8 <mg_tls_server_send_cert>
      mg_tls_send_cert_verify(c, 0);
 8011ee6:	2100      	movs	r1, #0
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f7fe feaf 	bl	8010c4c <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f7fe ffea 	bl	8010ec8 <mg_tls_server_send_finish>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	2208      	movs	r2, #8
 8011ef8:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f7ff f846 	bl	8010f8c <mg_tls_server_recv_finish>
 8011f00:	4603      	mov	r3, r0
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	db17      	blt.n	8011f36 <mg_tls_server_handshake+0x92>
        return;
      }
      mg_tls_generate_application_keys(c);
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7fd ffcc 	bl	800fea4 <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	2209      	movs	r2, #9
 8011f10:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 8011f12:	687a      	ldr	r2, [r7, #4]
 8011f14:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011f18:	f36f 13c7 	bfc	r3, #7, #1
 8011f1c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      return;
 8011f20:	e00a      	b.n	8011f38 <mg_tls_server_handshake+0x94>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	461a      	mov	r2, r3
 8011f28:	4905      	ldr	r1, [pc, #20]	@ (8011f40 <mg_tls_server_handshake+0x9c>)
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7f0 fd16 	bl	800295c <mg_error>
      break;
 8011f30:	e002      	b.n	8011f38 <mg_tls_server_handshake+0x94>
        return;
 8011f32:	bf00      	nop
 8011f34:	e000      	b.n	8011f38 <mg_tls_server_handshake+0x94>
        return;
 8011f36:	bf00      	nop
  }
}
 8011f38:	3710      	adds	r7, #16
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	08027be4 	.word	0x08027be4

08011f44 <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b082      	sub	sp, #8
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
  if (c->is_client) {
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011f52:	f003 0302 	and.w	r3, r3, #2
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d003      	beq.n	8011f64 <mg_tls_handshake+0x20>
    mg_tls_client_handshake(c);
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f7ff fe9b 	bl	8011c98 <mg_tls_client_handshake>
  } else {
    mg_tls_server_handshake(c);
  }
}
 8011f62:	e002      	b.n	8011f6a <mg_tls_handshake+0x26>
    mg_tls_server_handshake(c);
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f7ff ff9d 	bl	8011ea4 <mg_tls_server_handshake>
}
 8011f6a:	bf00      	nop
 8011f6c:	3708      	adds	r7, #8
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
	...

08011f74 <mg_parse_pem>:

static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,
                        struct mg_str *der) {
 8011f74:	b590      	push	{r4, r7, lr}
 8011f76:	b09b      	sub	sp, #108	@ 0x6c
 8011f78:	af02      	add	r7, sp, #8
 8011f7a:	f107 0410 	add.w	r4, r7, #16
 8011f7e:	e884 0003 	stmia.w	r4, {r0, r1}
 8011f82:	f107 0108 	add.w	r1, r7, #8
 8011f86:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t n = 0, m = 0;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011f8e:	2300      	movs	r3, #0
 8011f90:	657b      	str	r3, [r7, #84]	@ 0x54
  char *s;
  const char *c;
  struct mg_str caps[6];  // number of wildcards + 1
  if (!mg_match(pem, mg_str("#-----BEGIN #-----#-----END #-----#"), caps)) {
 8011f92:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011f96:	4946      	ldr	r1, [pc, #280]	@ (80120b0 <mg_parse_pem+0x13c>)
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7fc fe91 	bl	800ecc0 <mg_str_s>
 8011f9e:	f107 0318 	add.w	r3, r7, #24
 8011fa2:	9300      	str	r3, [sp, #0]
 8011fa4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011fa8:	cb0c      	ldmia	r3, {r2, r3}
 8011faa:	f107 0110 	add.w	r1, r7, #16
 8011fae:	c903      	ldmia	r1, {r0, r1}
 8011fb0:	f7fc ff90 	bl	800eed4 <mg_match>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	f083 0301 	eor.w	r3, r3, #1
 8011fba:	b2db      	uxtb	r3, r3
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d00f      	beq.n	8011fe0 <mg_parse_pem+0x6c>
    *der = mg_strdup(pem);
 8011fc0:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 8011fc2:	4638      	mov	r0, r7
 8011fc4:	f107 0310 	add.w	r3, r7, #16
 8011fc8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8011fcc:	f7fc fec2 	bl	800ed54 <mg_strdup>
 8011fd0:	4622      	mov	r2, r4
 8011fd2:	463b      	mov	r3, r7
 8011fd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011fd8:	e882 0003 	stmia.w	r2, {r0, r1}
    return 0;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	e062      	b.n	80120a6 <mg_parse_pem+0x132>
  }
  if (mg_strcmp(caps[1], label) != 0 || mg_strcmp(caps[3], label) != 0) {
 8011fe0:	f107 0308 	add.w	r3, r7, #8
 8011fe4:	cb0c      	ldmia	r3, {r2, r3}
 8011fe6:	f107 0120 	add.w	r1, r7, #32
 8011fea:	c903      	ldmia	r1, {r0, r1}
 8011fec:	f7fc fee9 	bl	800edc2 <mg_strcmp>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d10a      	bne.n	801200c <mg_parse_pem+0x98>
 8011ff6:	f107 0308 	add.w	r3, r7, #8
 8011ffa:	cb0c      	ldmia	r3, {r2, r3}
 8011ffc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8012000:	c903      	ldmia	r1, {r0, r1}
 8012002:	f7fc fede 	bl	800edc2 <mg_strcmp>
 8012006:	4603      	mov	r3, r0
 8012008:	2b00      	cmp	r3, #0
 801200a:	d002      	beq.n	8012012 <mg_parse_pem+0x9e>
    return -1;  // bad label
 801200c:	f04f 33ff 	mov.w	r3, #4294967295
 8012010:	e049      	b.n	80120a6 <mg_parse_pem+0x132>
  }
  if ((s = (char *) calloc(1, caps[2].len)) == NULL) {
 8012012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012014:	4619      	mov	r1, r3
 8012016:	2001      	movs	r0, #1
 8012018:	f00e fc32 	bl	8020880 <calloc>
 801201c:	4603      	mov	r3, r0
 801201e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012022:	2b00      	cmp	r3, #0
 8012024:	d102      	bne.n	801202c <mg_parse_pem+0xb8>
    return -1;
 8012026:	f04f 33ff 	mov.w	r3, #4294967295
 801202a:	e03c      	b.n	80120a6 <mg_parse_pem+0x132>
  }

  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801202c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801202e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012030:	e01c      	b.n	801206c <mg_parse_pem+0xf8>
    if (*c == ' ' || *c == '\n' || *c == '\r' || *c == '\t') {
 8012032:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	2b20      	cmp	r3, #32
 8012038:	d014      	beq.n	8012064 <mg_parse_pem+0xf0>
 801203a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	2b0a      	cmp	r3, #10
 8012040:	d010      	beq.n	8012064 <mg_parse_pem+0xf0>
 8012042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012044:	781b      	ldrb	r3, [r3, #0]
 8012046:	2b0d      	cmp	r3, #13
 8012048:	d00c      	beq.n	8012064 <mg_parse_pem+0xf0>
 801204a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	2b09      	cmp	r3, #9
 8012050:	d008      	beq.n	8012064 <mg_parse_pem+0xf0>
      continue;
    }
    s[n++] = *c;
 8012052:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012054:	1c5a      	adds	r2, r3, #1
 8012056:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8012058:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801205a:	4413      	add	r3, r2
 801205c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801205e:	7812      	ldrb	r2, [r2, #0]
 8012060:	701a      	strb	r2, [r3, #0]
 8012062:	e000      	b.n	8012066 <mg_parse_pem+0xf2>
      continue;
 8012064:	bf00      	nop
  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 8012066:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012068:	3301      	adds	r3, #1
 801206a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801206c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801206e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012070:	4413      	add	r3, r2
 8012072:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012074:	429a      	cmp	r2, r3
 8012076:	d3dc      	bcc.n	8012032 <mg_parse_pem+0xbe>
  }
  m = mg_base64_decode(s, n, s, n);
 8012078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801207a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801207c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801207e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012080:	f7ef fa36 	bl	80014f0 <mg_base64_decode>
 8012084:	6578      	str	r0, [r7, #84]	@ 0x54
  if (m == 0) {
 8012086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012088:	2b00      	cmp	r3, #0
 801208a:	d105      	bne.n	8012098 <mg_parse_pem+0x124>
    free(s);
 801208c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801208e:	f00e fc1b 	bl	80208c8 <free>
    return -1;
 8012092:	f04f 33ff 	mov.w	r3, #4294967295
 8012096:	e006      	b.n	80120a6 <mg_parse_pem+0x132>
  }
  der->buf = s;
 8012098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801209a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801209c:	601a      	str	r2, [r3, #0]
  der->len = m;
 801209e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80120a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80120a2:	605a      	str	r2, [r3, #4]
  return 0;
 80120a4:	2300      	movs	r3, #0
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3764      	adds	r7, #100	@ 0x64
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd90      	pop	{r4, r7, pc}
 80120ae:	bf00      	nop
 80120b0:	08027c00 	.word	0x08027c00

080120b4 <mg_tls_init>:

void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b08e      	sub	sp, #56	@ 0x38
 80120b8:	af02      	add	r7, sp, #8
 80120ba:	6078      	str	r0, [r7, #4]
 80120bc:	6039      	str	r1, [r7, #0]
  struct mg_str key;
  struct tls_data *tls = (struct tls_data *) calloc(1, sizeof(struct tls_data));
 80120be:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80120c2:	2001      	movs	r0, #1
 80120c4:	f00e fbdc 	bl	8020880 <calloc>
 80120c8:	4603      	mov	r3, r0
 80120ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (tls == NULL) {
 80120cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d104      	bne.n	80120dc <mg_tls_init+0x28>
    mg_error(c, "tls oom");
 80120d2:	4990      	ldr	r1, [pc, #576]	@ (8012314 <mg_tls_init+0x260>)
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f7f0 fc41 	bl	800295c <mg_error>
    return;
 80120da:	e117      	b.n	801230c <mg_tls_init+0x258>
  }

  tls->state =
      c->is_client ? MG_TLS_STATE_CLIENT_START : MG_TLS_STATE_SERVER_START;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80120e2:	f003 0302 	and.w	r3, r3, #2
 80120e6:	b2db      	uxtb	r3, r3
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d001      	beq.n	80120f0 <mg_tls_init+0x3c>
 80120ec:	2200      	movs	r2, #0
 80120ee:	e000      	b.n	80120f2 <mg_tls_init+0x3e>
 80120f0:	2207      	movs	r2, #7
  tls->state =
 80120f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120f4:	701a      	strb	r2, [r3, #0]

  tls->skip_verification = opts->skip_verification;
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	6a1a      	ldr	r2, [r3, #32]
 80120fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120fc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  //tls->send.align = MG_IO_SIZE;

  c->tls = tls;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012104:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  c->is_tls = c->is_tls_hs = 1;
 8012108:	687a      	ldr	r2, [r7, #4]
 801210a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801210e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012112:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801211c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012120:	b2d9      	uxtb	r1, r3
 8012122:	687a      	ldr	r2, [r7, #4]
 8012124:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8012128:	f361 1386 	bfi	r3, r1, #6, #1
 801212c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_sha256_init(&tls->sha256);
 8012130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012132:	3320      	adds	r3, #32
 8012134:	4618      	mov	r0, r3
 8012136:	f7fb fe5d 	bl	800ddf4 <mg_sha256_init>

  // save hostname (client extension)
  if (opts->name.len > 0) {
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	69db      	ldr	r3, [r3, #28]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d018      	beq.n	8012174 <mg_tls_init+0xc0>
    if (opts->name.len >= sizeof(tls->hostname) - 1) {
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	69db      	ldr	r3, [r3, #28]
 8012146:	2bfc      	cmp	r3, #252	@ 0xfc
 8012148:	d904      	bls.n	8012154 <mg_tls_init+0xa0>
      mg_error(c, "hostname too long");
 801214a:	4973      	ldr	r1, [pc, #460]	@ (8012318 <mg_tls_init+0x264>)
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f7f0 fc05 	bl	800295c <mg_error>
      return;
 8012152:	e0db      	b.n	801230c <mg_tls_init+0x258>
    }
    strncpy((char *) tls->hostname, opts->name.buf, sizeof(tls->hostname) - 1);
 8012154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012156:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	699b      	ldr	r3, [r3, #24]
 801215e:	22fd      	movs	r2, #253	@ 0xfd
 8012160:	4619      	mov	r1, r3
 8012162:	f00f fe66 	bl	8021e32 <strncpy>
    tls->hostname[opts->name.len] = 0;
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	69db      	ldr	r3, [r3, #28]
 801216a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801216c:	4413      	add	r3, r2
 801216e:	2200      	movs	r2, #0
 8012170:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
  }

  if (opts->cert.buf == NULL) {
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	689b      	ldr	r3, [r3, #8]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d10f      	bne.n	801219c <mg_tls_init+0xe8>
    MG_VERBOSE(("no certificate provided"));
 801217c:	4b67      	ldr	r3, [pc, #412]	@ (801231c <mg_tls_init+0x268>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	2b03      	cmp	r3, #3
 8012182:	f340 80bc 	ble.w	80122fe <mg_tls_init+0x24a>
 8012186:	4b66      	ldr	r3, [pc, #408]	@ (8012320 <mg_tls_init+0x26c>)
 8012188:	f642 22f3 	movw	r2, #10995	@ 0x2af3
 801218c:	4965      	ldr	r1, [pc, #404]	@ (8012324 <mg_tls_init+0x270>)
 801218e:	2004      	movs	r0, #4
 8012190:	f7f5 fece 	bl	8007f30 <mg_log_prefix>
 8012194:	4864      	ldr	r0, [pc, #400]	@ (8012328 <mg_tls_init+0x274>)
 8012196:	f7f5 ff1b 	bl	8007fd0 <mg_log>
    return;
 801219a:	e0b0      	b.n	80122fe <mg_tls_init+0x24a>
  }

  // parse PEM or DER certificate
  if (mg_parse_pem(opts->cert, mg_str_s("CERTIFICATE"), &tls->cert_der) < 0) {
 801219c:	f107 0314 	add.w	r3, r7, #20
 80121a0:	4962      	ldr	r1, [pc, #392]	@ (801232c <mg_tls_init+0x278>)
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7fc fd8c 	bl	800ecc0 <mg_str_s>
 80121a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121aa:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80121ae:	6839      	ldr	r1, [r7, #0]
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	f107 0314 	add.w	r3, r7, #20
 80121b6:	cb0c      	ldmia	r3, {r2, r3}
 80121b8:	3108      	adds	r1, #8
 80121ba:	c903      	ldmia	r1, {r0, r1}
 80121bc:	f7ff feda 	bl	8011f74 <mg_parse_pem>
 80121c0:	4603      	mov	r3, r0
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	da0f      	bge.n	80121e6 <mg_tls_init+0x132>
    MG_ERROR(("Failed to load certificate"));
 80121c6:	4b55      	ldr	r3, [pc, #340]	@ (801231c <mg_tls_init+0x268>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	f340 8099 	ble.w	8012302 <mg_tls_init+0x24e>
 80121d0:	4b53      	ldr	r3, [pc, #332]	@ (8012320 <mg_tls_init+0x26c>)
 80121d2:	f642 22f9 	movw	r2, #11001	@ 0x2af9
 80121d6:	4953      	ldr	r1, [pc, #332]	@ (8012324 <mg_tls_init+0x270>)
 80121d8:	2001      	movs	r0, #1
 80121da:	f7f5 fea9 	bl	8007f30 <mg_log_prefix>
 80121de:	4854      	ldr	r0, [pc, #336]	@ (8012330 <mg_tls_init+0x27c>)
 80121e0:	f7f5 fef6 	bl	8007fd0 <mg_log>
    return;
 80121e4:	e08d      	b.n	8012302 <mg_tls_init+0x24e>
  }

  // parse PEM or DER EC key
  if (opts->key.buf == NULL) {
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	691b      	ldr	r3, [r3, #16]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d104      	bne.n	80121f8 <mg_tls_init+0x144>
    mg_error(c, "certificate provided without a private key");
 80121ee:	4951      	ldr	r1, [pc, #324]	@ (8012334 <mg_tls_init+0x280>)
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f7f0 fbb3 	bl	800295c <mg_error>
    return;
 80121f6:	e089      	b.n	801230c <mg_tls_init+0x258>
  }

  if (mg_parse_pem(opts->key, mg_str_s("EC PRIVATE KEY"), &key) == 0) {
 80121f8:	f107 031c 	add.w	r3, r7, #28
 80121fc:	494e      	ldr	r1, [pc, #312]	@ (8012338 <mg_tls_init+0x284>)
 80121fe:	4618      	mov	r0, r3
 8012200:	f7fc fd5e 	bl	800ecc0 <mg_str_s>
 8012204:	6839      	ldr	r1, [r7, #0]
 8012206:	f107 030c 	add.w	r3, r7, #12
 801220a:	9300      	str	r3, [sp, #0]
 801220c:	f107 031c 	add.w	r3, r7, #28
 8012210:	cb0c      	ldmia	r3, {r2, r3}
 8012212:	3110      	adds	r1, #16
 8012214:	c903      	ldmia	r1, {r0, r1}
 8012216:	f7ff fead 	bl	8011f74 <mg_parse_pem>
 801221a:	4603      	mov	r3, r0
 801221c:	2b00      	cmp	r3, #0
 801221e:	d150      	bne.n	80122c2 <mg_tls_init+0x20e>
    if (key.len < 39) {
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	2b26      	cmp	r3, #38	@ 0x26
 8012224:	d80e      	bhi.n	8012244 <mg_tls_init+0x190>
      MG_ERROR(("EC private key too short"));
 8012226:	4b3d      	ldr	r3, [pc, #244]	@ (801231c <mg_tls_init+0x268>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	dd6b      	ble.n	8012306 <mg_tls_init+0x252>
 801222e:	4b3c      	ldr	r3, [pc, #240]	@ (8012320 <mg_tls_init+0x26c>)
 8012230:	f642 3205 	movw	r2, #11013	@ 0x2b05
 8012234:	493b      	ldr	r1, [pc, #236]	@ (8012324 <mg_tls_init+0x270>)
 8012236:	2001      	movs	r0, #1
 8012238:	f7f5 fe7a 	bl	8007f30 <mg_log_prefix>
 801223c:	483f      	ldr	r0, [pc, #252]	@ (801233c <mg_tls_init+0x288>)
 801223e:	f7f5 fec7 	bl	8007fd0 <mg_log>
      return;
 8012242:	e060      	b.n	8012306 <mg_tls_init+0x252>
    }
    // expect ASN.1 SEQUENCE=[INTEGER=1, BITSTRING of 32 bytes, ...]
    // 30 nn 02 01 01 04 20 [key] ...
    if (key.buf[0] != 0x30 || (key.buf[1] & 0x80) != 0) {
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	781b      	ldrb	r3, [r3, #0]
 8012248:	2b30      	cmp	r3, #48	@ 0x30
 801224a:	d105      	bne.n	8012258 <mg_tls_init+0x1a4>
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	3301      	adds	r3, #1
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	b25b      	sxtb	r3, r3
 8012254:	2b00      	cmp	r3, #0
 8012256:	da0e      	bge.n	8012276 <mg_tls_init+0x1c2>
      MG_ERROR(("EC private key: ASN.1 bad sequence"));
 8012258:	4b30      	ldr	r3, [pc, #192]	@ (801231c <mg_tls_init+0x268>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	dd54      	ble.n	801230a <mg_tls_init+0x256>
 8012260:	4b2f      	ldr	r3, [pc, #188]	@ (8012320 <mg_tls_init+0x26c>)
 8012262:	f642 320b 	movw	r2, #11019	@ 0x2b0b
 8012266:	492f      	ldr	r1, [pc, #188]	@ (8012324 <mg_tls_init+0x270>)
 8012268:	2001      	movs	r0, #1
 801226a:	f7f5 fe61 	bl	8007f30 <mg_log_prefix>
 801226e:	4834      	ldr	r0, [pc, #208]	@ (8012340 <mg_tls_init+0x28c>)
 8012270:	f7f5 feae 	bl	8007fd0 <mg_log>
      return;
 8012274:	e049      	b.n	801230a <mg_tls_init+0x256>
    }
    if (memcmp(key.buf + 2, "\x02\x01\x01\x04\x20", 5) != 0) {
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	3302      	adds	r3, #2
 801227a:	2205      	movs	r2, #5
 801227c:	4931      	ldr	r1, [pc, #196]	@ (8012344 <mg_tls_init+0x290>)
 801227e:	4618      	mov	r0, r3
 8012280:	f00f fd86 	bl	8021d90 <memcmp>
 8012284:	4603      	mov	r3, r0
 8012286:	2b00      	cmp	r3, #0
 8012288:	d00d      	beq.n	80122a6 <mg_tls_init+0x1f2>
      MG_ERROR(("EC private key: ASN.1 bad data"));
 801228a:	4b24      	ldr	r3, [pc, #144]	@ (801231c <mg_tls_init+0x268>)
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	2b00      	cmp	r3, #0
 8012290:	dd09      	ble.n	80122a6 <mg_tls_init+0x1f2>
 8012292:	4b23      	ldr	r3, [pc, #140]	@ (8012320 <mg_tls_init+0x26c>)
 8012294:	f642 320f 	movw	r2, #11023	@ 0x2b0f
 8012298:	4922      	ldr	r1, [pc, #136]	@ (8012324 <mg_tls_init+0x270>)
 801229a:	2001      	movs	r0, #1
 801229c:	f7f5 fe48 	bl	8007f30 <mg_log_prefix>
 80122a0:	4829      	ldr	r0, [pc, #164]	@ (8012348 <mg_tls_init+0x294>)
 80122a2:	f7f5 fe95 	bl	8007fd0 <mg_log>
    }
    memmove(tls->ec_key, key.buf + 7, 32);
 80122a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122a8:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	3307      	adds	r3, #7
 80122b0:	2220      	movs	r2, #32
 80122b2:	4619      	mov	r1, r3
 80122b4:	f00f fd7c 	bl	8021db0 <memmove>
    free((void *) key.buf);
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	4618      	mov	r0, r3
 80122bc:	f00e fb04 	bl	80208c8 <free>
 80122c0:	e024      	b.n	801230c <mg_tls_init+0x258>
  } else if (mg_parse_pem(opts->key, mg_str_s("PRIVATE KEY"), &key) == 0) {
 80122c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80122c6:	4921      	ldr	r1, [pc, #132]	@ (801234c <mg_tls_init+0x298>)
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7fc fcf9 	bl	800ecc0 <mg_str_s>
 80122ce:	6839      	ldr	r1, [r7, #0]
 80122d0:	f107 030c 	add.w	r3, r7, #12
 80122d4:	9300      	str	r3, [sp, #0]
 80122d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80122da:	cb0c      	ldmia	r3, {r2, r3}
 80122dc:	3110      	adds	r1, #16
 80122de:	c903      	ldmia	r1, {r0, r1}
 80122e0:	f7ff fe48 	bl	8011f74 <mg_parse_pem>
 80122e4:	4603      	mov	r3, r0
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d104      	bne.n	80122f4 <mg_tls_init+0x240>
    mg_error(c, "PKCS8 private key format is not supported");
 80122ea:	4919      	ldr	r1, [pc, #100]	@ (8012350 <mg_tls_init+0x29c>)
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f7f0 fb35 	bl	800295c <mg_error>
 80122f2:	e00b      	b.n	801230c <mg_tls_init+0x258>
  } else {
    mg_error(c, "expected EC PRIVATE KEY or PRIVATE KEY");
 80122f4:	4917      	ldr	r1, [pc, #92]	@ (8012354 <mg_tls_init+0x2a0>)
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f7f0 fb30 	bl	800295c <mg_error>
 80122fc:	e006      	b.n	801230c <mg_tls_init+0x258>
    return;
 80122fe:	bf00      	nop
 8012300:	e004      	b.n	801230c <mg_tls_init+0x258>
    return;
 8012302:	bf00      	nop
 8012304:	e002      	b.n	801230c <mg_tls_init+0x258>
      return;
 8012306:	bf00      	nop
 8012308:	e000      	b.n	801230c <mg_tls_init+0x258>
      return;
 801230a:	bf00      	nop
  }
}
 801230c:	3730      	adds	r7, #48	@ 0x30
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	08027c24 	.word	0x08027c24
 8012318:	08027c2c 	.word	0x08027c2c
 801231c:	24000240 	.word	0x24000240
 8012320:	080291b4 	.word	0x080291b4
 8012324:	0802597c 	.word	0x0802597c
 8012328:	08027c40 	.word	0x08027c40
 801232c:	08027c58 	.word	0x08027c58
 8012330:	08027c64 	.word	0x08027c64
 8012334:	08027c80 	.word	0x08027c80
 8012338:	08027cac 	.word	0x08027cac
 801233c:	08027cbc 	.word	0x08027cbc
 8012340:	08027cd8 	.word	0x08027cd8
 8012344:	08027cfc 	.word	0x08027cfc
 8012348:	08027d04 	.word	0x08027d04
 801234c:	08027d24 	.word	0x08027d24
 8012350:	08027d30 	.word	0x08027d30
 8012354:	08027d5c 	.word	0x08027d5c

08012358 <mg_tls_free>:

void mg_tls_free(struct mg_connection *c) {
 8012358:	b580      	push	{r7, lr}
 801235a:	b084      	sub	sp, #16
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012366:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d00a      	beq.n	8012384 <mg_tls_free+0x2c>
    mg_iobuf_free(&tls->send);
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	3304      	adds	r3, #4
 8012372:	4618      	mov	r0, r3
 8012374:	f7f4 ff37 	bl	80071e6 <mg_iobuf_free>
    free((void *) tls->cert_der.buf);
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801237e:	4618      	mov	r0, r3
 8012380:	f00e faa2 	bl	80208c8 <free>
  }
  free(c->tls);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801238a:	4618      	mov	r0, r3
 801238c:	f00e fa9c 	bl	80208c8 <free>
  c->tls = NULL;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2200      	movs	r2, #0
 8012394:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 8012398:	bf00      	nop
 801239a:	3710      	adds	r7, #16
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}

080123a0 <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b086      	sub	sp, #24
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80123b2:	613b      	str	r3, [r7, #16]
  long n = MG_IO_WAIT;
 80123b4:	f06f 0301 	mvn.w	r3, #1
 80123b8:	617b      	str	r3, [r7, #20]
  if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80123c0:	d902      	bls.n	80123c8 <mg_tls_send+0x28>
 80123c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80123c6:	607b      	str	r3, [r7, #4]
  if (len > 16384) len = 16384;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80123ce:	d902      	bls.n	80123d6 <mg_tls_send+0x36>
 80123d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80123d4:	607b      	str	r3, [r7, #4]
  mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 80123d6:	2317      	movs	r3, #23
 80123d8:	687a      	ldr	r2, [r7, #4]
 80123da:	68b9      	ldr	r1, [r7, #8]
 80123dc:	68f8      	ldr	r0, [r7, #12]
 80123de:	f7fd fe79 	bl	80100d4 <mg_tls_encrypt>
  while (tls->send.len > 0 &&
 80123e2:	e006      	b.n	80123f2 <mg_tls_send+0x52>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	3304      	adds	r3, #4
 80123e8:	697a      	ldr	r2, [r7, #20]
 80123ea:	2100      	movs	r1, #0
 80123ec:	4618      	mov	r0, r3
 80123ee:	f7f4 feaf 	bl	8007150 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	68db      	ldr	r3, [r3, #12]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d00b      	beq.n	8012412 <mg_tls_send+0x72>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 80123fa:	693b      	ldr	r3, [r7, #16]
 80123fc:	6859      	ldr	r1, [r3, #4]
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	68db      	ldr	r3, [r3, #12]
 8012402:	461a      	mov	r2, r3
 8012404:	68f8      	ldr	r0, [r7, #12]
 8012406:	f7f9 f8eb 	bl	800b5e0 <mg_io_send>
 801240a:	6178      	str	r0, [r7, #20]
  while (tls->send.len > 0 &&
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	2b00      	cmp	r3, #0
 8012410:	dce8      	bgt.n	80123e4 <mg_tls_send+0x44>
  }
  if (n == MG_IO_ERR || n == MG_IO_WAIT) return n;
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012418:	d003      	beq.n	8012422 <mg_tls_send+0x82>
 801241a:	697b      	ldr	r3, [r7, #20]
 801241c:	f113 0f02 	cmn.w	r3, #2
 8012420:	d101      	bne.n	8012426 <mg_tls_send+0x86>
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	e000      	b.n	8012428 <mg_tls_send+0x88>
  return (long) len;
 8012426:	687b      	ldr	r3, [r7, #4]
}
 8012428:	4618      	mov	r0, r3
 801242a:	3718      	adds	r7, #24
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8012430:	b580      	push	{r7, lr}
 8012432:	b088      	sub	sp, #32
 8012434:	af00      	add	r7, sp, #0
 8012436:	60f8      	str	r0, [r7, #12]
 8012438:	60b9      	str	r1, [r7, #8]
 801243a:	607a      	str	r2, [r7, #4]
  int r = 0;
 801243c:	2300      	movs	r3, #0
 801243e:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012446:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 8012448:	68f8      	ldr	r0, [r7, #12]
 801244a:	f7fd ff3f 	bl	80102cc <mg_tls_recv_record>
 801244e:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	2b00      	cmp	r3, #0
 8012454:	da01      	bge.n	801245a <mg_tls_recv+0x2a>
    return r;
 8012456:	69fb      	ldr	r3, [r7, #28]
 8012458:	e032      	b.n	80124c0 <mg_tls_recv+0x90>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801245e:	69bb      	ldr	r3, [r7, #24]
 8012460:	695b      	ldr	r3, [r3, #20]
 8012462:	4413      	add	r3, r2
 8012464:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 8012466:	69bb      	ldr	r3, [r7, #24]
 8012468:	7f1b      	ldrb	r3, [r3, #28]
 801246a:	2b17      	cmp	r3, #23
 801246c:	d008      	beq.n	8012480 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 801246e:	69bb      	ldr	r3, [r7, #24]
 8012470:	2200      	movs	r2, #0
 8012472:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 8012474:	68f8      	ldr	r0, [r7, #12]
 8012476:	f7fd fabb 	bl	800f9f0 <mg_tls_drop_record>
    return MG_IO_WAIT;
 801247a:	f06f 0301 	mvn.w	r3, #1
 801247e:	e01f      	b.n	80124c0 <mg_tls_recv+0x90>
  }
  minlen = len < tls->recv_len ? len : tls->recv_len;
 8012480:	69bb      	ldr	r3, [r7, #24]
 8012482:	699b      	ldr	r3, [r3, #24]
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	4293      	cmp	r3, r2
 8012488:	bf28      	it	cs
 801248a:	4613      	movcs	r3, r2
 801248c:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 801248e:	693a      	ldr	r2, [r7, #16]
 8012490:	6979      	ldr	r1, [r7, #20]
 8012492:	68b8      	ldr	r0, [r7, #8]
 8012494:	f00f fc8c 	bl	8021db0 <memmove>
  tls->recv_offset += minlen;
 8012498:	69bb      	ldr	r3, [r7, #24]
 801249a:	695a      	ldr	r2, [r3, #20]
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	441a      	add	r2, r3
 80124a0:	69bb      	ldr	r3, [r7, #24]
 80124a2:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 80124a4:	69bb      	ldr	r3, [r7, #24]
 80124a6:	699a      	ldr	r2, [r3, #24]
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	1ad2      	subs	r2, r2, r3
 80124ac:	69bb      	ldr	r3, [r7, #24]
 80124ae:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	699b      	ldr	r3, [r3, #24]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d102      	bne.n	80124be <mg_tls_recv+0x8e>
    mg_tls_drop_record(c);
 80124b8:	68f8      	ldr	r0, [r7, #12]
 80124ba:	f7fd fa99 	bl	800f9f0 <mg_tls_drop_record>
  }
  return (long) minlen;
 80124be:	693b      	ldr	r3, [r7, #16]
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3720      	adds	r7, #32
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  return mg_tls_got_record(c) ? 1 : 0;
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f7fd fa66 	bl	800f9a2 <mg_tls_got_record>
 80124d6:	4603      	mov	r3, r0
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 80124e0:	b480      	push	{r7}
 80124e2:	b083      	sub	sp, #12
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 80124e8:	bf00      	nop
 80124ea:	370c      	adds	r7, #12
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr

080124f4 <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 80124f4:	b480      	push	{r7}
 80124f6:	b085      	sub	sp, #20
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	60f8      	str	r0, [r7, #12]
 80124fc:	60b9      	str	r1, [r7, #8]
 80124fe:	607a      	str	r2, [r7, #4]
 8012500:	603b      	str	r3, [r7, #0]
#ifdef static_assert
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
  state[0] = 0x61707865;
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	4a2b      	ldr	r2, [pc, #172]	@ (80125b4 <initialize_state+0xc0>)
 8012506:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	3304      	adds	r3, #4
 801250c:	4a2a      	ldr	r2, [pc, #168]	@ (80125b8 <initialize_state+0xc4>)
 801250e:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	3308      	adds	r3, #8
 8012514:	4a29      	ldr	r2, [pc, #164]	@ (80125bc <initialize_state+0xc8>)
 8012516:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	330c      	adds	r3, #12
 801251c:	4a28      	ldr	r2, [pc, #160]	@ (80125c0 <initialize_state+0xcc>)
 801251e:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	3310      	adds	r3, #16
 8012524:	68ba      	ldr	r2, [r7, #8]
 8012526:	6812      	ldr	r2, [r2, #0]
 8012528:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	3314      	adds	r3, #20
 801252e:	68ba      	ldr	r2, [r7, #8]
 8012530:	3204      	adds	r2, #4
 8012532:	6812      	ldr	r2, [r2, #0]
 8012534:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	3318      	adds	r3, #24
 801253a:	68ba      	ldr	r2, [r7, #8]
 801253c:	3208      	adds	r2, #8
 801253e:	6812      	ldr	r2, [r2, #0]
 8012540:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	331c      	adds	r3, #28
 8012546:	68ba      	ldr	r2, [r7, #8]
 8012548:	320c      	adds	r2, #12
 801254a:	6812      	ldr	r2, [r2, #0]
 801254c:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	3320      	adds	r3, #32
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	3210      	adds	r2, #16
 8012556:	6812      	ldr	r2, [r2, #0]
 8012558:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	3324      	adds	r3, #36	@ 0x24
 801255e:	68ba      	ldr	r2, [r7, #8]
 8012560:	3214      	adds	r2, #20
 8012562:	6812      	ldr	r2, [r2, #0]
 8012564:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	3328      	adds	r3, #40	@ 0x28
 801256a:	68ba      	ldr	r2, [r7, #8]
 801256c:	3218      	adds	r2, #24
 801256e:	6812      	ldr	r2, [r2, #0]
 8012570:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	332c      	adds	r3, #44	@ 0x2c
 8012576:	68ba      	ldr	r2, [r7, #8]
 8012578:	321c      	adds	r2, #28
 801257a:	6812      	ldr	r2, [r2, #0]
 801257c:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	3330      	adds	r3, #48	@ 0x30
 8012582:	683a      	ldr	r2, [r7, #0]
 8012584:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	3334      	adds	r3, #52	@ 0x34
 801258a:	687a      	ldr	r2, [r7, #4]
 801258c:	6812      	ldr	r2, [r2, #0]
 801258e:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	3338      	adds	r3, #56	@ 0x38
 8012594:	687a      	ldr	r2, [r7, #4]
 8012596:	3204      	adds	r2, #4
 8012598:	6812      	ldr	r2, [r2, #0]
 801259a:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	333c      	adds	r3, #60	@ 0x3c
 80125a0:	687a      	ldr	r2, [r7, #4]
 80125a2:	3208      	adds	r2, #8
 80125a4:	6812      	ldr	r2, [r2, #0]
 80125a6:	601a      	str	r2, [r3, #0]
}
 80125a8:	bf00      	nop
 80125aa:	3714      	adds	r7, #20
 80125ac:	46bd      	mov	sp, r7
 80125ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b2:	4770      	bx	lr
 80125b4:	61707865 	.word	0x61707865
 80125b8:	3320646e 	.word	0x3320646e
 80125bc:	79622d32 	.word	0x79622d32
 80125c0:	6b206574 	.word	0x6b206574

080125c4 <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 80125c4:	b480      	push	{r7}
 80125c6:	b095      	sub	sp, #84	@ 0x54
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	3304      	adds	r3, #4
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	647b      	str	r3, [r7, #68]	@ 0x44
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	3308      	adds	r3, #8
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	330c      	adds	r3, #12
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	3310      	adds	r3, #16
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	3314      	adds	r3, #20
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	3318      	adds	r3, #24
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	633b      	str	r3, [r7, #48]	@ 0x30
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	331c      	adds	r3, #28
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	3320      	adds	r3, #32
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	3324      	adds	r3, #36	@ 0x24
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	627b      	str	r3, [r7, #36]	@ 0x24
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	3328      	adds	r3, #40	@ 0x28
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	623b      	str	r3, [r7, #32]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	332c      	adds	r3, #44	@ 0x2c
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	61fb      	str	r3, [r7, #28]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	3330      	adds	r3, #48	@ 0x30
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	61bb      	str	r3, [r7, #24]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	3334      	adds	r3, #52	@ 0x34
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	617b      	str	r3, [r7, #20]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	3338      	adds	r3, #56	@ 0x38
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	613b      	str	r3, [r7, #16]
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	333c      	adds	r3, #60	@ 0x3c
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 801264c:	2300      	movs	r3, #0
 801264e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012650:	e182      	b.n	8012958 <core_block+0x394>
    __Q(0, 4, 8, 12);
 8012652:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012656:	4413      	add	r3, r2
 8012658:	64bb      	str	r3, [r7, #72]	@ 0x48
 801265a:	69ba      	ldr	r2, [r7, #24]
 801265c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801265e:	4053      	eors	r3, r2
 8012660:	61bb      	str	r3, [r7, #24]
 8012662:	69bb      	ldr	r3, [r7, #24]
 8012664:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012668:	61bb      	str	r3, [r7, #24]
 801266a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801266c:	69bb      	ldr	r3, [r7, #24]
 801266e:	4413      	add	r3, r2
 8012670:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012672:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012676:	4053      	eors	r3, r2
 8012678:	63bb      	str	r3, [r7, #56]	@ 0x38
 801267a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801267c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012680:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012686:	4413      	add	r3, r2
 8012688:	64bb      	str	r3, [r7, #72]	@ 0x48
 801268a:	69ba      	ldr	r2, [r7, #24]
 801268c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801268e:	4053      	eors	r3, r2
 8012690:	61bb      	str	r3, [r7, #24]
 8012692:	69bb      	ldr	r3, [r7, #24]
 8012694:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012698:	61bb      	str	r3, [r7, #24]
 801269a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801269c:	69bb      	ldr	r3, [r7, #24]
 801269e:	4413      	add	r3, r2
 80126a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80126a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80126a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126a6:	4053      	eors	r3, r2
 80126a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80126aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ac:	ea4f 6373 	mov.w	r3, r3, ror #25
 80126b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 80126b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80126b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126b6:	4413      	add	r3, r2
 80126b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80126ba:	697a      	ldr	r2, [r7, #20]
 80126bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126be:	4053      	eors	r3, r2
 80126c0:	617b      	str	r3, [r7, #20]
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	ea4f 4333 	mov.w	r3, r3, ror #16
 80126c8:	617b      	str	r3, [r7, #20]
 80126ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	4413      	add	r3, r2
 80126d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80126d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80126d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d6:	4053      	eors	r3, r2
 80126d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80126da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126dc:	ea4f 5333 	mov.w	r3, r3, ror #20
 80126e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80126e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80126e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126e6:	4413      	add	r3, r2
 80126e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80126ea:	697a      	ldr	r2, [r7, #20]
 80126ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126ee:	4053      	eors	r3, r2
 80126f0:	617b      	str	r3, [r7, #20]
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	ea4f 6333 	mov.w	r3, r3, ror #24
 80126f8:	617b      	str	r3, [r7, #20]
 80126fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	4413      	add	r3, r2
 8012700:	627b      	str	r3, [r7, #36]	@ 0x24
 8012702:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012706:	4053      	eors	r3, r2
 8012708:	637b      	str	r3, [r7, #52]	@ 0x34
 801270a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801270c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012710:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 8012712:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012716:	4413      	add	r3, r2
 8012718:	643b      	str	r3, [r7, #64]	@ 0x40
 801271a:	693a      	ldr	r2, [r7, #16]
 801271c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801271e:	4053      	eors	r3, r2
 8012720:	613b      	str	r3, [r7, #16]
 8012722:	693b      	ldr	r3, [r7, #16]
 8012724:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012728:	613b      	str	r3, [r7, #16]
 801272a:	6a3a      	ldr	r2, [r7, #32]
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	4413      	add	r3, r2
 8012730:	623b      	str	r3, [r7, #32]
 8012732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012734:	6a3b      	ldr	r3, [r7, #32]
 8012736:	4053      	eors	r3, r2
 8012738:	633b      	str	r3, [r7, #48]	@ 0x30
 801273a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801273c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012740:	633b      	str	r3, [r7, #48]	@ 0x30
 8012742:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012746:	4413      	add	r3, r2
 8012748:	643b      	str	r3, [r7, #64]	@ 0x40
 801274a:	693a      	ldr	r2, [r7, #16]
 801274c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801274e:	4053      	eors	r3, r2
 8012750:	613b      	str	r3, [r7, #16]
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012758:	613b      	str	r3, [r7, #16]
 801275a:	6a3a      	ldr	r2, [r7, #32]
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	4413      	add	r3, r2
 8012760:	623b      	str	r3, [r7, #32]
 8012762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012764:	6a3b      	ldr	r3, [r7, #32]
 8012766:	4053      	eors	r3, r2
 8012768:	633b      	str	r3, [r7, #48]	@ 0x30
 801276a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801276c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012770:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 8012772:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012776:	4413      	add	r3, r2
 8012778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801277a:	68fa      	ldr	r2, [r7, #12]
 801277c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801277e:	4053      	eors	r3, r2
 8012780:	60fb      	str	r3, [r7, #12]
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012788:	60fb      	str	r3, [r7, #12]
 801278a:	69fa      	ldr	r2, [r7, #28]
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	4413      	add	r3, r2
 8012790:	61fb      	str	r3, [r7, #28]
 8012792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	4053      	eors	r3, r2
 8012798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801279a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801279c:	ea4f 5333 	mov.w	r3, r3, ror #20
 80127a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80127a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80127a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127a6:	4413      	add	r3, r2
 80127a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80127aa:	68fa      	ldr	r2, [r7, #12]
 80127ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127ae:	4053      	eors	r3, r2
 80127b0:	60fb      	str	r3, [r7, #12]
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	ea4f 6333 	mov.w	r3, r3, ror #24
 80127b8:	60fb      	str	r3, [r7, #12]
 80127ba:	69fa      	ldr	r2, [r7, #28]
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	4413      	add	r3, r2
 80127c0:	61fb      	str	r3, [r7, #28]
 80127c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	4053      	eors	r3, r2
 80127c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80127ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127cc:	ea4f 6373 	mov.w	r3, r3, ror #25
 80127d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 80127d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80127d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127d6:	4413      	add	r3, r2
 80127d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80127da:	68fa      	ldr	r2, [r7, #12]
 80127dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127de:	4053      	eors	r3, r2
 80127e0:	60fb      	str	r3, [r7, #12]
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	ea4f 4333 	mov.w	r3, r3, ror #16
 80127e8:	60fb      	str	r3, [r7, #12]
 80127ea:	6a3a      	ldr	r2, [r7, #32]
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	4413      	add	r3, r2
 80127f0:	623b      	str	r3, [r7, #32]
 80127f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80127f4:	6a3b      	ldr	r3, [r7, #32]
 80127f6:	4053      	eors	r3, r2
 80127f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80127fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127fc:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012800:	637b      	str	r3, [r7, #52]	@ 0x34
 8012802:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012806:	4413      	add	r3, r2
 8012808:	64bb      	str	r3, [r7, #72]	@ 0x48
 801280a:	68fa      	ldr	r2, [r7, #12]
 801280c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801280e:	4053      	eors	r3, r2
 8012810:	60fb      	str	r3, [r7, #12]
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012818:	60fb      	str	r3, [r7, #12]
 801281a:	6a3a      	ldr	r2, [r7, #32]
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	4413      	add	r3, r2
 8012820:	623b      	str	r3, [r7, #32]
 8012822:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012824:	6a3b      	ldr	r3, [r7, #32]
 8012826:	4053      	eors	r3, r2
 8012828:	637b      	str	r3, [r7, #52]	@ 0x34
 801282a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801282c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012830:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 8012832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012836:	4413      	add	r3, r2
 8012838:	647b      	str	r3, [r7, #68]	@ 0x44
 801283a:	69ba      	ldr	r2, [r7, #24]
 801283c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801283e:	4053      	eors	r3, r2
 8012840:	61bb      	str	r3, [r7, #24]
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012848:	61bb      	str	r3, [r7, #24]
 801284a:	69fa      	ldr	r2, [r7, #28]
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	4413      	add	r3, r2
 8012850:	61fb      	str	r3, [r7, #28]
 8012852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012854:	69fb      	ldr	r3, [r7, #28]
 8012856:	4053      	eors	r3, r2
 8012858:	633b      	str	r3, [r7, #48]	@ 0x30
 801285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801285c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012860:	633b      	str	r3, [r7, #48]	@ 0x30
 8012862:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012866:	4413      	add	r3, r2
 8012868:	647b      	str	r3, [r7, #68]	@ 0x44
 801286a:	69ba      	ldr	r2, [r7, #24]
 801286c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801286e:	4053      	eors	r3, r2
 8012870:	61bb      	str	r3, [r7, #24]
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012878:	61bb      	str	r3, [r7, #24]
 801287a:	69fa      	ldr	r2, [r7, #28]
 801287c:	69bb      	ldr	r3, [r7, #24]
 801287e:	4413      	add	r3, r2
 8012880:	61fb      	str	r3, [r7, #28]
 8012882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012884:	69fb      	ldr	r3, [r7, #28]
 8012886:	4053      	eors	r3, r2
 8012888:	633b      	str	r3, [r7, #48]	@ 0x30
 801288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801288c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012890:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 8012892:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012896:	4413      	add	r3, r2
 8012898:	643b      	str	r3, [r7, #64]	@ 0x40
 801289a:	697a      	ldr	r2, [r7, #20]
 801289c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801289e:	4053      	eors	r3, r2
 80128a0:	617b      	str	r3, [r7, #20]
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	ea4f 4333 	mov.w	r3, r3, ror #16
 80128a8:	617b      	str	r3, [r7, #20]
 80128aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	4413      	add	r3, r2
 80128b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80128b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80128b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128b6:	4053      	eors	r3, r2
 80128b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80128ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128bc:	ea4f 5333 	mov.w	r3, r3, ror #20
 80128c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80128c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80128c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128c6:	4413      	add	r3, r2
 80128c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80128ca:	697a      	ldr	r2, [r7, #20]
 80128cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128ce:	4053      	eors	r3, r2
 80128d0:	617b      	str	r3, [r7, #20]
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	ea4f 6333 	mov.w	r3, r3, ror #24
 80128d8:	617b      	str	r3, [r7, #20]
 80128da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	4413      	add	r3, r2
 80128e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80128e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80128e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128e6:	4053      	eors	r3, r2
 80128e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80128ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128ec:	ea4f 6373 	mov.w	r3, r3, ror #25
 80128f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 80128f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80128f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128f6:	4413      	add	r3, r2
 80128f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80128fa:	693a      	ldr	r2, [r7, #16]
 80128fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128fe:	4053      	eors	r3, r2
 8012900:	613b      	str	r3, [r7, #16]
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	ea4f 4333 	mov.w	r3, r3, ror #16
 8012908:	613b      	str	r3, [r7, #16]
 801290a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	4413      	add	r3, r2
 8012910:	627b      	str	r3, [r7, #36]	@ 0x24
 8012912:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012916:	4053      	eors	r3, r2
 8012918:	63bb      	str	r3, [r7, #56]	@ 0x38
 801291a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801291c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8012920:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012922:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012926:	4413      	add	r3, r2
 8012928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801292a:	693a      	ldr	r2, [r7, #16]
 801292c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801292e:	4053      	eors	r3, r2
 8012930:	613b      	str	r3, [r7, #16]
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012938:	613b      	str	r3, [r7, #16]
 801293a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801293c:	693b      	ldr	r3, [r7, #16]
 801293e:	4413      	add	r3, r2
 8012940:	627b      	str	r3, [r7, #36]	@ 0x24
 8012942:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012946:	4053      	eors	r3, r2
 8012948:	63bb      	str	r3, [r7, #56]	@ 0x38
 801294a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801294c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012950:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 8012952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012954:	3301      	adds	r3, #1
 8012956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801295a:	2b09      	cmp	r3, #9
 801295c:	f77f ae79 	ble.w	8012652 <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681a      	ldr	r2, [r3, #0]
 8012964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012966:	441a      	add	r2, r3
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	601a      	str	r2, [r3, #0]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	3304      	adds	r3, #4
 8012970:	6819      	ldr	r1, [r3, #0]
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	3304      	adds	r3, #4
 8012976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012978:	440a      	add	r2, r1
 801297a:	601a      	str	r2, [r3, #0]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	3308      	adds	r3, #8
 8012980:	6819      	ldr	r1, [r3, #0]
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	3308      	adds	r3, #8
 8012986:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012988:	440a      	add	r2, r1
 801298a:	601a      	str	r2, [r3, #0]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	330c      	adds	r3, #12
 8012990:	6819      	ldr	r1, [r3, #0]
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	330c      	adds	r3, #12
 8012996:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012998:	440a      	add	r2, r1
 801299a:	601a      	str	r2, [r3, #0]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	3310      	adds	r3, #16
 80129a0:	6819      	ldr	r1, [r3, #0]
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	3310      	adds	r3, #16
 80129a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80129a8:	440a      	add	r2, r1
 80129aa:	601a      	str	r2, [r3, #0]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	3314      	adds	r3, #20
 80129b0:	6819      	ldr	r1, [r3, #0]
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	3314      	adds	r3, #20
 80129b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80129b8:	440a      	add	r2, r1
 80129ba:	601a      	str	r2, [r3, #0]
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	3318      	adds	r3, #24
 80129c0:	6819      	ldr	r1, [r3, #0]
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	3318      	adds	r3, #24
 80129c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80129c8:	440a      	add	r2, r1
 80129ca:	601a      	str	r2, [r3, #0]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	331c      	adds	r3, #28
 80129d0:	6819      	ldr	r1, [r3, #0]
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	331c      	adds	r3, #28
 80129d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129d8:	440a      	add	r2, r1
 80129da:	601a      	str	r2, [r3, #0]
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	3320      	adds	r3, #32
 80129e0:	6819      	ldr	r1, [r3, #0]
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	3320      	adds	r3, #32
 80129e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129e8:	440a      	add	r2, r1
 80129ea:	601a      	str	r2, [r3, #0]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	3324      	adds	r3, #36	@ 0x24
 80129f0:	6819      	ldr	r1, [r3, #0]
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	3324      	adds	r3, #36	@ 0x24
 80129f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129f8:	440a      	add	r2, r1
 80129fa:	601a      	str	r2, [r3, #0]
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	3328      	adds	r3, #40	@ 0x28
 8012a00:	6819      	ldr	r1, [r3, #0]
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	3328      	adds	r3, #40	@ 0x28
 8012a06:	6a3a      	ldr	r2, [r7, #32]
 8012a08:	440a      	add	r2, r1
 8012a0a:	601a      	str	r2, [r3, #0]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	332c      	adds	r3, #44	@ 0x2c
 8012a10:	6819      	ldr	r1, [r3, #0]
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	332c      	adds	r3, #44	@ 0x2c
 8012a16:	69fa      	ldr	r2, [r7, #28]
 8012a18:	440a      	add	r2, r1
 8012a1a:	601a      	str	r2, [r3, #0]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	3330      	adds	r3, #48	@ 0x30
 8012a20:	6819      	ldr	r1, [r3, #0]
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	3330      	adds	r3, #48	@ 0x30
 8012a26:	69ba      	ldr	r2, [r7, #24]
 8012a28:	440a      	add	r2, r1
 8012a2a:	601a      	str	r2, [r3, #0]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	3334      	adds	r3, #52	@ 0x34
 8012a30:	6819      	ldr	r1, [r3, #0]
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	3334      	adds	r3, #52	@ 0x34
 8012a36:	697a      	ldr	r2, [r7, #20]
 8012a38:	440a      	add	r2, r1
 8012a3a:	601a      	str	r2, [r3, #0]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	3338      	adds	r3, #56	@ 0x38
 8012a40:	6819      	ldr	r1, [r3, #0]
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	3338      	adds	r3, #56	@ 0x38
 8012a46:	693a      	ldr	r2, [r7, #16]
 8012a48:	440a      	add	r2, r1
 8012a4a:	601a      	str	r2, [r3, #0]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	333c      	adds	r3, #60	@ 0x3c
 8012a50:	6819      	ldr	r1, [r3, #0]
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	333c      	adds	r3, #60	@ 0x3c
 8012a56:	68fa      	ldr	r2, [r7, #12]
 8012a58:	440a      	add	r2, r1
 8012a5a:	601a      	str	r2, [r3, #0]
}
 8012a5c:	bf00      	nop
 8012a5e:	3754      	adds	r7, #84	@ 0x54
 8012a60:	46bd      	mov	sp, r7
 8012a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a66:	4770      	bx	lr

08012a68 <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 8012a68:	b480      	push	{r7}
 8012a6a:	b089      	sub	sp, #36	@ 0x24
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	607a      	str	r2, [r7, #4]
 8012a74:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	089b      	lsrs	r3, r3, #2
 8012a7a:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	61fb      	str	r3, [r7, #28]
 8012a80:	e016      	b.n	8012ab0 <xor_block+0x48>
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	009b      	lsls	r3, r3, #2
 8012a86:	68ba      	ldr	r2, [r7, #8]
 8012a88:	4413      	add	r3, r2
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	617b      	str	r3, [r7, #20]
 8012a8e:	69fb      	ldr	r3, [r7, #28]
 8012a90:	009b      	lsls	r3, r3, #2
 8012a92:	687a      	ldr	r2, [r7, #4]
 8012a94:	4413      	add	r3, r2
 8012a96:	681a      	ldr	r2, [r3, #0]
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	4053      	eors	r3, r2
 8012a9c:	617b      	str	r3, [r7, #20]
 8012a9e:	69fb      	ldr	r3, [r7, #28]
 8012aa0:	009b      	lsls	r3, r3, #2
 8012aa2:	68fa      	ldr	r2, [r7, #12]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	697a      	ldr	r2, [r7, #20]
 8012aa8:	601a      	str	r2, [r3, #0]
 8012aaa:	69fb      	ldr	r3, [r7, #28]
 8012aac:	3301      	adds	r3, #1
 8012aae:	61fb      	str	r3, [r7, #28]
 8012ab0:	69fa      	ldr	r2, [r7, #28]
 8012ab2:	69bb      	ldr	r3, [r7, #24]
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d3e4      	bcc.n	8012a82 <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 8012ab8:	69bb      	ldr	r3, [r7, #24]
 8012aba:	009b      	lsls	r3, r3, #2
 8012abc:	68fa      	ldr	r2, [r7, #12]
 8012abe:	4413      	add	r3, r2
 8012ac0:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 8012ac2:	69bb      	ldr	r3, [r7, #24]
 8012ac4:	009b      	lsls	r3, r3, #2
 8012ac6:	68ba      	ldr	r2, [r7, #8]
 8012ac8:	4413      	add	r3, r2
 8012aca:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 8012acc:	69bb      	ldr	r3, [r7, #24]
 8012ace:	009b      	lsls	r3, r3, #2
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	4413      	add	r3, r2
 8012ad4:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	f003 0303 	and.w	r3, r3, #3
 8012adc:	2b03      	cmp	r3, #3
 8012ade:	d026      	beq.n	8012b2e <xor_block+0xc6>
 8012ae0:	2b03      	cmp	r3, #3
 8012ae2:	d846      	bhi.n	8012b72 <xor_block+0x10a>
 8012ae4:	2b01      	cmp	r3, #1
 8012ae6:	d002      	beq.n	8012aee <xor_block+0x86>
 8012ae8:	2b02      	cmp	r3, #2
 8012aea:	d00a      	beq.n	8012b02 <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 8012aec:	e041      	b.n	8012b72 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	781a      	ldrb	r2, [r3, #0]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	b2db      	uxtb	r3, r3
 8012af8:	4053      	eors	r3, r2
 8012afa:	b2da      	uxtb	r2, r3
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	701a      	strb	r2, [r3, #0]
      break;
 8012b00:	e037      	b.n	8012b72 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 8012b02:	68bb      	ldr	r3, [r7, #8]
 8012b04:	781a      	ldrb	r2, [r3, #0]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	4053      	eors	r3, r2
 8012b0e:	b2da      	uxtb	r2, r3
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	3301      	adds	r3, #1
 8012b18:	7819      	ldrb	r1, [r3, #0]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	0a1b      	lsrs	r3, r3, #8
 8012b20:	b2da      	uxtb	r2, r3
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	3301      	adds	r3, #1
 8012b26:	404a      	eors	r2, r1
 8012b28:	b2d2      	uxtb	r2, r2
 8012b2a:	701a      	strb	r2, [r3, #0]
      break;
 8012b2c:	e021      	b.n	8012b72 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	781a      	ldrb	r2, [r3, #0]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	b2db      	uxtb	r3, r3
 8012b38:	4053      	eors	r3, r2
 8012b3a:	b2da      	uxtb	r2, r3
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	3301      	adds	r3, #1
 8012b44:	7819      	ldrb	r1, [r3, #0]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	0a1b      	lsrs	r3, r3, #8
 8012b4c:	b2da      	uxtb	r2, r3
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	3301      	adds	r3, #1
 8012b52:	404a      	eors	r2, r1
 8012b54:	b2d2      	uxtb	r2, r2
 8012b56:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	3302      	adds	r3, #2
 8012b5c:	7819      	ldrb	r1, [r3, #0]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	0c1b      	lsrs	r3, r3, #16
 8012b64:	b2da      	uxtb	r2, r3
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	3302      	adds	r3, #2
 8012b6a:	404a      	eors	r2, r1
 8012b6c:	b2d2      	uxtb	r2, r2
 8012b6e:	701a      	strb	r2, [r3, #0]
      break;
 8012b70:	bf00      	nop
}
 8012b72:	bf00      	nop
 8012b74:	3724      	adds	r7, #36	@ 0x24
 8012b76:	46bd      	mov	sp, r7
 8012b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7c:	4770      	bx	lr

08012b7e <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 8012b7e:	b580      	push	{r7, lr}
 8012b80:	b0aa      	sub	sp, #168	@ 0xa8
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	60f8      	str	r0, [r7, #12]
 8012b86:	60b9      	str	r1, [r7, #8]
 8012b88:	607a      	str	r2, [r7, #4]
 8012b8a:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	099b      	lsrs	r3, r3, #6
 8012b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 8012b94:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8012b98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012b9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012ba0:	6839      	ldr	r1, [r7, #0]
 8012ba2:	f7ff fca7 	bl	80124f4 <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012bac:	e03c      	b.n	8012c28 <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 8012bae:	f107 0218 	add.w	r2, r7, #24
 8012bb2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8012bb6:	4611      	mov	r1, r2
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7ff fd03 	bl	80125c4 <core_block>
    increment_counter(state);
 8012bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 8012bc8:	2300      	movs	r3, #0
 8012bca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012bce:	e01c      	b.n	8012c0a <chacha20_xor_stream+0x8c>
 8012bd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012bd4:	009b      	lsls	r3, r3, #2
 8012bd6:	68ba      	ldr	r2, [r7, #8]
 8012bd8:	4413      	add	r3, r2
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	617b      	str	r3, [r7, #20]
 8012bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012be2:	009b      	lsls	r3, r3, #2
 8012be4:	f107 0218 	add.w	r2, r7, #24
 8012be8:	4413      	add	r3, r2
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	4053      	eors	r3, r2
 8012bf0:	617b      	str	r3, [r7, #20]
 8012bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	68fa      	ldr	r2, [r7, #12]
 8012bfa:	4413      	add	r3, r2
 8012bfc:	697a      	ldr	r2, [r7, #20]
 8012bfe:	601a      	str	r2, [r3, #0]
 8012c00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012c04:	3301      	adds	r3, #1
 8012c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012c0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012c0e:	2b0f      	cmp	r3, #15
 8012c10:	d9de      	bls.n	8012bd0 <chacha20_xor_stream+0x52>
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	3340      	adds	r3, #64	@ 0x40
 8012c16:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 8012c18:	68bb      	ldr	r3, [r7, #8]
 8012c1a:	3340      	adds	r3, #64	@ 0x40
 8012c1c:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 8012c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012c22:	3301      	adds	r3, #1
 8012c24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012c28:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8012c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d3bc      	bcc.n	8012bae <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012c3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 8012c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d00f      	beq.n	8012c66 <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 8012c46:	f107 0218 	add.w	r2, r7, #24
 8012c4a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8012c4e:	4611      	mov	r1, r2
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7ff fcb7 	bl	80125c4 <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 8012c56:	f107 0218 	add.w	r2, r7, #24
 8012c5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012c5e:	68b9      	ldr	r1, [r7, #8]
 8012c60:	68f8      	ldr	r0, [r7, #12]
 8012c62:	f7ff ff01 	bl	8012a68 <xor_block>
  }
}
 8012c66:	bf00      	nop
 8012c68:	37a8      	adds	r7, #168	@ 0xa8
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}

08012c6e <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 8012c6e:	b580      	push	{r7, lr}
 8012c70:	b0a4      	sub	sp, #144	@ 0x90
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	60f8      	str	r0, [r7, #12]
 8012c76:	60b9      	str	r1, [r7, #8]
 8012c78:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 8012c7a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8012c7e:	2300      	movs	r3, #0
 8012c80:	687a      	ldr	r2, [r7, #4]
 8012c82:	68b9      	ldr	r1, [r7, #8]
 8012c84:	f7ff fc36 	bl	80124f4 <initialize_state>
  core_block(state, result);
 8012c88:	f107 0210 	add.w	r2, r7, #16
 8012c8c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012c90:	4611      	mov	r1, r2
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7ff fc96 	bl	80125c4 <core_block>
  serialize(poly_key, result);
 8012c98:	f107 0310 	add.w	r3, r7, #16
 8012c9c:	2220      	movs	r2, #32
 8012c9e:	4619      	mov	r1, r3
 8012ca0:	68f8      	ldr	r0, [r7, #12]
 8012ca2:	f00f f994 	bl	8021fce <memcpy>
  (void) i;
}
 8012ca6:	bf00      	nop
 8012ca8:	3790      	adds	r7, #144	@ 0x90
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}

08012cae <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 8012cae:	b480      	push	{r7}
 8012cb0:	b083      	sub	sp, #12
 8012cb2:	af00      	add	r7, sp, #0
 8012cb4:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	781b      	ldrb	r3, [r3, #0]
 8012cba:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	3301      	adds	r3, #1
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 8012cc4:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	3302      	adds	r3, #2
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 8012cce:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	3303      	adds	r3, #3
 8012cd4:	781b      	ldrb	r3, [r3, #0]
 8012cd6:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 8012cd8:	4313      	orrs	r3, r2
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	370c      	adds	r7, #12
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce4:	4770      	bx	lr

08012ce6 <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 8012ce6:	b480      	push	{r7}
 8012ce8:	b083      	sub	sp, #12
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
 8012cee:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	b2da      	uxtb	r2, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	0a1a      	lsrs	r2, r3, #8
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	3301      	adds	r3, #1
 8012d00:	b2d2      	uxtb	r2, r2
 8012d02:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	0c1a      	lsrs	r2, r3, #16
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	3302      	adds	r3, #2
 8012d0c:	b2d2      	uxtb	r2, r2
 8012d0e:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	0e1a      	lsrs	r2, r3, #24
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	3303      	adds	r3, #3
 8012d18:	b2d2      	uxtb	r2, r2
 8012d1a:	701a      	strb	r2, [r3, #0]
}
 8012d1c:	bf00      	nop
 8012d1e:	370c      	adds	r7, #12
 8012d20:	46bd      	mov	sp, r7
 8012d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d26:	4770      	bx	lr

08012d28 <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b084      	sub	sp, #16
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 8012d36:	6838      	ldr	r0, [r7, #0]
 8012d38:	f7ff ffb9 	bl	8012cae <U8TO32>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	3303      	adds	r3, #3
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7ff ffaf 	bl	8012cae <U8TO32>
 8012d50:	4603      	mov	r3, r0
 8012d52:	089a      	lsrs	r2, r3, #2
 8012d54:	4b2f      	ldr	r3, [pc, #188]	@ (8012e14 <poly1305_init+0xec>)
 8012d56:	4013      	ands	r3, r2
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	3306      	adds	r3, #6
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7ff ffa4 	bl	8012cae <U8TO32>
 8012d66:	4603      	mov	r3, r0
 8012d68:	091a      	lsrs	r2, r3, #4
 8012d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8012e18 <poly1305_init+0xf0>)
 8012d6c:	4013      	ands	r3, r2
 8012d6e:	68fa      	ldr	r2, [r7, #12]
 8012d70:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	3309      	adds	r3, #9
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7ff ff99 	bl	8012cae <U8TO32>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	099a      	lsrs	r2, r3, #6
 8012d80:	4b26      	ldr	r3, [pc, #152]	@ (8012e1c <poly1305_init+0xf4>)
 8012d82:	4013      	ands	r3, r2
 8012d84:	68fa      	ldr	r2, [r7, #12]
 8012d86:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	330c      	adds	r3, #12
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7ff ff8e 	bl	8012cae <U8TO32>
 8012d92:	4603      	mov	r3, r0
 8012d94:	0a1b      	lsrs	r3, r3, #8
 8012d96:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	2200      	movs	r2, #0
 8012da2:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	2200      	movs	r2, #0
 8012da8:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	2200      	movs	r2, #0
 8012dae:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2200      	movs	r2, #0
 8012db4:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	2200      	movs	r2, #0
 8012dba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	3310      	adds	r3, #16
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7ff ff74 	bl	8012cae <U8TO32>
 8012dc6:	4602      	mov	r2, r0
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	3314      	adds	r3, #20
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7ff ff6c 	bl	8012cae <U8TO32>
 8012dd6:	4602      	mov	r2, r0
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	3318      	adds	r3, #24
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7ff ff64 	bl	8012cae <U8TO32>
 8012de6:	4602      	mov	r2, r0
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	331c      	adds	r3, #28
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7ff ff5c 	bl	8012cae <U8TO32>
 8012df6:	4602      	mov	r2, r0
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	2200      	movs	r2, #0
 8012e06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8012e0a:	bf00      	nop
 8012e0c:	3710      	adds	r7, #16
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}
 8012e12:	bf00      	nop
 8012e14:	03ffff03 	.word	0x03ffff03
 8012e18:	03ffc0ff 	.word	0x03ffc0ff
 8012e1c:	03f03fff 	.word	0x03f03fff

08012e20 <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 8012e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012e24:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 8012e2e:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 8012e32:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 8012e36:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012e3a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d001      	beq.n	8012e46 <poly1305_blocks+0x26>
 8012e42:	2300      	movs	r3, #0
 8012e44:	e001      	b.n	8012e4a <poly1305_blocks+0x2a>
 8012e46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012e4a:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 8012e4e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 8012e58:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 8012e62:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012e66:	689b      	ldr	r3, [r3, #8]
 8012e68:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 8012e6c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012e70:	68db      	ldr	r3, [r3, #12]
 8012e72:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 8012e76:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012e7a:	691b      	ldr	r3, [r3, #16]
 8012e7c:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 8012e80:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 8012e84:	4613      	mov	r3, r2
 8012e86:	009b      	lsls	r3, r3, #2
 8012e88:	4413      	add	r3, r2
 8012e8a:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 8012e8e:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8012e92:	4613      	mov	r3, r2
 8012e94:	009b      	lsls	r3, r3, #2
 8012e96:	4413      	add	r3, r2
 8012e98:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 8012e9c:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 8012ea0:	4613      	mov	r3, r2
 8012ea2:	009b      	lsls	r3, r3, #2
 8012ea4:	4413      	add	r3, r2
 8012ea6:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 8012eaa:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8012eae:	4613      	mov	r3, r2
 8012eb0:	009b      	lsls	r3, r3, #2
 8012eb2:	4413      	add	r3, r2
 8012eb4:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 8012eb8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012ebc:	695b      	ldr	r3, [r3, #20]
 8012ebe:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 8012ec2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012ec6:	699b      	ldr	r3, [r3, #24]
 8012ec8:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 8012ecc:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012ed0:	69db      	ldr	r3, [r3, #28]
 8012ed2:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 8012ed6:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012eda:	6a1b      	ldr	r3, [r3, #32]
 8012edc:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 8012ee0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8012ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ee6:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 8012eea:	f000 be78 	b.w	8013bde <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 8012eee:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 8012ef2:	f7ff fedc 	bl	8012cae <U8TO32>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8012efc:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8012f00:	4413      	add	r3, r2
 8012f02:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 8012f06:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8012f0a:	3303      	adds	r3, #3
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7ff fece 	bl	8012cae <U8TO32>
 8012f12:	4603      	mov	r3, r0
 8012f14:	089b      	lsrs	r3, r3, #2
 8012f16:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8012f1a:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8012f1e:	4413      	add	r3, r2
 8012f20:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 8012f24:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8012f28:	3306      	adds	r3, #6
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7ff febf 	bl	8012cae <U8TO32>
 8012f30:	4603      	mov	r3, r0
 8012f32:	091b      	lsrs	r3, r3, #4
 8012f34:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8012f38:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8012f3c:	4413      	add	r3, r2
 8012f3e:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 8012f42:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8012f46:	3309      	adds	r3, #9
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7ff feb0 	bl	8012cae <U8TO32>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	099b      	lsrs	r3, r3, #6
 8012f52:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8012f56:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8012f5a:	4413      	add	r3, r2
 8012f5c:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 8012f60:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8012f64:	330c      	adds	r3, #12
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7ff fea1 	bl	8012cae <U8TO32>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	0a1a      	lsrs	r2, r3, #8
 8012f70:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8012f74:	431a      	orrs	r2, r3
 8012f76:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8012f7a:	4413      	add	r3, r2
 8012f7c:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8012f80:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8012f84:	2200      	movs	r2, #0
 8012f86:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8012f8a:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8012f8e:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8012f92:	2200      	movs	r2, #0
 8012f94:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8012f98:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8012f9c:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8012fa0:	460b      	mov	r3, r1
 8012fa2:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 8012fa6:	fb02 f203 	mul.w	r2, r2, r3
 8012faa:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8012fae:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 8012fb2:	4601      	mov	r1, r0
 8012fb4:	fb01 f303 	mul.w	r3, r1, r3
 8012fb8:	4413      	add	r3, r2
 8012fba:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 8012fbe:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 8012fc2:	fba2 1201 	umull	r1, r2, r2, r1
 8012fc6:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 8012fca:	460a      	mov	r2, r1
 8012fcc:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 8012fd0:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 8012fd4:	4413      	add	r3, r2
 8012fd6:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8012fda:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8012fde:	2200      	movs	r2, #0
 8012fe0:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8012fe4:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8012fe8:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8012fec:	2200      	movs	r2, #0
 8012fee:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8012ff2:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 8012ff6:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 8013000:	fb02 f203 	mul.w	r2, r2, r3
 8013004:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8013008:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 801300c:	4601      	mov	r1, r0
 801300e:	fb01 f303 	mul.w	r3, r1, r3
 8013012:	4413      	add	r3, r2
 8013014:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 8013018:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 801301c:	fba2 1201 	umull	r1, r2, r2, r1
 8013020:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8013024:	460a      	mov	r2, r1
 8013026:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 801302a:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 801302e:	4413      	add	r3, r2
 8013030:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8013034:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8013038:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 801303c:	4602      	mov	r2, r0
 801303e:	189b      	adds	r3, r3, r2
 8013040:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8013044:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8013048:	460a      	mov	r2, r1
 801304a:	4153      	adcs	r3, r2
 801304c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 8013050:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8013054:	2200      	movs	r2, #0
 8013056:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 801305a:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 801305e:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8013062:	2200      	movs	r2, #0
 8013064:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8013068:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 801306c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8013070:	460b      	mov	r3, r1
 8013072:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8013076:	fb02 f203 	mul.w	r2, r2, r3
 801307a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 801307e:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 8013082:	4601      	mov	r1, r0
 8013084:	fb01 f303 	mul.w	r3, r1, r3
 8013088:	4413      	add	r3, r2
 801308a:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 801308e:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 8013092:	fba2 1201 	umull	r1, r2, r2, r1
 8013096:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 801309a:	460a      	mov	r2, r1
 801309c:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 80130a0:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 80130a4:	4413      	add	r3, r2
 80130a6:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 80130aa:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80130ae:	2200      	movs	r2, #0
 80130b0:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80130b4:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 80130b8:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80130bc:	2200      	movs	r2, #0
 80130be:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80130c2:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 80130c6:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 80130ca:	460b      	mov	r3, r1
 80130cc:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80130d0:	fb02 f203 	mul.w	r2, r2, r3
 80130d4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80130d8:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 80130dc:	4601      	mov	r1, r0
 80130de:	fb01 f303 	mul.w	r3, r1, r3
 80130e2:	4413      	add	r3, r2
 80130e4:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 80130e8:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 80130ec:	fba2 1201 	umull	r1, r2, r2, r1
 80130f0:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 80130f4:	460a      	mov	r2, r1
 80130f6:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 80130fa:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 80130fe:	4413      	add	r3, r2
 8013100:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8013104:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8013108:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 801310c:	4602      	mov	r2, r0
 801310e:	189b      	adds	r3, r3, r2
 8013110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013112:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8013116:	460a      	mov	r2, r1
 8013118:	4153      	adcs	r3, r2
 801311a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801311c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013120:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8013124:	4602      	mov	r2, r0
 8013126:	189b      	adds	r3, r3, r2
 8013128:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801312c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013130:	460a      	mov	r2, r1
 8013132:	4153      	adcs	r3, r2
 8013134:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 8013138:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801313c:	2200      	movs	r2, #0
 801313e:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8013142:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8013146:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 801314a:	2200      	movs	r2, #0
 801314c:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8013150:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8013154:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 8013158:	460b      	mov	r3, r1
 801315a:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 801315e:	fb02 f203 	mul.w	r2, r2, r3
 8013162:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8013166:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 801316a:	4601      	mov	r1, r0
 801316c:	fb01 f303 	mul.w	r3, r1, r3
 8013170:	4413      	add	r3, r2
 8013172:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8013176:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 801317a:	fba2 1201 	umull	r1, r2, r2, r1
 801317e:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8013182:	460a      	mov	r2, r1
 8013184:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 8013188:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 801318c:	4413      	add	r3, r2
 801318e:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8013192:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013196:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 801319a:	4602      	mov	r2, r0
 801319c:	189b      	adds	r3, r3, r2
 801319e:	643b      	str	r3, [r7, #64]	@ 0x40
 80131a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80131a4:	460a      	mov	r2, r1
 80131a6:	4153      	adcs	r3, r2
 80131a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80131aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80131ae:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 80131b2:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80131b6:	2200      	movs	r2, #0
 80131b8:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 80131bc:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 80131c0:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80131c4:	2200      	movs	r2, #0
 80131c6:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 80131ca:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 80131ce:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 80131d2:	460b      	mov	r3, r1
 80131d4:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 80131d8:	fb02 f203 	mul.w	r2, r2, r3
 80131dc:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80131e0:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 80131e4:	4601      	mov	r1, r0
 80131e6:	fb01 f303 	mul.w	r3, r1, r3
 80131ea:	4413      	add	r3, r2
 80131ec:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 80131f0:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 80131f4:	fba2 1201 	umull	r1, r2, r2, r1
 80131f8:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 80131fc:	460a      	mov	r2, r1
 80131fe:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 8013202:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8013206:	4413      	add	r3, r2
 8013208:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801320c:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8013210:	2200      	movs	r2, #0
 8013212:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8013216:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 801321a:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801321e:	2200      	movs	r2, #0
 8013220:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8013224:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 8013228:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 801322c:	460b      	mov	r3, r1
 801322e:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8013232:	fb02 f203 	mul.w	r2, r2, r3
 8013236:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 801323a:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 801323e:	4601      	mov	r1, r0
 8013240:	fb01 f303 	mul.w	r3, r1, r3
 8013244:	4413      	add	r3, r2
 8013246:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 801324a:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 801324e:	fba2 1201 	umull	r1, r2, r2, r1
 8013252:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8013256:	460a      	mov	r2, r1
 8013258:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 801325c:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8013260:	4413      	add	r3, r2
 8013262:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8013266:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801326a:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 801326e:	4602      	mov	r2, r0
 8013270:	189b      	adds	r3, r3, r2
 8013272:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8013276:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801327a:	460a      	mov	r2, r1
 801327c:	4153      	adcs	r3, r2
 801327e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 8013282:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8013286:	2200      	movs	r2, #0
 8013288:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 801328c:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8013290:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8013294:	2200      	movs	r2, #0
 8013296:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 801329a:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 801329e:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 80132a2:	460b      	mov	r3, r1
 80132a4:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80132a8:	fb02 f203 	mul.w	r2, r2, r3
 80132ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80132b0:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 80132b4:	4601      	mov	r1, r0
 80132b6:	fb01 f303 	mul.w	r3, r1, r3
 80132ba:	4413      	add	r3, r2
 80132bc:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 80132c0:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80132c4:	fba2 1201 	umull	r1, r2, r2, r1
 80132c8:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 80132cc:	460a      	mov	r2, r1
 80132ce:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 80132d2:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 80132d6:	4413      	add	r3, r2
 80132d8:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 80132dc:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80132e0:	2200      	movs	r2, #0
 80132e2:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 80132e6:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 80132ea:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80132ee:	2200      	movs	r2, #0
 80132f0:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 80132f4:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 80132f8:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 80132fc:	460b      	mov	r3, r1
 80132fe:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8013302:	fb02 f203 	mul.w	r2, r2, r3
 8013306:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801330a:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 801330e:	4601      	mov	r1, r0
 8013310:	fb01 f303 	mul.w	r3, r1, r3
 8013314:	4413      	add	r3, r2
 8013316:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801331a:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 801331e:	fba2 1201 	umull	r1, r2, r2, r1
 8013322:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 8013326:	460a      	mov	r2, r1
 8013328:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 801332c:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8013330:	4413      	add	r3, r2
 8013332:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8013336:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801333a:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 801333e:	4602      	mov	r2, r0
 8013340:	189b      	adds	r3, r3, r2
 8013342:	663b      	str	r3, [r7, #96]	@ 0x60
 8013344:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8013348:	460a      	mov	r2, r1
 801334a:	4153      	adcs	r3, r2
 801334c:	667b      	str	r3, [r7, #100]	@ 0x64
 801334e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8013352:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8013356:	4602      	mov	r2, r0
 8013358:	189b      	adds	r3, r3, r2
 801335a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801335e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8013362:	460a      	mov	r2, r1
 8013364:	4153      	adcs	r3, r2
 8013366:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801336a:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801336e:	2200      	movs	r2, #0
 8013370:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8013374:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8013378:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801337c:	2200      	movs	r2, #0
 801337e:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8013382:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 8013386:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 801338a:	460b      	mov	r3, r1
 801338c:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8013390:	fb02 f203 	mul.w	r2, r2, r3
 8013394:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8013398:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 801339c:	4601      	mov	r1, r0
 801339e:	fb01 f303 	mul.w	r3, r1, r3
 80133a2:	4413      	add	r3, r2
 80133a4:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 80133a8:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 80133ac:	fba2 1201 	umull	r1, r2, r2, r1
 80133b0:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 80133b4:	460a      	mov	r2, r1
 80133b6:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 80133ba:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80133be:	4413      	add	r3, r2
 80133c0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 80133c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80133c8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80133cc:	4602      	mov	r2, r0
 80133ce:	189b      	adds	r3, r3, r2
 80133d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80133d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80133d6:	460a      	mov	r2, r1
 80133d8:	4153      	adcs	r3, r2
 80133da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80133dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80133e0:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 80133e4:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80133e8:	2200      	movs	r2, #0
 80133ea:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80133ee:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 80133f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80133f6:	2200      	movs	r2, #0
 80133f8:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 80133fc:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 8013400:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8013404:	460b      	mov	r3, r1
 8013406:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 801340a:	fb02 f203 	mul.w	r2, r2, r3
 801340e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8013412:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 8013416:	4601      	mov	r1, r0
 8013418:	fb01 f303 	mul.w	r3, r1, r3
 801341c:	4413      	add	r3, r2
 801341e:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8013422:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 8013426:	fba2 1201 	umull	r1, r2, r2, r1
 801342a:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 801342e:	460a      	mov	r2, r1
 8013430:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 8013434:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8013438:	4413      	add	r3, r2
 801343a:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 801343e:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8013442:	2200      	movs	r2, #0
 8013444:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8013448:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 801344c:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8013450:	2200      	movs	r2, #0
 8013452:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8013456:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 801345a:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 801345e:	460b      	mov	r3, r1
 8013460:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 8013464:	fb02 f203 	mul.w	r2, r2, r3
 8013468:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 801346c:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 8013470:	4601      	mov	r1, r0
 8013472:	fb01 f303 	mul.w	r3, r1, r3
 8013476:	4413      	add	r3, r2
 8013478:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 801347c:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8013480:	fba2 1201 	umull	r1, r2, r2, r1
 8013484:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8013488:	460a      	mov	r2, r1
 801348a:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 801348e:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8013492:	4413      	add	r3, r2
 8013494:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8013498:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801349c:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 80134a0:	4602      	mov	r2, r0
 80134a2:	189b      	adds	r3, r3, r2
 80134a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80134a8:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80134ac:	460a      	mov	r2, r1
 80134ae:	4153      	adcs	r3, r2
 80134b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 80134b4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80134b8:	2200      	movs	r2, #0
 80134ba:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80134be:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 80134c2:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80134c6:	2200      	movs	r2, #0
 80134c8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80134cc:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 80134d0:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80134d4:	460b      	mov	r3, r1
 80134d6:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 80134da:	fb02 f203 	mul.w	r2, r2, r3
 80134de:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80134e2:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 80134e6:	4601      	mov	r1, r0
 80134e8:	fb01 f303 	mul.w	r3, r1, r3
 80134ec:	4413      	add	r3, r2
 80134ee:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 80134f2:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 80134f6:	fba2 1201 	umull	r1, r2, r2, r1
 80134fa:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 80134fe:	460a      	mov	r2, r1
 8013500:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 8013504:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8013508:	4413      	add	r3, r2
 801350a:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801350e:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013512:	2200      	movs	r2, #0
 8013514:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8013518:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 801351c:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8013520:	2200      	movs	r2, #0
 8013522:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8013526:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 801352a:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 801352e:	460b      	mov	r3, r1
 8013530:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8013534:	fb02 f203 	mul.w	r2, r2, r3
 8013538:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801353c:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 8013540:	4601      	mov	r1, r0
 8013542:	fb01 f303 	mul.w	r3, r1, r3
 8013546:	4413      	add	r3, r2
 8013548:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801354c:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8013550:	fba2 1201 	umull	r1, r2, r2, r1
 8013554:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8013558:	460a      	mov	r2, r1
 801355a:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 801355e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8013562:	4413      	add	r3, r2
 8013564:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8013568:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801356c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8013570:	4602      	mov	r2, r0
 8013572:	189b      	adds	r3, r3, r2
 8013574:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013576:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801357a:	460a      	mov	r2, r1
 801357c:	4153      	adcs	r3, r2
 801357e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013580:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013584:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8013588:	4602      	mov	r2, r0
 801358a:	189b      	adds	r3, r3, r2
 801358c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013590:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013594:	460a      	mov	r2, r1
 8013596:	4153      	adcs	r3, r2
 8013598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 801359c:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80135a0:	2200      	movs	r2, #0
 80135a2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80135a6:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80135aa:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80135ae:	2200      	movs	r2, #0
 80135b0:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80135b4:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80135b8:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 80135bc:	460b      	mov	r3, r1
 80135be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80135c2:	fb02 f203 	mul.w	r2, r2, r3
 80135c6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80135ca:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 80135ce:	4601      	mov	r1, r0
 80135d0:	fb01 f303 	mul.w	r3, r1, r3
 80135d4:	4413      	add	r3, r2
 80135d6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80135da:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 80135de:	fba2 1201 	umull	r1, r2, r2, r1
 80135e2:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80135e6:	460a      	mov	r2, r1
 80135e8:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 80135ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80135f0:	4413      	add	r3, r2
 80135f2:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 80135f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80135fa:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 80135fe:	4602      	mov	r2, r0
 8013600:	189b      	adds	r3, r3, r2
 8013602:	633b      	str	r3, [r7, #48]	@ 0x30
 8013604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013608:	460a      	mov	r2, r1
 801360a:	4153      	adcs	r3, r2
 801360c:	637b      	str	r3, [r7, #52]	@ 0x34
 801360e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8013612:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8013616:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801361a:	2200      	movs	r2, #0
 801361c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8013620:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8013624:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8013628:	2200      	movs	r2, #0
 801362a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 801362e:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8013632:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8013636:	460b      	mov	r3, r1
 8013638:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801363c:	fb02 f203 	mul.w	r2, r2, r3
 8013640:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8013644:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 8013648:	4601      	mov	r1, r0
 801364a:	fb01 f303 	mul.w	r3, r1, r3
 801364e:	4413      	add	r3, r2
 8013650:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8013654:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8013658:	fba2 1201 	umull	r1, r2, r2, r1
 801365c:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 8013660:	460a      	mov	r2, r1
 8013662:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 8013666:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 801366a:	4413      	add	r3, r2
 801366c:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8013670:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8013674:	2200      	movs	r2, #0
 8013676:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 801367a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 801367e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8013682:	2200      	movs	r2, #0
 8013684:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8013688:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 801368c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8013690:	460b      	mov	r3, r1
 8013692:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8013696:	fb02 f203 	mul.w	r2, r2, r3
 801369a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801369e:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 80136a2:	4601      	mov	r1, r0
 80136a4:	fb01 f303 	mul.w	r3, r1, r3
 80136a8:	4413      	add	r3, r2
 80136aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80136ae:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 80136b2:	fba2 1201 	umull	r1, r2, r2, r1
 80136b6:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 80136ba:	460a      	mov	r2, r1
 80136bc:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 80136c0:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80136c4:	4413      	add	r3, r2
 80136c6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80136ca:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80136ce:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80136d2:	4602      	mov	r2, r0
 80136d4:	189b      	adds	r3, r3, r2
 80136d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80136da:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80136de:	460a      	mov	r2, r1
 80136e0:	4153      	adcs	r3, r2
 80136e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 80136e6:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80136ea:	2200      	movs	r2, #0
 80136ec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80136f0:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80136f4:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80136f8:	2200      	movs	r2, #0
 80136fa:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80136fe:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8013702:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8013706:	460b      	mov	r3, r1
 8013708:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 801370c:	fb02 f203 	mul.w	r2, r2, r3
 8013710:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8013714:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 8013718:	4601      	mov	r1, r0
 801371a:	fb01 f303 	mul.w	r3, r1, r3
 801371e:	4413      	add	r3, r2
 8013720:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8013724:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 8013728:	fba2 ab01 	umull	sl, fp, r2, r1
 801372c:	445b      	add	r3, fp
 801372e:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8013730:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013734:	2200      	movs	r2, #0
 8013736:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801373a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 801373e:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8013742:	2200      	movs	r2, #0
 8013744:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8013748:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 801374c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8013750:	460b      	mov	r3, r1
 8013752:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8013756:	fb02 f203 	mul.w	r2, r2, r3
 801375a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801375e:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 8013762:	4601      	mov	r1, r0
 8013764:	fb01 f303 	mul.w	r3, r1, r3
 8013768:	4413      	add	r3, r2
 801376a:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 801376e:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 8013772:	fba2 1201 	umull	r1, r2, r2, r1
 8013776:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 801377a:	460a      	mov	r2, r1
 801377c:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 8013780:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8013784:	4413      	add	r3, r2
 8013786:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 801378a:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 801378e:	460b      	mov	r3, r1
 8013790:	eb1a 0303 	adds.w	r3, sl, r3
 8013794:	653b      	str	r3, [r7, #80]	@ 0x50
 8013796:	4613      	mov	r3, r2
 8013798:	eb4b 0303 	adc.w	r3, fp, r3
 801379c:	657b      	str	r3, [r7, #84]	@ 0x54
 801379e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80137a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80137a6:	4602      	mov	r2, r0
 80137a8:	189b      	adds	r3, r3, r2
 80137aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80137ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80137b2:	460a      	mov	r2, r1
 80137b4:	4153      	adcs	r3, r2
 80137b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 80137ba:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80137be:	2200      	movs	r2, #0
 80137c0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80137c4:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80137c8:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80137cc:	2200      	movs	r2, #0
 80137ce:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80137d2:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80137d6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 80137da:	460b      	mov	r3, r1
 80137dc:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80137e0:	fb02 f203 	mul.w	r2, r2, r3
 80137e4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80137e8:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 80137ec:	4601      	mov	r1, r0
 80137ee:	fb01 f303 	mul.w	r3, r1, r3
 80137f2:	4413      	add	r3, r2
 80137f4:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80137f8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80137fc:	fba2 1201 	umull	r1, r2, r2, r1
 8013800:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8013804:	460a      	mov	r2, r1
 8013806:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 801380a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801380e:	4413      	add	r3, r2
 8013810:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8013814:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013818:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 801381c:	4602      	mov	r2, r0
 801381e:	189b      	adds	r3, r3, r2
 8013820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013822:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013826:	460a      	mov	r2, r1
 8013828:	4153      	adcs	r3, r2
 801382a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801382c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013830:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 8013834:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013838:	2200      	movs	r2, #0
 801383a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801383e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8013842:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8013846:	2200      	movs	r2, #0
 8013848:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 801384c:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8013850:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8013854:	460b      	mov	r3, r1
 8013856:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801385a:	fb02 f203 	mul.w	r2, r2, r3
 801385e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8013862:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 8013866:	4601      	mov	r1, r0
 8013868:	fb01 f303 	mul.w	r3, r1, r3
 801386c:	4413      	add	r3, r2
 801386e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8013872:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8013876:	fba2 8901 	umull	r8, r9, r2, r1
 801387a:	444b      	add	r3, r9
 801387c:	4699      	mov	r9, r3
 801387e:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8013882:	2200      	movs	r2, #0
 8013884:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013888:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 801388c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8013890:	2200      	movs	r2, #0
 8013892:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8013896:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 801389a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 801389e:	460b      	mov	r3, r1
 80138a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80138a4:	fb02 f203 	mul.w	r2, r2, r3
 80138a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80138ac:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 80138b0:	4601      	mov	r1, r0
 80138b2:	fb01 f303 	mul.w	r3, r1, r3
 80138b6:	4413      	add	r3, r2
 80138b8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80138bc:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80138c0:	fba2 1201 	umull	r1, r2, r2, r1
 80138c4:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80138c8:	460a      	mov	r2, r1
 80138ca:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80138ce:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80138d2:	4413      	add	r3, r2
 80138d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80138d8:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80138dc:	460b      	mov	r3, r1
 80138de:	eb18 0303 	adds.w	r3, r8, r3
 80138e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80138e6:	4613      	mov	r3, r2
 80138e8:	eb49 0303 	adc.w	r3, r9, r3
 80138ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 80138f0:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80138f4:	2200      	movs	r2, #0
 80138f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80138fa:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80138fe:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8013902:	2200      	movs	r2, #0
 8013904:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8013908:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801390c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8013910:	460b      	mov	r3, r1
 8013912:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8013916:	fb02 f203 	mul.w	r2, r2, r3
 801391a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801391e:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 8013922:	4601      	mov	r1, r0
 8013924:	fb01 f303 	mul.w	r3, r1, r3
 8013928:	4413      	add	r3, r2
 801392a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801392e:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8013932:	fba2 4501 	umull	r4, r5, r2, r1
 8013936:	442b      	add	r3, r5
 8013938:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801393a:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801393e:	2200      	movs	r2, #0
 8013940:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8013944:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8013948:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801394c:	2200      	movs	r2, #0
 801394e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8013952:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8013956:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 801395a:	460b      	mov	r3, r1
 801395c:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8013960:	fb02 f203 	mul.w	r2, r2, r3
 8013964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013968:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 801396c:	4601      	mov	r1, r0
 801396e:	fb01 f303 	mul.w	r3, r1, r3
 8013972:	4413      	add	r3, r2
 8013974:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8013978:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 801397c:	fba2 1201 	umull	r1, r2, r2, r1
 8013980:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8013984:	460a      	mov	r2, r1
 8013986:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 801398a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801398e:	4413      	add	r3, r2
 8013990:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8013994:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8013998:	460b      	mov	r3, r1
 801399a:	18e3      	adds	r3, r4, r3
 801399c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801399e:	4613      	mov	r3, r2
 80139a0:	eb45 0303 	adc.w	r3, r5, r3
 80139a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80139a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80139aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80139ae:	4602      	mov	r2, r0
 80139b0:	189b      	adds	r3, r3, r2
 80139b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80139b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80139ba:	460a      	mov	r2, r1
 80139bc:	4153      	adcs	r3, r2
 80139be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 80139c2:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80139c6:	2200      	movs	r2, #0
 80139c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80139cc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80139d0:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80139d4:	2200      	movs	r2, #0
 80139d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80139da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80139de:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 80139e2:	460b      	mov	r3, r1
 80139e4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80139e8:	fb02 f203 	mul.w	r2, r2, r3
 80139ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80139f0:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 80139f4:	4601      	mov	r1, r0
 80139f6:	fb01 f303 	mul.w	r3, r1, r3
 80139fa:	4413      	add	r3, r2
 80139fc:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013a00:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8013a04:	fba2 1201 	umull	r1, r2, r2, r1
 8013a08:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8013a0c:	460a      	mov	r2, r1
 8013a0e:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8013a12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8013a16:	4413      	add	r3, r2
 8013a18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 8013a1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013a20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8013a24:	4602      	mov	r2, r0
 8013a26:	189b      	adds	r3, r3, r2
 8013a28:	623b      	str	r3, [r7, #32]
 8013a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013a2e:	460a      	mov	r2, r1
 8013a30:	4153      	adcs	r3, r2
 8013a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013a38:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 8013a3c:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8013a40:	f04f 0000 	mov.w	r0, #0
 8013a44:	f04f 0100 	mov.w	r1, #0
 8013a48:	0e90      	lsrs	r0, r2, #26
 8013a4a:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8013a4e:	0e99      	lsrs	r1, r3, #26
 8013a50:	4603      	mov	r3, r0
 8013a52:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 8013a56:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8013a5a:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013a5e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 8013a62:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013a66:	2200      	movs	r2, #0
 8013a68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013a6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8013a70:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 8013a74:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8013a78:	1851      	adds	r1, r2, r1
 8013a7a:	61b9      	str	r1, [r7, #24]
 8013a7c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013a80:	414b      	adcs	r3, r1
 8013a82:	61fb      	str	r3, [r7, #28]
 8013a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013a88:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 8013a8c:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 8013a90:	f04f 0000 	mov.w	r0, #0
 8013a94:	f04f 0100 	mov.w	r1, #0
 8013a98:	0e90      	lsrs	r0, r2, #26
 8013a9a:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8013a9e:	0e99      	lsrs	r1, r3, #26
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 8013aa6:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8013aaa:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013aae:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 8013ab2:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013abc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8013ac0:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 8013ac4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8013ac8:	1851      	adds	r1, r2, r1
 8013aca:	6139      	str	r1, [r7, #16]
 8013acc:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8013ad0:	414b      	adcs	r3, r1
 8013ad2:	617b      	str	r3, [r7, #20]
 8013ad4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013ad8:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 8013adc:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 8013ae0:	f04f 0000 	mov.w	r0, #0
 8013ae4:	f04f 0100 	mov.w	r1, #0
 8013ae8:	0e90      	lsrs	r0, r2, #26
 8013aea:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8013aee:	0e99      	lsrs	r1, r3, #26
 8013af0:	4603      	mov	r3, r0
 8013af2:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 8013af6:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8013afa:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013afe:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 8013b02:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013b06:	2200      	movs	r2, #0
 8013b08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013b0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8013b0c:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8013b10:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013b12:	1851      	adds	r1, r2, r1
 8013b14:	60b9      	str	r1, [r7, #8]
 8013b16:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013b18:	414b      	adcs	r3, r1
 8013b1a:	60fb      	str	r3, [r7, #12]
 8013b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013b20:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 8013b24:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8013b28:	f04f 0000 	mov.w	r0, #0
 8013b2c:	f04f 0100 	mov.w	r1, #0
 8013b30:	0e90      	lsrs	r0, r2, #26
 8013b32:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8013b36:	0e99      	lsrs	r1, r3, #26
 8013b38:	4603      	mov	r3, r0
 8013b3a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 8013b3e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8013b42:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013b46:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 8013b4a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013b4e:	2200      	movs	r2, #0
 8013b50:	673b      	str	r3, [r7, #112]	@ 0x70
 8013b52:	677a      	str	r2, [r7, #116]	@ 0x74
 8013b54:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8013b58:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8013b5a:	1851      	adds	r1, r2, r1
 8013b5c:	6039      	str	r1, [r7, #0]
 8013b5e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8013b60:	414b      	adcs	r3, r1
 8013b62:	607b      	str	r3, [r7, #4]
 8013b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b68:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 8013b6c:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8013b70:	f04f 0000 	mov.w	r0, #0
 8013b74:	f04f 0100 	mov.w	r1, #0
 8013b78:	0e90      	lsrs	r0, r2, #26
 8013b7a:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8013b7e:	0e99      	lsrs	r1, r3, #26
 8013b80:	4603      	mov	r3, r0
 8013b82:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 8013b86:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8013b8a:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013b8e:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 8013b92:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8013b96:	4613      	mov	r3, r2
 8013b98:	009b      	lsls	r3, r3, #2
 8013b9a:	441a      	add	r2, r3
 8013b9c:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013ba0:	4413      	add	r3, r2
 8013ba2:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 8013ba6:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013baa:	0e9b      	lsrs	r3, r3, #26
 8013bac:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 8013bb0:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013bb4:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013bb8:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 8013bbc:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8013bc0:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013bc4:	4413      	add	r3, r2
 8013bc6:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 8013bca:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8013bce:	3310      	adds	r3, #16
 8013bd0:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 8013bd4:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8013bd8:	3b10      	subs	r3, #16
 8013bda:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 8013bde:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8013be2:	2b0f      	cmp	r3, #15
 8013be4:	f63f a983 	bhi.w	8012eee <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 8013be8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013bec:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8013bf0:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 8013bf2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013bf6:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8013bfa:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 8013bfc:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013c00:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 8013c04:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 8013c06:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013c0a:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 8013c0e:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 8013c10:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8013c14:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8013c18:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8013c1a:	bf00      	nop
 8013c1c:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 8013c20:	46bd      	mov	sp, r7
 8013c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013c26 <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 8013c26:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013c2a:	b0aa      	sub	sp, #168	@ 0xa8
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6678      	str	r0, [r7, #100]	@ 0x64
 8013c30:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 8013c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013c34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 8013c38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d030      	beq.n	8013ca4 <poly1305_finish+0x7e>
    size_t i = st->leftover;
 8013c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 8013c4c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8013c50:	1c53      	adds	r3, r2, #1
 8013c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c5a:	441a      	add	r2, r3
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 8013c62:	e00d      	b.n	8013c80 <poly1305_finish+0x5a>
 8013c64:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8013c68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013c6c:	4413      	add	r3, r2
 8013c6e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8013c72:	2300      	movs	r3, #0
 8013c74:	7013      	strb	r3, [r2, #0]
 8013c76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013c80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013c84:	2b0f      	cmp	r3, #15
 8013c86:	d9ed      	bls.n	8013c64 <poly1305_finish+0x3e>
    st->final = 1;
 8013c88:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 8013c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c96:	333c      	adds	r3, #60	@ 0x3c
 8013c98:	2210      	movs	r2, #16
 8013c9a:	4619      	mov	r1, r3
 8013c9c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8013ca0:	f7ff f8be 	bl	8012e20 <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 8013ca4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013ca8:	695b      	ldr	r3, [r3, #20]
 8013caa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 8013cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cb2:	699b      	ldr	r3, [r3, #24]
 8013cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 8013cb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cbc:	69db      	ldr	r3, [r3, #28]
 8013cbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 8013cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cc6:	6a1b      	ldr	r3, [r3, #32]
 8013cc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 8013ccc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 8013cd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013cda:	0e9b      	lsrs	r3, r3, #26
 8013cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 8013ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013ce4:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 8013cec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013cf4:	4413      	add	r3, r2
 8013cf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 8013cfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013cfe:	0e9b      	lsrs	r3, r3, #26
 8013d00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 8013d04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013d08:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013d0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 8013d10:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013d18:	4413      	add	r3, r2
 8013d1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 8013d1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d22:	0e9b      	lsrs	r3, r3, #26
 8013d24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 8013d28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d2c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013d30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 8013d34:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013d38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013d3c:	4413      	add	r3, r2
 8013d3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 8013d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013d46:	0e9b      	lsrs	r3, r3, #26
 8013d48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 8013d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013d50:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013d54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 8013d58:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013d5c:	4613      	mov	r3, r2
 8013d5e:	009b      	lsls	r3, r3, #2
 8013d60:	441a      	add	r2, r3
 8013d62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013d66:	4413      	add	r3, r2
 8013d68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 8013d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013d70:	0e9b      	lsrs	r3, r3, #26
 8013d72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 8013d76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013d7a:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013d7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 8013d82:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013d8a:	4413      	add	r3, r2
 8013d8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 8013d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013d94:	3305      	adds	r3, #5
 8013d96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 8013d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013d9e:	0e9b      	lsrs	r3, r3, #26
 8013da0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 8013da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013da8:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013dac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 8013db0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013db8:	4413      	add	r3, r2
 8013dba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 8013dbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013dc2:	0e9b      	lsrs	r3, r3, #26
 8013dc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 8013dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013dcc:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013dd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 8013dd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013ddc:	4413      	add	r3, r2
 8013dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 8013de0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013de2:	0e9b      	lsrs	r3, r3, #26
 8013de4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 8013de8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013dea:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 8013df0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013df8:	4413      	add	r3, r2
 8013dfa:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 8013dfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013dfe:	0e9b      	lsrs	r3, r3, #26
 8013e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 8013e04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e06:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8013e0a:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 8013e0c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013e14:	4413      	add	r3, r2
 8013e16:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 8013e1a:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 8013e1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013e1e:	0fdb      	lsrs	r3, r3, #31
 8013e20:	3b01      	subs	r3, #1
 8013e22:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 8013e24:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013e28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e2a:	4013      	ands	r3, r2
 8013e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 8013e30:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013e34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e36:	4013      	ands	r3, r2
 8013e38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 8013e3c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013e3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e40:	4013      	ands	r3, r2
 8013e42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 8013e44:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e48:	4013      	ands	r3, r2
 8013e4a:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 8013e4c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8013e4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e50:	4013      	ands	r3, r2
 8013e52:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 8013e54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e56:	43db      	mvns	r3, r3
 8013e58:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 8013e5a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8013e5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e60:	401a      	ands	r2, r3
 8013e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013e66:	4313      	orrs	r3, r2
 8013e68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 8013e6c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013e70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e72:	401a      	ands	r2, r3
 8013e74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013e78:	4313      	orrs	r3, r2
 8013e7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 8013e7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e84:	401a      	ands	r2, r3
 8013e86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013e88:	4313      	orrs	r3, r2
 8013e8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 8013e8e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013e92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e94:	401a      	ands	r2, r3
 8013e96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e98:	4313      	orrs	r3, r2
 8013e9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 8013e9e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013ea4:	401a      	ands	r2, r3
 8013ea6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013ea8:	4313      	orrs	r3, r2
 8013eaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 8013eae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013eb2:	069a      	lsls	r2, r3, #26
 8013eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013eb8:	4313      	orrs	r3, r2
 8013eba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 8013ebe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013ec2:	099a      	lsrs	r2, r3, #6
 8013ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013ec8:	051b      	lsls	r3, r3, #20
 8013eca:	4313      	orrs	r3, r2
 8013ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 8013ed0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013ed4:	0b1a      	lsrs	r2, r3, #12
 8013ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013eda:	039b      	lsls	r3, r3, #14
 8013edc:	4313      	orrs	r3, r2
 8013ede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 8013ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013ee6:	0c9a      	lsrs	r2, r3, #18
 8013ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013eec:	021b      	lsls	r3, r3, #8
 8013eee:	4313      	orrs	r3, r2
 8013ef0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 8013ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013ef8:	2200      	movs	r2, #0
 8013efa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013efc:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8013efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f04:	2200      	movs	r2, #0
 8013f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013f08:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8013f0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f0c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8013f10:	4602      	mov	r2, r0
 8013f12:	189b      	adds	r3, r3, r2
 8013f14:	61bb      	str	r3, [r7, #24]
 8013f16:	460b      	mov	r3, r1
 8013f18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013f1a:	eb42 0303 	adc.w	r3, r2, r3
 8013f1e:	61fb      	str	r3, [r7, #28]
 8013f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013f24:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 8013f28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 8013f2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013f32:	2200      	movs	r2, #0
 8013f34:	653b      	str	r3, [r7, #80]	@ 0x50
 8013f36:	657a      	str	r2, [r7, #84]	@ 0x54
 8013f38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f3e:	2200      	movs	r2, #0
 8013f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8013f42:	647a      	str	r2, [r7, #68]	@ 0x44
 8013f44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f46:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8013f4a:	4602      	mov	r2, r0
 8013f4c:	189c      	adds	r4, r3, r2
 8013f4e:	460b      	mov	r3, r1
 8013f50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f52:	eb42 0303 	adc.w	r3, r2, r3
 8013f56:	461d      	mov	r5, r3
 8013f58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8013f5c:	f04f 0000 	mov.w	r0, #0
 8013f60:	f04f 0100 	mov.w	r1, #0
 8013f64:	0018      	movs	r0, r3
 8013f66:	2100      	movs	r1, #0
 8013f68:	1823      	adds	r3, r4, r0
 8013f6a:	613b      	str	r3, [r7, #16]
 8013f6c:	eb45 0301 	adc.w	r3, r5, r1
 8013f70:	617b      	str	r3, [r7, #20]
 8013f72:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013f76:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 8013f7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 8013f80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013f84:	2200      	movs	r2, #0
 8013f86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013f88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8013f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f90:	2200      	movs	r2, #0
 8013f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8013f94:	637a      	str	r2, [r7, #52]	@ 0x34
 8013f96:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8013f9a:	4623      	mov	r3, r4
 8013f9c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8013fa0:	4602      	mov	r2, r0
 8013fa2:	eb13 0a02 	adds.w	sl, r3, r2
 8013fa6:	462b      	mov	r3, r5
 8013fa8:	460a      	mov	r2, r1
 8013faa:	eb43 0b02 	adc.w	fp, r3, r2
 8013fae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8013fb2:	f04f 0200 	mov.w	r2, #0
 8013fb6:	f04f 0300 	mov.w	r3, #0
 8013fba:	000a      	movs	r2, r1
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	eb1a 0102 	adds.w	r1, sl, r2
 8013fc2:	60b9      	str	r1, [r7, #8]
 8013fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8013fc8:	60fb      	str	r3, [r7, #12]
 8013fca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013fce:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 8013fd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013fd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 8013fd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013fdc:	2200      	movs	r2, #0
 8013fde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013fe0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013fe8:	2200      	movs	r2, #0
 8013fea:	623b      	str	r3, [r7, #32]
 8013fec:	627a      	str	r2, [r7, #36]	@ 0x24
 8013fee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8013ff2:	4623      	mov	r3, r4
 8013ff4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8013ff8:	4602      	mov	r2, r0
 8013ffa:	eb13 0802 	adds.w	r8, r3, r2
 8013ffe:	462b      	mov	r3, r5
 8014000:	460a      	mov	r2, r1
 8014002:	eb43 0902 	adc.w	r9, r3, r2
 8014006:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801400a:	f04f 0200 	mov.w	r2, #0
 801400e:	f04f 0300 	mov.w	r3, #0
 8014012:	000a      	movs	r2, r1
 8014014:	2300      	movs	r3, #0
 8014016:	eb18 0102 	adds.w	r1, r8, r2
 801401a:	6039      	str	r1, [r7, #0]
 801401c:	eb49 0303 	adc.w	r3, r9, r3
 8014020:	607b      	str	r3, [r7, #4]
 8014022:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014026:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 801402a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801402c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 8014030:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8014034:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8014036:	f7fe fe56 	bl	8012ce6 <U32TO8>
  U32TO8(mac + 4, h1);
 801403a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801403c:	3304      	adds	r3, #4
 801403e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8014042:	4618      	mov	r0, r3
 8014044:	f7fe fe4f 	bl	8012ce6 <U32TO8>
  U32TO8(mac + 8, h2);
 8014048:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801404a:	3308      	adds	r3, #8
 801404c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8014050:	4618      	mov	r0, r3
 8014052:	f7fe fe48 	bl	8012ce6 <U32TO8>
  U32TO8(mac + 12, h3);
 8014056:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014058:	330c      	adds	r3, #12
 801405a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801405e:	4618      	mov	r0, r3
 8014060:	f7fe fe41 	bl	8012ce6 <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 8014064:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014068:	2200      	movs	r2, #0
 801406a:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801406c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014070:	2200      	movs	r2, #0
 8014072:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 8014074:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014078:	2200      	movs	r2, #0
 801407a:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801407c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014080:	2200      	movs	r2, #0
 8014082:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 8014084:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014088:	2200      	movs	r2, #0
 801408a:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 801408c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014090:	2200      	movs	r2, #0
 8014092:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 8014094:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014098:	2200      	movs	r2, #0
 801409a:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 801409c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140a0:	2200      	movs	r2, #0
 80140a2:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 80140a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140a8:	2200      	movs	r2, #0
 80140aa:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 80140ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140b0:	2200      	movs	r2, #0
 80140b2:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 80140b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140b8:	2200      	movs	r2, #0
 80140ba:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 80140bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140c0:	2200      	movs	r2, #0
 80140c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 80140c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140c8:	2200      	movs	r2, #0
 80140ca:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 80140cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140d0:	2200      	movs	r2, #0
 80140d2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80140d4:	bf00      	nop
 80140d6:	37a8      	adds	r7, #168	@ 0xa8
 80140d8:	46bd      	mov	sp, r7
 80140da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080140de <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 80140de:	b580      	push	{r7, lr}
 80140e0:	b088      	sub	sp, #32
 80140e2:	af00      	add	r7, sp, #0
 80140e4:	60f8      	str	r0, [r7, #12]
 80140e6:	60b9      	str	r1, [r7, #8]
 80140e8:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 80140ee:	697b      	ldr	r3, [r7, #20]
 80140f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d03d      	beq.n	8014172 <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140fa:	f1c3 0310 	rsb	r3, r3, #16
 80140fe:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 8014100:	69ba      	ldr	r2, [r7, #24]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	429a      	cmp	r2, r3
 8014106:	d901      	bls.n	801410c <poly1305_update+0x2e>
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 801410c:	2300      	movs	r3, #0
 801410e:	61fb      	str	r3, [r7, #28]
 8014110:	e00f      	b.n	8014132 <poly1305_update+0x54>
 8014112:	68ba      	ldr	r2, [r7, #8]
 8014114:	69fb      	ldr	r3, [r7, #28]
 8014116:	441a      	add	r2, r3
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801411c:	69fb      	ldr	r3, [r7, #28]
 801411e:	440b      	add	r3, r1
 8014120:	7811      	ldrb	r1, [r2, #0]
 8014122:	697a      	ldr	r2, [r7, #20]
 8014124:	4413      	add	r3, r2
 8014126:	460a      	mov	r2, r1
 8014128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801412c:	69fb      	ldr	r3, [r7, #28]
 801412e:	3301      	adds	r3, #1
 8014130:	61fb      	str	r3, [r7, #28]
 8014132:	69fa      	ldr	r2, [r7, #28]
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	429a      	cmp	r2, r3
 8014138:	d3eb      	bcc.n	8014112 <poly1305_update+0x34>
    bytes -= want;
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	69bb      	ldr	r3, [r7, #24]
 801413e:	1ad3      	subs	r3, r2, r3
 8014140:	607b      	str	r3, [r7, #4]
    m += want;
 8014142:	68ba      	ldr	r2, [r7, #8]
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	4413      	add	r3, r2
 8014148:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 801414a:	697b      	ldr	r3, [r7, #20]
 801414c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801414e:	69bb      	ldr	r3, [r7, #24]
 8014150:	441a      	add	r2, r3
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 8014156:	697b      	ldr	r3, [r7, #20]
 8014158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801415a:	2b0f      	cmp	r3, #15
 801415c:	d93e      	bls.n	80141dc <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	333c      	adds	r3, #60	@ 0x3c
 8014162:	2210      	movs	r2, #16
 8014164:	4619      	mov	r1, r3
 8014166:	6978      	ldr	r0, [r7, #20]
 8014168:	f7fe fe5a 	bl	8012e20 <poly1305_blocks>
    st->leftover = 0;
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	2200      	movs	r2, #0
 8014170:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2b0f      	cmp	r3, #15
 8014176:	d910      	bls.n	801419a <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	f023 030f 	bic.w	r3, r3, #15
 801417e:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 8014180:	693a      	ldr	r2, [r7, #16]
 8014182:	68b9      	ldr	r1, [r7, #8]
 8014184:	6978      	ldr	r0, [r7, #20]
 8014186:	f7fe fe4b 	bl	8012e20 <poly1305_blocks>
    m += want;
 801418a:	68ba      	ldr	r2, [r7, #8]
 801418c:	693b      	ldr	r3, [r7, #16]
 801418e:	4413      	add	r3, r2
 8014190:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 8014192:	687a      	ldr	r2, [r7, #4]
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	1ad3      	subs	r3, r2, r3
 8014198:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d01e      	beq.n	80141de <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 80141a0:	2300      	movs	r3, #0
 80141a2:	61fb      	str	r3, [r7, #28]
 80141a4:	e00f      	b.n	80141c6 <poly1305_update+0xe8>
 80141a6:	68ba      	ldr	r2, [r7, #8]
 80141a8:	69fb      	ldr	r3, [r7, #28]
 80141aa:	441a      	add	r2, r3
 80141ac:	697b      	ldr	r3, [r7, #20]
 80141ae:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80141b0:	69fb      	ldr	r3, [r7, #28]
 80141b2:	440b      	add	r3, r1
 80141b4:	7811      	ldrb	r1, [r2, #0]
 80141b6:	697a      	ldr	r2, [r7, #20]
 80141b8:	4413      	add	r3, r2
 80141ba:	460a      	mov	r2, r1
 80141bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80141c0:	69fb      	ldr	r3, [r7, #28]
 80141c2:	3301      	adds	r3, #1
 80141c4:	61fb      	str	r3, [r7, #28]
 80141c6:	69fa      	ldr	r2, [r7, #28]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d3eb      	bcc.n	80141a6 <poly1305_update+0xc8>
    st->leftover += bytes;
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	441a      	add	r2, r3
 80141d6:	697b      	ldr	r3, [r7, #20]
 80141d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80141da:	e000      	b.n	80141de <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 80141dc:	bf00      	nop
  }
}
 80141de:	3720      	adds	r7, #32
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}

080141e4 <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b084      	sub	sp, #16
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
 80141ec:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	f003 030f 	and.w	r3, r3, #15
 80141f4:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d007      	beq.n	801420c <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	f1c3 0310 	rsb	r3, r3, #16
 8014202:	461a      	mov	r2, r3
 8014204:	4903      	ldr	r1, [pc, #12]	@ (8014214 <pad_if_needed+0x30>)
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	f7ff ff69 	bl	80140de <poly1305_update>
  }
}
 801420c:	bf00      	nop
 801420e:	3710      	adds	r7, #16
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}
 8014214:	24000dc0 	.word	0x24000dc0

08014218 <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 8014218:	b580      	push	{r7, lr}
 801421a:	b086      	sub	sp, #24
 801421c:	af00      	add	r7, sp, #0
 801421e:	60f8      	str	r0, [r7, #12]
 8014220:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 8014224:	783b      	ldrb	r3, [r7, #0]
 8014226:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 8014228:	e9d7 0100 	ldrd	r0, r1, [r7]
 801422c:	f04f 0200 	mov.w	r2, #0
 8014230:	f04f 0300 	mov.w	r3, #0
 8014234:	0a02      	lsrs	r2, r0, #8
 8014236:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801423a:	0a0b      	lsrs	r3, r1, #8
 801423c:	b2d3      	uxtb	r3, r2
 801423e:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 8014240:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014244:	f04f 0200 	mov.w	r2, #0
 8014248:	f04f 0300 	mov.w	r3, #0
 801424c:	0c02      	lsrs	r2, r0, #16
 801424e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8014252:	0c0b      	lsrs	r3, r1, #16
 8014254:	b2d3      	uxtb	r3, r2
 8014256:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 8014258:	e9d7 0100 	ldrd	r0, r1, [r7]
 801425c:	f04f 0200 	mov.w	r2, #0
 8014260:	f04f 0300 	mov.w	r3, #0
 8014264:	0e02      	lsrs	r2, r0, #24
 8014266:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801426a:	0e0b      	lsrs	r3, r1, #24
 801426c:	b2d3      	uxtb	r3, r2
 801426e:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 8014270:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014274:	f04f 0200 	mov.w	r2, #0
 8014278:	f04f 0300 	mov.w	r3, #0
 801427c:	000a      	movs	r2, r1
 801427e:	2300      	movs	r3, #0
 8014280:	b2d3      	uxtb	r3, r2
 8014282:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 8014284:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014288:	f04f 0200 	mov.w	r2, #0
 801428c:	f04f 0300 	mov.w	r3, #0
 8014290:	0a0a      	lsrs	r2, r1, #8
 8014292:	2300      	movs	r3, #0
 8014294:	b2d3      	uxtb	r3, r2
 8014296:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 8014298:	e9d7 0100 	ldrd	r0, r1, [r7]
 801429c:	f04f 0200 	mov.w	r2, #0
 80142a0:	f04f 0300 	mov.w	r3, #0
 80142a4:	0c0a      	lsrs	r2, r1, #16
 80142a6:	2300      	movs	r3, #0
 80142a8:	b2d3      	uxtb	r3, r2
 80142aa:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 80142ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80142b0:	f04f 0200 	mov.w	r2, #0
 80142b4:	f04f 0300 	mov.w	r3, #0
 80142b8:	0e0a      	lsrs	r2, r1, #24
 80142ba:	2300      	movs	r3, #0
 80142bc:	b2d3      	uxtb	r3, r2
 80142be:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 80142c0:	f107 0310 	add.w	r3, r7, #16
 80142c4:	2208      	movs	r2, #8
 80142c6:	4619      	mov	r1, r3
 80142c8:	68f8      	ldr	r0, [r7, #12]
 80142ca:	f7ff ff08 	bl	80140de <poly1305_update>
}
 80142ce:	bf00      	nop
 80142d0:	3718      	adds	r7, #24
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}

080142d6 <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 80142d6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80142da:	b0b0      	sub	sp, #192	@ 0xc0
 80142dc:	af00      	add	r7, sp, #0
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
 80142e4:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 80142e6:	2300      	movs	r3, #0
 80142e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80142ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80142f0:	2200      	movs	r2, #0
 80142f2:	601a      	str	r2, [r3, #0]
 80142f4:	605a      	str	r2, [r3, #4]
 80142f6:	609a      	str	r2, [r3, #8]
 80142f8:	60da      	str	r2, [r3, #12]
 80142fa:	611a      	str	r2, [r3, #16]
 80142fc:	615a      	str	r2, [r3, #20]
 80142fe:	619a      	str	r2, [r3, #24]
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 8014300:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8014304:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8014308:	6839      	ldr	r1, [r7, #0]
 801430a:	4618      	mov	r0, r3
 801430c:	f7fe fcaf 	bl	8012c6e <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 8014310:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8014314:	f107 0314 	add.w	r3, r7, #20
 8014318:	4611      	mov	r1, r2
 801431a:	4618      	mov	r0, r3
 801431c:	f7fe fd04 	bl	8012d28 <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 8014320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014324:	2b00      	cmp	r3, #0
 8014326:	d013      	beq.n	8014350 <poly1305_calculate_mac+0x7a>
 8014328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801432c:	2b00      	cmp	r3, #0
 801432e:	d00f      	beq.n	8014350 <poly1305_calculate_mac+0x7a>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 8014330:	f107 0314 	add.w	r3, r7, #20
 8014334:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8014338:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 801433c:	4618      	mov	r0, r3
 801433e:	f7ff fece 	bl	80140de <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 8014342:	f107 0314 	add.w	r3, r7, #20
 8014346:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 801434a:	4618      	mov	r0, r3
 801434c:	f7ff ff4a 	bl	80141e4 <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 8014350:	f107 0314 	add.w	r3, r7, #20
 8014354:	687a      	ldr	r2, [r7, #4]
 8014356:	68b9      	ldr	r1, [r7, #8]
 8014358:	4618      	mov	r0, r3
 801435a:	f7ff fec0 	bl	80140de <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 801435e:	f107 0314 	add.w	r3, r7, #20
 8014362:	6879      	ldr	r1, [r7, #4]
 8014364:	4618      	mov	r0, r3
 8014366:	f7ff ff3d 	bl	80141e4 <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 801436a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801436e:	2200      	movs	r2, #0
 8014370:	4698      	mov	r8, r3
 8014372:	4691      	mov	r9, r2
 8014374:	f107 0114 	add.w	r1, r7, #20
 8014378:	4642      	mov	r2, r8
 801437a:	464b      	mov	r3, r9
 801437c:	4608      	mov	r0, r1
 801437e:	f7ff ff4b 	bl	8014218 <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	2200      	movs	r2, #0
 8014386:	461c      	mov	r4, r3
 8014388:	4615      	mov	r5, r2
 801438a:	f107 0114 	add.w	r1, r7, #20
 801438e:	4622      	mov	r2, r4
 8014390:	462b      	mov	r3, r5
 8014392:	4608      	mov	r0, r1
 8014394:	f7ff ff40 	bl	8014218 <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 8014398:	f107 0314 	add.w	r3, r7, #20
 801439c:	68f9      	ldr	r1, [r7, #12]
 801439e:	4618      	mov	r0, r3
 80143a0:	f7ff fc41 	bl	8013c26 <poly1305_finish>
}
 80143a4:	bf00      	nop
 80143a6:	37c0      	adds	r7, #192	@ 0xc0
 80143a8:	46bd      	mov	sp, r7
 80143aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080143ae <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 80143ae:	b580      	push	{r7, lr}
 80143b0:	b08a      	sub	sp, #40	@ 0x28
 80143b2:	af04      	add	r7, sp, #16
 80143b4:	60f8      	str	r0, [r7, #12]
 80143b6:	60b9      	str	r1, [r7, #8]
 80143b8:	607a      	str	r2, [r7, #4]
 80143ba:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 80143bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143be:	3310      	adds	r3, #16
 80143c0:	617b      	str	r3, [r7, #20]
  if (OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 80143c2:	68fa      	ldr	r2, [r7, #12]
 80143c4:	697b      	ldr	r3, [r7, #20]
 80143c6:	4413      	add	r3, r2
 80143c8:	461a      	mov	r2, r3
 80143ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d909      	bls.n	80143e4 <mg_chacha20_poly1305_encrypt+0x36>
 80143d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80143d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143d4:	4413      	add	r3, r2
 80143d6:	461a      	mov	r2, r3
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	429a      	cmp	r2, r3
 80143dc:	d902      	bls.n	80143e4 <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 80143de:	f04f 33ff 	mov.w	r3, #4294967295
 80143e2:	e018      	b.n	8014416 <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 80143e4:	2301      	movs	r3, #1
 80143e6:	9301      	str	r3, [sp, #4]
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	9300      	str	r3, [sp, #0]
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80143f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80143f2:	68f8      	ldr	r0, [r7, #12]
 80143f4:	f7fe fbc3 	bl	8012b7e <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 80143f8:	68fa      	ldr	r2, [r7, #12]
 80143fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143fc:	18d0      	adds	r0, r2, r3
 80143fe:	6a3b      	ldr	r3, [r7, #32]
 8014400:	9302      	str	r3, [sp, #8]
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	9301      	str	r3, [sp, #4]
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	9300      	str	r3, [sp, #0]
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801440e:	68f9      	ldr	r1, [r7, #12]
 8014410:	f7ff ff61 	bl	80142d6 <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 8014414:	697b      	ldr	r3, [r7, #20]
}
 8014416:	4618      	mov	r0, r3
 8014418:	3718      	adds	r7, #24
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}

0801441e <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 801441e:	b580      	push	{r7, lr}
 8014420:	b088      	sub	sp, #32
 8014422:	af02      	add	r7, sp, #8
 8014424:	60f8      	str	r0, [r7, #12]
 8014426:	60b9      	str	r1, [r7, #8]
 8014428:	607a      	str	r2, [r7, #4]
 801442a:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 801442c:	6a3b      	ldr	r3, [r7, #32]
 801442e:	3b10      	subs	r3, #16
 8014430:	617b      	str	r3, [r7, #20]
  if (OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 8014432:	683a      	ldr	r2, [r7, #0]
 8014434:	6a3b      	ldr	r3, [r7, #32]
 8014436:	4413      	add	r3, r2
 8014438:	461a      	mov	r2, r3
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	429a      	cmp	r2, r3
 801443e:	d909      	bls.n	8014454 <mg_chacha20_poly1305_decrypt+0x36>
 8014440:	68fa      	ldr	r2, [r7, #12]
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	4413      	add	r3, r2
 8014446:	461a      	mov	r2, r3
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	429a      	cmp	r2, r3
 801444c:	d902      	bls.n	8014454 <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 801444e:	f04f 33ff 	mov.w	r3, #4294967295
 8014452:	e00a      	b.n	801446a <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 8014454:	2301      	movs	r3, #1
 8014456:	9301      	str	r3, [sp, #4]
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	9300      	str	r3, [sp, #0]
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	697a      	ldr	r2, [r7, #20]
 8014460:	6839      	ldr	r1, [r7, #0]
 8014462:	68f8      	ldr	r0, [r7, #12]
 8014464:	f7fe fb8b 	bl	8012b7e <chacha20_xor_stream>
  return actual_size;
 8014468:	697b      	ldr	r3, [r7, #20]
}
 801446a:	4618      	mov	r0, r3
 801446c:	3718      	adds	r7, #24
 801446e:	46bd      	mov	sp, r7
 8014470:	bd80      	pop	{r7, pc}

08014472 <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 8014472:	b480      	push	{r7}
 8014474:	b085      	sub	sp, #20
 8014476:	af00      	add	r7, sp, #0
 8014478:	6078      	str	r0, [r7, #4]
 801447a:	460b      	mov	r3, r1
 801447c:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801447e:	2300      	movs	r3, #0
 8014480:	73fb      	strb	r3, [r7, #15]
 8014482:	e00a      	b.n	801449a <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 8014484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014488:	009b      	lsls	r3, r3, #2
 801448a:	687a      	ldr	r2, [r7, #4]
 801448c:	4413      	add	r3, r2
 801448e:	2200      	movs	r2, #0
 8014490:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 8014492:	7bfb      	ldrb	r3, [r7, #15]
 8014494:	3301      	adds	r3, #1
 8014496:	b2db      	uxtb	r3, r3
 8014498:	73fb      	strb	r3, [r7, #15]
 801449a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801449e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80144a2:	429a      	cmp	r2, r3
 80144a4:	dbee      	blt.n	8014484 <mg_uecc_vli_clear+0x12>
  }
}
 80144a6:	bf00      	nop
 80144a8:	bf00      	nop
 80144aa:	3714      	adds	r7, #20
 80144ac:	46bd      	mov	sp, r7
 80144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b2:	4770      	bx	lr

080144b4 <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 80144b4:	b480      	push	{r7}
 80144b6:	b085      	sub	sp, #20
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	460b      	mov	r3, r1
 80144be:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 80144c0:	2300      	movs	r3, #0
 80144c2:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 80144c4:	2300      	movs	r3, #0
 80144c6:	72fb      	strb	r3, [r7, #11]
 80144c8:	e00c      	b.n	80144e4 <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 80144ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	687a      	ldr	r2, [r7, #4]
 80144d2:	4413      	add	r3, r2
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	68fa      	ldr	r2, [r7, #12]
 80144d8:	4313      	orrs	r3, r2
 80144da:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 80144dc:	7afb      	ldrb	r3, [r7, #11]
 80144de:	3301      	adds	r3, #1
 80144e0:	b2db      	uxtb	r3, r3
 80144e2:	72fb      	strb	r3, [r7, #11]
 80144e4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80144e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80144ec:	429a      	cmp	r2, r3
 80144ee:	dbec      	blt.n	80144ca <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	bf0c      	ite	eq
 80144f6:	2301      	moveq	r3, #1
 80144f8:	2300      	movne	r3, #0
 80144fa:	b2db      	uxtb	r3, r3
}
 80144fc:	4618      	mov	r0, r3
 80144fe:	3714      	adds	r7, #20
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr

08014508 <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 8014508:	b480      	push	{r7}
 801450a:	b083      	sub	sp, #12
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
 8014510:	460b      	mov	r3, r1
 8014512:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 8014514:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014518:	115b      	asrs	r3, r3, #5
 801451a:	b21b      	sxth	r3, r3
 801451c:	009b      	lsls	r3, r3, #2
 801451e:	687a      	ldr	r2, [r7, #4]
 8014520:	4413      	add	r3, r2
 8014522:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 8014524:	887b      	ldrh	r3, [r7, #2]
 8014526:	f003 031f 	and.w	r3, r3, #31
 801452a:	2101      	movs	r1, #1
 801452c:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 8014530:	4013      	ands	r3, r2
}
 8014532:	4618      	mov	r0, r3
 8014534:	370c      	adds	r7, #12
 8014536:	46bd      	mov	sp, r7
 8014538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453c:	4770      	bx	lr

0801453e <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 801453e:	b480      	push	{r7}
 8014540:	b085      	sub	sp, #20
 8014542:	af00      	add	r7, sp, #0
 8014544:	6078      	str	r0, [r7, #4]
 8014546:	460b      	mov	r3, r1
 8014548:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 801454a:	78fb      	ldrb	r3, [r7, #3]
 801454c:	3b01      	subs	r3, #1
 801454e:	b2db      	uxtb	r3, r3
 8014550:	73fb      	strb	r3, [r7, #15]
 8014552:	e003      	b.n	801455c <vli_numDigits+0x1e>
 8014554:	7bfb      	ldrb	r3, [r7, #15]
 8014556:	3b01      	subs	r3, #1
 8014558:	b2db      	uxtb	r3, r3
 801455a:	73fb      	strb	r3, [r7, #15]
 801455c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014560:	2b00      	cmp	r3, #0
 8014562:	db07      	blt.n	8014574 <vli_numDigits+0x36>
 8014564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014568:	009b      	lsls	r3, r3, #2
 801456a:	687a      	ldr	r2, [r7, #4]
 801456c:	4413      	add	r3, r2
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d0ef      	beq.n	8014554 <vli_numDigits+0x16>
  }

  return (i + 1);
 8014574:	7bfb      	ldrb	r3, [r7, #15]
 8014576:	3301      	adds	r3, #1
 8014578:	b2db      	uxtb	r3, r3
 801457a:	b25b      	sxtb	r3, r3
}
 801457c:	4618      	mov	r0, r3
 801457e:	3714      	adds	r7, #20
 8014580:	46bd      	mov	sp, r7
 8014582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014586:	4770      	bx	lr

08014588 <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 8014588:	b580      	push	{r7, lr}
 801458a:	b086      	sub	sp, #24
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	460b      	mov	r3, r1
 8014592:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 8014594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014598:	4619      	mov	r1, r3
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f7ff ffcf 	bl	801453e <vli_numDigits>
 80145a0:	4603      	mov	r3, r0
 80145a2:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 80145a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d101      	bne.n	80145b0 <mg_uecc_vli_numBits+0x28>
    return 0;
 80145ac:	2300      	movs	r3, #0
 80145ae:	e01f      	b.n	80145f0 <mg_uecc_vli_numBits+0x68>
  }

  digit = vli[num_digits - 1];
 80145b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80145b4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80145b8:	4413      	add	r3, r2
 80145ba:	009b      	lsls	r3, r3, #2
 80145bc:	687a      	ldr	r2, [r7, #4]
 80145be:	4413      	add	r3, r2
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 80145c4:	2300      	movs	r3, #0
 80145c6:	617b      	str	r3, [r7, #20]
 80145c8:	e005      	b.n	80145d6 <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 80145ca:	693b      	ldr	r3, [r7, #16]
 80145cc:	085b      	lsrs	r3, r3, #1
 80145ce:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 80145d0:	697b      	ldr	r3, [r7, #20]
 80145d2:	3301      	adds	r3, #1
 80145d4:	617b      	str	r3, [r7, #20]
 80145d6:	693b      	ldr	r3, [r7, #16]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d1f6      	bne.n	80145ca <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 80145dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145e0:	3b01      	subs	r3, #1
 80145e2:	015b      	lsls	r3, r3, #5
 80145e4:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 80145e6:	697b      	ldr	r3, [r7, #20]
 80145e8:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 80145ea:	4413      	add	r3, r2
 80145ec:	b29b      	uxth	r3, r3
 80145ee:	b21b      	sxth	r3, r3
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3718      	adds	r7, #24
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}

080145f8 <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 80145f8:	b480      	push	{r7}
 80145fa:	b087      	sub	sp, #28
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	60f8      	str	r0, [r7, #12]
 8014600:	60b9      	str	r1, [r7, #8]
 8014602:	4613      	mov	r3, r2
 8014604:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 8014606:	2300      	movs	r3, #0
 8014608:	75fb      	strb	r3, [r7, #23]
 801460a:	e00f      	b.n	801462c <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 801460c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014610:	009b      	lsls	r3, r3, #2
 8014612:	68ba      	ldr	r2, [r7, #8]
 8014614:	441a      	add	r2, r3
 8014616:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801461a:	009b      	lsls	r3, r3, #2
 801461c:	68f9      	ldr	r1, [r7, #12]
 801461e:	440b      	add	r3, r1
 8014620:	6812      	ldr	r2, [r2, #0]
 8014622:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 8014624:	7dfb      	ldrb	r3, [r7, #23]
 8014626:	3301      	adds	r3, #1
 8014628:	b2db      	uxtb	r3, r3
 801462a:	75fb      	strb	r3, [r7, #23]
 801462c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014634:	429a      	cmp	r2, r3
 8014636:	dbe9      	blt.n	801460c <mg_uecc_vli_set+0x14>
  }
}
 8014638:	bf00      	nop
 801463a:	bf00      	nop
 801463c:	371c      	adds	r7, #28
 801463e:	46bd      	mov	sp, r7
 8014640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014644:	4770      	bx	lr

08014646 <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 8014646:	b480      	push	{r7}
 8014648:	b087      	sub	sp, #28
 801464a:	af00      	add	r7, sp, #0
 801464c:	60f8      	str	r0, [r7, #12]
 801464e:	60b9      	str	r1, [r7, #8]
 8014650:	4613      	mov	r3, r2
 8014652:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 8014654:	79fb      	ldrb	r3, [r7, #7]
 8014656:	3b01      	subs	r3, #1
 8014658:	b2db      	uxtb	r3, r3
 801465a:	75fb      	strb	r3, [r7, #23]
 801465c:	e024      	b.n	80146a8 <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 801465e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014662:	009b      	lsls	r3, r3, #2
 8014664:	68fa      	ldr	r2, [r7, #12]
 8014666:	4413      	add	r3, r2
 8014668:	681a      	ldr	r2, [r3, #0]
 801466a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801466e:	009b      	lsls	r3, r3, #2
 8014670:	68b9      	ldr	r1, [r7, #8]
 8014672:	440b      	add	r3, r1
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	429a      	cmp	r2, r3
 8014678:	d901      	bls.n	801467e <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 801467a:	2301      	movs	r3, #1
 801467c:	e019      	b.n	80146b2 <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 801467e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014682:	009b      	lsls	r3, r3, #2
 8014684:	68fa      	ldr	r2, [r7, #12]
 8014686:	4413      	add	r3, r2
 8014688:	681a      	ldr	r2, [r3, #0]
 801468a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801468e:	009b      	lsls	r3, r3, #2
 8014690:	68b9      	ldr	r1, [r7, #8]
 8014692:	440b      	add	r3, r1
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	429a      	cmp	r2, r3
 8014698:	d202      	bcs.n	80146a0 <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 801469a:	f04f 33ff 	mov.w	r3, #4294967295
 801469e:	e008      	b.n	80146b2 <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 80146a0:	7dfb      	ldrb	r3, [r7, #23]
 80146a2:	3b01      	subs	r3, #1
 80146a4:	b2db      	uxtb	r3, r3
 80146a6:	75fb      	strb	r3, [r7, #23]
 80146a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	dad6      	bge.n	801465e <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 80146b0:	2300      	movs	r3, #0
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	371c      	adds	r7, #28
 80146b6:	46bd      	mov	sp, r7
 80146b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146bc:	4770      	bx	lr

080146be <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 80146be:	b480      	push	{r7}
 80146c0:	b087      	sub	sp, #28
 80146c2:	af00      	add	r7, sp, #0
 80146c4:	60f8      	str	r0, [r7, #12]
 80146c6:	60b9      	str	r1, [r7, #8]
 80146c8:	4613      	mov	r3, r2
 80146ca:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 80146cc:	2300      	movs	r3, #0
 80146ce:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 80146d0:	79fb      	ldrb	r3, [r7, #7]
 80146d2:	3b01      	subs	r3, #1
 80146d4:	b2db      	uxtb	r3, r3
 80146d6:	74fb      	strb	r3, [r7, #19]
 80146d8:	e013      	b.n	8014702 <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 80146da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80146de:	009b      	lsls	r3, r3, #2
 80146e0:	68fa      	ldr	r2, [r7, #12]
 80146e2:	4413      	add	r3, r2
 80146e4:	681a      	ldr	r2, [r3, #0]
 80146e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80146ea:	009b      	lsls	r3, r3, #2
 80146ec:	68b9      	ldr	r1, [r7, #8]
 80146ee:	440b      	add	r3, r1
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	4053      	eors	r3, r2
 80146f4:	697a      	ldr	r2, [r7, #20]
 80146f6:	4313      	orrs	r3, r2
 80146f8:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 80146fa:	7cfb      	ldrb	r3, [r7, #19]
 80146fc:	3b01      	subs	r3, #1
 80146fe:	b2db      	uxtb	r3, r3
 8014700:	74fb      	strb	r3, [r7, #19]
 8014702:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014706:	2b00      	cmp	r3, #0
 8014708:	dae7      	bge.n	80146da <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	2b00      	cmp	r3, #0
 801470e:	bf0c      	ite	eq
 8014710:	2301      	moveq	r3, #1
 8014712:	2300      	movne	r3, #0
 8014714:	b2db      	uxtb	r3, r3
}
 8014716:	4618      	mov	r0, r3
 8014718:	371c      	adds	r7, #28
 801471a:	46bd      	mov	sp, r7
 801471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014720:	4770      	bx	lr

08014722 <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 8014722:	b580      	push	{r7, lr}
 8014724:	b08e      	sub	sp, #56	@ 0x38
 8014726:	af00      	add	r7, sp, #0
 8014728:	60f8      	str	r0, [r7, #12]
 801472a:	60b9      	str	r1, [r7, #8]
 801472c:	4613      	mov	r3, r2
 801472e:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 8014730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014734:	f107 0010 	add.w	r0, r7, #16
 8014738:	68ba      	ldr	r2, [r7, #8]
 801473a:	68f9      	ldr	r1, [r7, #12]
 801473c:	f000 f896 	bl	801486c <mg_uecc_vli_sub>
 8014740:	4603      	mov	r3, r0
 8014742:	2b00      	cmp	r3, #0
 8014744:	bf14      	ite	ne
 8014746:	2301      	movne	r3, #1
 8014748:	2300      	moveq	r3, #0
 801474a:	b2db      	uxtb	r3, r3
 801474c:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 801474e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014752:	f107 0310 	add.w	r3, r7, #16
 8014756:	4611      	mov	r1, r2
 8014758:	4618      	mov	r0, r3
 801475a:	f7ff feab 	bl	80144b4 <mg_uecc_vli_isZero>
 801475e:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 8014760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014762:	2b00      	cmp	r3, #0
 8014764:	bf0c      	ite	eq
 8014766:	2301      	moveq	r3, #1
 8014768:	2300      	movne	r3, #0
 801476a:	b2db      	uxtb	r3, r3
 801476c:	461a      	mov	r2, r3
 801476e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014770:	b2db      	uxtb	r3, r3
 8014772:	005b      	lsls	r3, r3, #1
 8014774:	b2db      	uxtb	r3, r3
 8014776:	1ad3      	subs	r3, r2, r3
 8014778:	b2db      	uxtb	r3, r3
 801477a:	b25b      	sxtb	r3, r3
}
 801477c:	4618      	mov	r0, r3
 801477e:	3738      	adds	r7, #56	@ 0x38
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}

08014784 <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 8014784:	b480      	push	{r7}
 8014786:	b087      	sub	sp, #28
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
 801478c:	460b      	mov	r3, r1
 801478e:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 8014794:	2300      	movs	r3, #0
 8014796:	617b      	str	r3, [r7, #20]

  vli += num_words;
 8014798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801479c:	009b      	lsls	r3, r3, #2
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	4413      	add	r3, r2
 80147a2:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 80147a4:	e00b      	b.n	80147be <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	085a      	lsrs	r2, r3, #1
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	431a      	orrs	r2, r3
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	07db      	lsls	r3, r3, #31
 80147bc:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	1f1a      	subs	r2, r3, #4
 80147c2:	607a      	str	r2, [r7, #4]
 80147c4:	693a      	ldr	r2, [r7, #16]
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d3ed      	bcc.n	80147a6 <mg_uecc_vli_rshift1+0x22>
  }
}
 80147ca:	bf00      	nop
 80147cc:	bf00      	nop
 80147ce:	371c      	adds	r7, #28
 80147d0:	46bd      	mov	sp, r7
 80147d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d6:	4770      	bx	lr

080147d8 <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 80147d8:	b480      	push	{r7}
 80147da:	b089      	sub	sp, #36	@ 0x24
 80147dc:	af00      	add	r7, sp, #0
 80147de:	60f8      	str	r0, [r7, #12]
 80147e0:	60b9      	str	r1, [r7, #8]
 80147e2:	607a      	str	r2, [r7, #4]
 80147e4:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 80147e6:	2300      	movs	r3, #0
 80147e8:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 80147ea:	2300      	movs	r3, #0
 80147ec:	76fb      	strb	r3, [r7, #27]
 80147ee:	e030      	b.n	8014852 <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 80147f0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80147f4:	009b      	lsls	r3, r3, #2
 80147f6:	68ba      	ldr	r2, [r7, #8]
 80147f8:	4413      	add	r3, r2
 80147fa:	681a      	ldr	r2, [r3, #0]
 80147fc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014800:	009b      	lsls	r3, r3, #2
 8014802:	6879      	ldr	r1, [r7, #4]
 8014804:	440b      	add	r3, r1
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	4413      	add	r3, r2
 801480a:	69fa      	ldr	r2, [r7, #28]
 801480c:	4413      	add	r3, r2
 801480e:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 8014810:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014814:	009b      	lsls	r3, r3, #2
 8014816:	68ba      	ldr	r2, [r7, #8]
 8014818:	4413      	add	r3, r2
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	697a      	ldr	r2, [r7, #20]
 801481e:	429a      	cmp	r2, r3
 8014820:	d00c      	beq.n	801483c <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 8014822:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014826:	009b      	lsls	r3, r3, #2
 8014828:	68ba      	ldr	r2, [r7, #8]
 801482a:	4413      	add	r3, r2
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	697a      	ldr	r2, [r7, #20]
 8014830:	429a      	cmp	r2, r3
 8014832:	bf34      	ite	cc
 8014834:	2301      	movcc	r3, #1
 8014836:	2300      	movcs	r3, #0
 8014838:	b2db      	uxtb	r3, r3
 801483a:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 801483c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014840:	009b      	lsls	r3, r3, #2
 8014842:	68fa      	ldr	r2, [r7, #12]
 8014844:	4413      	add	r3, r2
 8014846:	697a      	ldr	r2, [r7, #20]
 8014848:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801484a:	7efb      	ldrb	r3, [r7, #27]
 801484c:	3301      	adds	r3, #1
 801484e:	b2db      	uxtb	r3, r3
 8014850:	76fb      	strb	r3, [r7, #27]
 8014852:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8014856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801485a:	429a      	cmp	r2, r3
 801485c:	dbc8      	blt.n	80147f0 <mg_uecc_vli_add+0x18>
  }
  return carry;
 801485e:	69fb      	ldr	r3, [r7, #28]
}
 8014860:	4618      	mov	r0, r3
 8014862:	3724      	adds	r7, #36	@ 0x24
 8014864:	46bd      	mov	sp, r7
 8014866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486a:	4770      	bx	lr

0801486c <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801486c:	b480      	push	{r7}
 801486e:	b089      	sub	sp, #36	@ 0x24
 8014870:	af00      	add	r7, sp, #0
 8014872:	60f8      	str	r0, [r7, #12]
 8014874:	60b9      	str	r1, [r7, #8]
 8014876:	607a      	str	r2, [r7, #4]
 8014878:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 801487a:	2300      	movs	r3, #0
 801487c:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801487e:	2300      	movs	r3, #0
 8014880:	76fb      	strb	r3, [r7, #27]
 8014882:	e030      	b.n	80148e6 <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 8014884:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014888:	009b      	lsls	r3, r3, #2
 801488a:	68ba      	ldr	r2, [r7, #8]
 801488c:	4413      	add	r3, r2
 801488e:	681a      	ldr	r2, [r3, #0]
 8014890:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014894:	009b      	lsls	r3, r3, #2
 8014896:	6879      	ldr	r1, [r7, #4]
 8014898:	440b      	add	r3, r1
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	1ad2      	subs	r2, r2, r3
 801489e:	69fb      	ldr	r3, [r7, #28]
 80148a0:	1ad3      	subs	r3, r2, r3
 80148a2:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 80148a4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80148a8:	009b      	lsls	r3, r3, #2
 80148aa:	68ba      	ldr	r2, [r7, #8]
 80148ac:	4413      	add	r3, r2
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	697a      	ldr	r2, [r7, #20]
 80148b2:	429a      	cmp	r2, r3
 80148b4:	d00c      	beq.n	80148d0 <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 80148b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80148ba:	009b      	lsls	r3, r3, #2
 80148bc:	68ba      	ldr	r2, [r7, #8]
 80148be:	4413      	add	r3, r2
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	697a      	ldr	r2, [r7, #20]
 80148c4:	429a      	cmp	r2, r3
 80148c6:	bf8c      	ite	hi
 80148c8:	2301      	movhi	r3, #1
 80148ca:	2300      	movls	r3, #0
 80148cc:	b2db      	uxtb	r3, r3
 80148ce:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 80148d0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80148d4:	009b      	lsls	r3, r3, #2
 80148d6:	68fa      	ldr	r2, [r7, #12]
 80148d8:	4413      	add	r3, r2
 80148da:	697a      	ldr	r2, [r7, #20]
 80148dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 80148de:	7efb      	ldrb	r3, [r7, #27]
 80148e0:	3301      	adds	r3, #1
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	76fb      	strb	r3, [r7, #27]
 80148e6:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80148ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80148ee:	429a      	cmp	r2, r3
 80148f0:	dbc8      	blt.n	8014884 <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 80148f2:	69fb      	ldr	r3, [r7, #28]
}
 80148f4:	4618      	mov	r0, r3
 80148f6:	3724      	adds	r7, #36	@ 0x24
 80148f8:	46bd      	mov	sp, r7
 80148fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fe:	4770      	bx	lr

08014900 <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 8014900:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8014904:	b091      	sub	sp, #68	@ 0x44
 8014906:	af00      	add	r7, sp, #0
 8014908:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801490a:	62b9      	str	r1, [r7, #40]	@ 0x28
 801490c:	627a      	str	r2, [r7, #36]	@ 0x24
 801490e:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 8014910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014912:	2200      	movs	r2, #0
 8014914:	4698      	mov	r8, r3
 8014916:	4691      	mov	r9, r2
 8014918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801491a:	2200      	movs	r2, #0
 801491c:	469a      	mov	sl, r3
 801491e:	4693      	mov	fp, r2
 8014920:	fb0a f209 	mul.w	r2, sl, r9
 8014924:	fb08 f30b 	mul.w	r3, r8, fp
 8014928:	4413      	add	r3, r2
 801492a:	fba8 450a 	umull	r4, r5, r8, sl
 801492e:	442b      	add	r3, r5
 8014930:	461d      	mov	r5, r3
 8014932:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 8014936:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 801493a:	6a3b      	ldr	r3, [r7, #32]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	2200      	movs	r2, #0
 8014940:	61bb      	str	r3, [r7, #24]
 8014942:	61fa      	str	r2, [r7, #28]
 8014944:	f04f 0200 	mov.w	r2, #0
 8014948:	f04f 0300 	mov.w	r3, #0
 801494c:	69b9      	ldr	r1, [r7, #24]
 801494e:	000b      	movs	r3, r1
 8014950:	2200      	movs	r2, #0
 8014952:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014954:	6809      	ldr	r1, [r1, #0]
 8014956:	2000      	movs	r0, #0
 8014958:	6139      	str	r1, [r7, #16]
 801495a:	6178      	str	r0, [r7, #20]
 801495c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8014960:	4621      	mov	r1, r4
 8014962:	4311      	orrs	r1, r2
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	4629      	mov	r1, r5
 8014968:	4319      	orrs	r1, r3
 801496a:	60f9      	str	r1, [r7, #12]
 801496c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8014970:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 8014974:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8014978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801497c:	1884      	adds	r4, r0, r2
 801497e:	603c      	str	r4, [r7, #0]
 8014980:	eb41 0303 	adc.w	r3, r1, r3
 8014984:	607b      	str	r3, [r7, #4]
 8014986:	e9d7 3400 	ldrd	r3, r4, [r7]
 801498a:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 801498e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014990:	681c      	ldr	r4, [r3, #0]
 8014992:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8014996:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801499a:	4290      	cmp	r0, r2
 801499c:	eb71 0303 	sbcs.w	r3, r1, r3
 80149a0:	bf34      	ite	cc
 80149a2:	2301      	movcc	r3, #1
 80149a4:	2300      	movcs	r3, #0
 80149a6:	b2db      	uxtb	r3, r3
 80149a8:	18e2      	adds	r2, r4, r3
 80149aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80149ac:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 80149ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80149b2:	f04f 0200 	mov.w	r2, #0
 80149b6:	f04f 0300 	mov.w	r3, #0
 80149ba:	000a      	movs	r2, r1
 80149bc:	2300      	movs	r3, #0
 80149be:	6a3b      	ldr	r3, [r7, #32]
 80149c0:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 80149c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80149c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149c6:	601a      	str	r2, [r3, #0]
#endif
}
 80149c8:	bf00      	nop
 80149ca:	3744      	adds	r7, #68	@ 0x44
 80149cc:	46bd      	mov	sp, r7
 80149ce:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80149d2:	4770      	bx	lr

080149d4 <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 80149d4:	b590      	push	{r4, r7, lr}
 80149d6:	b08b      	sub	sp, #44	@ 0x2c
 80149d8:	af02      	add	r7, sp, #8
 80149da:	60f8      	str	r0, [r7, #12]
 80149dc:	60b9      	str	r1, [r7, #8]
 80149de:	607a      	str	r2, [r7, #4]
 80149e0:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 80149e2:	2300      	movs	r3, #0
 80149e4:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 80149e6:	2300      	movs	r3, #0
 80149e8:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 80149ea:	2300      	movs	r3, #0
 80149ec:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 80149ee:	2300      	movs	r3, #0
 80149f0:	77bb      	strb	r3, [r7, #30]
 80149f2:	e036      	b.n	8014a62 <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 80149f4:	2300      	movs	r3, #0
 80149f6:	77fb      	strb	r3, [r7, #31]
 80149f8:	e01c      	b.n	8014a34 <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 80149fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80149fe:	009b      	lsls	r3, r3, #2
 8014a00:	68ba      	ldr	r2, [r7, #8]
 8014a02:	4413      	add	r3, r2
 8014a04:	6818      	ldr	r0, [r3, #0]
 8014a06:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8014a0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014a0e:	1ad3      	subs	r3, r2, r3
 8014a10:	009b      	lsls	r3, r3, #2
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	4413      	add	r3, r2
 8014a16:	6819      	ldr	r1, [r3, #0]
 8014a18:	f107 0414 	add.w	r4, r7, #20
 8014a1c:	f107 0218 	add.w	r2, r7, #24
 8014a20:	f107 0310 	add.w	r3, r7, #16
 8014a24:	9300      	str	r3, [sp, #0]
 8014a26:	4623      	mov	r3, r4
 8014a28:	f7ff ff6a 	bl	8014900 <muladd>
    for (i = 0; i <= k; ++i) {
 8014a2c:	7ffb      	ldrb	r3, [r7, #31]
 8014a2e:	3301      	adds	r3, #1
 8014a30:	b2db      	uxtb	r3, r3
 8014a32:	77fb      	strb	r3, [r7, #31]
 8014a34:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8014a38:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	dddc      	ble.n	80149fa <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 8014a40:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014a44:	009b      	lsls	r3, r3, #2
 8014a46:	68fa      	ldr	r2, [r7, #12]
 8014a48:	4413      	add	r3, r2
 8014a4a:	69ba      	ldr	r2, [r7, #24]
 8014a4c:	601a      	str	r2, [r3, #0]
    r0 = r1;
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 8014a52:	693b      	ldr	r3, [r7, #16]
 8014a54:	617b      	str	r3, [r7, #20]
    r2 = 0;
 8014a56:	2300      	movs	r3, #0
 8014a58:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 8014a5a:	7fbb      	ldrb	r3, [r7, #30]
 8014a5c:	3301      	adds	r3, #1
 8014a5e:	b2db      	uxtb	r3, r3
 8014a60:	77bb      	strb	r3, [r7, #30]
 8014a62:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8014a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	dbc2      	blt.n	80149f4 <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 8014a6e:	78fb      	ldrb	r3, [r7, #3]
 8014a70:	77bb      	strb	r3, [r7, #30]
 8014a72:	e03b      	b.n	8014aec <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 8014a74:	7fba      	ldrb	r2, [r7, #30]
 8014a76:	78fb      	ldrb	r3, [r7, #3]
 8014a78:	1ad3      	subs	r3, r2, r3
 8014a7a:	b2db      	uxtb	r3, r3
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	b2db      	uxtb	r3, r3
 8014a80:	77fb      	strb	r3, [r7, #31]
 8014a82:	e01c      	b.n	8014abe <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 8014a84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014a88:	009b      	lsls	r3, r3, #2
 8014a8a:	68ba      	ldr	r2, [r7, #8]
 8014a8c:	4413      	add	r3, r2
 8014a8e:	6818      	ldr	r0, [r3, #0]
 8014a90:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8014a94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014a98:	1ad3      	subs	r3, r2, r3
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	687a      	ldr	r2, [r7, #4]
 8014a9e:	4413      	add	r3, r2
 8014aa0:	6819      	ldr	r1, [r3, #0]
 8014aa2:	f107 0414 	add.w	r4, r7, #20
 8014aa6:	f107 0218 	add.w	r2, r7, #24
 8014aaa:	f107 0310 	add.w	r3, r7, #16
 8014aae:	9300      	str	r3, [sp, #0]
 8014ab0:	4623      	mov	r3, r4
 8014ab2:	f7ff ff25 	bl	8014900 <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 8014ab6:	7ffb      	ldrb	r3, [r7, #31]
 8014ab8:	3301      	adds	r3, #1
 8014aba:	b2db      	uxtb	r3, r3
 8014abc:	77fb      	strb	r3, [r7, #31]
 8014abe:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8014ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	dbdc      	blt.n	8014a84 <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 8014aca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014ace:	009b      	lsls	r3, r3, #2
 8014ad0:	68fa      	ldr	r2, [r7, #12]
 8014ad2:	4413      	add	r3, r2
 8014ad4:	69ba      	ldr	r2, [r7, #24]
 8014ad6:	601a      	str	r2, [r3, #0]
    r0 = r1;
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 8014adc:	693b      	ldr	r3, [r7, #16]
 8014ade:	617b      	str	r3, [r7, #20]
    r2 = 0;
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 8014ae4:	7fbb      	ldrb	r3, [r7, #30]
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	b2db      	uxtb	r3, r3
 8014aea:	77bb      	strb	r3, [r7, #30]
 8014aec:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8014af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014af4:	005b      	lsls	r3, r3, #1
 8014af6:	3b01      	subs	r3, #1
 8014af8:	429a      	cmp	r2, r3
 8014afa:	dbbb      	blt.n	8014a74 <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 8014afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014b00:	00db      	lsls	r3, r3, #3
 8014b02:	3b04      	subs	r3, #4
 8014b04:	68fa      	ldr	r2, [r7, #12]
 8014b06:	4413      	add	r3, r2
 8014b08:	69ba      	ldr	r2, [r7, #24]
 8014b0a:	601a      	str	r2, [r3, #0]
}
 8014b0c:	bf00      	nop
 8014b0e:	3724      	adds	r7, #36	@ 0x24
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd90      	pop	{r4, r7, pc}

08014b14 <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b086      	sub	sp, #24
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	60f8      	str	r0, [r7, #12]
 8014b1c:	60b9      	str	r1, [r7, #8]
 8014b1e:	607a      	str	r2, [r7, #4]
 8014b20:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 8014b22:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8014b26:	687a      	ldr	r2, [r7, #4]
 8014b28:	68b9      	ldr	r1, [r7, #8]
 8014b2a:	68f8      	ldr	r0, [r7, #12]
 8014b2c:	f7ff fe54 	bl	80147d8 <mg_uecc_vli_add>
 8014b30:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d109      	bne.n	8014b4c <mg_uecc_vli_modAdd+0x38>
 8014b38:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8014b3c:	461a      	mov	r2, r3
 8014b3e:	68f9      	ldr	r1, [r7, #12]
 8014b40:	6838      	ldr	r0, [r7, #0]
 8014b42:	f7ff fd80 	bl	8014646 <mg_uecc_vli_cmp_unsafe>
 8014b46:	4603      	mov	r3, r0
 8014b48:	2b01      	cmp	r3, #1
 8014b4a:	d006      	beq.n	8014b5a <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 8014b4c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8014b50:	683a      	ldr	r2, [r7, #0]
 8014b52:	68f9      	ldr	r1, [r7, #12]
 8014b54:	68f8      	ldr	r0, [r7, #12]
 8014b56:	f7ff fe89 	bl	801486c <mg_uecc_vli_sub>
  }
}
 8014b5a:	bf00      	nop
 8014b5c:	3718      	adds	r7, #24
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}

08014b62 <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 8014b62:	b580      	push	{r7, lr}
 8014b64:	b086      	sub	sp, #24
 8014b66:	af00      	add	r7, sp, #0
 8014b68:	60f8      	str	r0, [r7, #12]
 8014b6a:	60b9      	str	r1, [r7, #8]
 8014b6c:	607a      	str	r2, [r7, #4]
 8014b6e:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 8014b70:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8014b74:	687a      	ldr	r2, [r7, #4]
 8014b76:	68b9      	ldr	r1, [r7, #8]
 8014b78:	68f8      	ldr	r0, [r7, #12]
 8014b7a:	f7ff fe77 	bl	801486c <mg_uecc_vli_sub>
 8014b7e:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d006      	beq.n	8014b94 <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 8014b86:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8014b8a:	683a      	ldr	r2, [r7, #0]
 8014b8c:	68f9      	ldr	r1, [r7, #12]
 8014b8e:	68f8      	ldr	r0, [r7, #12]
 8014b90:	f7ff fe22 	bl	80147d8 <mg_uecc_vli_add>
  }
}
 8014b94:	bf00      	nop
 8014b96:	3718      	adds	r7, #24
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}

08014b9c <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 8014b9c:	b590      	push	{r4, r7, lr}
 8014b9e:	b0ad      	sub	sp, #180	@ 0xb4
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	607a      	str	r2, [r7, #4]
 8014ba8:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 8014baa:	f107 0318 	add.w	r3, r7, #24
 8014bae:	613b      	str	r3, [r7, #16]
 8014bb0:	68bb      	ldr	r3, [r7, #8]
 8014bb2:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 8014bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014bb8:	b29b      	uxth	r3, r3
 8014bba:	019b      	lsls	r3, r3, #6
 8014bbc:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 8014bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f7ff fcdf 	bl	8014588 <mg_uecc_vli_numBits>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 8014bce:	1ae3      	subs	r3, r4, r3
 8014bd0:	b29b      	uxth	r3, r3
 8014bd2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 8014bd6:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	da00      	bge.n	8014be0 <mg_uecc_vli_mmod+0x44>
 8014bde:	331f      	adds	r3, #31
 8014be0:	115b      	asrs	r3, r3, #5
 8014be2:	b21b      	sxth	r3, r3
 8014be4:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 8014be8:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8014bec:	425a      	negs	r2, r3
 8014bee:	f003 031f 	and.w	r3, r3, #31
 8014bf2:	f002 021f 	and.w	r2, r2, #31
 8014bf6:	bf58      	it	pl
 8014bf8:	4253      	negpl	r3, r2
 8014bfa:	b21b      	sxth	r3, r3
 8014bfc:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 8014c00:	2300      	movs	r3, #0
 8014c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 8014c06:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 8014c0a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8014c0e:	4611      	mov	r1, r2
 8014c10:	4618      	mov	r0, r3
 8014c12:	f7ff fc2e 	bl	8014472 <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 8014c16:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	dd34      	ble.n	8014c88 <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 8014c1e:	2300      	movs	r3, #0
 8014c20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014c24:	e029      	b.n	8014c7a <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 8014c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014c2a:	009b      	lsls	r3, r3, #2
 8014c2c:	687a      	ldr	r2, [r7, #4]
 8014c2e:	4413      	add	r3, r2
 8014c30:	681a      	ldr	r2, [r3, #0]
 8014c32:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8014c36:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 8014c3a:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 8014c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014c42:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 8014c44:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8014c48:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 8014c4a:	009b      	lsls	r3, r3, #2
 8014c4c:	33b0      	adds	r3, #176	@ 0xb0
 8014c4e:	443b      	add	r3, r7
 8014c50:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 8014c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014c58:	009b      	lsls	r3, r3, #2
 8014c5a:	687a      	ldr	r2, [r7, #4]
 8014c5c:	4413      	add	r3, r2
 8014c5e:	681a      	ldr	r2, [r3, #0]
 8014c60:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8014c64:	f1c3 0320 	rsb	r3, r3, #32
 8014c68:	fa22 f303 	lsr.w	r3, r2, r3
 8014c6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 8014c70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014c74:	3301      	adds	r3, #1
 8014c76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014c7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d3cf      	bcc.n	8014c26 <mg_uecc_vli_mmod+0x8a>
 8014c86:	e00b      	b.n	8014ca0 <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 8014c88:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 8014c8c:	009b      	lsls	r3, r3, #2
 8014c8e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8014c92:	4413      	add	r3, r2
 8014c94:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014c98:	6879      	ldr	r1, [r7, #4]
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f7ff fcac 	bl	80145f8 <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014ca6:	e09f      	b.n	8014de8 <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 8014cae:	2300      	movs	r3, #0
 8014cb0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8014cb4:	e053      	b.n	8014d5e <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8014cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014cba:	009b      	lsls	r3, r3, #2
 8014cbc:	33b0      	adds	r3, #176	@ 0xb0
 8014cbe:	443b      	add	r3, r7
 8014cc0:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8014cc4:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014cc8:	009b      	lsls	r3, r3, #2
 8014cca:	4413      	add	r3, r2
 8014ccc:	681a      	ldr	r2, [r3, #0]
 8014cce:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014cd2:	009b      	lsls	r3, r3, #2
 8014cd4:	33b0      	adds	r3, #176	@ 0xb0
 8014cd6:	443b      	add	r3, r7
 8014cd8:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8014cdc:	1ad2      	subs	r2, r2, r3
 8014cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014ce2:	1ad3      	subs	r3, r2, r3
 8014ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 8014ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014cec:	009b      	lsls	r3, r3, #2
 8014cee:	33b0      	adds	r3, #176	@ 0xb0
 8014cf0:	443b      	add	r3, r7
 8014cf2:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8014cf6:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014cfa:	009b      	lsls	r3, r3, #2
 8014cfc:	4413      	add	r3, r2
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d014      	beq.n	8014d32 <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 8014d08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014d0c:	009b      	lsls	r3, r3, #2
 8014d0e:	33b0      	adds	r3, #176	@ 0xb0
 8014d10:	443b      	add	r3, r7
 8014d12:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8014d16:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014d1a:	009b      	lsls	r3, r3, #2
 8014d1c:	4413      	add	r3, r2
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014d24:	429a      	cmp	r2, r3
 8014d26:	bf8c      	ite	hi
 8014d28:	2301      	movhi	r3, #1
 8014d2a:	2300      	movls	r3, #0
 8014d2c:	b2db      	uxtb	r3, r3
 8014d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 8014d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014d36:	f1c3 0301 	rsb	r3, r3, #1
 8014d3a:	009b      	lsls	r3, r3, #2
 8014d3c:	33b0      	adds	r3, #176	@ 0xb0
 8014d3e:	443b      	add	r3, r7
 8014d40:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8014d44:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8014d48:	009b      	lsls	r3, r3, #2
 8014d4a:	4413      	add	r3, r2
 8014d4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8014d50:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 8014d52:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8014d56:	3301      	adds	r3, #1
 8014d58:	b2db      	uxtb	r3, r3
 8014d5a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8014d5e:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 8014d62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014d66:	005b      	lsls	r3, r3, #1
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	dba4      	blt.n	8014cb6 <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 8014d6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8014d70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014d74:	429a      	cmp	r2, r3
 8014d76:	bf0c      	ite	eq
 8014d78:	2301      	moveq	r3, #1
 8014d7a:	2300      	movne	r3, #0
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 8014d82:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014d86:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8014d8a:	4611      	mov	r1, r2
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7ff fcf9 	bl	8014784 <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 8014d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014d96:	3b01      	subs	r3, #1
 8014d98:	009b      	lsls	r3, r3, #2
 8014d9a:	33b0      	adds	r3, #176	@ 0xb0
 8014d9c:	443b      	add	r3, r7
 8014d9e:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8014da2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014da6:	009b      	lsls	r3, r3, #2
 8014da8:	33b0      	adds	r3, #176	@ 0xb0
 8014daa:	443b      	add	r3, r7
 8014dac:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 8014db0:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 8014db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014db6:	3b01      	subs	r3, #1
 8014db8:	430a      	orrs	r2, r1
 8014dba:	009b      	lsls	r3, r3, #2
 8014dbc:	33b0      	adds	r3, #176	@ 0xb0
 8014dbe:	443b      	add	r3, r7
 8014dc0:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 8014dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014dc8:	009b      	lsls	r3, r3, #2
 8014dca:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8014dce:	4413      	add	r3, r2
 8014dd0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014dd4:	4611      	mov	r1, r2
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7ff fcd4 	bl	8014784 <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 8014ddc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8014de0:	3b01      	subs	r3, #1
 8014de2:	b29b      	uxth	r3, r3
 8014de4:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 8014de8:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	f6bf af5b 	bge.w	8014ca8 <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 8014df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014df6:	009b      	lsls	r3, r3, #2
 8014df8:	33b0      	adds	r3, #176	@ 0xb0
 8014dfa:	443b      	add	r3, r7
 8014dfc:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 8014e00:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014e04:	4619      	mov	r1, r3
 8014e06:	68f8      	ldr	r0, [r7, #12]
 8014e08:	f7ff fbf6 	bl	80145f8 <mg_uecc_vli_set>
}
 8014e0c:	bf00      	nop
 8014e0e:	37b4      	adds	r7, #180	@ 0xb4
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd90      	pop	{r4, r7, pc}

08014e14 <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b094      	sub	sp, #80	@ 0x50
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	607a      	str	r2, [r7, #4]
 8014e20:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 8014e22:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8014e26:	f107 0010 	add.w	r0, r7, #16
 8014e2a:	687a      	ldr	r2, [r7, #4]
 8014e2c:	68b9      	ldr	r1, [r7, #8]
 8014e2e:	f7ff fdd1 	bl	80149d4 <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 8014e32:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8014e36:	f107 0110 	add.w	r1, r7, #16
 8014e3a:	683a      	ldr	r2, [r7, #0]
 8014e3c:	68f8      	ldr	r0, [r7, #12]
 8014e3e:	f7ff fead 	bl	8014b9c <mg_uecc_vli_mmod>
}
 8014e42:	bf00      	nop
 8014e44:	3750      	adds	r7, #80	@ 0x50
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}

08014e4a <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 8014e4a:	b580      	push	{r7, lr}
 8014e4c:	b094      	sub	sp, #80	@ 0x50
 8014e4e:	af00      	add	r7, sp, #0
 8014e50:	60f8      	str	r0, [r7, #12]
 8014e52:	60b9      	str	r1, [r7, #8]
 8014e54:	607a      	str	r2, [r7, #4]
 8014e56:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8014e5e:	f107 0010 	add.w	r0, r7, #16
 8014e62:	687a      	ldr	r2, [r7, #4]
 8014e64:	68b9      	ldr	r1, [r7, #8]
 8014e66:	f7ff fdb5 	bl	80149d4 <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014e70:	f107 0210 	add.w	r2, r7, #16
 8014e74:	4611      	mov	r1, r2
 8014e76:	68f8      	ldr	r0, [r7, #12]
 8014e78:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 8014e7a:	bf00      	nop
 8014e7c:	3750      	adds	r7, #80	@ 0x50
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd80      	pop	{r7, pc}

08014e82 <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 8014e82:	b580      	push	{r7, lr}
 8014e84:	b084      	sub	sp, #16
 8014e86:	af00      	add	r7, sp, #0
 8014e88:	60f8      	str	r0, [r7, #12]
 8014e8a:	60b9      	str	r1, [r7, #8]
 8014e8c:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	68ba      	ldr	r2, [r7, #8]
 8014e92:	68b9      	ldr	r1, [r7, #8]
 8014e94:	68f8      	ldr	r0, [r7, #12]
 8014e96:	f7ff ffd8 	bl	8014e4a <mg_uecc_vli_modMult_fast>
}
 8014e9a:	bf00      	nop
 8014e9c:	3710      	adds	r7, #16
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}

08014ea2 <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 8014ea2:	b580      	push	{r7, lr}
 8014ea4:	b086      	sub	sp, #24
 8014ea6:	af00      	add	r7, sp, #0
 8014ea8:	60f8      	str	r0, [r7, #12]
 8014eaa:	60b9      	str	r1, [r7, #8]
 8014eac:	4613      	mov	r3, r2
 8014eae:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	f003 0301 	and.w	r3, r3, #1
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d007      	beq.n	8014ed0 <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 8014ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ec4:	68ba      	ldr	r2, [r7, #8]
 8014ec6:	68f9      	ldr	r1, [r7, #12]
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	f7ff fc85 	bl	80147d8 <mg_uecc_vli_add>
 8014ece:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 8014ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ed4:	4619      	mov	r1, r3
 8014ed6:	68f8      	ldr	r0, [r7, #12]
 8014ed8:	f7ff fc54 	bl	8014784 <mg_uecc_vli_rshift1>
  if (carry) {
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d013      	beq.n	8014f0a <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 8014ee2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014ee6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014eea:	4413      	add	r3, r2
 8014eec:	009b      	lsls	r3, r3, #2
 8014eee:	68fa      	ldr	r2, [r7, #12]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	681a      	ldr	r2, [r3, #0]
 8014ef4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8014ef8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014efc:	440b      	add	r3, r1
 8014efe:	009b      	lsls	r3, r3, #2
 8014f00:	68f9      	ldr	r1, [r7, #12]
 8014f02:	440b      	add	r3, r1
 8014f04:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8014f08:	601a      	str	r2, [r3, #0]
  }
}
 8014f0a:	bf00      	nop
 8014f0c:	3718      	adds	r7, #24
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}

08014f12 <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 8014f12:	b580      	push	{r7, lr}
 8014f14:	b0a6      	sub	sp, #152	@ 0x98
 8014f16:	af00      	add	r7, sp, #0
 8014f18:	60f8      	str	r0, [r7, #12]
 8014f1a:	60b9      	str	r1, [r7, #8]
 8014f1c:	607a      	str	r2, [r7, #4]
 8014f1e:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 8014f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014f24:	4619      	mov	r1, r3
 8014f26:	68b8      	ldr	r0, [r7, #8]
 8014f28:	f7ff fac4 	bl	80144b4 <mg_uecc_vli_isZero>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d006      	beq.n	8014f40 <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 8014f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014f36:	4619      	mov	r1, r3
 8014f38:	68f8      	ldr	r0, [r7, #12]
 8014f3a:	f7ff fa9a 	bl	8014472 <mg_uecc_vli_clear>
 8014f3e:	e0de      	b.n	80150fe <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 8014f40:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014f44:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8014f48:	68b9      	ldr	r1, [r7, #8]
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7ff fb54 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 8014f50:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014f54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8014f58:	6879      	ldr	r1, [r7, #4]
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7ff fb4c 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 8014f60:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014f64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014f68:	4611      	mov	r1, r2
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f7ff fa81 	bl	8014472 <mg_uecc_vli_clear>
  u[0] = 1;
 8014f70:	2301      	movs	r3, #1
 8014f72:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 8014f74:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014f78:	f107 0314 	add.w	r3, r7, #20
 8014f7c:	4611      	mov	r1, r2
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7ff fa77 	bl	8014472 <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8014f84:	e0a2      	b.n	80150cc <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 8014f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014f88:	f003 0301 	and.w	r3, r3, #1
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d110      	bne.n	8014fb2 <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 8014f90:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014f94:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8014f98:	4611      	mov	r1, r2
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f7ff fbf2 	bl	8014784 <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 8014fa0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014fa4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014fa8:	6879      	ldr	r1, [r7, #4]
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7ff ff79 	bl	8014ea2 <vli_modInv_update>
 8014fb0:	e08c      	b.n	80150cc <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 8014fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014fb4:	f003 0301 	and.w	r3, r3, #1
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d110      	bne.n	8014fde <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 8014fbc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014fc0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8014fc4:	4611      	mov	r1, r2
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7ff fbdc 	bl	8014784 <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 8014fcc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014fd0:	f107 0314 	add.w	r3, r7, #20
 8014fd4:	6879      	ldr	r1, [r7, #4]
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f7ff ff63 	bl	8014ea2 <vli_modInv_update>
 8014fdc:	e076      	b.n	80150cc <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 8014fde:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	dd39      	ble.n	801505a <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 8014fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014fea:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8014fee:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8014ff2:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8014ff6:	f7ff fc39 	bl	801486c <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 8014ffa:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014ffe:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8015002:	4611      	mov	r1, r2
 8015004:	4618      	mov	r0, r3
 8015006:	f7ff fbbd 	bl	8014784 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 801500a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801500e:	f107 0114 	add.w	r1, r7, #20
 8015012:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015016:	4618      	mov	r0, r3
 8015018:	f7ff fb15 	bl	8014646 <mg_uecc_vli_cmp_unsafe>
 801501c:	4603      	mov	r3, r0
 801501e:	2b00      	cmp	r3, #0
 8015020:	da08      	bge.n	8015034 <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 8015022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015026:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801502a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801502e:	687a      	ldr	r2, [r7, #4]
 8015030:	f7ff fbd2 	bl	80147d8 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 8015034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015038:	f107 0214 	add.w	r2, r7, #20
 801503c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8015040:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8015044:	f7ff fc12 	bl	801486c <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 8015048:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801504c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015050:	6879      	ldr	r1, [r7, #4]
 8015052:	4618      	mov	r0, r3
 8015054:	f7ff ff25 	bl	8014ea2 <vli_modInv_update>
 8015058:	e038      	b.n	80150cc <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 801505a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801505e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8015062:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8015066:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801506a:	f7ff fbff 	bl	801486c <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 801506e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015072:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8015076:	4611      	mov	r1, r2
 8015078:	4618      	mov	r0, r3
 801507a:	f7ff fb83 	bl	8014784 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 801507e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015082:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8015086:	f107 0314 	add.w	r3, r7, #20
 801508a:	4618      	mov	r0, r3
 801508c:	f7ff fadb 	bl	8014646 <mg_uecc_vli_cmp_unsafe>
 8015090:	4603      	mov	r3, r0
 8015092:	2b00      	cmp	r3, #0
 8015094:	da08      	bge.n	80150a8 <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 8015096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801509a:	f107 0114 	add.w	r1, r7, #20
 801509e:	f107 0014 	add.w	r0, r7, #20
 80150a2:	687a      	ldr	r2, [r7, #4]
 80150a4:	f7ff fb98 	bl	80147d8 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 80150a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80150ac:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80150b0:	f107 0114 	add.w	r1, r7, #20
 80150b4:	f107 0014 	add.w	r0, r7, #20
 80150b8:	f7ff fbd8 	bl	801486c <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 80150bc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80150c0:	f107 0314 	add.w	r3, r7, #20
 80150c4:	6879      	ldr	r1, [r7, #4]
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7ff feeb 	bl	8014ea2 <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 80150cc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80150d0:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80150d4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80150d8:	4618      	mov	r0, r3
 80150da:	f7ff fab4 	bl	8014646 <mg_uecc_vli_cmp_unsafe>
 80150de:	4603      	mov	r3, r0
 80150e0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80150e4:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	f47f af4c 	bne.w	8014f86 <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 80150ee:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80150f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80150f6:	4619      	mov	r1, r3
 80150f8:	68f8      	ldr	r0, [r7, #12]
 80150fa:	f7ff fa7d 	bl	80145f8 <mg_uecc_vli_set>
}
 80150fe:	3798      	adds	r7, #152	@ 0x98
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 8015104:	b580      	push	{r7, lr}
 8015106:	b098      	sub	sp, #96	@ 0x60
 8015108:	af02      	add	r7, sp, #8
 801510a:	60f8      	str	r0, [r7, #12]
 801510c:	60b9      	str	r1, [r7, #8]
 801510e:	607a      	str	r2, [r7, #4]
 8015110:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	781b      	ldrb	r3, [r3, #0]
 8015116:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 801511a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801511e:	4619      	mov	r1, r3
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f7ff f9c7 	bl	80144b4 <mg_uecc_vli_isZero>
 8015126:	4603      	mov	r3, r0
 8015128:	2b00      	cmp	r3, #0
 801512a:	f040 80e6 	bne.w	80152fa <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 801512e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015132:	683a      	ldr	r2, [r7, #0]
 8015134:	68b9      	ldr	r1, [r7, #8]
 8015136:	4618      	mov	r0, r3
 8015138:	f7ff fea3 	bl	8014e82 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 801513c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015140:	f107 0010 	add.w	r0, r7, #16
 8015144:	683b      	ldr	r3, [r7, #0]
 8015146:	68f9      	ldr	r1, [r7, #12]
 8015148:	f7ff fe7f 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 801514c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015150:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015154:	683a      	ldr	r2, [r7, #0]
 8015156:	4618      	mov	r0, r3
 8015158:	f7ff fe93 	bl	8014e82 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 801515c:	683b      	ldr	r3, [r7, #0]
 801515e:	687a      	ldr	r2, [r7, #4]
 8015160:	68b9      	ldr	r1, [r7, #8]
 8015162:	68b8      	ldr	r0, [r7, #8]
 8015164:	f7ff fe71 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 8015168:	683a      	ldr	r2, [r7, #0]
 801516a:	6879      	ldr	r1, [r7, #4]
 801516c:	6878      	ldr	r0, [r7, #4]
 801516e:	f7ff fe88 	bl	8014e82 <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 8015172:	683b      	ldr	r3, [r7, #0]
 8015174:	1d1a      	adds	r2, r3, #4
 8015176:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801517a:	9300      	str	r3, [sp, #0]
 801517c:	4613      	mov	r3, r2
 801517e:	687a      	ldr	r2, [r7, #4]
 8015180:	68f9      	ldr	r1, [r7, #12]
 8015182:	68f8      	ldr	r0, [r7, #12]
 8015184:	f7ff fcc6 	bl	8014b14 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	1d1a      	adds	r2, r3, #4
 801518c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015190:	9300      	str	r3, [sp, #0]
 8015192:	4613      	mov	r3, r2
 8015194:	687a      	ldr	r2, [r7, #4]
 8015196:	6879      	ldr	r1, [r7, #4]
 8015198:	6878      	ldr	r0, [r7, #4]
 801519a:	f7ff fcbb 	bl	8014b14 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 801519e:	683b      	ldr	r3, [r7, #0]
 80151a0:	1d1a      	adds	r2, r3, #4
 80151a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80151a6:	9300      	str	r3, [sp, #0]
 80151a8:	4613      	mov	r3, r2
 80151aa:	687a      	ldr	r2, [r7, #4]
 80151ac:	68f9      	ldr	r1, [r7, #12]
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	f7ff fcd7 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	687a      	ldr	r2, [r7, #4]
 80151b8:	68f9      	ldr	r1, [r7, #12]
 80151ba:	68f8      	ldr	r0, [r7, #12]
 80151bc:	f7ff fe45 	bl	8014e4a <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	1d1a      	adds	r2, r3, #4
 80151c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80151c8:	9300      	str	r3, [sp, #0]
 80151ca:	4613      	mov	r3, r2
 80151cc:	68fa      	ldr	r2, [r7, #12]
 80151ce:	68f9      	ldr	r1, [r7, #12]
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f7ff fc9f 	bl	8014b14 <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 80151d6:	683b      	ldr	r3, [r7, #0]
 80151d8:	1d1a      	adds	r2, r3, #4
 80151da:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80151de:	9300      	str	r3, [sp, #0]
 80151e0:	4613      	mov	r3, r2
 80151e2:	687a      	ldr	r2, [r7, #4]
 80151e4:	68f9      	ldr	r1, [r7, #12]
 80151e6:	68f8      	ldr	r0, [r7, #12]
 80151e8:	f7ff fc94 	bl	8014b14 <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 80151ec:	2100      	movs	r1, #0
 80151ee:	68f8      	ldr	r0, [r7, #12]
 80151f0:	f7ff f98a 	bl	8014508 <mg_uecc_vli_testBit>
 80151f4:	4603      	mov	r3, r0
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d024      	beq.n	8015244 <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	1d1a      	adds	r2, r3, #4
 80151fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015202:	68f9      	ldr	r1, [r7, #12]
 8015204:	68f8      	ldr	r0, [r7, #12]
 8015206:	f7ff fae7 	bl	80147d8 <mg_uecc_vli_add>
 801520a:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 801520c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015210:	4619      	mov	r1, r3
 8015212:	68f8      	ldr	r0, [r7, #12]
 8015214:	f7ff fab6 	bl	8014784 <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 8015218:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801521c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015220:	4413      	add	r3, r2
 8015222:	009b      	lsls	r3, r3, #2
 8015224:	68fa      	ldr	r2, [r7, #12]
 8015226:	4413      	add	r3, r2
 8015228:	6819      	ldr	r1, [r3, #0]
 801522a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801522c:	07da      	lsls	r2, r3, #31
 801522e:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 8015232:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015236:	4403      	add	r3, r0
 8015238:	009b      	lsls	r3, r3, #2
 801523a:	68f8      	ldr	r0, [r7, #12]
 801523c:	4403      	add	r3, r0
 801523e:	430a      	orrs	r2, r1
 8015240:	601a      	str	r2, [r3, #0]
 8015242:	e005      	b.n	8015250 <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 8015244:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015248:	4619      	mov	r1, r3
 801524a:	68f8      	ldr	r0, [r7, #12]
 801524c:	f7ff fa9a 	bl	8014784 <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 8015250:	683a      	ldr	r2, [r7, #0]
 8015252:	68f9      	ldr	r1, [r7, #12]
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f7ff fe14 	bl	8014e82 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	1d19      	adds	r1, r3, #4
 801525e:	f107 0210 	add.w	r2, r7, #16
 8015262:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8015266:	9300      	str	r3, [sp, #0]
 8015268:	460b      	mov	r3, r1
 801526a:	6879      	ldr	r1, [r7, #4]
 801526c:	6878      	ldr	r0, [r7, #4]
 801526e:	f7ff fc78 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	1d19      	adds	r1, r3, #4
 8015276:	f107 0210 	add.w	r2, r7, #16
 801527a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801527e:	9300      	str	r3, [sp, #0]
 8015280:	460b      	mov	r3, r1
 8015282:	6879      	ldr	r1, [r7, #4]
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f7ff fc6c 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	1d1a      	adds	r2, r3, #4
 801528e:	f107 0110 	add.w	r1, r7, #16
 8015292:	f107 0010 	add.w	r0, r7, #16
 8015296:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801529a:	9300      	str	r3, [sp, #0]
 801529c:	4613      	mov	r3, r2
 801529e:	687a      	ldr	r2, [r7, #4]
 80152a0:	f7ff fc5f 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 80152a4:	f107 0210 	add.w	r2, r7, #16
 80152a8:	683b      	ldr	r3, [r7, #0]
 80152aa:	68f9      	ldr	r1, [r7, #12]
 80152ac:	68f8      	ldr	r0, [r7, #12]
 80152ae:	f7ff fdcc 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 80152b2:	683b      	ldr	r3, [r7, #0]
 80152b4:	1d19      	adds	r1, r3, #4
 80152b6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80152ba:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80152be:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80152c2:	9300      	str	r3, [sp, #0]
 80152c4:	460b      	mov	r3, r1
 80152c6:	68f9      	ldr	r1, [r7, #12]
 80152c8:	f7ff fc4b 	bl	8014b62 <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 80152cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80152d0:	461a      	mov	r2, r3
 80152d2:	6879      	ldr	r1, [r7, #4]
 80152d4:	68f8      	ldr	r0, [r7, #12]
 80152d6:	f7ff f98f 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 80152da:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80152de:	461a      	mov	r2, r3
 80152e0:	68b9      	ldr	r1, [r7, #8]
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	f7ff f988 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 80152e8:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 80152ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80152f0:	4619      	mov	r1, r3
 80152f2:	68b8      	ldr	r0, [r7, #8]
 80152f4:	f7ff f980 	bl	80145f8 <mg_uecc_vli_set>
 80152f8:	e000      	b.n	80152fc <double_jacobian_default+0x1f8>
    return;
 80152fa:	bf00      	nop
}
 80152fc:	3758      	adds	r7, #88	@ 0x58
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}

08015302 <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 8015302:	b580      	push	{r7, lr}
 8015304:	b090      	sub	sp, #64	@ 0x40
 8015306:	af02      	add	r7, sp, #8
 8015308:	60f8      	str	r0, [r7, #12]
 801530a:	60b9      	str	r1, [r7, #8]
 801530c:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 801530e:	f107 0314 	add.w	r3, r7, #20
 8015312:	2220      	movs	r2, #32
 8015314:	2100      	movs	r1, #0
 8015316:	4618      	mov	r0, r3
 8015318:	f00c fd64 	bl	8021de4 <memset>
 801531c:	2303      	movs	r3, #3
 801531e:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	781b      	ldrb	r3, [r3, #0]
 8015324:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 8015328:	687a      	ldr	r2, [r7, #4]
 801532a:	68b9      	ldr	r1, [r7, #8]
 801532c:	68f8      	ldr	r0, [r7, #12]
 801532e:	f7ff fda8 	bl	8014e82 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	1d19      	adds	r1, r3, #4
 8015336:	f107 0214 	add.w	r2, r7, #20
 801533a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801533e:	9300      	str	r3, [sp, #0]
 8015340:	460b      	mov	r3, r1
 8015342:	68f9      	ldr	r1, [r7, #12]
 8015344:	68f8      	ldr	r0, [r7, #12]
 8015346:	f7ff fc0c 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	68ba      	ldr	r2, [r7, #8]
 801534e:	68f9      	ldr	r1, [r7, #12]
 8015350:	68f8      	ldr	r0, [r7, #12]
 8015352:	f7ff fd7a 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	1d19      	adds	r1, r3, #4
 8015360:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8015364:	9300      	str	r3, [sp, #0]
 8015366:	460b      	mov	r3, r1
 8015368:	68f9      	ldr	r1, [r7, #12]
 801536a:	68f8      	ldr	r0, [r7, #12]
 801536c:	f7ff fbd2 	bl	8014b14 <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 8015370:	bf00      	nop
 8015372:	3738      	adds	r7, #56	@ 0x38
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}

08015378 <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 8015378:	b580      	push	{r7, lr}
 801537a:	b094      	sub	sp, #80	@ 0x50
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
 8015380:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 8015382:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015386:	2220      	movs	r2, #32
 8015388:	2100      	movs	r1, #0
 801538a:	4618      	mov	r0, r3
 801538c:	f00c fd2a 	bl	8021de4 <memset>
 8015390:	2301      	movs	r3, #1
 8015392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 8015394:	f107 030c 	add.w	r3, r7, #12
 8015398:	2220      	movs	r2, #32
 801539a:	2100      	movs	r1, #0
 801539c:	4618      	mov	r0, r3
 801539e:	f00c fd21 	bl	8021de4 <memset>
 80153a2:	2301      	movs	r3, #1
 80153a4:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 80153a6:	683b      	ldr	r3, [r7, #0]
 80153a8:	781b      	ldrb	r3, [r3, #0]
 80153aa:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	1d19      	adds	r1, r3, #4
 80153b2:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80153b6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80153ba:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80153be:	f7ff fa0b 	bl	80147d8 <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 80153c2:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 80153c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80153ca:	4611      	mov	r1, r2
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7ff f8db 	bl	8014588 <mg_uecc_vli_numBits>
 80153d2:	4603      	mov	r3, r0
 80153d4:	b29b      	uxth	r3, r3
 80153d6:	3b01      	subs	r3, #1
 80153d8:	b29b      	uxth	r3, r3
 80153da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80153de:	e020      	b.n	8015422 <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 80153e0:	f107 010c 	add.w	r1, r7, #12
 80153e4:	f107 030c 	add.w	r3, r7, #12
 80153e8:	683a      	ldr	r2, [r7, #0]
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7ff fd49 	bl	8014e82 <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 80153f0:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 80153f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80153f8:	4611      	mov	r1, r2
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7ff f884 	bl	8014508 <mg_uecc_vli_testBit>
 8015400:	4603      	mov	r3, r0
 8015402:	2b00      	cmp	r3, #0
 8015404:	d007      	beq.n	8015416 <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 8015406:	f107 010c 	add.w	r1, r7, #12
 801540a:	f107 000c 	add.w	r0, r7, #12
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	687a      	ldr	r2, [r7, #4]
 8015412:	f7ff fd1a 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8015416:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801541a:	3b01      	subs	r3, #1
 801541c:	b29b      	uxth	r3, r3
 801541e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8015422:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015426:	2b01      	cmp	r3, #1
 8015428:	dcda      	bgt.n	80153e0 <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 801542a:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801542e:	f107 030c 	add.w	r3, r7, #12
 8015432:	4619      	mov	r1, r3
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f7ff f8df 	bl	80145f8 <mg_uecc_vli_set>
}
 801543a:	bf00      	nop
 801543c:	3750      	adds	r7, #80	@ 0x50
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}
	...

08015444 <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 8015444:	b480      	push	{r7}
 8015446:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 8015448:	4b02      	ldr	r3, [pc, #8]	@ (8015454 <mg_uecc_secp256r1+0x10>)
}
 801544a:	4618      	mov	r0, r3
 801544c:	46bd      	mov	sp, r7
 801544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015452:	4770      	bx	lr
 8015454:	08028db4 	.word	0x08028db4

08015458 <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 8015458:	b580      	push	{r7, lr}
 801545a:	b08c      	sub	sp, #48	@ 0x30
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
 8015460:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 8015462:	2208      	movs	r2, #8
 8015464:	6839      	ldr	r1, [r7, #0]
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f7ff f8c6 	bl	80145f8 <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 801546c:	2300      	movs	r3, #0
 801546e:	617b      	str	r3, [r7, #20]
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	613b      	str	r3, [r7, #16]
 8015474:	693b      	ldr	r3, [r7, #16]
 8015476:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 8015478:	683b      	ldr	r3, [r7, #0]
 801547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801547c:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015482:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015488:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801548e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015494:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8015496:	f107 020c 	add.w	r2, r7, #12
 801549a:	f107 010c 	add.w	r1, r7, #12
 801549e:	f107 000c 	add.w	r0, r7, #12
 80154a2:	2308      	movs	r3, #8
 80154a4:	f7ff f998 	bl	80147d8 <mg_uecc_vli_add>
 80154a8:	4603      	mov	r3, r0
 80154aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 80154ac:	f107 020c 	add.w	r2, r7, #12
 80154b0:	2308      	movs	r3, #8
 80154b2:	6879      	ldr	r1, [r7, #4]
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f7ff f98f 	bl	80147d8 <mg_uecc_vli_add>
 80154ba:	4603      	mov	r3, r0
 80154bc:	461a      	mov	r2, r3
 80154be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154c0:	4413      	add	r3, r2
 80154c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 80154c4:	683b      	ldr	r3, [r7, #0]
 80154c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80154c8:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 80154ca:	683b      	ldr	r3, [r7, #0]
 80154cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80154ce:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154d4:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80154da:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 80154dc:	2300      	movs	r3, #0
 80154de:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80154e0:	f107 020c 	add.w	r2, r7, #12
 80154e4:	f107 010c 	add.w	r1, r7, #12
 80154e8:	f107 000c 	add.w	r0, r7, #12
 80154ec:	2308      	movs	r3, #8
 80154ee:	f7ff f973 	bl	80147d8 <mg_uecc_vli_add>
 80154f2:	4603      	mov	r3, r0
 80154f4:	461a      	mov	r2, r3
 80154f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154f8:	4413      	add	r3, r2
 80154fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 80154fc:	f107 020c 	add.w	r2, r7, #12
 8015500:	2308      	movs	r3, #8
 8015502:	6879      	ldr	r1, [r7, #4]
 8015504:	6878      	ldr	r0, [r7, #4]
 8015506:	f7ff f967 	bl	80147d8 <mg_uecc_vli_add>
 801550a:	4603      	mov	r3, r0
 801550c:	461a      	mov	r2, r3
 801550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015510:	4413      	add	r3, r2
 8015512:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 8015514:	683b      	ldr	r3, [r7, #0]
 8015516:	6a1b      	ldr	r3, [r3, #32]
 8015518:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 801551a:	683b      	ldr	r3, [r7, #0]
 801551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801551e:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015524:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 8015526:	2300      	movs	r3, #0
 8015528:	623b      	str	r3, [r7, #32]
 801552a:	6a3b      	ldr	r3, [r7, #32]
 801552c:	61fb      	str	r3, [r7, #28]
 801552e:	69fb      	ldr	r3, [r7, #28]
 8015530:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015536:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801553c:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801553e:	f107 020c 	add.w	r2, r7, #12
 8015542:	2308      	movs	r3, #8
 8015544:	6879      	ldr	r1, [r7, #4]
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f7ff f946 	bl	80147d8 <mg_uecc_vli_add>
 801554c:	4603      	mov	r3, r0
 801554e:	461a      	mov	r2, r3
 8015550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015552:	4413      	add	r3, r2
 8015554:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801555a:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015560:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 8015562:	683b      	ldr	r3, [r7, #0]
 8015564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015566:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801556c:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015572:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015578:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 801557a:	683b      	ldr	r3, [r7, #0]
 801557c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801557e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	6a1b      	ldr	r3, [r3, #32]
 8015584:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 8015586:	f107 020c 	add.w	r2, r7, #12
 801558a:	2308      	movs	r3, #8
 801558c:	6879      	ldr	r1, [r7, #4]
 801558e:	6878      	ldr	r0, [r7, #4]
 8015590:	f7ff f922 	bl	80147d8 <mg_uecc_vli_add>
 8015594:	4603      	mov	r3, r0
 8015596:	461a      	mov	r2, r3
 8015598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801559a:	4413      	add	r3, r2
 801559c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155a2:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 80155a4:	683b      	ldr	r3, [r7, #0]
 80155a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155a8:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 80155aa:	683b      	ldr	r3, [r7, #0]
 80155ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80155ae:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 80155b0:	2300      	movs	r3, #0
 80155b2:	623b      	str	r3, [r7, #32]
 80155b4:	6a3b      	ldr	r3, [r7, #32]
 80155b6:	61fb      	str	r3, [r7, #28]
 80155b8:	69fb      	ldr	r3, [r7, #28]
 80155ba:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	6a1b      	ldr	r3, [r3, #32]
 80155c0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80155c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 80155c8:	f107 020c 	add.w	r2, r7, #12
 80155cc:	2308      	movs	r3, #8
 80155ce:	6879      	ldr	r1, [r7, #4]
 80155d0:	6878      	ldr	r0, [r7, #4]
 80155d2:	f7ff f94b 	bl	801486c <mg_uecc_vli_sub>
 80155d6:	4603      	mov	r3, r0
 80155d8:	461a      	mov	r2, r3
 80155da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155dc:	1a9b      	subs	r3, r3, r2
 80155de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155e4:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80155ea:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155f0:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155f6:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 80155f8:	2300      	movs	r3, #0
 80155fa:	623b      	str	r3, [r7, #32]
 80155fc:	6a3b      	ldr	r3, [r7, #32]
 80155fe:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015604:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801560a:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801560c:	f107 020c 	add.w	r2, r7, #12
 8015610:	2308      	movs	r3, #8
 8015612:	6879      	ldr	r1, [r7, #4]
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f7ff f929 	bl	801486c <mg_uecc_vli_sub>
 801561a:	4603      	mov	r3, r0
 801561c:	461a      	mov	r2, r3
 801561e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015620:	1a9b      	subs	r3, r3, r2
 8015622:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015628:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801562e:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015634:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	6a1b      	ldr	r3, [r3, #32]
 801563a:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015640:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015646:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 8015648:	2300      	movs	r3, #0
 801564a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015650:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 8015652:	f107 020c 	add.w	r2, r7, #12
 8015656:	2308      	movs	r3, #8
 8015658:	6879      	ldr	r1, [r7, #4]
 801565a:	6878      	ldr	r0, [r7, #4]
 801565c:	f7ff f906 	bl	801486c <mg_uecc_vli_sub>
 8015660:	4603      	mov	r3, r0
 8015662:	461a      	mov	r2, r3
 8015664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015666:	1a9b      	subs	r3, r3, r2
 8015668:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801566e:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015674:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 8015676:	2300      	movs	r3, #0
 8015678:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801567e:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015684:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801568a:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801568c:	2300      	movs	r3, #0
 801568e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015694:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 8015696:	f107 020c 	add.w	r2, r7, #12
 801569a:	2308      	movs	r3, #8
 801569c:	6879      	ldr	r1, [r7, #4]
 801569e:	6878      	ldr	r0, [r7, #4]
 80156a0:	f7ff f8e4 	bl	801486c <mg_uecc_vli_sub>
 80156a4:	4603      	mov	r3, r0
 80156a6:	461a      	mov	r2, r3
 80156a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156aa:	1a9b      	subs	r3, r3, r2
 80156ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 80156ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	da19      	bge.n	80156e8 <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 80156b4:	2308      	movs	r3, #8
 80156b6:	4a14      	ldr	r2, [pc, #80]	@ (8015708 <vli_mmod_fast_secp256r1+0x2b0>)
 80156b8:	6879      	ldr	r1, [r7, #4]
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f7ff f88c 	bl	80147d8 <mg_uecc_vli_add>
 80156c0:	4603      	mov	r3, r0
 80156c2:	461a      	mov	r2, r3
 80156c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156c6:	4413      	add	r3, r2
 80156c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 80156ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	dbf1      	blt.n	80156b4 <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 80156d0:	e015      	b.n	80156fe <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 80156d2:	2308      	movs	r3, #8
 80156d4:	4a0c      	ldr	r2, [pc, #48]	@ (8015708 <vli_mmod_fast_secp256r1+0x2b0>)
 80156d6:	6879      	ldr	r1, [r7, #4]
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f7ff f8c7 	bl	801486c <mg_uecc_vli_sub>
 80156de:	4603      	mov	r3, r0
 80156e0:	461a      	mov	r2, r3
 80156e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156e4:	1a9b      	subs	r3, r3, r2
 80156e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 80156e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d1f1      	bne.n	80156d2 <vli_mmod_fast_secp256r1+0x27a>
 80156ee:	2208      	movs	r2, #8
 80156f0:	6879      	ldr	r1, [r7, #4]
 80156f2:	4805      	ldr	r0, [pc, #20]	@ (8015708 <vli_mmod_fast_secp256r1+0x2b0>)
 80156f4:	f7fe ffa7 	bl	8014646 <mg_uecc_vli_cmp_unsafe>
 80156f8:	4603      	mov	r3, r0
 80156fa:	2b01      	cmp	r3, #1
 80156fc:	d1e9      	bne.n	80156d2 <vli_mmod_fast_secp256r1+0x27a>
}
 80156fe:	bf00      	nop
 8015700:	3730      	adds	r7, #48	@ 0x30
 8015702:	46bd      	mov	sp, r7
 8015704:	bd80      	pop	{r7, pc}
 8015706:	bf00      	nop
 8015708:	08028db8 	.word	0x08028db8

0801570c <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 801570c:	b580      	push	{r7, lr}
 801570e:	b08c      	sub	sp, #48	@ 0x30
 8015710:	af00      	add	r7, sp, #0
 8015712:	60f8      	str	r0, [r7, #12]
 8015714:	60b9      	str	r1, [r7, #8]
 8015716:	607a      	str	r2, [r7, #4]
 8015718:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 801571a:	f107 0310 	add.w	r3, r7, #16
 801571e:	683a      	ldr	r2, [r7, #0]
 8015720:	6879      	ldr	r1, [r7, #4]
 8015722:	4618      	mov	r0, r3
 8015724:	f7ff fbad 	bl	8014e82 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 8015728:	f107 0210 	add.w	r2, r7, #16
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	68f9      	ldr	r1, [r7, #12]
 8015730:	68f8      	ldr	r0, [r7, #12]
 8015732:	f7ff fb8a 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 8015736:	f107 0110 	add.w	r1, r7, #16
 801573a:	f107 0010 	add.w	r0, r7, #16
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	687a      	ldr	r2, [r7, #4]
 8015742:	f7ff fb82 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 8015746:	f107 0210 	add.w	r2, r7, #16
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	68b9      	ldr	r1, [r7, #8]
 801574e:	68b8      	ldr	r0, [r7, #8]
 8015750:	f7ff fb7b 	bl	8014e4a <mg_uecc_vli_modMult_fast>
}
 8015754:	bf00      	nop
 8015756:	3730      	adds	r7, #48	@ 0x30
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}

0801575c <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 801575c:	b590      	push	{r4, r7, lr}
 801575e:	b08f      	sub	sp, #60	@ 0x3c
 8015760:	af00      	add	r7, sp, #0
 8015762:	60f8      	str	r0, [r7, #12]
 8015764:	60b9      	str	r1, [r7, #8]
 8015766:	607a      	str	r2, [r7, #4]
 8015768:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801576a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801576c:	781b      	ldrb	r3, [r3, #0]
 801576e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 8015772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015774:	2b00      	cmp	r3, #0
 8015776:	d008      	beq.n	801578a <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 8015778:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801577c:	f107 0314 	add.w	r3, r7, #20
 8015780:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8015782:	4618      	mov	r0, r3
 8015784:	f7fe ff38 	bl	80145f8 <mg_uecc_vli_set>
 8015788:	e009      	b.n	801579e <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 801578a:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801578e:	f107 0314 	add.w	r3, r7, #20
 8015792:	4611      	mov	r1, r2
 8015794:	4618      	mov	r0, r3
 8015796:	f7fe fe6c 	bl	8014472 <mg_uecc_vli_clear>
    z[0] = 1;
 801579a:	2301      	movs	r3, #1
 801579c:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 801579e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80157a2:	461a      	mov	r2, r3
 80157a4:	68f9      	ldr	r1, [r7, #12]
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f7fe ff26 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 80157ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80157b0:	461a      	mov	r2, r3
 80157b2:	68b9      	ldr	r1, [r7, #8]
 80157b4:	6838      	ldr	r0, [r7, #0]
 80157b6:	f7fe ff1f 	bl	80145f8 <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 80157ba:	f107 0214 	add.w	r2, r7, #20
 80157be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157c0:	68b9      	ldr	r1, [r7, #8]
 80157c2:	68f8      	ldr	r0, [r7, #12]
 80157c4:	f7ff ffa2 	bl	801570c <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 80157c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157ca:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 80157ce:	f107 0214 	add.w	r2, r7, #20
 80157d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157d4:	68b9      	ldr	r1, [r7, #8]
 80157d6:	68f8      	ldr	r0, [r7, #12]
 80157d8:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 80157da:	f107 0214 	add.w	r2, r7, #20
 80157de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157e0:	6839      	ldr	r1, [r7, #0]
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f7ff ff92 	bl	801570c <apply_z>
}
 80157e8:	bf00      	nop
 80157ea:	373c      	adds	r7, #60	@ 0x3c
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd90      	pop	{r4, r7, pc}

080157f0 <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b090      	sub	sp, #64	@ 0x40
 80157f4:	af02      	add	r7, sp, #8
 80157f6:	60f8      	str	r0, [r7, #12]
 80157f8:	60b9      	str	r1, [r7, #8]
 80157fa:	607a      	str	r2, [r7, #4]
 80157fc:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 80157fe:	f107 0314 	add.w	r3, r7, #20
 8015802:	2220      	movs	r2, #32
 8015804:	2100      	movs	r1, #0
 8015806:	4618      	mov	r0, r3
 8015808:	f00c faec 	bl	8021de4 <memset>
  wordcount_t num_words = curve->num_words;
 801580c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801580e:	781b      	ldrb	r3, [r3, #0]
 8015810:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8015814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015816:	1d1a      	adds	r2, r3, #4
 8015818:	f107 0014 	add.w	r0, r7, #20
 801581c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	4613      	mov	r3, r2
 8015824:	68fa      	ldr	r2, [r7, #12]
 8015826:	6879      	ldr	r1, [r7, #4]
 8015828:	f7ff f99b 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801582c:	f107 0114 	add.w	r1, r7, #20
 8015830:	f107 0314 	add.w	r3, r7, #20
 8015834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015836:	4618      	mov	r0, r3
 8015838:	f7ff fb23 	bl	8014e82 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801583c:	f107 0214 	add.w	r2, r7, #20
 8015840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015842:	68f9      	ldr	r1, [r7, #12]
 8015844:	68f8      	ldr	r0, [r7, #12]
 8015846:	f7ff fb00 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801584a:	f107 0214 	add.w	r2, r7, #20
 801584e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015850:	6879      	ldr	r1, [r7, #4]
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f7ff faf9 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8015858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801585a:	1d1a      	adds	r2, r3, #4
 801585c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8015860:	9300      	str	r3, [sp, #0]
 8015862:	4613      	mov	r3, r2
 8015864:	68ba      	ldr	r2, [r7, #8]
 8015866:	6839      	ldr	r1, [r7, #0]
 8015868:	6838      	ldr	r0, [r7, #0]
 801586a:	f7ff f97a 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 801586e:	f107 0314 	add.w	r3, r7, #20
 8015872:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015874:	6839      	ldr	r1, [r7, #0]
 8015876:	4618      	mov	r0, r3
 8015878:	f7ff fb03 	bl	8014e82 <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 801587c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801587e:	1d1a      	adds	r2, r3, #4
 8015880:	f107 0114 	add.w	r1, r7, #20
 8015884:	f107 0014 	add.w	r0, r7, #20
 8015888:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801588c:	9300      	str	r3, [sp, #0]
 801588e:	4613      	mov	r3, r2
 8015890:	68fa      	ldr	r2, [r7, #12]
 8015892:	f7ff f966 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 8015896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015898:	1d1a      	adds	r2, r3, #4
 801589a:	f107 0114 	add.w	r1, r7, #20
 801589e:	f107 0014 	add.w	r0, r7, #20
 80158a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80158a6:	9300      	str	r3, [sp, #0]
 80158a8:	4613      	mov	r3, r2
 80158aa:	687a      	ldr	r2, [r7, #4]
 80158ac:	f7ff f959 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 80158b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80158b2:	1d1a      	adds	r2, r3, #4
 80158b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80158b8:	9300      	str	r3, [sp, #0]
 80158ba:	4613      	mov	r3, r2
 80158bc:	68fa      	ldr	r2, [r7, #12]
 80158be:	6879      	ldr	r1, [r7, #4]
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f7ff f94e 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 80158c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80158c8:	687a      	ldr	r2, [r7, #4]
 80158ca:	68b9      	ldr	r1, [r7, #8]
 80158cc:	68b8      	ldr	r0, [r7, #8]
 80158ce:	f7ff fabc 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 80158d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80158d4:	1d19      	adds	r1, r3, #4
 80158d6:	f107 0214 	add.w	r2, r7, #20
 80158da:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80158de:	9300      	str	r3, [sp, #0]
 80158e0:	460b      	mov	r3, r1
 80158e2:	68f9      	ldr	r1, [r7, #12]
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f7ff f93c 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 80158ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80158ec:	687a      	ldr	r2, [r7, #4]
 80158ee:	6839      	ldr	r1, [r7, #0]
 80158f0:	6838      	ldr	r0, [r7, #0]
 80158f2:	f7ff faaa 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 80158f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80158f8:	1d1a      	adds	r2, r3, #4
 80158fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80158fe:	9300      	str	r3, [sp, #0]
 8015900:	4613      	mov	r3, r2
 8015902:	68ba      	ldr	r2, [r7, #8]
 8015904:	6839      	ldr	r1, [r7, #0]
 8015906:	6838      	ldr	r0, [r7, #0]
 8015908:	f7ff f92b 	bl	8014b62 <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 801590c:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8015910:	f107 0314 	add.w	r3, r7, #20
 8015914:	4619      	mov	r1, r3
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	f7fe fe6e 	bl	80145f8 <mg_uecc_vli_set>
}
 801591c:	bf00      	nop
 801591e:	3738      	adds	r7, #56	@ 0x38
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 8015924:	b590      	push	{r4, r7, lr}
 8015926:	b0a1      	sub	sp, #132	@ 0x84
 8015928:	af02      	add	r7, sp, #8
 801592a:	60f8      	str	r0, [r7, #12]
 801592c:	60b9      	str	r1, [r7, #8]
 801592e:	607a      	str	r2, [r7, #4]
 8015930:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 8015932:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8015936:	2220      	movs	r2, #32
 8015938:	2100      	movs	r1, #0
 801593a:	4618      	mov	r0, r3
 801593c:	f00c fa52 	bl	8021de4 <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8015940:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801594a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801594e:	1d1a      	adds	r2, r3, #4
 8015950:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8015954:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015958:	9300      	str	r3, [sp, #0]
 801595a:	4613      	mov	r3, r2
 801595c:	68fa      	ldr	r2, [r7, #12]
 801595e:	6879      	ldr	r1, [r7, #4]
 8015960:	f7ff f8ff 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 8015964:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8015968:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801596c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015970:	4618      	mov	r0, r3
 8015972:	f7ff fa86 	bl	8014e82 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 8015976:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801597a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801597e:	68f9      	ldr	r1, [r7, #12]
 8015980:	68f8      	ldr	r0, [r7, #12]
 8015982:	f7ff fa62 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 8015986:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801598a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801598e:	6879      	ldr	r1, [r7, #4]
 8015990:	6878      	ldr	r0, [r7, #4]
 8015992:	f7ff fa5a 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 8015996:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801599a:	1d1a      	adds	r2, r3, #4
 801599c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80159a0:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80159a4:	9300      	str	r3, [sp, #0]
 80159a6:	4613      	mov	r3, r2
 80159a8:	68ba      	ldr	r2, [r7, #8]
 80159aa:	6839      	ldr	r1, [r7, #0]
 80159ac:	f7ff f8b2 	bl	8014b14 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 80159b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80159b4:	1d1a      	adds	r2, r3, #4
 80159b6:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80159ba:	9300      	str	r3, [sp, #0]
 80159bc:	4613      	mov	r3, r2
 80159be:	68ba      	ldr	r2, [r7, #8]
 80159c0:	6839      	ldr	r1, [r7, #0]
 80159c2:	6838      	ldr	r0, [r7, #0]
 80159c4:	f7ff f8cd 	bl	8014b62 <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 80159c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80159cc:	1d1a      	adds	r2, r3, #4
 80159ce:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80159d2:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80159d6:	9300      	str	r3, [sp, #0]
 80159d8:	4613      	mov	r3, r2
 80159da:	68fa      	ldr	r2, [r7, #12]
 80159dc:	6879      	ldr	r1, [r7, #4]
 80159de:	f7ff f8c0 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 80159e2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80159e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80159ea:	68b9      	ldr	r1, [r7, #8]
 80159ec:	68b8      	ldr	r0, [r7, #8]
 80159ee:	f7ff fa2c 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 80159f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80159f6:	1d1a      	adds	r2, r3, #4
 80159f8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80159fc:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015a00:	9300      	str	r3, [sp, #0]
 8015a02:	4613      	mov	r3, r2
 8015a04:	687a      	ldr	r2, [r7, #4]
 8015a06:	68f9      	ldr	r1, [r7, #12]
 8015a08:	f7ff f884 	bl	8014b14 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 8015a0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015a10:	6839      	ldr	r1, [r7, #0]
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	f7ff fa35 	bl	8014e82 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 8015a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015a1c:	1d19      	adds	r1, r3, #4
 8015a1e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8015a22:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015a26:	9300      	str	r3, [sp, #0]
 8015a28:	460b      	mov	r3, r1
 8015a2a:	6879      	ldr	r1, [r7, #4]
 8015a2c:	6878      	ldr	r0, [r7, #4]
 8015a2e:	f7ff f898 	bl	8014b62 <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 8015a32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015a36:	1d1a      	adds	r2, r3, #4
 8015a38:	f107 0014 	add.w	r0, r7, #20
 8015a3c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015a40:	9300      	str	r3, [sp, #0]
 8015a42:	4613      	mov	r3, r2
 8015a44:	687a      	ldr	r2, [r7, #4]
 8015a46:	68f9      	ldr	r1, [r7, #12]
 8015a48:	f7ff f88b 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 8015a4c:	f107 0214 	add.w	r2, r7, #20
 8015a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015a54:	6839      	ldr	r1, [r7, #0]
 8015a56:	6838      	ldr	r0, [r7, #0]
 8015a58:	f7ff f9f7 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 8015a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015a60:	1d1a      	adds	r2, r3, #4
 8015a62:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015a66:	9300      	str	r3, [sp, #0]
 8015a68:	4613      	mov	r3, r2
 8015a6a:	68ba      	ldr	r2, [r7, #8]
 8015a6c:	6839      	ldr	r1, [r7, #0]
 8015a6e:	6838      	ldr	r0, [r7, #0]
 8015a70:	f7ff f877 	bl	8014b62 <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 8015a74:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8015a78:	f107 0314 	add.w	r3, r7, #20
 8015a7c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015a80:	4618      	mov	r0, r3
 8015a82:	f7ff f9fe 	bl	8014e82 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 8015a86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015a8a:	1d1c      	adds	r4, r3, #4
 8015a8c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8015a90:	f107 0114 	add.w	r1, r7, #20
 8015a94:	f107 0014 	add.w	r0, r7, #20
 8015a98:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015a9c:	9300      	str	r3, [sp, #0]
 8015a9e:	4623      	mov	r3, r4
 8015aa0:	f7ff f85f 	bl	8014b62 <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 8015aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015aa8:	1d1a      	adds	r2, r3, #4
 8015aaa:	f107 0114 	add.w	r1, r7, #20
 8015aae:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8015ab2:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015ab6:	9300      	str	r3, [sp, #0]
 8015ab8:	4613      	mov	r3, r2
 8015aba:	68fa      	ldr	r2, [r7, #12]
 8015abc:	f7ff f851 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 8015ac0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8015ac4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8015ac8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8015acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015ad0:	f7ff f9bb 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 8015ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015ad8:	1d1a      	adds	r2, r3, #4
 8015ada:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8015ade:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8015ae2:	9300      	str	r3, [sp, #0]
 8015ae4:	4613      	mov	r3, r2
 8015ae6:	68ba      	ldr	r2, [r7, #8]
 8015ae8:	68b8      	ldr	r0, [r7, #8]
 8015aea:	f7ff f83a 	bl	8014b62 <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 8015aee:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 8015af2:	f107 0314 	add.w	r3, r7, #20
 8015af6:	4619      	mov	r1, r3
 8015af8:	68f8      	ldr	r0, [r7, #12]
 8015afa:	f7fe fd7d 	bl	80145f8 <mg_uecc_vli_set>
}
 8015afe:	bf00      	nop
 8015b00:	377c      	adds	r7, #124	@ 0x7c
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd90      	pop	{r4, r7, pc}

08015b06 <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 8015b06:	b590      	push	{r4, r7, lr}
 8015b08:	b0b1      	sub	sp, #196	@ 0xc4
 8015b0a:	af02      	add	r7, sp, #8
 8015b0c:	60f8      	str	r0, [r7, #12]
 8015b0e:	60b9      	str	r1, [r7, #8]
 8015b10:	607a      	str	r2, [r7, #4]
 8015b12:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 8015b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 8015b1e:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8015b22:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015b26:	3320      	adds	r3, #32
 8015b28:	68b9      	ldr	r1, [r7, #8]
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f7fe fd64 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 8015b30:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015b34:	009b      	lsls	r3, r3, #2
 8015b36:	68ba      	ldr	r2, [r7, #8]
 8015b38:	18d1      	adds	r1, r2, r3
 8015b3a:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8015b3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015b42:	3320      	adds	r3, #32
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7fe fd57 	bl	80145f8 <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 8015b4a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8015b4e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015b52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015b56:	f103 0120 	add.w	r1, r3, #32
 8015b5a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015b5e:	f103 0020 	add.w	r0, r3, #32
 8015b62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015b66:	9301      	str	r3, [sp, #4]
 8015b68:	683b      	ldr	r3, [r7, #0]
 8015b6a:	9300      	str	r3, [sp, #0]
 8015b6c:	4623      	mov	r3, r4
 8015b6e:	f7ff fdf5 	bl	801575c <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 8015b72:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8015b76:	3b02      	subs	r3, #2
 8015b78:	b29b      	uxth	r3, r3
 8015b7a:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8015b7e:	e059      	b.n	8015c34 <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 8015b80:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8015b84:	4619      	mov	r1, r3
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f7fe fcbe 	bl	8014508 <mg_uecc_vli_testBit>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	bf0c      	ite	eq
 8015b92:	2301      	moveq	r3, #1
 8015b94:	2300      	movne	r3, #0
 8015b96:	b2db      	uxtb	r3, r3
 8015b98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8015b9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015ba0:	f1c3 0301 	rsb	r3, r3, #1
 8015ba4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015ba8:	015b      	lsls	r3, r3, #5
 8015baa:	18d0      	adds	r0, r2, r3
 8015bac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015bb0:	f1c3 0301 	rsb	r3, r3, #1
 8015bb4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015bb8:	015b      	lsls	r3, r3, #5
 8015bba:	18d1      	adds	r1, r2, r3
 8015bbc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015bc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015bc4:	015b      	lsls	r3, r3, #5
 8015bc6:	18d4      	adds	r4, r2, r3
 8015bc8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015bcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015bd0:	015b      	lsls	r3, r3, #5
 8015bd2:	441a      	add	r2, r3
 8015bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015bd8:	9300      	str	r3, [sp, #0]
 8015bda:	4613      	mov	r3, r2
 8015bdc:	4622      	mov	r2, r4
 8015bde:	f7ff fea1 	bl	8015924 <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8015be2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015be6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015bea:	015b      	lsls	r3, r3, #5
 8015bec:	18d0      	adds	r0, r2, r3
 8015bee:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015bf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015bf6:	015b      	lsls	r3, r3, #5
 8015bf8:	18d1      	adds	r1, r2, r3
 8015bfa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015bfe:	f1c3 0301 	rsb	r3, r3, #1
 8015c02:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015c06:	015b      	lsls	r3, r3, #5
 8015c08:	18d4      	adds	r4, r2, r3
 8015c0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015c0e:	f1c3 0301 	rsb	r3, r3, #1
 8015c12:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015c16:	015b      	lsls	r3, r3, #5
 8015c18:	441a      	add	r2, r3
 8015c1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015c1e:	9300      	str	r3, [sp, #0]
 8015c20:	4613      	mov	r3, r2
 8015c22:	4622      	mov	r2, r4
 8015c24:	f7ff fde4 	bl	80157f0 <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 8015c28:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8015c2c:	3b01      	subs	r3, #1
 8015c2e:	b29b      	uxth	r3, r3
 8015c30:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8015c34:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	dca1      	bgt.n	8015b80 <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 8015c3c:	2100      	movs	r1, #0
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	f7fe fc62 	bl	8014508 <mg_uecc_vli_testBit>
 8015c44:	4603      	mov	r3, r0
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	bf0c      	ite	eq
 8015c4a:	2301      	moveq	r3, #1
 8015c4c:	2300      	movne	r3, #0
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8015c54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015c58:	f1c3 0301 	rsb	r3, r3, #1
 8015c5c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015c60:	015b      	lsls	r3, r3, #5
 8015c62:	18d0      	adds	r0, r2, r3
 8015c64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015c68:	f1c3 0301 	rsb	r3, r3, #1
 8015c6c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015c70:	015b      	lsls	r3, r3, #5
 8015c72:	18d1      	adds	r1, r2, r3
 8015c74:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015c78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015c7c:	015b      	lsls	r3, r3, #5
 8015c7e:	18d4      	adds	r4, r2, r3
 8015c80:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015c84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015c88:	015b      	lsls	r3, r3, #5
 8015c8a:	441a      	add	r2, r3
 8015c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015c90:	9300      	str	r3, [sp, #0]
 8015c92:	4613      	mov	r3, r2
 8015c94:	4622      	mov	r2, r4
 8015c96:	f7ff fe45 	bl	8015924 <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 8015c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015c9e:	1d1c      	adds	r4, r3, #4
 8015ca0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015ca4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015ca8:	f103 0120 	add.w	r1, r3, #32
 8015cac:	f107 0010 	add.w	r0, r7, #16
 8015cb0:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015cb4:	9300      	str	r3, [sp, #0]
 8015cb6:	4623      	mov	r3, r4
 8015cb8:	f7fe ff53 	bl	8014b62 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 8015cbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015cc0:	f1c3 0301 	rsb	r3, r3, #1
 8015cc4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015cc8:	015b      	lsls	r3, r3, #5
 8015cca:	441a      	add	r2, r3
 8015ccc:	f107 0110 	add.w	r1, r7, #16
 8015cd0:	f107 0010 	add.w	r0, r7, #16
 8015cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015cd8:	f7ff f8b7 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 8015cdc:	f107 0110 	add.w	r1, r7, #16
 8015ce0:	f107 0010 	add.w	r0, r7, #16
 8015ce4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015ce8:	68ba      	ldr	r2, [r7, #8]
 8015cea:	f7ff f8ae 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 8015cee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015cf2:	1d1a      	adds	r2, r3, #4
 8015cf4:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015cf8:	f107 0110 	add.w	r1, r7, #16
 8015cfc:	f107 0010 	add.w	r0, r7, #16
 8015d00:	f7ff f907 	bl	8014f12 <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 8015d04:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015d08:	009b      	lsls	r3, r3, #2
 8015d0a:	68ba      	ldr	r2, [r7, #8]
 8015d0c:	441a      	add	r2, r3
 8015d0e:	f107 0110 	add.w	r1, r7, #16
 8015d12:	f107 0010 	add.w	r0, r7, #16
 8015d16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015d1a:	f7ff f896 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 8015d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d22:	f1c3 0301 	rsb	r3, r3, #1
 8015d26:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015d2a:	015b      	lsls	r3, r3, #5
 8015d2c:	441a      	add	r2, r3
 8015d2e:	f107 0110 	add.w	r1, r7, #16
 8015d32:	f107 0010 	add.w	r0, r7, #16
 8015d36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015d3a:	f7ff f886 	bl	8014e4a <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8015d3e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015d42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d46:	015b      	lsls	r3, r3, #5
 8015d48:	18d0      	adds	r0, r2, r3
 8015d4a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015d4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d52:	015b      	lsls	r3, r3, #5
 8015d54:	18d1      	adds	r1, r2, r3
 8015d56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d5a:	f1c3 0301 	rsb	r3, r3, #1
 8015d5e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8015d62:	015b      	lsls	r3, r3, #5
 8015d64:	18d4      	adds	r4, r2, r3
 8015d66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d6a:	f1c3 0301 	rsb	r3, r3, #1
 8015d6e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015d72:	015b      	lsls	r3, r3, #5
 8015d74:	441a      	add	r2, r3
 8015d76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015d7a:	9300      	str	r3, [sp, #0]
 8015d7c:	4613      	mov	r3, r2
 8015d7e:	4622      	mov	r2, r4
 8015d80:	f7ff fd36 	bl	80157f0 <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 8015d84:	f107 0210 	add.w	r2, r7, #16
 8015d88:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015d8c:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8015d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015d94:	f7ff fcba 	bl	801570c <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 8015d98:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8015d9c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8015da0:	4619      	mov	r1, r3
 8015da2:	68f8      	ldr	r0, [r7, #12]
 8015da4:	f7fe fc28 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 8015da8:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8015dac:	009b      	lsls	r3, r3, #2
 8015dae:	68fa      	ldr	r2, [r7, #12]
 8015db0:	4413      	add	r3, r2
 8015db2:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8015db6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f7fe fc1c 	bl	80145f8 <mg_uecc_vli_set>
}
 8015dc0:	bf00      	nop
 8015dc2:	37bc      	adds	r7, #188	@ 0xbc
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd90      	pop	{r4, r7, pc}

08015dc8 <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b086      	sub	sp, #24
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	60f8      	str	r0, [r7, #12]
 8015dd0:	60b9      	str	r1, [r7, #8]
 8015dd2:	607a      	str	r2, [r7, #4]
 8015dd4:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015ddc:	331f      	adds	r3, #31
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	da00      	bge.n	8015de4 <regularize_k+0x1c>
 8015de2:	331f      	adds	r3, #31
 8015de4:	115b      	asrs	r3, r3, #5
 8015de6:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	885b      	ldrh	r3, [r3, #2]
 8015dec:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8015dee:	683b      	ldr	r3, [r7, #0]
 8015df0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8015df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015df8:	68f9      	ldr	r1, [r7, #12]
 8015dfa:	68b8      	ldr	r0, [r7, #8]
 8015dfc:	f7fe fcec 	bl	80147d8 <mg_uecc_vli_add>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d10f      	bne.n	8015e26 <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 8015e06:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8015e0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015e0e:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8015e10:	429a      	cmp	r2, r3
 8015e12:	da0a      	bge.n	8015e2a <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 8015e14:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8015e18:	4619      	mov	r1, r3
 8015e1a:	68b8      	ldr	r0, [r7, #8]
 8015e1c:	f7fe fb74 	bl	8014508 <mg_uecc_vli_testBit>
 8015e20:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d001      	beq.n	8015e2a <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8015e26:	2301      	movs	r3, #1
 8015e28:	e000      	b.n	8015e2c <regularize_k+0x64>
 8015e2a:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 8015e2c:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8015e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015e38:	68b9      	ldr	r1, [r7, #8]
 8015e3a:	6878      	ldr	r0, [r7, #4]
 8015e3c:	f7fe fccc 	bl	80147d8 <mg_uecc_vli_add>
  return carry;
 8015e40:	693b      	ldr	r3, [r7, #16]
}
 8015e42:	4618      	mov	r0, r3
 8015e44:	3718      	adds	r7, #24
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}
	...

08015e4c <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b088      	sub	sp, #32
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	60f8      	str	r0, [r7, #12]
 8015e54:	60b9      	str	r1, [r7, #8]
 8015e56:	4613      	mov	r3, r2
 8015e58:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 8015e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e5e:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 8015e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e64:	4619      	mov	r1, r3
 8015e66:	68b8      	ldr	r0, [r7, #8]
 8015e68:	f7fe fb8e 	bl	8014588 <mg_uecc_vli_numBits>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 8015e70:	4b2a      	ldr	r3, [pc, #168]	@ (8015f1c <mg_uecc_generate_random_int+0xd0>)
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d101      	bne.n	8015e7c <mg_uecc_generate_random_int+0x30>
    return 0;
 8015e78:	2300      	movs	r3, #0
 8015e7a:	e04b      	b.n	8015f14 <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	61fb      	str	r3, [r7, #28]
 8015e80:	e044      	b.n	8015f0c <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 8015e82:	4b26      	ldr	r3, [pc, #152]	@ (8015f1c <mg_uecc_generate_random_int+0xd0>)
 8015e84:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 8015e86:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015e8a:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 8015e8c:	4611      	mov	r1, r2
 8015e8e:	68f8      	ldr	r0, [r7, #12]
 8015e90:	4798      	blx	r3
 8015e92:	4603      	mov	r3, r0
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d101      	bne.n	8015e9c <mg_uecc_generate_random_int+0x50>
      return 0;
 8015e98:	2300      	movs	r3, #0
 8015e9a:	e03b      	b.n	8015f14 <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 8015e9c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015ea0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015ea4:	4413      	add	r3, r2
 8015ea6:	009b      	lsls	r3, r3, #2
 8015ea8:	68fa      	ldr	r2, [r7, #12]
 8015eaa:	4413      	add	r3, r2
 8015eac:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 8015eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	015b      	lsls	r3, r3, #5
 8015eb6:	b29a      	uxth	r2, r3
 8015eb8:	8afb      	ldrh	r3, [r7, #22]
 8015eba:	1ad3      	subs	r3, r2, r3
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	b21b      	sxth	r3, r3
 8015ec0:	461a      	mov	r2, r3
 8015ec2:	69bb      	ldr	r3, [r7, #24]
 8015ec4:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 8015ec8:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8015ecc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015ed0:	4403      	add	r3, r0
 8015ed2:	009b      	lsls	r3, r3, #2
 8015ed4:	68f8      	ldr	r0, [r7, #12]
 8015ed6:	4403      	add	r3, r0
 8015ed8:	400a      	ands	r2, r1
 8015eda:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 8015edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ee0:	4619      	mov	r1, r3
 8015ee2:	68f8      	ldr	r0, [r7, #12]
 8015ee4:	f7fe fae6 	bl	80144b4 <mg_uecc_vli_isZero>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d10b      	bne.n	8015f06 <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 8015eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ef2:	461a      	mov	r2, r3
 8015ef4:	68f9      	ldr	r1, [r7, #12]
 8015ef6:	68b8      	ldr	r0, [r7, #8]
 8015ef8:	f7fe fc13 	bl	8014722 <mg_uecc_vli_cmp>
 8015efc:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 8015efe:	2b01      	cmp	r3, #1
 8015f00:	d101      	bne.n	8015f06 <mg_uecc_generate_random_int+0xba>
      return 1;
 8015f02:	2301      	movs	r3, #1
 8015f04:	e006      	b.n	8015f14 <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8015f06:	69fb      	ldr	r3, [r7, #28]
 8015f08:	3301      	adds	r3, #1
 8015f0a:	61fb      	str	r3, [r7, #28]
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8015f10:	d9b7      	bls.n	8015e82 <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 8015f12:	2300      	movs	r3, #0
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3720      	adds	r7, #32
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}
 8015f1c:	24000dd0 	.word	0x24000dd0

08015f20 <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 8015f20:	b480      	push	{r7}
 8015f22:	b087      	sub	sp, #28
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	60f8      	str	r0, [r7, #12]
 8015f28:	60b9      	str	r1, [r7, #8]
 8015f2a:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	617b      	str	r3, [r7, #20]
 8015f30:	e018      	b.n	8015f64 <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 8015f32:	68bb      	ldr	r3, [r7, #8]
 8015f34:	1e5a      	subs	r2, r3, #1
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	1ad3      	subs	r3, r2, r3
 8015f3a:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 8015f3c:	693b      	ldr	r3, [r7, #16]
 8015f3e:	f023 0303 	bic.w	r3, r3, #3
 8015f42:	687a      	ldr	r2, [r7, #4]
 8015f44:	4413      	add	r3, r2
 8015f46:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 8015f48:	693b      	ldr	r3, [r7, #16]
 8015f4a:	f003 0303 	and.w	r3, r3, #3
 8015f4e:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 8015f50:	fa22 f103 	lsr.w	r1, r2, r3
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	68fa      	ldr	r2, [r7, #12]
 8015f58:	4413      	add	r3, r2
 8015f5a:	b2ca      	uxtb	r2, r1
 8015f5c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 8015f5e:	697b      	ldr	r3, [r7, #20]
 8015f60:	3301      	adds	r3, #1
 8015f62:	617b      	str	r3, [r7, #20]
 8015f64:	697a      	ldr	r2, [r7, #20]
 8015f66:	68bb      	ldr	r3, [r7, #8]
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	dbe2      	blt.n	8015f32 <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 8015f6c:	bf00      	nop
 8015f6e:	bf00      	nop
 8015f70:	371c      	adds	r7, #28
 8015f72:	46bd      	mov	sp, r7
 8015f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f78:	4770      	bx	lr

08015f7a <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 8015f7a:	b580      	push	{r7, lr}
 8015f7c:	b086      	sub	sp, #24
 8015f7e:	af00      	add	r7, sp, #0
 8015f80:	60f8      	str	r0, [r7, #12]
 8015f82:	60b9      	str	r1, [r7, #8]
 8015f84:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	3303      	adds	r3, #3
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	da00      	bge.n	8015f90 <mg_uecc_vli_bytesToNative+0x16>
 8015f8e:	3303      	adds	r3, #3
 8015f90:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 8015f92:	b25b      	sxtb	r3, r3
 8015f94:	4619      	mov	r1, r3
 8015f96:	68f8      	ldr	r0, [r7, #12]
 8015f98:	f7fe fa6b 	bl	8014472 <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	617b      	str	r3, [r7, #20]
 8015fa0:	e01e      	b.n	8015fe0 <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	1e5a      	subs	r2, r3, #1
 8015fa6:	697b      	ldr	r3, [r7, #20]
 8015fa8:	1ad3      	subs	r3, r2, r3
 8015faa:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	f023 0303 	bic.w	r3, r3, #3
 8015fb2:	68fa      	ldr	r2, [r7, #12]
 8015fb4:	4413      	add	r3, r2
 8015fb6:	6819      	ldr	r1, [r3, #0]
 8015fb8:	697b      	ldr	r3, [r7, #20]
 8015fba:	68ba      	ldr	r2, [r7, #8]
 8015fbc:	4413      	add	r3, r2
 8015fbe:	781b      	ldrb	r3, [r3, #0]
 8015fc0:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 8015fc2:	693b      	ldr	r3, [r7, #16]
 8015fc4:	f003 0303 	and.w	r3, r3, #3
 8015fc8:	00db      	lsls	r3, r3, #3
 8015fca:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8015fcc:	693b      	ldr	r3, [r7, #16]
 8015fce:	f023 0303 	bic.w	r3, r3, #3
 8015fd2:	68f8      	ldr	r0, [r7, #12]
 8015fd4:	4403      	add	r3, r0
 8015fd6:	430a      	orrs	r2, r1
 8015fd8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	3301      	adds	r3, #1
 8015fde:	617b      	str	r3, [r7, #20]
 8015fe0:	697a      	ldr	r2, [r7, #20]
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	429a      	cmp	r2, r3
 8015fe6:	dbdc      	blt.n	8015fa2 <mg_uecc_vli_bytesToNative+0x28>
  }
}
 8015fe8:	bf00      	nop
 8015fea:	bf00      	nop
 8015fec:	3718      	adds	r7, #24
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}

08015ff2 <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 8015ff2:	b580      	push	{r7, lr}
 8015ff4:	b08a      	sub	sp, #40	@ 0x28
 8015ff6:	af00      	add	r7, sp, #0
 8015ff8:	60f8      	str	r0, [r7, #12]
 8015ffa:	60b9      	str	r1, [r7, #8]
 8015ffc:	607a      	str	r2, [r7, #4]
 8015ffe:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016006:	3307      	adds	r3, #7
 8016008:	2b00      	cmp	r3, #0
 801600a:	da00      	bge.n	801600e <bits2int+0x1c>
 801600c:	3307      	adds	r3, #7
 801600e:	10db      	asrs	r3, r3, #3
 8016010:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016018:	331f      	adds	r3, #31
 801601a:	2b00      	cmp	r3, #0
 801601c:	da00      	bge.n	8016020 <bits2int+0x2e>
 801601e:	331f      	adds	r3, #31
 8016020:	115b      	asrs	r3, r3, #5
 8016022:	b25b      	sxtb	r3, r3
 8016024:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 8016026:	687a      	ldr	r2, [r7, #4]
 8016028:	69fb      	ldr	r3, [r7, #28]
 801602a:	429a      	cmp	r2, r3
 801602c:	d901      	bls.n	8016032 <bits2int+0x40>
    bits_size = num_n_bytes;
 801602e:	69fb      	ldr	r3, [r7, #28]
 8016030:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 8016032:	69bb      	ldr	r3, [r7, #24]
 8016034:	b25b      	sxtb	r3, r3
 8016036:	4619      	mov	r1, r3
 8016038:	68f8      	ldr	r0, [r7, #12]
 801603a:	f7fe fa1a 	bl	8014472 <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	461a      	mov	r2, r3
 8016042:	68b9      	ldr	r1, [r7, #8]
 8016044:	68f8      	ldr	r0, [r7, #12]
 8016046:	f7ff ff98 	bl	8015f7a <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	00db      	lsls	r3, r3, #3
 801604e:	683a      	ldr	r2, [r7, #0]
 8016050:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8016054:	4293      	cmp	r3, r2
 8016056:	d93a      	bls.n	80160ce <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	00db      	lsls	r3, r3, #3
 801605c:	683a      	ldr	r2, [r7, #0]
 801605e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8016062:	1a9b      	subs	r3, r3, r2
 8016064:	617b      	str	r3, [r7, #20]
  carry = 0;
 8016066:	2300      	movs	r3, #0
 8016068:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 801606a:	69bb      	ldr	r3, [r7, #24]
 801606c:	009b      	lsls	r3, r3, #2
 801606e:	68fa      	ldr	r2, [r7, #12]
 8016070:	4413      	add	r3, r2
 8016072:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 8016074:	e010      	b.n	8016098 <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 8016076:	6a3b      	ldr	r3, [r7, #32]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 801607c:	693a      	ldr	r2, [r7, #16]
 801607e:	697b      	ldr	r3, [r7, #20]
 8016080:	40da      	lsrs	r2, r3
 8016082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016084:	431a      	orrs	r2, r3
 8016086:	6a3b      	ldr	r3, [r7, #32]
 8016088:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	f1c3 0320 	rsb	r3, r3, #32
 8016090:	693a      	ldr	r2, [r7, #16]
 8016092:	fa02 f303 	lsl.w	r3, r2, r3
 8016096:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 8016098:	6a3b      	ldr	r3, [r7, #32]
 801609a:	1f1a      	subs	r2, r3, #4
 801609c:	623a      	str	r2, [r7, #32]
 801609e:	68fa      	ldr	r2, [r7, #12]
 80160a0:	429a      	cmp	r2, r3
 80160a2:	d3e8      	bcc.n	8016076 <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	3324      	adds	r3, #36	@ 0x24
 80160a8:	69ba      	ldr	r2, [r7, #24]
 80160aa:	b252      	sxtb	r2, r2
 80160ac:	68f9      	ldr	r1, [r7, #12]
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7fe fac9 	bl	8014646 <mg_uecc_vli_cmp_unsafe>
 80160b4:	4603      	mov	r3, r0
 80160b6:	2b01      	cmp	r3, #1
 80160b8:	d00a      	beq.n	80160d0 <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80160c0:	69bb      	ldr	r3, [r7, #24]
 80160c2:	b25b      	sxtb	r3, r3
 80160c4:	68f9      	ldr	r1, [r7, #12]
 80160c6:	68f8      	ldr	r0, [r7, #12]
 80160c8:	f7fe fbd0 	bl	801486c <mg_uecc_vli_sub>
 80160cc:	e000      	b.n	80160d0 <bits2int+0xde>
    return;
 80160ce:	bf00      	nop
  }
}
 80160d0:	3728      	adds	r7, #40	@ 0x28
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bd80      	pop	{r7, pc}
	...

080160d8 <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 80160d8:	b590      	push	{r4, r7, lr}
 80160da:	b0ad      	sub	sp, #180	@ 0xb4
 80160dc:	af02      	add	r7, sp, #8
 80160de:	60f8      	str	r0, [r7, #12]
 80160e0:	60b9      	str	r1, [r7, #8]
 80160e2:	607a      	str	r2, [r7, #4]
 80160e4:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 80160e6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80160ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80160ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80160f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 80160f2:	2300      	movs	r3, #0
 80160f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 80160f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80160fc:	781b      	ldrb	r3, [r3, #0]
 80160fe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8016102:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016106:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801610a:	331f      	adds	r3, #31
 801610c:	2b00      	cmp	r3, #0
 801610e:	da00      	bge.n	8016112 <mg_uecc_sign_with_k_internal+0x3a>
 8016110:	331f      	adds	r3, #31
 8016112:	115b      	asrs	r3, r3, #5
 8016114:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 8016118:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801611c:	885b      	ldrh	r3, [r3, #2]
 801611e:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 8016122:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8016126:	4619      	mov	r1, r3
 8016128:	6838      	ldr	r0, [r7, #0]
 801612a:	f7fe f9c3 	bl	80144b4 <mg_uecc_vli_isZero>
 801612e:	4603      	mov	r3, r0
 8016130:	2b00      	cmp	r3, #0
 8016132:	d10b      	bne.n	801614c <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 8016134:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016138:	3324      	adds	r3, #36	@ 0x24
 801613a:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801613e:	6839      	ldr	r1, [r7, #0]
 8016140:	4618      	mov	r0, r3
 8016142:	f7fe faee 	bl	8014722 <mg_uecc_vli_cmp>
 8016146:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 8016148:	2b01      	cmp	r3, #1
 801614a:	d001      	beq.n	8016150 <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 801614c:	2300      	movs	r3, #0
 801614e:	e128      	b.n	80163a2 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 8016150:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8016154:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8016158:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801615c:	6838      	ldr	r0, [r7, #0]
 801615e:	f7ff fe33 	bl	8015dc8 <regularize_k>
 8016162:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 8016166:	4b91      	ldr	r3, [pc, #580]	@ (80163ac <mg_uecc_sign_with_k_internal+0x2d4>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d01c      	beq.n	80161a8 <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 801616e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016172:	009b      	lsls	r3, r3, #2
 8016174:	33a8      	adds	r3, #168	@ 0xa8
 8016176:	443b      	add	r3, r7
 8016178:	f853 0c54 	ldr.w	r0, [r3, #-84]
 801617c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016180:	3304      	adds	r3, #4
 8016182:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 8016186:	4619      	mov	r1, r3
 8016188:	f7ff fe60 	bl	8015e4c <mg_uecc_generate_random_int>
 801618c:	4603      	mov	r3, r0
 801618e:	2b00      	cmp	r3, #0
 8016190:	d101      	bne.n	8016196 <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 8016192:	2300      	movs	r3, #0
 8016194:	e105      	b.n	80163a2 <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 8016196:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801619a:	009b      	lsls	r3, r3, #2
 801619c:	33a8      	adds	r3, #168	@ 0xa8
 801619e:	443b      	add	r3, r7
 80161a0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80161a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 80161a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80161ac:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 80161b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	bf0c      	ite	eq
 80161b8:	2301      	moveq	r3, #1
 80161ba:	2300      	movne	r3, #0
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	009b      	lsls	r3, r3, #2
 80161c0:	33a8      	adds	r3, #168	@ 0xa8
 80161c2:	443b      	add	r3, r7
 80161c4:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 80161c8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 80161cc:	3301      	adds	r3, #1
 80161ce:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 80161d0:	b21b      	sxth	r3, r3
 80161d2:	f107 0014 	add.w	r0, r7, #20
 80161d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80161da:	9201      	str	r2, [sp, #4]
 80161dc:	9300      	str	r3, [sp, #0]
 80161de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80161e2:	4622      	mov	r2, r4
 80161e4:	f7ff fc8f 	bl	8015b06 <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 80161e8:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 80161ec:	f107 0314 	add.w	r3, r7, #20
 80161f0:	4611      	mov	r1, r2
 80161f2:	4618      	mov	r0, r3
 80161f4:	f7fe f95e 	bl	80144b4 <mg_uecc_vli_isZero>
 80161f8:	4603      	mov	r3, r0
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d001      	beq.n	8016202 <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 80161fe:	2300      	movs	r3, #0
 8016200:	e0cf      	b.n	80163a2 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 8016202:	4b6a      	ldr	r3, [pc, #424]	@ (80163ac <mg_uecc_sign_with_k_internal+0x2d4>)
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d10a      	bne.n	8016220 <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 801620a:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801620e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8016212:	4611      	mov	r1, r2
 8016214:	4618      	mov	r0, r3
 8016216:	f7fe f92c 	bl	8014472 <mg_uecc_vli_clear>
    tmp[0] = 1;
 801621a:	2301      	movs	r3, #1
 801621c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801621e:	e00f      	b.n	8016240 <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 8016220:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016224:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8016228:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801622c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8016230:	4618      	mov	r0, r3
 8016232:	f7ff fe0b 	bl	8015e4c <mg_uecc_generate_random_int>
 8016236:	4603      	mov	r3, r0
 8016238:	2b00      	cmp	r3, #0
 801623a:	d101      	bne.n	8016240 <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 801623c:	2300      	movs	r3, #0
 801623e:	e0b0      	b.n	80163a2 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 8016240:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016244:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8016248:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801624c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8016250:	9300      	str	r3, [sp, #0]
 8016252:	460b      	mov	r3, r1
 8016254:	6839      	ldr	r1, [r7, #0]
 8016256:	6838      	ldr	r0, [r7, #0]
 8016258:	f7fe fddc 	bl	8014e14 <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 801625c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016260:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8016264:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8016268:	6839      	ldr	r1, [r7, #0]
 801626a:	6838      	ldr	r0, [r7, #0]
 801626c:	f7fe fe51 	bl	8014f12 <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 8016270:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016274:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8016278:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801627c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8016280:	9300      	str	r3, [sp, #0]
 8016282:	460b      	mov	r3, r1
 8016284:	6839      	ldr	r1, [r7, #0]
 8016286:	6838      	ldr	r0, [r7, #0]
 8016288:	f7fe fdc4 	bl	8014e14 <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 801628c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016290:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016294:	4619      	mov	r1, r3
 8016296:	f107 0314 	add.w	r3, r7, #20
 801629a:	461a      	mov	r2, r3
 801629c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80162a0:	f7ff fe3e 	bl	8015f20 <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 80162a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80162a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80162ac:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	da00      	bge.n	80162b4 <mg_uecc_sign_with_k_internal+0x1dc>
 80162b2:	3307      	adds	r3, #7
 80162b4:	10db      	asrs	r3, r3, #3
 80162b6:	461a      	mov	r2, r3
 80162b8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80162bc:	68f9      	ldr	r1, [r7, #12]
 80162be:	4618      	mov	r0, r3
 80162c0:	f7ff fe5b 	bl	8015f7a <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 80162c4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80162c8:	3b01      	subs	r3, #1
 80162ca:	009b      	lsls	r3, r3, #2
 80162cc:	33a8      	adds	r3, #168	@ 0xa8
 80162ce:	443b      	add	r3, r7
 80162d0:	2200      	movs	r2, #0
 80162d2:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 80162d6:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 80162da:	f107 0114 	add.w	r1, r7, #20
 80162de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80162e2:	4618      	mov	r0, r3
 80162e4:	f7fe f988 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 80162e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80162ec:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80162f0:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80162f4:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80162f8:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80162fc:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8016300:	9300      	str	r3, [sp, #0]
 8016302:	4623      	mov	r3, r4
 8016304:	f7fe fd86 	bl	8014e14 <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 8016308:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 801630c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016310:	687a      	ldr	r2, [r7, #4]
 8016312:	68b9      	ldr	r1, [r7, #8]
 8016314:	f7ff fe6d 	bl	8015ff2 <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 8016318:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801631c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8016320:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8016324:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8016328:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801632c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8016330:	9300      	str	r3, [sp, #0]
 8016332:	4623      	mov	r3, r4
 8016334:	f7fe fbee 	bl	8014b14 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 8016338:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801633c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8016340:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8016344:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8016348:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801634c:	9300      	str	r3, [sp, #0]
 801634e:	4613      	mov	r3, r2
 8016350:	683a      	ldr	r2, [r7, #0]
 8016352:	f7fe fd5f 	bl	8014e14 <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 8016356:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801635a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801635e:	4611      	mov	r1, r2
 8016360:	4618      	mov	r0, r3
 8016362:	f7fe f911 	bl	8014588 <mg_uecc_vli_numBits>
 8016366:	4603      	mov	r3, r0
 8016368:	461a      	mov	r2, r3
 801636a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801636e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016372:	00db      	lsls	r3, r3, #3
 8016374:	429a      	cmp	r2, r3
 8016376:	dd01      	ble.n	801637c <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 8016378:	2300      	movs	r3, #0
 801637a:	e012      	b.n	80163a2 <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 801637c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016380:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016384:	461a      	mov	r2, r3
 8016386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801638a:	1898      	adds	r0, r3, r2
 801638c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016390:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016394:	4619      	mov	r1, r3
 8016396:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801639a:	461a      	mov	r2, r3
 801639c:	f7ff fdc0 	bl	8015f20 <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 80163a0:	2301      	movs	r3, #1
}
 80163a2:	4618      	mov	r0, r3
 80163a4:	37ac      	adds	r7, #172	@ 0xac
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd90      	pop	{r4, r7, pc}
 80163aa:	bf00      	nop
 80163ac:	24000dd0 	.word	0x24000dd0

080163b0 <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b084      	sub	sp, #16
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	695a      	ldr	r2, [r3, #20]
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	691b      	ldr	r3, [r3, #16]
 80163c2:	005b      	lsls	r3, r3, #1
 80163c4:	4413      	add	r3, r2
 80163c6:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 80163c8:	2300      	movs	r3, #0
 80163ca:	60fb      	str	r3, [r7, #12]
 80163cc:	e00d      	b.n	80163ea <HMAC_init+0x3a>
 80163ce:	683a      	ldr	r2, [r7, #0]
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	4413      	add	r3, r2
 80163d4:	781a      	ldrb	r2, [r3, #0]
 80163d6:	68b9      	ldr	r1, [r7, #8]
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	440b      	add	r3, r1
 80163dc:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 80163e0:	b2d2      	uxtb	r2, r2
 80163e2:	701a      	strb	r2, [r3, #0]
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	3301      	adds	r3, #1
 80163e8:	60fb      	str	r3, [r7, #12]
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	691b      	ldr	r3, [r3, #16]
 80163ee:	68fa      	ldr	r2, [r7, #12]
 80163f0:	429a      	cmp	r2, r3
 80163f2:	d3ec      	bcc.n	80163ce <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 80163f4:	e007      	b.n	8016406 <HMAC_init+0x56>
 80163f6:	68ba      	ldr	r2, [r7, #8]
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	4413      	add	r3, r2
 80163fc:	2236      	movs	r2, #54	@ 0x36
 80163fe:	701a      	strb	r2, [r3, #0]
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	3301      	adds	r3, #1
 8016404:	60fb      	str	r3, [r7, #12]
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	68db      	ldr	r3, [r3, #12]
 801640a:	68fa      	ldr	r2, [r7, #12]
 801640c:	429a      	cmp	r2, r3
 801640e:	d3f2      	bcc.n	80163f6 <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	685b      	ldr	r3, [r3, #4]
 801641c:	687a      	ldr	r2, [r7, #4]
 801641e:	68d2      	ldr	r2, [r2, #12]
 8016420:	68b9      	ldr	r1, [r7, #8]
 8016422:	6878      	ldr	r0, [r7, #4]
 8016424:	4798      	blx	r3
}
 8016426:	bf00      	nop
 8016428:	3710      	adds	r7, #16
 801642a:	46bd      	mov	sp, r7
 801642c:	bd80      	pop	{r7, pc}

0801642e <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 801642e:	b580      	push	{r7, lr}
 8016430:	b084      	sub	sp, #16
 8016432:	af00      	add	r7, sp, #0
 8016434:	60f8      	str	r0, [r7, #12]
 8016436:	60b9      	str	r1, [r7, #8]
 8016438:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	685b      	ldr	r3, [r3, #4]
 801643e:	687a      	ldr	r2, [r7, #4]
 8016440:	68b9      	ldr	r1, [r7, #8]
 8016442:	68f8      	ldr	r0, [r7, #12]
 8016444:	4798      	blx	r3
}
 8016446:	bf00      	nop
 8016448:	3710      	adds	r7, #16
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}

0801644e <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 801644e:	b580      	push	{r7, lr}
 8016450:	b086      	sub	sp, #24
 8016452:	af00      	add	r7, sp, #0
 8016454:	60f8      	str	r0, [r7, #12]
 8016456:	60b9      	str	r1, [r7, #8]
 8016458:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	695a      	ldr	r2, [r3, #20]
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	691b      	ldr	r3, [r3, #16]
 8016462:	005b      	lsls	r3, r3, #1
 8016464:	4413      	add	r3, r2
 8016466:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 8016468:	2300      	movs	r3, #0
 801646a:	617b      	str	r3, [r7, #20]
 801646c:	e00d      	b.n	801648a <HMAC_finish+0x3c>
 801646e:	68ba      	ldr	r2, [r7, #8]
 8016470:	697b      	ldr	r3, [r7, #20]
 8016472:	4413      	add	r3, r2
 8016474:	781a      	ldrb	r2, [r3, #0]
 8016476:	6939      	ldr	r1, [r7, #16]
 8016478:	697b      	ldr	r3, [r7, #20]
 801647a:	440b      	add	r3, r1
 801647c:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 8016480:	b2d2      	uxtb	r2, r2
 8016482:	701a      	strb	r2, [r3, #0]
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	3301      	adds	r3, #1
 8016488:	617b      	str	r3, [r7, #20]
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	691b      	ldr	r3, [r3, #16]
 801648e:	697a      	ldr	r2, [r7, #20]
 8016490:	429a      	cmp	r2, r3
 8016492:	d3ec      	bcc.n	801646e <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 8016494:	e007      	b.n	80164a6 <HMAC_finish+0x58>
 8016496:	693a      	ldr	r2, [r7, #16]
 8016498:	697b      	ldr	r3, [r7, #20]
 801649a:	4413      	add	r3, r2
 801649c:	225c      	movs	r2, #92	@ 0x5c
 801649e:	701a      	strb	r2, [r3, #0]
 80164a0:	697b      	ldr	r3, [r7, #20]
 80164a2:	3301      	adds	r3, #1
 80164a4:	617b      	str	r3, [r7, #20]
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	68db      	ldr	r3, [r3, #12]
 80164aa:	697a      	ldr	r2, [r7, #20]
 80164ac:	429a      	cmp	r2, r3
 80164ae:	d3f2      	bcc.n	8016496 <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	689b      	ldr	r3, [r3, #8]
 80164b4:	6879      	ldr	r1, [r7, #4]
 80164b6:	68f8      	ldr	r0, [r7, #12]
 80164b8:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	68f8      	ldr	r0, [r7, #12]
 80164c0:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	68fa      	ldr	r2, [r7, #12]
 80164c8:	68d2      	ldr	r2, [r2, #12]
 80164ca:	6939      	ldr	r1, [r7, #16]
 80164cc:	68f8      	ldr	r0, [r7, #12]
 80164ce:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	685b      	ldr	r3, [r3, #4]
 80164d4:	68fa      	ldr	r2, [r7, #12]
 80164d6:	6912      	ldr	r2, [r2, #16]
 80164d8:	6879      	ldr	r1, [r7, #4]
 80164da:	68f8      	ldr	r0, [r7, #12]
 80164dc:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	689b      	ldr	r3, [r3, #8]
 80164e2:	6879      	ldr	r1, [r7, #4]
 80164e4:	68f8      	ldr	r0, [r7, #12]
 80164e6:	4798      	blx	r3
}
 80164e8:	bf00      	nop
 80164ea:	3718      	adds	r7, #24
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}

080164f0 <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b084      	sub	sp, #16
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	60f8      	str	r0, [r7, #12]
 80164f8:	60b9      	str	r1, [r7, #8]
 80164fa:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 80164fc:	68b9      	ldr	r1, [r7, #8]
 80164fe:	68f8      	ldr	r0, [r7, #12]
 8016500:	f7ff ff56 	bl	80163b0 <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	691b      	ldr	r3, [r3, #16]
 8016508:	461a      	mov	r2, r3
 801650a:	6879      	ldr	r1, [r7, #4]
 801650c:	68f8      	ldr	r0, [r7, #12]
 801650e:	f7ff ff8e 	bl	801642e <HMAC_update>
  HMAC_finish(hash_context, K, V);
 8016512:	687a      	ldr	r2, [r7, #4]
 8016514:	68b9      	ldr	r1, [r7, #8]
 8016516:	68f8      	ldr	r0, [r7, #12]
 8016518:	f7ff ff99 	bl	801644e <HMAC_finish>
}
 801651c:	bf00      	nop
 801651e:	3710      	adds	r7, #16
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}

08016524 <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 8016524:	b580      	push	{r7, lr}
 8016526:	b096      	sub	sp, #88	@ 0x58
 8016528:	af02      	add	r7, sp, #8
 801652a:	60f8      	str	r0, [r7, #12]
 801652c:	60b9      	str	r1, [r7, #8]
 801652e:	607a      	str	r2, [r7, #4]
 8016530:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 8016532:	683b      	ldr	r3, [r7, #0]
 8016534:	695b      	ldr	r3, [r3, #20]
 8016536:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 8016538:	683b      	ldr	r3, [r7, #0]
 801653a:	691b      	ldr	r3, [r3, #16]
 801653c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801653e:	4413      	add	r3, r2
 8016540:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 8016542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016544:	785b      	ldrb	r3, [r3, #1]
 8016546:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801654a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801654c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016550:	331f      	adds	r3, #31
 8016552:	2b00      	cmp	r3, #0
 8016554:	da00      	bge.n	8016558 <mg_uecc_sign_deterministic+0x34>
 8016556:	331f      	adds	r3, #31
 8016558:	115b      	asrs	r3, r3, #5
 801655a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 801655e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016560:	885b      	ldrh	r3, [r3, #2]
 8016562:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 8016564:	2300      	movs	r3, #0
 8016566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016568:	e00c      	b.n	8016584 <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 801656a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801656c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801656e:	4413      	add	r3, r2
 8016570:	2201      	movs	r2, #1
 8016572:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 8016574:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016578:	4413      	add	r3, r2
 801657a:	2200      	movs	r2, #0
 801657c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 801657e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016580:	3301      	adds	r3, #1
 8016582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016584:	683b      	ldr	r3, [r7, #0]
 8016586:	691b      	ldr	r3, [r3, #16]
 8016588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801658a:	429a      	cmp	r2, r3
 801658c:	d3ed      	bcc.n	801656a <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 801658e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016590:	6838      	ldr	r0, [r7, #0]
 8016592:	f7ff ff0d 	bl	80163b0 <HMAC_init>
  V[hash_context->result_size] = 0x00;
 8016596:	683b      	ldr	r3, [r7, #0]
 8016598:	691b      	ldr	r3, [r3, #16]
 801659a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801659c:	4413      	add	r3, r2
 801659e:	2200      	movs	r2, #0
 80165a0:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 80165a2:	683b      	ldr	r3, [r7, #0]
 80165a4:	691b      	ldr	r3, [r3, #16]
 80165a6:	3301      	adds	r3, #1
 80165a8:	461a      	mov	r2, r3
 80165aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80165ac:	6838      	ldr	r0, [r7, #0]
 80165ae:	f7ff ff3e 	bl	801642e <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 80165b2:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80165b6:	461a      	mov	r2, r3
 80165b8:	68f9      	ldr	r1, [r7, #12]
 80165ba:	6838      	ldr	r0, [r7, #0]
 80165bc:	f7ff ff37 	bl	801642e <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 80165c0:	687a      	ldr	r2, [r7, #4]
 80165c2:	68b9      	ldr	r1, [r7, #8]
 80165c4:	6838      	ldr	r0, [r7, #0]
 80165c6:	f7ff ff32 	bl	801642e <HMAC_update>
  HMAC_finish(hash_context, K, K);
 80165ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80165cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80165ce:	6838      	ldr	r0, [r7, #0]
 80165d0:	f7ff ff3d 	bl	801644e <HMAC_finish>

  update_V(hash_context, K, V);
 80165d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80165d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80165d8:	6838      	ldr	r0, [r7, #0]
 80165da:	f7ff ff89 	bl	80164f0 <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 80165de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80165e0:	6838      	ldr	r0, [r7, #0]
 80165e2:	f7ff fee5 	bl	80163b0 <HMAC_init>
  V[hash_context->result_size] = 0x01;
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	691b      	ldr	r3, [r3, #16]
 80165ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80165ec:	4413      	add	r3, r2
 80165ee:	2201      	movs	r2, #1
 80165f0:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 80165f2:	683b      	ldr	r3, [r7, #0]
 80165f4:	691b      	ldr	r3, [r3, #16]
 80165f6:	3301      	adds	r3, #1
 80165f8:	461a      	mov	r2, r3
 80165fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80165fc:	6838      	ldr	r0, [r7, #0]
 80165fe:	f7ff ff16 	bl	801642e <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 8016602:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8016606:	461a      	mov	r2, r3
 8016608:	68f9      	ldr	r1, [r7, #12]
 801660a:	6838      	ldr	r0, [r7, #0]
 801660c:	f7ff ff0f 	bl	801642e <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 8016610:	687a      	ldr	r2, [r7, #4]
 8016612:	68b9      	ldr	r1, [r7, #8]
 8016614:	6838      	ldr	r0, [r7, #0]
 8016616:	f7ff ff0a 	bl	801642e <HMAC_update>
  HMAC_finish(hash_context, K, K);
 801661a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801661c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801661e:	6838      	ldr	r0, [r7, #0]
 8016620:	f7ff ff15 	bl	801644e <HMAC_finish>

  update_V(hash_context, K, V);
 8016624:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016626:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016628:	6838      	ldr	r0, [r7, #0]
 801662a:	f7ff ff61 	bl	80164f0 <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801662e:	2300      	movs	r3, #0
 8016630:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016632:	e084      	b.n	801673e <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 8016634:	f107 0310 	add.w	r3, r7, #16
 8016638:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 801663a:	2300      	movs	r3, #0
 801663c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 8016640:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016642:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016644:	6838      	ldr	r0, [r7, #0]
 8016646:	f7ff ff53 	bl	80164f0 <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 801664a:	2300      	movs	r3, #0
 801664c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801664e:	e017      	b.n	8016680 <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 8016650:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016654:	441a      	add	r2, r3
 8016656:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 801665a:	b2cb      	uxtb	r3, r1
 801665c:	3301      	adds	r3, #1
 801665e:	b2db      	uxtb	r3, r3
 8016660:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016666:	440b      	add	r3, r1
 8016668:	7812      	ldrb	r2, [r2, #0]
 801666a:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 801666c:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 8016670:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8016674:	009b      	lsls	r3, r3, #2
 8016676:	429a      	cmp	r2, r3
 8016678:	da08      	bge.n	801668c <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 801667a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801667c:	3301      	adds	r3, #1
 801667e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	691b      	ldr	r3, [r3, #16]
 8016684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016686:	429a      	cmp	r2, r3
 8016688:	d3e2      	bcc.n	8016650 <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 801668a:	e7d9      	b.n	8016640 <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 801668c:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 801668e:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8016692:	015a      	lsls	r2, r3, #5
 8016694:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8016698:	429a      	cmp	r2, r3
 801669a:	dd20      	ble.n	80166de <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 801669c:	f04f 33ff 	mov.w	r3, #4294967295
 80166a0:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 80166a2:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 80166a6:	3b01      	subs	r3, #1
 80166a8:	009b      	lsls	r3, r3, #2
 80166aa:	3350      	adds	r3, #80	@ 0x50
 80166ac:	443b      	add	r3, r7
 80166ae:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 80166b2:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 80166b6:	b29b      	uxth	r3, r3
 80166b8:	015b      	lsls	r3, r3, #5
 80166ba:	b29a      	uxth	r2, r3
 80166bc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80166be:	1ad3      	subs	r3, r2, r3
 80166c0:	b29b      	uxth	r3, r3
 80166c2:	b21b      	sxth	r3, r3
 80166c4:	461a      	mov	r2, r3
          mask >>
 80166c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166c8:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 80166cc:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 80166d0:	3b01      	subs	r3, #1
 80166d2:	400a      	ands	r2, r1
 80166d4:	009b      	lsls	r3, r3, #2
 80166d6:	3350      	adds	r3, #80	@ 0x50
 80166d8:	443b      	add	r3, r7
 80166da:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 80166de:	f107 0210 	add.w	r2, r7, #16
 80166e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80166e4:	9301      	str	r3, [sp, #4]
 80166e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80166e8:	9300      	str	r3, [sp, #0]
 80166ea:	4613      	mov	r3, r2
 80166ec:	687a      	ldr	r2, [r7, #4]
 80166ee:	68b9      	ldr	r1, [r7, #8]
 80166f0:	68f8      	ldr	r0, [r7, #12]
 80166f2:	f7ff fcf1 	bl	80160d8 <mg_uecc_sign_with_k_internal>
 80166f6:	4603      	mov	r3, r0
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d001      	beq.n	8016700 <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 80166fc:	2301      	movs	r3, #1
 80166fe:	e023      	b.n	8016748 <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 8016700:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016702:	6838      	ldr	r0, [r7, #0]
 8016704:	f7ff fe54 	bl	80163b0 <HMAC_init>
    V[hash_context->result_size] = 0x00;
 8016708:	683b      	ldr	r3, [r7, #0]
 801670a:	691b      	ldr	r3, [r3, #16]
 801670c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801670e:	4413      	add	r3, r2
 8016710:	2200      	movs	r2, #0
 8016712:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	691b      	ldr	r3, [r3, #16]
 8016718:	3301      	adds	r3, #1
 801671a:	461a      	mov	r2, r3
 801671c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801671e:	6838      	ldr	r0, [r7, #0]
 8016720:	f7ff fe85 	bl	801642e <HMAC_update>
    HMAC_finish(hash_context, K, K);
 8016724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016726:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016728:	6838      	ldr	r0, [r7, #0]
 801672a:	f7ff fe90 	bl	801644e <HMAC_finish>

    update_V(hash_context, K, V);
 801672e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016730:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016732:	6838      	ldr	r0, [r7, #0]
 8016734:	f7ff fedc 	bl	80164f0 <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8016738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801673a:	3301      	adds	r3, #1
 801673c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801673e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016740:	2b3f      	cmp	r3, #63	@ 0x3f
 8016742:	f67f af77 	bls.w	8016634 <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 8016746:	2300      	movs	r3, #0
}
 8016748:	4618      	mov	r0, r3
 801674a:	3750      	adds	r7, #80	@ 0x50
 801674c:	46bd      	mov	sp, r7
 801674e:	bd80      	pop	{r7, pc}

08016750 <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 8016750:	b480      	push	{r7}
 8016752:	b083      	sub	sp, #12
 8016754:	af00      	add	r7, sp, #0
 8016756:	4603      	mov	r3, r0
 8016758:	460a      	mov	r2, r1
 801675a:	80fb      	strh	r3, [r7, #6]
 801675c:	4613      	mov	r3, r2
 801675e:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 8016760:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8016764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016768:	4293      	cmp	r3, r2
 801676a:	bfb8      	it	lt
 801676c:	4613      	movlt	r3, r2
 801676e:	b21b      	sxth	r3, r3
}
 8016770:	4618      	mov	r0, r3
 8016772:	370c      	adds	r7, #12
 8016774:	46bd      	mov	sp, r7
 8016776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677a:	4770      	bx	lr

0801677c <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 801677c:	b590      	push	{r4, r7, lr}
 801677e:	b0ff      	sub	sp, #508	@ 0x1fc
 8016780:	af02      	add	r7, sp, #8
 8016782:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 8016786:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 801678a:	6020      	str	r0, [r4, #0]
 801678c:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 8016790:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 8016794:	6001      	str	r1, [r0, #0]
 8016796:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 801679a:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 801679e:	600a      	str	r2, [r1, #0]
 80167a0:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 80167a4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80167a8:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 80167aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80167b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80167b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80167bc:	331f      	adds	r3, #31
 80167be:	2b00      	cmp	r3, #0
 80167c0:	da00      	bge.n	80167c4 <mg_uecc_verify+0x48>
 80167c2:	331f      	adds	r3, #31
 80167c4:	115b      	asrs	r3, r3, #5
 80167c6:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 80167ca:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80167ce:	3b01      	subs	r3, #1
 80167d0:	009b      	lsls	r3, r3, #2
 80167d2:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80167d6:	443b      	add	r3, r7
 80167d8:	2200      	movs	r2, #0
 80167da:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 80167de:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80167e2:	1e5a      	subs	r2, r3, #1
 80167e4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80167e8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80167ec:	2100      	movs	r1, #0
 80167ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 80167f2:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80167f6:	1e5a      	subs	r2, r3, #1
 80167f8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80167fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8016800:	2100      	movs	r1, #0
 8016802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 8016806:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801680a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801680e:	461a      	mov	r2, r3
 8016810:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016814:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8016818:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801681c:	6819      	ldr	r1, [r3, #0]
 801681e:	f7ff fbac 	bl	8015f7a <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 8016822:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016826:	009b      	lsls	r3, r3, #2
 8016828:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801682c:	18d0      	adds	r0, r2, r3
 801682e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016832:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016836:	461a      	mov	r2, r3
 8016838:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801683c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 8016844:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016848:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801684c:	461a      	mov	r2, r3
 801684e:	f7ff fb94 	bl	8015f7a <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 8016852:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016856:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801685a:	461a      	mov	r2, r3
 801685c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016860:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8016864:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8016868:	6819      	ldr	r1, [r3, #0]
 801686a:	f7ff fb86 	bl	8015f7a <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 801686e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016872:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016876:	461a      	mov	r2, r3
 8016878:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801687c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	1899      	adds	r1, r3, r2
 8016884:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016888:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801688c:	461a      	mov	r2, r3
 801688e:	f107 0310 	add.w	r3, r7, #16
 8016892:	4618      	mov	r0, r3
 8016894:	f7ff fb71 	bl	8015f7a <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 8016898:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801689c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80168a0:	4611      	mov	r1, r2
 80168a2:	4618      	mov	r0, r3
 80168a4:	f7fd fe06 	bl	80144b4 <mg_uecc_vli_isZero>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d10a      	bne.n	80168c4 <mg_uecc_verify+0x148>
 80168ae:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80168b2:	f107 0310 	add.w	r3, r7, #16
 80168b6:	4611      	mov	r1, r2
 80168b8:	4618      	mov	r0, r3
 80168ba:	f7fd fdfb 	bl	80144b4 <mg_uecc_vli_isZero>
 80168be:	4603      	mov	r3, r0
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d001      	beq.n	80168c8 <mg_uecc_verify+0x14c>
    return 0;
 80168c4:	2300      	movs	r3, #0
 80168c6:	e220      	b.n	8016d0a <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 80168c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80168cc:	3324      	adds	r3, #36	@ 0x24
 80168ce:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 80168d2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7fd feb5 	bl	8014646 <mg_uecc_vli_cmp_unsafe>
 80168dc:	4603      	mov	r3, r0
 80168de:	2b01      	cmp	r3, #1
 80168e0:	d10c      	bne.n	80168fc <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 80168e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80168e6:	3324      	adds	r3, #36	@ 0x24
 80168e8:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 80168ec:	f107 0110 	add.w	r1, r7, #16
 80168f0:	4618      	mov	r0, r3
 80168f2:	f7fd fea8 	bl	8014646 <mg_uecc_vli_cmp_unsafe>
 80168f6:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 80168f8:	2b01      	cmp	r3, #1
 80168fa:	d001      	beq.n	8016900 <mg_uecc_verify+0x184>
    return 0;
 80168fc:	2300      	movs	r3, #0
 80168fe:	e204      	b.n	8016d0a <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 8016900:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016904:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8016908:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801690c:	f107 0110 	add.w	r1, r7, #16
 8016910:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016914:	f7fe fafd 	bl	8014f12 <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 8016918:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801691c:	3b01      	subs	r3, #1
 801691e:	009b      	lsls	r3, r3, #2
 8016920:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8016924:	443b      	add	r3, r7
 8016926:	2200      	movs	r2, #0
 8016928:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 801692c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016930:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 8016934:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016938:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 801693c:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8016940:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016944:	6812      	ldr	r2, [r2, #0]
 8016946:	6809      	ldr	r1, [r1, #0]
 8016948:	f7ff fb53 	bl	8015ff2 <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 801694c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016950:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8016954:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016958:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 801695c:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8016960:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8016964:	9300      	str	r3, [sp, #0]
 8016966:	4623      	mov	r3, r4
 8016968:	f7fe fa54 	bl	8014e14 <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 801696c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016970:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8016974:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016978:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801697c:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8016980:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8016984:	9300      	str	r3, [sp, #0]
 8016986:	4623      	mov	r3, r4
 8016988:	f7fe fa44 	bl	8014e14 <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 801698c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016990:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8016994:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016998:	4618      	mov	r0, r3
 801699a:	f7fd fe2d 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 801699e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80169a2:	009b      	lsls	r3, r3, #2
 80169a4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80169a8:	18d0      	adds	r0, r2, r3
 80169aa:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80169ae:	009b      	lsls	r3, r3, #2
 80169b0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80169b4:	4413      	add	r3, r2
 80169b6:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80169ba:	4619      	mov	r1, r3
 80169bc:	f7fd fe1c 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 80169c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80169c4:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 80169c8:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80169cc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80169d0:	4618      	mov	r0, r3
 80169d2:	f7fd fe11 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 80169d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80169da:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80169de:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80169e2:	009b      	lsls	r3, r3, #2
 80169e4:	18d1      	adds	r1, r2, r3
 80169e6:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80169ea:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80169ee:	4618      	mov	r0, r3
 80169f0:	f7fd fe02 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 80169f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80169f8:	1d1c      	adds	r4, r3, #4
 80169fa:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80169fe:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8016a02:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016a06:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016a0a:	9300      	str	r3, [sp, #0]
 8016a0c:	4623      	mov	r3, r4
 8016a0e:	f7fe f8a8 	bl	8014b62 <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 8016a12:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016a16:	009b      	lsls	r3, r3, #2
 8016a18:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016a1c:	18d4      	adds	r4, r2, r3
 8016a1e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016a22:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8016a26:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8016a2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016a2e:	9300      	str	r3, [sp, #0]
 8016a30:	4623      	mov	r3, r4
 8016a32:	f7fe fedd 	bl	80157f0 <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 8016a36:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016a3a:	1d1a      	adds	r2, r3, #4
 8016a3c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016a40:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8016a44:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016a48:	f7fe fa63 	bl	8014f12 <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 8016a4c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016a50:	009b      	lsls	r3, r3, #2
 8016a52:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016a56:	18d1      	adds	r1, r2, r3
 8016a58:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016a5c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8016a60:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016a64:	f7fe fe52 	bl	801570c <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 8016a68:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016a6c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016a70:	2200      	movs	r2, #0
 8016a72:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 8016a74:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016a78:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8016a7c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016a80:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016a84:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 8016a86:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016a8a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016a8e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8016a92:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 8016a94:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016a98:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016a9c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8016aa0:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 8016aa2:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8016aa6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016aaa:	4611      	mov	r1, r2
 8016aac:	4618      	mov	r0, r3
 8016aae:	f7fd fd6b 	bl	8014588 <mg_uecc_vli_numBits>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	461c      	mov	r4, r3
 8016ab6:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8016aba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8016abe:	4611      	mov	r1, r2
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f7fd fd61 	bl	8014588 <mg_uecc_vli_numBits>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	4619      	mov	r1, r3
 8016aca:	4620      	mov	r0, r4
 8016acc:	f7ff fe40 	bl	8016750 <smax>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8016ad6:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8016ada:	3b01      	subs	r3, #1
 8016adc:	b29b      	uxth	r3, r3
 8016ade:	b21a      	sxth	r2, r3
 8016ae0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016ae4:	4611      	mov	r1, r2
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	f7fd fd0e 	bl	8014508 <mg_uecc_vli_testBit>
 8016aec:	4603      	mov	r3, r0
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	bf14      	ite	ne
 8016af2:	2301      	movne	r3, #1
 8016af4:	2300      	moveq	r3, #0
 8016af6:	b2db      	uxtb	r3, r3
 8016af8:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 8016afa:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8016afe:	3b01      	subs	r3, #1
 8016b00:	b29b      	uxth	r3, r3
 8016b02:	b21a      	sxth	r2, r3
 8016b04:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8016b08:	4611      	mov	r1, r2
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7fd fcfc 	bl	8014508 <mg_uecc_vli_testBit>
 8016b10:	4603      	mov	r3, r0
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d001      	beq.n	8016b1a <mg_uecc_verify+0x39e>
 8016b16:	2302      	movs	r3, #2
 8016b18:	e000      	b.n	8016b1c <mg_uecc_verify+0x3a0>
 8016b1a:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8016b1c:	ea43 0204 	orr.w	r2, r3, r4
  point =
 8016b20:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016b24:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b2c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 8016b30:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016b34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8016b38:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f7fd fd5b 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 8016b42:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016b46:	009b      	lsls	r3, r3, #2
 8016b48:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8016b4c:	18d1      	adds	r1, r2, r3
 8016b4e:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016b52:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8016b56:	4618      	mov	r0, r3
 8016b58:	f7fd fd4e 	bl	80145f8 <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 8016b5c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016b60:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8016b64:	4611      	mov	r1, r2
 8016b66:	4618      	mov	r0, r3
 8016b68:	f7fd fc83 	bl	8014472 <mg_uecc_vli_clear>
  z[0] = 1;
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 8016b72:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8016b76:	3b02      	subs	r3, #2
 8016b78:	b29b      	uxth	r3, r3
 8016b7a:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8016b7e:	e087      	b.n	8016c90 <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 8016b80:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016b84:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8016b88:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016b8c:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8016b90:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8016b94:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016b98:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8016b9a:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8016b9e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016ba2:	4611      	mov	r1, r2
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f7fd fcaf 	bl	8014508 <mg_uecc_vli_testBit>
 8016baa:	4603      	mov	r3, r0
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	bf14      	ite	ne
 8016bb0:	2301      	movne	r3, #1
 8016bb2:	2300      	moveq	r3, #0
 8016bb4:	b2db      	uxtb	r3, r3
 8016bb6:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 8016bb8:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8016bbc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8016bc0:	4611      	mov	r1, r2
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	f7fd fca0 	bl	8014508 <mg_uecc_vli_testBit>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d001      	beq.n	8016bd2 <mg_uecc_verify+0x456>
 8016bce:	2302      	movs	r3, #2
 8016bd0:	e000      	b.n	8016bd4 <mg_uecc_verify+0x458>
 8016bd2:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8016bd4:	4323      	orrs	r3, r4
 8016bd6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 8016bda:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8016bde:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8016be2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8016be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bea:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 8016bee:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d046      	beq.n	8016c84 <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 8016bf6:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016bfa:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8016bfe:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8016c02:	4618      	mov	r0, r3
 8016c04:	f7fd fcf8 	bl	80145f8 <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 8016c08:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016c0c:	009b      	lsls	r3, r3, #2
 8016c0e:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8016c12:	18d1      	adds	r1, r2, r3
 8016c14:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016c18:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7fd fceb 	bl	80145f8 <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 8016c22:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016c26:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8016c2a:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8016c2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016c32:	f7fe fd6b 	bl	801570c <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 8016c36:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016c3a:	1d1c      	adds	r4, r3, #4
 8016c3c:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8016c40:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8016c44:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8016c48:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016c4c:	9300      	str	r3, [sp, #0]
 8016c4e:	4623      	mov	r3, r4
 8016c50:	f7fd ff87 	bl	8014b62 <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 8016c54:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 8016c58:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8016c5c:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8016c60:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8016c64:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016c68:	9300      	str	r3, [sp, #0]
 8016c6a:	4623      	mov	r3, r4
 8016c6c:	f7fe fdc0 	bl	80157f0 <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 8016c70:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8016c74:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8016c78:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016c7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016c80:	f7fe f8e3 	bl	8014e4a <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 8016c84:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8016c88:	3b01      	subs	r3, #1
 8016c8a:	b29b      	uxth	r3, r3
 8016c8c:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8016c90:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	f6bf af73 	bge.w	8016b80 <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 8016c9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016c9e:	1d1a      	adds	r2, r3, #4
 8016ca0:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8016ca4:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8016ca8:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8016cac:	f7fe f931 	bl	8014f12 <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 8016cb0:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8016cb4:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8016cb8:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8016cbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016cc0:	f7fe fd24 	bl	801570c <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 8016cc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016cc8:	3324      	adds	r3, #36	@ 0x24
 8016cca:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8016cce:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f7fd fcb7 	bl	8014646 <mg_uecc_vli_cmp_unsafe>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	2b01      	cmp	r3, #1
 8016cdc:	d00b      	beq.n	8016cf6 <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 8016cde:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016ce2:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8016ce6:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8016cea:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8016cee:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8016cf2:	f7fd fdbb 	bl	801486c <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 8016cf6:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8016cfa:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8016cfe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8016d02:	4618      	mov	r0, r3
 8016d04:	f7fd fcdb 	bl	80146be <mg_uecc_vli_equal>
 8016d08:	4603      	mov	r3, r0
}
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd90      	pop	{r4, r7, pc}

08016d14 <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 8016d14:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016d18:	b08f      	sub	sp, #60	@ 0x3c
 8016d1a:	af00      	add	r7, sp, #0
 8016d1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8016d1e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8016d20:	627a      	str	r2, [r7, #36]	@ 0x24
 8016d22:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 8016d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d26:	2200      	movs	r2, #0
 8016d28:	469a      	mov	sl, r3
 8016d2a:	4693      	mov	fp, r2
 8016d2c:	6a3b      	ldr	r3, [r7, #32]
 8016d2e:	2200      	movs	r2, #0
 8016d30:	61bb      	str	r3, [r7, #24]
 8016d32:	61fa      	str	r2, [r7, #28]
 8016d34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8016d38:	4603      	mov	r3, r0
 8016d3a:	fb03 f20b 	mul.w	r2, r3, fp
 8016d3e:	460b      	mov	r3, r1
 8016d40:	fb0a f303 	mul.w	r3, sl, r3
 8016d44:	4413      	add	r3, r2
 8016d46:	4602      	mov	r2, r0
 8016d48:	fbaa 4502 	umull	r4, r5, sl, r2
 8016d4c:	442b      	add	r3, r5
 8016d4e:	461d      	mov	r5, r3
 8016d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d52:	2200      	movs	r2, #0
 8016d54:	613b      	str	r3, [r7, #16]
 8016d56:	617a      	str	r2, [r7, #20]
 8016d58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8016d5c:	460b      	mov	r3, r1
 8016d5e:	eb14 0803 	adds.w	r8, r4, r3
 8016d62:	4613      	mov	r3, r2
 8016d64:	eb45 0903 	adc.w	r9, r5, r3
 8016d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	60bb      	str	r3, [r7, #8]
 8016d70:	60fa      	str	r2, [r7, #12]
 8016d72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8016d76:	460b      	mov	r3, r1
 8016d78:	eb18 0303 	adds.w	r3, r8, r3
 8016d7c:	603b      	str	r3, [r7, #0]
 8016d7e:	4613      	mov	r3, r2
 8016d80:	eb49 0303 	adc.w	r3, r9, r3
 8016d84:	607b      	str	r3, [r7, #4]
 8016d86:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016d8a:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 8016d8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8016d92:	f04f 0200 	mov.w	r2, #0
 8016d96:	f04f 0300 	mov.w	r3, #0
 8016d9a:	000a      	movs	r2, r1
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016da0:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 8016da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8016da4:	4618      	mov	r0, r3
 8016da6:	373c      	adds	r7, #60	@ 0x3c
 8016da8:	46bd      	mov	sp, r7
 8016daa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016dae:	4770      	bx	lr

08016db0 <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 8016db0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016db4:	b08b      	sub	sp, #44	@ 0x2c
 8016db6:	af00      	add	r7, sp, #0
 8016db8:	61f8      	str	r0, [r7, #28]
 8016dba:	61b9      	str	r1, [r7, #24]
 8016dbc:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 8016dbe:	69fb      	ldr	r3, [r7, #28]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	60bb      	str	r3, [r7, #8]
 8016dc6:	60fa      	str	r2, [r7, #12]
 8016dc8:	69bb      	ldr	r3, [r7, #24]
 8016dca:	2200      	movs	r2, #0
 8016dcc:	469a      	mov	sl, r3
 8016dce:	4693      	mov	fp, r2
 8016dd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8016dd4:	460b      	mov	r3, r1
 8016dd6:	eb13 040a 	adds.w	r4, r3, sl
 8016dda:	4613      	mov	r3, r2
 8016ddc:	eb43 050b 	adc.w	r5, r3, fp
 8016de0:	697b      	ldr	r3, [r7, #20]
 8016de2:	2200      	movs	r2, #0
 8016de4:	4698      	mov	r8, r3
 8016de6:	4691      	mov	r9, r2
 8016de8:	eb14 0308 	adds.w	r3, r4, r8
 8016dec:	603b      	str	r3, [r7, #0]
 8016dee:	eb45 0309 	adc.w	r3, r5, r9
 8016df2:	607b      	str	r3, [r7, #4]
 8016df4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016df8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 8016dfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016e00:	f04f 0200 	mov.w	r2, #0
 8016e04:	f04f 0300 	mov.w	r3, #0
 8016e08:	000a      	movs	r2, r1
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	69fb      	ldr	r3, [r7, #28]
 8016e0e:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 8016e10:	6a3b      	ldr	r3, [r7, #32]
}
 8016e12:	4618      	mov	r0, r3
 8016e14:	372c      	adds	r7, #44	@ 0x2c
 8016e16:	46bd      	mov	sp, r7
 8016e18:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016e1c:	4770      	bx	lr

08016e1e <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 8016e1e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8016e22:	b085      	sub	sp, #20
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
 8016e28:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 8016e2a:	6879      	ldr	r1, [r7, #4]
 8016e2c:	6809      	ldr	r1, [r1, #0]
 8016e2e:	2000      	movs	r0, #0
 8016e30:	460c      	mov	r4, r1
 8016e32:	4605      	mov	r5, r0
 8016e34:	6839      	ldr	r1, [r7, #0]
 8016e36:	2000      	movs	r0, #0
 8016e38:	460a      	mov	r2, r1
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	eb14 0802 	adds.w	r8, r4, r2
 8016e40:	eb45 0903 	adc.w	r9, r5, r3
 8016e44:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 8016e48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016e4c:	f04f 0200 	mov.w	r2, #0
 8016e50:	f04f 0300 	mov.w	r3, #0
 8016e54:	000a      	movs	r2, r1
 8016e56:	2300      	movs	r3, #0
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 8016e5c:	68bb      	ldr	r3, [r7, #8]
}
 8016e5e:	4618      	mov	r0, r3
 8016e60:	3714      	adds	r7, #20
 8016e62:	46bd      	mov	sp, r7
 8016e64:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8016e68:	4770      	bx	lr

08016e6a <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 8016e6a:	b590      	push	{r4, r7, lr}
 8016e6c:	b085      	sub	sp, #20
 8016e6e:	af00      	add	r7, sp, #0
 8016e70:	6078      	str	r0, [r7, #4]
 8016e72:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	331c      	adds	r3, #28
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	0fda      	lsrs	r2, r3, #31
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	005b      	lsls	r3, r3, #1
 8016e80:	4313      	orrs	r3, r2
 8016e82:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	331c      	adds	r3, #28
 8016e88:	681a      	ldr	r2, [r3, #0]
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	331c      	adds	r3, #28
 8016e8e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8016e92:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 8016e94:	683a      	ldr	r2, [r7, #0]
 8016e96:	4613      	mov	r3, r2
 8016e98:	00db      	lsls	r3, r3, #3
 8016e9a:	4413      	add	r3, r2
 8016e9c:	005b      	lsls	r3, r3, #1
 8016e9e:	4413      	add	r3, r2
 8016ea0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	60fb      	str	r3, [r7, #12]
 8016ea6:	e012      	b.n	8016ece <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	009b      	lsls	r3, r3, #2
 8016eac:	687a      	ldr	r2, [r7, #4]
 8016eae:	4413      	add	r3, r2
 8016eb0:	6819      	ldr	r1, [r3, #0]
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	009b      	lsls	r3, r3, #2
 8016eb6:	687a      	ldr	r2, [r7, #4]
 8016eb8:	18d4      	adds	r4, r2, r3
 8016eba:	f107 0308 	add.w	r3, r7, #8
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f7ff ffad 	bl	8016e1e <adc0>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	3301      	adds	r3, #1
 8016ecc:	60fb      	str	r3, [r7, #12]
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	2b07      	cmp	r3, #7
 8016ed2:	d9e9      	bls.n	8016ea8 <propagate+0x3e>
  }
}
 8016ed4:	bf00      	nop
 8016ed6:	bf00      	nop
 8016ed8:	3714      	adds	r7, #20
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd90      	pop	{r4, r7, pc}

08016ede <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 8016ede:	b590      	push	{r4, r7, lr}
 8016ee0:	b087      	sub	sp, #28
 8016ee2:	af00      	add	r7, sp, #0
 8016ee4:	60f8      	str	r0, [r7, #12]
 8016ee6:	60b9      	str	r1, [r7, #8]
 8016ee8:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 8016eea:	2300      	movs	r3, #0
 8016eec:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 8016eee:	2300      	movs	r3, #0
 8016ef0:	617b      	str	r3, [r7, #20]
 8016ef2:	e018      	b.n	8016f26 <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 8016ef4:	697b      	ldr	r3, [r7, #20]
 8016ef6:	009b      	lsls	r3, r3, #2
 8016ef8:	68ba      	ldr	r2, [r7, #8]
 8016efa:	4413      	add	r3, r2
 8016efc:	6819      	ldr	r1, [r3, #0]
 8016efe:	697b      	ldr	r3, [r7, #20]
 8016f00:	009b      	lsls	r3, r3, #2
 8016f02:	687a      	ldr	r2, [r7, #4]
 8016f04:	4413      	add	r3, r2
 8016f06:	6818      	ldr	r0, [r3, #0]
 8016f08:	697b      	ldr	r3, [r7, #20]
 8016f0a:	009b      	lsls	r3, r3, #2
 8016f0c:	68fa      	ldr	r2, [r7, #12]
 8016f0e:	18d4      	adds	r4, r2, r3
 8016f10:	f107 0310 	add.w	r3, r7, #16
 8016f14:	4602      	mov	r2, r0
 8016f16:	4618      	mov	r0, r3
 8016f18:	f7ff ff4a 	bl	8016db0 <adc>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8016f20:	697b      	ldr	r3, [r7, #20]
 8016f22:	3301      	adds	r3, #1
 8016f24:	617b      	str	r3, [r7, #20]
 8016f26:	697b      	ldr	r3, [r7, #20]
 8016f28:	2b07      	cmp	r3, #7
 8016f2a:	d9e3      	bls.n	8016ef4 <add+0x16>
  }
  propagate(out, carry);
 8016f2c:	693b      	ldr	r3, [r7, #16]
 8016f2e:	4619      	mov	r1, r3
 8016f30:	68f8      	ldr	r0, [r7, #12]
 8016f32:	f7ff ff9a 	bl	8016e6a <propagate>
}
 8016f36:	bf00      	nop
 8016f38:	371c      	adds	r7, #28
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd90      	pop	{r4, r7, pc}

08016f3e <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 8016f3e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016f42:	b08a      	sub	sp, #40	@ 0x28
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6178      	str	r0, [r7, #20]
 8016f48:	6139      	str	r1, [r7, #16]
 8016f4a:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 8016f4c:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 8016f50:	f04f 33ff 	mov.w	r3, #4294967295
 8016f54:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8016f58:	2300      	movs	r3, #0
 8016f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f5c:	e032      	b.n	8016fc4 <sub+0x86>
    carry = carry + a[i] - b[i];
 8016f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f60:	009b      	lsls	r3, r3, #2
 8016f62:	693a      	ldr	r2, [r7, #16]
 8016f64:	4413      	add	r3, r2
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	2200      	movs	r2, #0
 8016f6a:	4698      	mov	r8, r3
 8016f6c:	4691      	mov	r9, r2
 8016f6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016f72:	eb18 0402 	adds.w	r4, r8, r2
 8016f76:	eb49 0503 	adc.w	r5, r9, r3
 8016f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f7c:	009b      	lsls	r3, r3, #2
 8016f7e:	68fa      	ldr	r2, [r7, #12]
 8016f80:	4413      	add	r3, r2
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	2200      	movs	r2, #0
 8016f86:	469a      	mov	sl, r3
 8016f88:	4693      	mov	fp, r2
 8016f8a:	ebb4 030a 	subs.w	r3, r4, sl
 8016f8e:	603b      	str	r3, [r7, #0]
 8016f90:	eb65 030b 	sbc.w	r3, r5, fp
 8016f94:	607b      	str	r3, [r7, #4]
 8016f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016f9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 8016f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fa0:	009b      	lsls	r3, r3, #2
 8016fa2:	697a      	ldr	r2, [r7, #20]
 8016fa4:	4413      	add	r3, r2
 8016fa6:	69ba      	ldr	r2, [r7, #24]
 8016fa8:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 8016faa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8016fae:	f04f 0200 	mov.w	r2, #0
 8016fb2:	f04f 0300 	mov.w	r3, #0
 8016fb6:	000a      	movs	r2, r1
 8016fb8:	17cb      	asrs	r3, r1, #31
 8016fba:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8016fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fc0:	3301      	adds	r3, #1
 8016fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8016fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fc6:	2b07      	cmp	r3, #7
 8016fc8:	d9c9      	bls.n	8016f5e <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 8016fca:	69bb      	ldr	r3, [r7, #24]
 8016fcc:	3301      	adds	r3, #1
 8016fce:	4619      	mov	r1, r3
 8016fd0:	6978      	ldr	r0, [r7, #20]
 8016fd2:	f7ff ff4a 	bl	8016e6a <propagate>
}
 8016fd6:	bf00      	nop
 8016fd8:	3728      	adds	r7, #40	@ 0x28
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016fe0 <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 8016fe0:	b5b0      	push	{r4, r5, r7, lr}
 8016fe2:	b09a      	sub	sp, #104	@ 0x68
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	60f8      	str	r0, [r7, #12]
 8016fe8:	60b9      	str	r1, [r7, #8]
 8016fea:	607a      	str	r2, [r7, #4]
 8016fec:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 8016fee:	f107 031c 	add.w	r3, r7, #28
 8016ff2:	2240      	movs	r2, #64	@ 0x40
 8016ff4:	2100      	movs	r1, #0
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f00a fef4 	bl	8021de4 <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	667b      	str	r3, [r7, #100]	@ 0x64
 8017000:	e03a      	b.n	8017078 <mul+0x98>
    limb_t mand = b[i];
 8017002:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017004:	009b      	lsls	r3, r3, #2
 8017006:	687a      	ldr	r2, [r7, #4]
 8017008:	4413      	add	r3, r2
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 801700e:	2300      	movs	r3, #0
 8017010:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 8017012:	2300      	movs	r3, #0
 8017014:	663b      	str	r3, [r7, #96]	@ 0x60
 8017016:	e020      	b.n	801705a <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 8017018:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801701a:	009b      	lsls	r3, r3, #2
 801701c:	68ba      	ldr	r2, [r7, #8]
 801701e:	4413      	add	r3, r2
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 8017024:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017026:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017028:	4413      	add	r3, r2
 801702a:	009b      	lsls	r3, r3, #2
 801702c:	3368      	adds	r3, #104	@ 0x68
 801702e:	443b      	add	r3, r7
 8017030:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 8017034:	697d      	ldr	r5, [r7, #20]
 8017036:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017038:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801703a:	18d4      	adds	r4, r2, r3
 801703c:	f107 0018 	add.w	r0, r7, #24
 8017040:	462b      	mov	r3, r5
 8017042:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017044:	f7ff fe66 	bl	8016d14 <umaal>
 8017048:	4602      	mov	r2, r0
 801704a:	00a3      	lsls	r3, r4, #2
 801704c:	3368      	adds	r3, #104	@ 0x68
 801704e:	443b      	add	r3, r7
 8017050:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 8017054:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017056:	3301      	adds	r3, #1
 8017058:	663b      	str	r3, [r7, #96]	@ 0x60
 801705a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801705c:	2b07      	cmp	r3, #7
 801705e:	d9db      	bls.n	8017018 <mul+0x38>
    }
    accum[i + j] = carry2;
 8017060:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017062:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017064:	4413      	add	r3, r2
 8017066:	69ba      	ldr	r2, [r7, #24]
 8017068:	009b      	lsls	r3, r3, #2
 801706a:	3368      	adds	r3, #104	@ 0x68
 801706c:	443b      	add	r3, r7
 801706e:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 8017072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017074:	3301      	adds	r3, #1
 8017076:	667b      	str	r3, [r7, #100]	@ 0x64
 8017078:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801707a:	683b      	ldr	r3, [r7, #0]
 801707c:	429a      	cmp	r2, r3
 801707e:	d3c0      	bcc.n	8017002 <mul+0x22>
  }

  carry2 = 0;
 8017080:	2300      	movs	r3, #0
 8017082:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 8017084:	2300      	movs	r3, #0
 8017086:	663b      	str	r3, [r7, #96]	@ 0x60
 8017088:	e01b      	b.n	80170c2 <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 801708a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801708c:	009b      	lsls	r3, r3, #2
 801708e:	3368      	adds	r3, #104	@ 0x68
 8017090:	443b      	add	r3, r7
 8017092:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 8017096:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017098:	3308      	adds	r3, #8
 801709a:	009b      	lsls	r3, r3, #2
 801709c:	3368      	adds	r3, #104	@ 0x68
 801709e:	443b      	add	r3, r7
 80170a0:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 80170a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80170a6:	009b      	lsls	r3, r3, #2
 80170a8:	68fa      	ldr	r2, [r7, #12]
 80170aa:	18d4      	adds	r4, r2, r3
 80170ac:	f107 0018 	add.w	r0, r7, #24
 80170b0:	462b      	mov	r3, r5
 80170b2:	2226      	movs	r2, #38	@ 0x26
 80170b4:	f7ff fe2e 	bl	8016d14 <umaal>
 80170b8:	4603      	mov	r3, r0
 80170ba:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 80170bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80170be:	3301      	adds	r3, #1
 80170c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80170c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80170c4:	2b07      	cmp	r3, #7
 80170c6:	d9e0      	bls.n	801708a <mul+0xaa>
  }
  propagate(out, carry2);
 80170c8:	69bb      	ldr	r3, [r7, #24]
 80170ca:	4619      	mov	r1, r3
 80170cc:	68f8      	ldr	r0, [r7, #12]
 80170ce:	f7ff fecc 	bl	8016e6a <propagate>
}
 80170d2:	bf00      	nop
 80170d4:	3768      	adds	r7, #104	@ 0x68
 80170d6:	46bd      	mov	sp, r7
 80170d8:	bdb0      	pop	{r4, r5, r7, pc}

080170da <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 80170da:	b580      	push	{r7, lr}
 80170dc:	b082      	sub	sp, #8
 80170de:	af00      	add	r7, sp, #0
 80170e0:	6078      	str	r0, [r7, #4]
 80170e2:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 80170e4:	2308      	movs	r3, #8
 80170e6:	683a      	ldr	r2, [r7, #0]
 80170e8:	6839      	ldr	r1, [r7, #0]
 80170ea:	6878      	ldr	r0, [r7, #4]
 80170ec:	f7ff ff78 	bl	8016fe0 <mul>
}
 80170f0:	bf00      	nop
 80170f2:	3708      	adds	r7, #8
 80170f4:	46bd      	mov	sp, r7
 80170f6:	bd80      	pop	{r7, pc}

080170f8 <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b082      	sub	sp, #8
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
 8017100:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 8017102:	2308      	movs	r3, #8
 8017104:	687a      	ldr	r2, [r7, #4]
 8017106:	6839      	ldr	r1, [r7, #0]
 8017108:	6878      	ldr	r0, [r7, #4]
 801710a:	f7ff ff69 	bl	8016fe0 <mul>
}
 801710e:	bf00      	nop
 8017110:	3708      	adds	r7, #8
 8017112:	46bd      	mov	sp, r7
 8017114:	bd80      	pop	{r7, pc}

08017116 <sqr1>:
static void sqr1(mg_fe a) {
 8017116:	b580      	push	{r7, lr}
 8017118:	b082      	sub	sp, #8
 801711a:	af00      	add	r7, sp, #0
 801711c:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 801711e:	6879      	ldr	r1, [r7, #4]
 8017120:	6878      	ldr	r0, [r7, #4]
 8017122:	f7ff ffe9 	bl	80170f8 <mul1>
}
 8017126:	bf00      	nop
 8017128:	3708      	adds	r7, #8
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}

0801712e <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 801712e:	b480      	push	{r7}
 8017130:	b087      	sub	sp, #28
 8017132:	af00      	add	r7, sp, #0
 8017134:	60f8      	str	r0, [r7, #12]
 8017136:	60b9      	str	r1, [r7, #8]
 8017138:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 801713a:	2300      	movs	r3, #0
 801713c:	617b      	str	r3, [r7, #20]
 801713e:	e028      	b.n	8017192 <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 8017140:	697b      	ldr	r3, [r7, #20]
 8017142:	009b      	lsls	r3, r3, #2
 8017144:	68fa      	ldr	r2, [r7, #12]
 8017146:	4413      	add	r3, r2
 8017148:	681a      	ldr	r2, [r3, #0]
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	009b      	lsls	r3, r3, #2
 801714e:	68b9      	ldr	r1, [r7, #8]
 8017150:	440b      	add	r3, r1
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	4053      	eors	r3, r2
 8017156:	687a      	ldr	r2, [r7, #4]
 8017158:	4013      	ands	r3, r2
 801715a:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 801715c:	697b      	ldr	r3, [r7, #20]
 801715e:	009b      	lsls	r3, r3, #2
 8017160:	68fa      	ldr	r2, [r7, #12]
 8017162:	4413      	add	r3, r2
 8017164:	6819      	ldr	r1, [r3, #0]
 8017166:	697b      	ldr	r3, [r7, #20]
 8017168:	009b      	lsls	r3, r3, #2
 801716a:	68fa      	ldr	r2, [r7, #12]
 801716c:	4413      	add	r3, r2
 801716e:	693a      	ldr	r2, [r7, #16]
 8017170:	404a      	eors	r2, r1
 8017172:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 8017174:	697b      	ldr	r3, [r7, #20]
 8017176:	009b      	lsls	r3, r3, #2
 8017178:	68ba      	ldr	r2, [r7, #8]
 801717a:	4413      	add	r3, r2
 801717c:	6819      	ldr	r1, [r3, #0]
 801717e:	697b      	ldr	r3, [r7, #20]
 8017180:	009b      	lsls	r3, r3, #2
 8017182:	68ba      	ldr	r2, [r7, #8]
 8017184:	4413      	add	r3, r2
 8017186:	693a      	ldr	r2, [r7, #16]
 8017188:	404a      	eors	r2, r1
 801718a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 801718c:	697b      	ldr	r3, [r7, #20]
 801718e:	3301      	adds	r3, #1
 8017190:	617b      	str	r3, [r7, #20]
 8017192:	697b      	ldr	r3, [r7, #20]
 8017194:	2b0f      	cmp	r3, #15
 8017196:	d9d3      	bls.n	8017140 <condswap+0x12>
  }
}
 8017198:	bf00      	nop
 801719a:	bf00      	nop
 801719c:	371c      	adds	r7, #28
 801719e:	46bd      	mov	sp, r7
 80171a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a4:	4770      	bx	lr

080171a6 <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 80171a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171aa:	b08b      	sub	sp, #44	@ 0x2c
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 80171b0:	2313      	movs	r3, #19
 80171b2:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 80171b4:	2300      	movs	r3, #0
 80171b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80171b8:	e012      	b.n	80171e0 <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 80171ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171bc:	009b      	lsls	r3, r3, #2
 80171be:	68fa      	ldr	r2, [r7, #12]
 80171c0:	4413      	add	r3, r2
 80171c2:	6819      	ldr	r1, [r3, #0]
 80171c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171c6:	009b      	lsls	r3, r3, #2
 80171c8:	68fa      	ldr	r2, [r7, #12]
 80171ca:	18d6      	adds	r6, r2, r3
 80171cc:	f107 0314 	add.w	r3, r7, #20
 80171d0:	4618      	mov	r0, r3
 80171d2:	f7ff fe24 	bl	8016e1e <adc0>
 80171d6:	4603      	mov	r3, r0
 80171d8:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 80171da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171dc:	3301      	adds	r3, #1
 80171de:	627b      	str	r3, [r7, #36]	@ 0x24
 80171e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171e2:	2b07      	cmp	r3, #7
 80171e4:	d9e9      	bls.n	80171ba <canon+0x14>
  }
  propagate(x, carry0);
 80171e6:	697b      	ldr	r3, [r7, #20]
 80171e8:	4619      	mov	r1, r3
 80171ea:	68f8      	ldr	r0, [r7, #12]
 80171ec:	f7ff fe3d 	bl	8016e6a <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 80171f0:	f06f 0212 	mvn.w	r2, #18
 80171f4:	f04f 33ff 	mov.w	r3, #4294967295
 80171f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 80171fc:	2300      	movs	r3, #0
 80171fe:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 8017200:	2300      	movs	r3, #0
 8017202:	627b      	str	r3, [r7, #36]	@ 0x24
 8017204:	e02a      	b.n	801725c <canon+0xb6>
    carry += x[i];
 8017206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017208:	009b      	lsls	r3, r3, #2
 801720a:	68fa      	ldr	r2, [r7, #12]
 801720c:	4413      	add	r3, r2
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	2200      	movs	r2, #0
 8017212:	4698      	mov	r8, r3
 8017214:	4691      	mov	r9, r2
 8017216:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801721a:	eb12 0108 	adds.w	r1, r2, r8
 801721e:	6039      	str	r1, [r7, #0]
 8017220:	eb43 0309 	adc.w	r3, r3, r9
 8017224:	607b      	str	r3, [r7, #4]
 8017226:	e9d7 2300 	ldrd	r2, r3, [r7]
 801722a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 801722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017230:	009b      	lsls	r3, r3, #2
 8017232:	68fa      	ldr	r2, [r7, #12]
 8017234:	4413      	add	r3, r2
 8017236:	69ba      	ldr	r2, [r7, #24]
 8017238:	601a      	str	r2, [r3, #0]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	6a3a      	ldr	r2, [r7, #32]
 801723e:	4313      	orrs	r3, r2
 8017240:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 8017242:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017246:	f04f 0200 	mov.w	r2, #0
 801724a:	f04f 0300 	mov.w	r3, #0
 801724e:	000a      	movs	r2, r1
 8017250:	17cb      	asrs	r3, r1, #31
 8017252:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8017256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017258:	3301      	adds	r3, #1
 801725a:	627b      	str	r3, [r7, #36]	@ 0x24
 801725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801725e:	2b07      	cmp	r3, #7
 8017260:	d9d1      	bls.n	8017206 <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 8017262:	6a3b      	ldr	r3, [r7, #32]
 8017264:	2200      	movs	r2, #0
 8017266:	461c      	mov	r4, r3
 8017268:	4615      	mov	r5, r2
 801726a:	f114 3aff 	adds.w	sl, r4, #4294967295
 801726e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8017272:	f04f 0200 	mov.w	r2, #0
 8017276:	f04f 0300 	mov.w	r3, #0
 801727a:	465a      	mov	r2, fp
 801727c:	2300      	movs	r3, #0
 801727e:	4613      	mov	r3, r2
}
 8017280:	4618      	mov	r0, r3
 8017282:	372c      	adds	r7, #44	@ 0x2c
 8017284:	46bd      	mov	sp, r7
 8017286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801728c <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 801728c:	b580      	push	{r7, lr}
 801728e:	b088      	sub	sp, #32
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	61fb      	str	r3, [r7, #28]
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	3320      	adds	r3, #32
 801729c:	61bb      	str	r3, [r7, #24]
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	3340      	adds	r3, #64	@ 0x40
 80172a2:	617b      	str	r3, [r7, #20]
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	3360      	adds	r3, #96	@ 0x60
 80172a8:	613b      	str	r3, [r7, #16]
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	3380      	adds	r3, #128	@ 0x80
 80172ae:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 80172b0:	69ba      	ldr	r2, [r7, #24]
 80172b2:	69f9      	ldr	r1, [r7, #28]
 80172b4:	68f8      	ldr	r0, [r7, #12]
 80172b6:	f7ff fe12 	bl	8016ede <add>
  sub(z2, x2, z2);                                 // z2 = B
 80172ba:	69ba      	ldr	r2, [r7, #24]
 80172bc:	69f9      	ldr	r1, [r7, #28]
 80172be:	69b8      	ldr	r0, [r7, #24]
 80172c0:	f7ff fe3d 	bl	8016f3e <sub>
  add(x2, x3, z3);                                 // x2 = C
 80172c4:	693a      	ldr	r2, [r7, #16]
 80172c6:	6979      	ldr	r1, [r7, #20]
 80172c8:	69f8      	ldr	r0, [r7, #28]
 80172ca:	f7ff fe08 	bl	8016ede <add>
  sub(z3, x3, z3);                                 // z3 = D
 80172ce:	693a      	ldr	r2, [r7, #16]
 80172d0:	6979      	ldr	r1, [r7, #20]
 80172d2:	6938      	ldr	r0, [r7, #16]
 80172d4:	f7ff fe33 	bl	8016f3e <sub>
  mul1(z3, t1);                                    // z3 = DA
 80172d8:	68f9      	ldr	r1, [r7, #12]
 80172da:	6938      	ldr	r0, [r7, #16]
 80172dc:	f7ff ff0c 	bl	80170f8 <mul1>
  mul1(x2, z2);                                    // x3 = BC
 80172e0:	69b9      	ldr	r1, [r7, #24]
 80172e2:	69f8      	ldr	r0, [r7, #28]
 80172e4:	f7ff ff08 	bl	80170f8 <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 80172e8:	69fa      	ldr	r2, [r7, #28]
 80172ea:	6939      	ldr	r1, [r7, #16]
 80172ec:	6978      	ldr	r0, [r7, #20]
 80172ee:	f7ff fdf6 	bl	8016ede <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 80172f2:	69fa      	ldr	r2, [r7, #28]
 80172f4:	6939      	ldr	r1, [r7, #16]
 80172f6:	6938      	ldr	r0, [r7, #16]
 80172f8:	f7ff fe21 	bl	8016f3e <sub>
  sqr1(t1);                                        // t1 = AA
 80172fc:	68f8      	ldr	r0, [r7, #12]
 80172fe:	f7ff ff0a 	bl	8017116 <sqr1>
  sqr1(z2);                                        // z2 = BB
 8017302:	69b8      	ldr	r0, [r7, #24]
 8017304:	f7ff ff07 	bl	8017116 <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 8017308:	69ba      	ldr	r2, [r7, #24]
 801730a:	68f9      	ldr	r1, [r7, #12]
 801730c:	69f8      	ldr	r0, [r7, #28]
 801730e:	f7ff fe16 	bl	8016f3e <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 8017312:	2301      	movs	r3, #1
 8017314:	4a06      	ldr	r2, [pc, #24]	@ (8017330 <ladder_part1+0xa4>)
 8017316:	69f9      	ldr	r1, [r7, #28]
 8017318:	69b8      	ldr	r0, [r7, #24]
 801731a:	f7ff fe61 	bl	8016fe0 <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 801731e:	68fa      	ldr	r2, [r7, #12]
 8017320:	69b9      	ldr	r1, [r7, #24]
 8017322:	69b8      	ldr	r0, [r7, #24]
 8017324:	f7ff fddb 	bl	8016ede <add>
}
 8017328:	bf00      	nop
 801732a:	3720      	adds	r7, #32
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}
 8017330:	08028e88 	.word	0x08028e88

08017334 <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 8017334:	b580      	push	{r7, lr}
 8017336:	b088      	sub	sp, #32
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
 801733c:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	61fb      	str	r3, [r7, #28]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	3320      	adds	r3, #32
 8017346:	61bb      	str	r3, [r7, #24]
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	3340      	adds	r3, #64	@ 0x40
 801734c:	617b      	str	r3, [r7, #20]
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	3360      	adds	r3, #96	@ 0x60
 8017352:	613b      	str	r3, [r7, #16]
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	3380      	adds	r3, #128	@ 0x80
 8017358:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 801735a:	6938      	ldr	r0, [r7, #16]
 801735c:	f7ff fedb 	bl	8017116 <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 8017360:	6839      	ldr	r1, [r7, #0]
 8017362:	6938      	ldr	r0, [r7, #16]
 8017364:	f7ff fec8 	bl	80170f8 <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 8017368:	6978      	ldr	r0, [r7, #20]
 801736a:	f7ff fed4 	bl	8017116 <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 801736e:	69f9      	ldr	r1, [r7, #28]
 8017370:	69b8      	ldr	r0, [r7, #24]
 8017372:	f7ff fec1 	bl	80170f8 <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 8017376:	69fa      	ldr	r2, [r7, #28]
 8017378:	68f9      	ldr	r1, [r7, #12]
 801737a:	69f8      	ldr	r0, [r7, #28]
 801737c:	f7ff fddf 	bl	8016f3e <sub>
  mul1(x2, t1);     // x2 = AA*BB
 8017380:	68f9      	ldr	r1, [r7, #12]
 8017382:	69f8      	ldr	r0, [r7, #28]
 8017384:	f7ff feb8 	bl	80170f8 <mul1>
}
 8017388:	bf00      	nop
 801738a:	3720      	adds	r7, #32
 801738c:	46bd      	mov	sp, r7
 801738e:	bd80      	pop	{r7, pc}

08017390 <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 8017390:	b580      	push	{r7, lr}
 8017392:	b094      	sub	sp, #80	@ 0x50
 8017394:	af00      	add	r7, sp, #0
 8017396:	60f8      	str	r0, [r7, #12]
 8017398:	60b9      	str	r1, [r7, #8]
 801739a:	607a      	str	r2, [r7, #4]
 801739c:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 801739e:	2300      	movs	r3, #0
 80173a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	3340      	adds	r3, #64	@ 0x40
 80173aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	3360      	adds	r3, #96	@ 0x60
 80173b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 80173b2:	2280      	movs	r2, #128	@ 0x80
 80173b4:	2100      	movs	r1, #0
 80173b6:	68f8      	ldr	r0, [r7, #12]
 80173b8:	f00a fd14 	bl	8021de4 <memset>
  x2[0] = z3[0] = 1;
 80173bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173be:	2201      	movs	r2, #1
 80173c0:	601a      	str	r2, [r3, #0]
 80173c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173c4:	681a      	ldr	r2, [r3, #0]
 80173c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80173c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 80173ca:	2300      	movs	r3, #0
 80173cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80173ce:	e031      	b.n	8017434 <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 80173d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173d2:	009b      	lsls	r3, r3, #2
 80173d4:	3303      	adds	r3, #3
 80173d6:	687a      	ldr	r2, [r7, #4]
 80173d8:	4413      	add	r3, r2
 80173da:	781b      	ldrb	r3, [r3, #0]
 80173dc:	061a      	lsls	r2, r3, #24
 80173de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173e0:	009b      	lsls	r3, r3, #2
 80173e2:	3302      	adds	r3, #2
 80173e4:	6879      	ldr	r1, [r7, #4]
 80173e6:	440b      	add	r3, r1
 80173e8:	781b      	ldrb	r3, [r3, #0]
 80173ea:	041b      	lsls	r3, r3, #16
 80173ec:	431a      	orrs	r2, r3
 80173ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173f0:	009b      	lsls	r3, r3, #2
 80173f2:	3301      	adds	r3, #1
 80173f4:	6879      	ldr	r1, [r7, #4]
 80173f6:	440b      	add	r3, r1
 80173f8:	781b      	ldrb	r3, [r3, #0]
 80173fa:	021b      	lsls	r3, r3, #8
 80173fc:	4313      	orrs	r3, r2
 80173fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017400:	0092      	lsls	r2, r2, #2
 8017402:	4611      	mov	r1, r2
 8017404:	687a      	ldr	r2, [r7, #4]
 8017406:	440a      	add	r2, r1
 8017408:	7812      	ldrb	r2, [r2, #0]
 801740a:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 801740c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801740e:	009b      	lsls	r3, r3, #2
 8017410:	3350      	adds	r3, #80	@ 0x50
 8017412:	443b      	add	r3, r7
 8017414:	f843 2c3c 	str.w	r2, [r3, #-60]
 8017418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801741a:	009b      	lsls	r3, r3, #2
 801741c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801741e:	441a      	add	r2, r3
 8017420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017422:	009b      	lsls	r3, r3, #2
 8017424:	3350      	adds	r3, #80	@ 0x50
 8017426:	443b      	add	r3, r7
 8017428:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801742c:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 801742e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017430:	3301      	adds	r3, #1
 8017432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017436:	2b07      	cmp	r3, #7
 8017438:	ddca      	ble.n	80173d0 <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 801743a:	23ff      	movs	r3, #255	@ 0xff
 801743c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801743e:	e049      	b.n	80174d4 <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 8017440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017442:	2b00      	cmp	r3, #0
 8017444:	da00      	bge.n	8017448 <x25519_core+0xb8>
 8017446:	3307      	adds	r3, #7
 8017448:	10db      	asrs	r3, r3, #3
 801744a:	461a      	mov	r2, r3
 801744c:	68bb      	ldr	r3, [r7, #8]
 801744e:	4413      	add	r3, r2
 8017450:	781b      	ldrb	r3, [r3, #0]
 8017452:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d01a      	beq.n	8017492 <x25519_core+0x102>
      if (i / 8 == 0) {
 801745c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801745e:	3307      	adds	r3, #7
 8017460:	2b0e      	cmp	r3, #14
 8017462:	d806      	bhi.n	8017472 <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 8017464:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017468:	f023 0307 	bic.w	r3, r3, #7
 801746c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8017470:	e00f      	b.n	8017492 <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 8017472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017474:	3bf8      	subs	r3, #248	@ 0xf8
 8017476:	2b07      	cmp	r3, #7
 8017478:	d80b      	bhi.n	8017492 <x25519_core+0x102>
        bytei &= 0x7F;
 801747a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801747e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017482:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 8017486:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801748a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801748e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 8017492:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8017496:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017498:	f003 0307 	and.w	r3, r3, #7
 801749c:	fa42 f303 	asr.w	r3, r2, r3
 80174a0:	f003 0301 	and.w	r3, r3, #1
 80174a4:	425b      	negs	r3, r3
 80174a6:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 80174a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80174aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174ac:	4053      	eors	r3, r2
 80174ae:	461a      	mov	r2, r3
 80174b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80174b2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80174b4:	f7ff fe3b 	bl	801712e <condswap>
    swap = doswap;
 80174b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174ba:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 80174bc:	68f8      	ldr	r0, [r7, #12]
 80174be:	f7ff fee5 	bl	801728c <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 80174c2:	f107 0314 	add.w	r3, r7, #20
 80174c6:	4619      	mov	r1, r3
 80174c8:	68f8      	ldr	r0, [r7, #12]
 80174ca:	f7ff ff33 	bl	8017334 <ladder_part2>
  for (i = 255; i >= 0; i--) {
 80174ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80174d0:	3b01      	subs	r3, #1
 80174d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80174d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	dab2      	bge.n	8017440 <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 80174da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80174dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80174de:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80174e0:	f7ff fe25 	bl	801712e <condswap>
}
 80174e4:	bf00      	nop
 80174e6:	3750      	adds	r7, #80	@ 0x50
 80174e8:	46bd      	mov	sp, r7
 80174ea:	bd80      	pop	{r7, pc}

080174ec <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b0be      	sub	sp, #248	@ 0xf8
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	60f8      	str	r0, [r7, #12]
 80174f4:	60b9      	str	r1, [r7, #8]
 80174f6:	607a      	str	r2, [r7, #4]
 80174f8:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 80174fa:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80174fe:	683b      	ldr	r3, [r7, #0]
 8017500:	687a      	ldr	r2, [r7, #4]
 8017502:	68b9      	ldr	r1, [r7, #8]
 8017504:	f7ff ff44 	bl	8017390 <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 8017508:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801750c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 8017510:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8017514:	3320      	adds	r3, #32
 8017516:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 801751a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801751e:	3360      	adds	r3, #96	@ 0x60
 8017520:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 8017524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017528:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 801752c:	2300      	movs	r3, #0
 801752e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8017532:	e043      	b.n	80175bc <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 8017534:	4952      	ldr	r1, [pc, #328]	@ (8017680 <mg_tls_x25519+0x194>)
 8017536:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801753a:	4613      	mov	r3, r2
 801753c:	005b      	lsls	r3, r3, #1
 801753e:	4413      	add	r3, r2
 8017540:	440b      	add	r3, r1
 8017542:	781b      	ldrb	r3, [r3, #0]
 8017544:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8017548:	015b      	lsls	r3, r3, #5
 801754a:	4413      	add	r3, r2
 801754c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 8017550:	494b      	ldr	r1, [pc, #300]	@ (8017680 <mg_tls_x25519+0x194>)
 8017552:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8017556:	4613      	mov	r3, r2
 8017558:	005b      	lsls	r3, r3, #1
 801755a:	4413      	add	r3, r2
 801755c:	440b      	add	r3, r1
 801755e:	3302      	adds	r3, #2
 8017560:	781b      	ldrb	r3, [r3, #0]
 8017562:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8017566:	e00e      	b.n	8017586 <mg_tls_x25519+0x9a>
      sqr(a, prev);
 8017568:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 801756c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8017570:	f7ff fdb3 	bl	80170da <sqr>
      prev = a;
 8017574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017578:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 801757c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017580:	3b01      	subs	r3, #1
 8017582:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8017586:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801758a:	2b00      	cmp	r3, #0
 801758c:	dcec      	bgt.n	8017568 <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 801758e:	493c      	ldr	r1, [pc, #240]	@ (8017680 <mg_tls_x25519+0x194>)
 8017590:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8017594:	4613      	mov	r3, r2
 8017596:	005b      	lsls	r3, r3, #1
 8017598:	4413      	add	r3, r2
 801759a:	440b      	add	r3, r1
 801759c:	3301      	adds	r3, #1
 801759e:	781b      	ldrb	r3, [r3, #0]
 80175a0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80175a4:	015b      	lsls	r3, r3, #5
 80175a6:	4413      	add	r3, r2
 80175a8:	4619      	mov	r1, r3
 80175aa:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80175ae:	f7ff fda3 	bl	80170f8 <mul1>
  for (i = 0; i < 13; i++) {
 80175b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80175b6:	3301      	adds	r3, #1
 80175b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80175bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80175c0:	2b0c      	cmp	r3, #12
 80175c2:	ddb7      	ble.n	8017534 <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 80175c4:	f107 0014 	add.w	r0, r7, #20
 80175c8:	2308      	movs	r3, #8
 80175ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80175ce:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80175d2:	f7ff fd05 	bl	8016fe0 <mul>
  ret = (int) canon(out_limbs);
 80175d6:	f107 0314 	add.w	r3, r7, #20
 80175da:	4618      	mov	r0, r3
 80175dc:	f7ff fde3 	bl	80171a6 <canon>
 80175e0:	4603      	mov	r3, r0
 80175e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 80175e6:	683b      	ldr	r3, [r7, #0]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d102      	bne.n	80175f2 <mg_tls_x25519+0x106>
 80175ec:	2300      	movs	r3, #0
 80175ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 80175f2:	2300      	movs	r3, #0
 80175f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80175f8:	e038      	b.n	801766c <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 80175fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80175fe:	009b      	lsls	r3, r3, #2
 8017600:	33f8      	adds	r3, #248	@ 0xf8
 8017602:	443b      	add	r3, r7
 8017604:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8017608:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 801760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017610:	009b      	lsls	r3, r3, #2
 8017612:	461a      	mov	r2, r3
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	4413      	add	r3, r2
 8017618:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801761c:	b2d2      	uxtb	r2, r2
 801761e:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 8017620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017624:	0a19      	lsrs	r1, r3, #8
 8017626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801762a:	009b      	lsls	r3, r3, #2
 801762c:	3301      	adds	r3, #1
 801762e:	68fa      	ldr	r2, [r7, #12]
 8017630:	4413      	add	r3, r2
 8017632:	b2ca      	uxtb	r2, r1
 8017634:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 8017636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801763a:	0c19      	lsrs	r1, r3, #16
 801763c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017640:	009b      	lsls	r3, r3, #2
 8017642:	3302      	adds	r3, #2
 8017644:	68fa      	ldr	r2, [r7, #12]
 8017646:	4413      	add	r3, r2
 8017648:	b2ca      	uxtb	r2, r1
 801764a:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 801764c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017650:	0e19      	lsrs	r1, r3, #24
 8017652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017656:	009b      	lsls	r3, r3, #2
 8017658:	3303      	adds	r3, #3
 801765a:	68fa      	ldr	r2, [r7, #12]
 801765c:	4413      	add	r3, r2
 801765e:	b2ca      	uxtb	r2, r1
 8017660:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 8017662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017666:	3301      	adds	r3, #1
 8017668:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801766c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017670:	2b07      	cmp	r3, #7
 8017672:	ddc2      	ble.n	80175fa <mg_tls_x25519+0x10e>
  }
  return ret;
 8017674:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 8017678:	4618      	mov	r0, r3
 801767a:	37f8      	adds	r7, #248	@ 0xf8
 801767c:	46bd      	mov	sp, r7
 801767e:	bd80      	pop	{r7, pc}
 8017680:	080291c0 	.word	0x080291c0

08017684 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8017684:	b580      	push	{r7, lr}
 8017686:	b082      	sub	sp, #8
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801768c:	2204      	movs	r2, #4
 801768e:	491b      	ldr	r1, [pc, #108]	@ (80176fc <mg_url_is_ssl+0x78>)
 8017690:	6878      	ldr	r0, [r7, #4]
 8017692:	f00a fbbc 	bl	8021e0e <strncmp>
 8017696:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8017698:	2b00      	cmp	r3, #0
 801769a:	d027      	beq.n	80176ec <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801769c:	2206      	movs	r2, #6
 801769e:	4918      	ldr	r1, [pc, #96]	@ (8017700 <mg_url_is_ssl+0x7c>)
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f00a fbb4 	bl	8021e0e <strncmp>
 80176a6:	4603      	mov	r3, r0
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d01f      	beq.n	80176ec <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80176ac:	2206      	movs	r2, #6
 80176ae:	4915      	ldr	r1, [pc, #84]	@ (8017704 <mg_url_is_ssl+0x80>)
 80176b0:	6878      	ldr	r0, [r7, #4]
 80176b2:	f00a fbac 	bl	8021e0e <strncmp>
 80176b6:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d017      	beq.n	80176ec <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80176bc:	2204      	movs	r2, #4
 80176be:	4912      	ldr	r1, [pc, #72]	@ (8017708 <mg_url_is_ssl+0x84>)
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	f00a fba4 	bl	8021e0e <strncmp>
 80176c6:	4603      	mov	r3, r0
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d00f      	beq.n	80176ec <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80176cc:	2204      	movs	r2, #4
 80176ce:	490f      	ldr	r1, [pc, #60]	@ (801770c <mg_url_is_ssl+0x88>)
 80176d0:	6878      	ldr	r0, [r7, #4]
 80176d2:	f00a fb9c 	bl	8021e0e <strncmp>
 80176d6:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d007      	beq.n	80176ec <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80176dc:	2205      	movs	r2, #5
 80176de:	490c      	ldr	r1, [pc, #48]	@ (8017710 <mg_url_is_ssl+0x8c>)
 80176e0:	6878      	ldr	r0, [r7, #4]
 80176e2:	f00a fb94 	bl	8021e0e <strncmp>
 80176e6:	4603      	mov	r3, r0
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d101      	bne.n	80176f0 <mg_url_is_ssl+0x6c>
 80176ec:	2301      	movs	r3, #1
 80176ee:	e000      	b.n	80176f2 <mg_url_is_ssl+0x6e>
 80176f0:	2300      	movs	r3, #0
}
 80176f2:	4618      	mov	r0, r3
 80176f4:	3708      	adds	r7, #8
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}
 80176fa:	bf00      	nop
 80176fc:	08027d84 	.word	0x08027d84
 8017700:	08027d8c 	.word	0x08027d8c
 8017704:	08027d94 	.word	0x08027d94
 8017708:	08027d9c 	.word	0x08027d9c
 801770c:	08027da4 	.word	0x08027da4
 8017710:	08027dac 	.word	0x08027dac

08017714 <urlparse>:

static struct url urlparse(const char *url) {
 8017714:	b5b0      	push	{r4, r5, r7, lr}
 8017716:	b08a      	sub	sp, #40	@ 0x28
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]
 801771c:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 801771e:	f107 0308 	add.w	r3, r7, #8
 8017722:	221c      	movs	r2, #28
 8017724:	2100      	movs	r1, #0
 8017726:	4618      	mov	r0, r3
 8017728:	f00a fb5c 	bl	8021de4 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 801772c:	2300      	movs	r3, #0
 801772e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017730:	e05b      	b.n	80177ea <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8017732:	683a      	ldr	r2, [r7, #0]
 8017734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017736:	4413      	add	r3, r2
 8017738:	781b      	ldrb	r3, [r3, #0]
 801773a:	2b2f      	cmp	r3, #47	@ 0x2f
 801773c:	d112      	bne.n	8017764 <urlparse+0x50>
 801773e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017740:	2b00      	cmp	r3, #0
 8017742:	d00f      	beq.n	8017764 <urlparse+0x50>
 8017744:	697b      	ldr	r3, [r7, #20]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d10c      	bne.n	8017764 <urlparse+0x50>
 801774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801774c:	3b01      	subs	r3, #1
 801774e:	683a      	ldr	r2, [r7, #0]
 8017750:	4413      	add	r3, r2
 8017752:	781b      	ldrb	r3, [r3, #0]
 8017754:	2b2f      	cmp	r3, #47	@ 0x2f
 8017756:	d105      	bne.n	8017764 <urlparse+0x50>
      u.host = i + 1;
 8017758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801775a:	3301      	adds	r3, #1
 801775c:	617b      	str	r3, [r7, #20]
      u.port = 0;
 801775e:	2300      	movs	r3, #0
 8017760:	61bb      	str	r3, [r7, #24]
 8017762:	e03f      	b.n	80177e4 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8017764:	683a      	ldr	r2, [r7, #0]
 8017766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017768:	4413      	add	r3, r2
 801776a:	781b      	ldrb	r3, [r3, #0]
 801776c:	2b5d      	cmp	r3, #93	@ 0x5d
 801776e:	d102      	bne.n	8017776 <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8017770:	2300      	movs	r3, #0
 8017772:	61bb      	str	r3, [r7, #24]
 8017774:	e036      	b.n	80177e4 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8017776:	683a      	ldr	r2, [r7, #0]
 8017778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801777a:	4413      	add	r3, r2
 801777c:	781b      	ldrb	r3, [r3, #0]
 801777e:	2b3a      	cmp	r3, #58	@ 0x3a
 8017780:	d109      	bne.n	8017796 <urlparse+0x82>
 8017782:	69bb      	ldr	r3, [r7, #24]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d106      	bne.n	8017796 <urlparse+0x82>
 8017788:	69fb      	ldr	r3, [r7, #28]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d103      	bne.n	8017796 <urlparse+0x82>
      u.port = i + 1;
 801778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017790:	3301      	adds	r3, #1
 8017792:	61bb      	str	r3, [r7, #24]
 8017794:	e026      	b.n	80177e4 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8017796:	683a      	ldr	r2, [r7, #0]
 8017798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801779a:	4413      	add	r3, r2
 801779c:	781b      	ldrb	r3, [r3, #0]
 801779e:	2b40      	cmp	r3, #64	@ 0x40
 80177a0:	d112      	bne.n	80177c8 <urlparse+0xb4>
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d10f      	bne.n	80177c8 <urlparse+0xb4>
 80177a8:	693b      	ldr	r3, [r7, #16]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d10c      	bne.n	80177c8 <urlparse+0xb4>
 80177ae:	69fb      	ldr	r3, [r7, #28]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d109      	bne.n	80177c8 <urlparse+0xb4>
      u.user = u.host;
 80177b4:	697b      	ldr	r3, [r7, #20]
 80177b6:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 80177b8:	69bb      	ldr	r3, [r7, #24]
 80177ba:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 80177bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177be:	3301      	adds	r3, #1
 80177c0:	617b      	str	r3, [r7, #20]
      u.port = 0;
 80177c2:	2300      	movs	r3, #0
 80177c4:	61bb      	str	r3, [r7, #24]
 80177c6:	e00d      	b.n	80177e4 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 80177c8:	683a      	ldr	r2, [r7, #0]
 80177ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177cc:	4413      	add	r3, r2
 80177ce:	781b      	ldrb	r3, [r3, #0]
 80177d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80177d2:	d107      	bne.n	80177e4 <urlparse+0xd0>
 80177d4:	697b      	ldr	r3, [r7, #20]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d004      	beq.n	80177e4 <urlparse+0xd0>
 80177da:	69fb      	ldr	r3, [r7, #28]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d101      	bne.n	80177e4 <urlparse+0xd0>
      u.uri = i;
 80177e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177e2:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 80177e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177e6:	3301      	adds	r3, #1
 80177e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80177ea:	683a      	ldr	r2, [r7, #0]
 80177ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177ee:	4413      	add	r3, r2
 80177f0:	781b      	ldrb	r3, [r3, #0]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d19d      	bne.n	8017732 <urlparse+0x1e>
    }
  }
  u.end = i;
 80177f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177f8:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	461d      	mov	r5, r3
 80177fe:	f107 0408 	add.w	r4, r7, #8
 8017802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017806:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801780a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801780e:	6878      	ldr	r0, [r7, #4]
 8017810:	3728      	adds	r7, #40	@ 0x28
 8017812:	46bd      	mov	sp, r7
 8017814:	bdb0      	pop	{r4, r5, r7, pc}

08017816 <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 8017816:	b580      	push	{r7, lr}
 8017818:	b08c      	sub	sp, #48	@ 0x30
 801781a:	af00      	add	r7, sp, #0
 801781c:	6078      	str	r0, [r7, #4]
 801781e:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8017820:	f107 0310 	add.w	r3, r7, #16
 8017824:	6839      	ldr	r1, [r7, #0]
 8017826:	4618      	mov	r0, r3
 8017828:	f7ff ff74 	bl	8017714 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 801782c:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 801782e:	2b00      	cmp	r3, #0
 8017830:	d004      	beq.n	801783c <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 8017832:	6a3a      	ldr	r2, [r7, #32]
 8017834:	69fb      	ldr	r3, [r7, #28]
 8017836:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 8017838:	3b01      	subs	r3, #1
 801783a:	e009      	b.n	8017850 <mg_url_host+0x3a>
 801783c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 801783e:	2b00      	cmp	r3, #0
 8017840:	d003      	beq.n	801784a <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 8017842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017844:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 8017846:	1ad3      	subs	r3, r2, r3
 8017848:	e002      	b.n	8017850 <mg_url_host+0x3a>
 801784a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801784c:	69fb      	ldr	r3, [r7, #28]
 801784e:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8017850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8017852:	69fb      	ldr	r3, [r7, #28]
 8017854:	683a      	ldr	r2, [r7, #0]
 8017856:	18d1      	adds	r1, r2, r3
 8017858:	f107 0308 	add.w	r3, r7, #8
 801785c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801785e:	4618      	mov	r0, r3
 8017860:	f7f7 fa4b 	bl	800ecfa <mg_str_n>
  return s;
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	461a      	mov	r2, r3
 8017868:	f107 0308 	add.w	r3, r7, #8
 801786c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017870:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8017874:	6878      	ldr	r0, [r7, #4]
 8017876:	3730      	adds	r7, #48	@ 0x30
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}

0801787c <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 801787c:	b580      	push	{r7, lr}
 801787e:	b08a      	sub	sp, #40	@ 0x28
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8017884:	f107 0308 	add.w	r3, r7, #8
 8017888:	6879      	ldr	r1, [r7, #4]
 801788a:	4618      	mov	r0, r3
 801788c:	f7ff ff42 	bl	8017714 <urlparse>
  unsigned short port = 0;
 8017890:	2300      	movs	r3, #0
 8017892:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8017894:	2205      	movs	r2, #5
 8017896:	4925      	ldr	r1, [pc, #148]	@ (801792c <mg_url_port+0xb0>)
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f00a fab8 	bl	8021e0e <strncmp>
 801789e:	4603      	mov	r3, r0
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d007      	beq.n	80178b4 <mg_url_port+0x38>
 80178a4:	2203      	movs	r2, #3
 80178a6:	4922      	ldr	r1, [pc, #136]	@ (8017930 <mg_url_port+0xb4>)
 80178a8:	6878      	ldr	r0, [r7, #4]
 80178aa:	f00a fab0 	bl	8021e0e <strncmp>
 80178ae:	4603      	mov	r3, r0
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d101      	bne.n	80178b8 <mg_url_port+0x3c>
 80178b4:	2350      	movs	r3, #80	@ 0x50
 80178b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 80178b8:	2204      	movs	r2, #4
 80178ba:	491e      	ldr	r1, [pc, #120]	@ (8017934 <mg_url_port+0xb8>)
 80178bc:	6878      	ldr	r0, [r7, #4]
 80178be:	f00a faa6 	bl	8021e0e <strncmp>
 80178c2:	4603      	mov	r3, r0
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d007      	beq.n	80178d8 <mg_url_port+0x5c>
 80178c8:	2206      	movs	r2, #6
 80178ca:	491b      	ldr	r1, [pc, #108]	@ (8017938 <mg_url_port+0xbc>)
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f00a fa9e 	bl	8021e0e <strncmp>
 80178d2:	4603      	mov	r3, r0
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d102      	bne.n	80178de <mg_url_port+0x62>
    port = 443;
 80178d8:	f240 13bb 	movw	r3, #443	@ 0x1bb
 80178dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 80178de:	2205      	movs	r2, #5
 80178e0:	4916      	ldr	r1, [pc, #88]	@ (801793c <mg_url_port+0xc0>)
 80178e2:	6878      	ldr	r0, [r7, #4]
 80178e4:	f00a fa93 	bl	8021e0e <strncmp>
 80178e8:	4603      	mov	r3, r0
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d102      	bne.n	80178f4 <mg_url_port+0x78>
 80178ee:	f240 735b 	movw	r3, #1883	@ 0x75b
 80178f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 80178f4:	2206      	movs	r2, #6
 80178f6:	4912      	ldr	r1, [pc, #72]	@ (8017940 <mg_url_port+0xc4>)
 80178f8:	6878      	ldr	r0, [r7, #4]
 80178fa:	f00a fa88 	bl	8021e0e <strncmp>
 80178fe:	4603      	mov	r3, r0
 8017900:	2b00      	cmp	r3, #0
 8017902:	d102      	bne.n	801790a <mg_url_port+0x8e>
 8017904:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8017908:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 801790a:	69bb      	ldr	r3, [r7, #24]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d007      	beq.n	8017920 <mg_url_port+0xa4>
 8017910:	69bb      	ldr	r3, [r7, #24]
 8017912:	687a      	ldr	r2, [r7, #4]
 8017914:	4413      	add	r3, r2
 8017916:	4618      	mov	r0, r3
 8017918:	f008 ffae 	bl	8020878 <atoi>
 801791c:	4603      	mov	r3, r0
 801791e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8017920:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8017922:	4618      	mov	r0, r3
 8017924:	3728      	adds	r7, #40	@ 0x28
 8017926:	46bd      	mov	sp, r7
 8017928:	bd80      	pop	{r7, pc}
 801792a:	bf00      	nop
 801792c:	08027db4 	.word	0x08027db4
 8017930:	08027dbc 	.word	0x08027dbc
 8017934:	08027d84 	.word	0x08027d84
 8017938:	08027d8c 	.word	0x08027d8c
 801793c:	08027dc0 	.word	0x08027dc0
 8017940:	08027d94 	.word	0x08027d94

08017944 <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8017944:	b480      	push	{r7}
 8017946:	b083      	sub	sp, #12
 8017948:	af00      	add	r7, sp, #0
 801794a:	6078      	str	r0, [r7, #4]
 801794c:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d00a      	beq.n	801796a <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8017954:	e004      	b.n	8017960 <mg_bzero+0x1c>
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	1c5a      	adds	r2, r3, #1
 801795a:	607a      	str	r2, [r7, #4]
 801795c:	2200      	movs	r2, #0
 801795e:	701a      	strb	r2, [r3, #0]
 8017960:	683b      	ldr	r3, [r7, #0]
 8017962:	1e5a      	subs	r2, r3, #1
 8017964:	603a      	str	r2, [r7, #0]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d1f5      	bne.n	8017956 <mg_bzero+0x12>
  }
}
 801796a:	bf00      	nop
 801796c:	370c      	adds	r7, #12
 801796e:	46bd      	mov	sp, r7
 8017970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017974:	4770      	bx	lr
	...

08017978 <mg_random_str>:
  }
  return success;
}
#endif

char *mg_random_str(char *buf, size_t len) {
 8017978:	b580      	push	{r7, lr}
 801797a:	b084      	sub	sp, #16
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
 8017980:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 8017982:	6839      	ldr	r1, [r7, #0]
 8017984:	6878      	ldr	r0, [r7, #4]
 8017986:	f7e9 facd 	bl	8000f24 <mg_random>
  for (i = 0; i < len; i++) {
 801798a:	2300      	movs	r3, #0
 801798c:	60fb      	str	r3, [r7, #12]
 801798e:	e02d      	b.n	80179ec <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8017990:	687a      	ldr	r2, [r7, #4]
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	4413      	add	r3, r2
 8017996:	781a      	ldrb	r2, [r3, #0]
 8017998:	0853      	lsrs	r3, r2, #1
 801799a:	4919      	ldr	r1, [pc, #100]	@ (8017a00 <mg_random_str+0x88>)
 801799c:	fba1 1303 	umull	r1, r3, r1, r3
 80179a0:	0919      	lsrs	r1, r3, #4
 80179a2:	460b      	mov	r3, r1
 80179a4:	015b      	lsls	r3, r3, #5
 80179a6:	1a5b      	subs	r3, r3, r1
 80179a8:	005b      	lsls	r3, r3, #1
 80179aa:	1ad3      	subs	r3, r2, r3
 80179ac:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	3b01      	subs	r3, #1
 80179b2:	68fa      	ldr	r2, [r7, #12]
 80179b4:	429a      	cmp	r2, r3
 80179b6:	d011      	beq.n	80179dc <mg_random_str+0x64>
 80179b8:	7afb      	ldrb	r3, [r7, #11]
 80179ba:	2b19      	cmp	r3, #25
 80179bc:	d803      	bhi.n	80179c6 <mg_random_str+0x4e>
 80179be:	7afb      	ldrb	r3, [r7, #11]
 80179c0:	3361      	adds	r3, #97	@ 0x61
 80179c2:	b2db      	uxtb	r3, r3
 80179c4:	e00b      	b.n	80179de <mg_random_str+0x66>
 80179c6:	7afb      	ldrb	r3, [r7, #11]
 80179c8:	2b33      	cmp	r3, #51	@ 0x33
 80179ca:	d803      	bhi.n	80179d4 <mg_random_str+0x5c>
 80179cc:	7afb      	ldrb	r3, [r7, #11]
 80179ce:	3327      	adds	r3, #39	@ 0x27
 80179d0:	b2db      	uxtb	r3, r3
 80179d2:	e004      	b.n	80179de <mg_random_str+0x66>
 80179d4:	7afb      	ldrb	r3, [r7, #11]
 80179d6:	3b04      	subs	r3, #4
 80179d8:	b2db      	uxtb	r3, r3
 80179da:	e000      	b.n	80179de <mg_random_str+0x66>
 80179dc:	2300      	movs	r3, #0
 80179de:	6879      	ldr	r1, [r7, #4]
 80179e0:	68fa      	ldr	r2, [r7, #12]
 80179e2:	440a      	add	r2, r1
 80179e4:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	3301      	adds	r3, #1
 80179ea:	60fb      	str	r3, [r7, #12]
 80179ec:	68fa      	ldr	r2, [r7, #12]
 80179ee:	683b      	ldr	r3, [r7, #0]
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d3cd      	bcc.n	8017990 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 80179f4:	687b      	ldr	r3, [r7, #4]
}
 80179f6:	4618      	mov	r0, r3
 80179f8:	3710      	adds	r7, #16
 80179fa:	46bd      	mov	sp, r7
 80179fc:	bd80      	pop	{r7, pc}
 80179fe:	bf00      	nop
 8017a00:	84210843 	.word	0x84210843

08017a04 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8017a04:	b480      	push	{r7}
 8017a06:	b085      	sub	sp, #20
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8017a14:	7bfb      	ldrb	r3, [r7, #15]
 8017a16:	461a      	mov	r2, r3
 8017a18:	7bbb      	ldrb	r3, [r7, #14]
 8017a1a:	021b      	lsls	r3, r3, #8
 8017a1c:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8017a1e:	7b7b      	ldrb	r3, [r7, #13]
 8017a20:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8017a22:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8017a24:	7b3b      	ldrb	r3, [r7, #12]
 8017a26:	061b      	lsls	r3, r3, #24
 8017a28:	4313      	orrs	r3, r2
}
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	3714      	adds	r7, #20
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a34:	4770      	bx	lr

08017a36 <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8017a36:	b480      	push	{r7}
 8017a38:	b085      	sub	sp, #20
 8017a3a:	af00      	add	r7, sp, #0
 8017a3c:	4603      	mov	r3, r0
 8017a3e:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8017a40:	2300      	movs	r3, #0
 8017a42:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8017a44:	88fb      	ldrh	r3, [r7, #6]
 8017a46:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8017a48:	7b7b      	ldrb	r3, [r7, #13]
 8017a4a:	b21a      	sxth	r2, r3
 8017a4c:	7b3b      	ldrb	r3, [r7, #12]
 8017a4e:	021b      	lsls	r3, r3, #8
 8017a50:	b21b      	sxth	r3, r3
 8017a52:	4313      	orrs	r3, r2
 8017a54:	b21b      	sxth	r3, r3
 8017a56:	b29b      	uxth	r3, r3
}
 8017a58:	4618      	mov	r0, r3
 8017a5a:	3714      	adds	r7, #20
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a62:	4770      	bx	lr

08017a64 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8017a64:	b480      	push	{r7}
 8017a66:	b087      	sub	sp, #28
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	60f8      	str	r0, [r7, #12]
 8017a6c:	60b9      	str	r1, [r7, #8]
 8017a6e:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	43db      	mvns	r3, r3
 8017a74:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8017a76:	e01f      	b.n	8017ab8 <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8017a78:	68bb      	ldr	r3, [r7, #8]
 8017a7a:	1c5a      	adds	r2, r3, #1
 8017a7c:	60ba      	str	r2, [r7, #8]
 8017a7e:	781b      	ldrb	r3, [r3, #0]
 8017a80:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8017a82:	7dfa      	ldrb	r2, [r7, #23]
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	4053      	eors	r3, r2
 8017a88:	f003 030f 	and.w	r3, r3, #15
 8017a8c:	4a11      	ldr	r2, [pc, #68]	@ (8017ad4 <mg_crc32+0x70>)
 8017a8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	091b      	lsrs	r3, r3, #4
 8017a96:	4053      	eors	r3, r2
 8017a98:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8017a9a:	7dfb      	ldrb	r3, [r7, #23]
 8017a9c:	091b      	lsrs	r3, r3, #4
 8017a9e:	b2db      	uxtb	r3, r3
 8017aa0:	461a      	mov	r2, r3
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	4053      	eors	r3, r2
 8017aa6:	f003 030f 	and.w	r3, r3, #15
 8017aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8017ad4 <mg_crc32+0x70>)
 8017aac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	091b      	lsrs	r3, r3, #4
 8017ab4:	4053      	eors	r3, r2
 8017ab6:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	1e5a      	subs	r2, r3, #1
 8017abc:	607a      	str	r2, [r7, #4]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d1da      	bne.n	8017a78 <mg_crc32+0x14>
  }
  return ~crc;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	43db      	mvns	r3, r3
}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	371c      	adds	r7, #28
 8017aca:	46bd      	mov	sp, r7
 8017acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad0:	4770      	bx	lr
 8017ad2:	bf00      	nop
 8017ad4:	080291e8 	.word	0x080291e8

08017ad8 <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 8017ad8:	b480      	push	{r7}
 8017ada:	b085      	sub	sp, #20
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	463b      	mov	r3, r7
 8017ae0:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8017ae4:	683b      	ldr	r3, [r7, #0]
 8017ae6:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8017aec:	683b      	ldr	r3, [r7, #0]
 8017aee:	781b      	ldrb	r3, [r3, #0]
 8017af0:	2b2e      	cmp	r3, #46	@ 0x2e
 8017af2:	d123      	bne.n	8017b3c <mg_path_is_sane+0x64>
 8017af4:	683b      	ldr	r3, [r7, #0]
 8017af6:	3301      	adds	r3, #1
 8017af8:	781b      	ldrb	r3, [r3, #0]
 8017afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8017afc:	d11e      	bne.n	8017b3c <mg_path_is_sane+0x64>
 8017afe:	2300      	movs	r3, #0
 8017b00:	e024      	b.n	8017b4c <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	781b      	ldrb	r3, [r3, #0]
 8017b06:	2b2f      	cmp	r3, #47	@ 0x2f
 8017b08:	d003      	beq.n	8017b12 <mg_path_is_sane+0x3a>
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	781b      	ldrb	r3, [r3, #0]
 8017b0e:	2b5c      	cmp	r3, #92	@ 0x5c
 8017b10:	d10e      	bne.n	8017b30 <mg_path_is_sane+0x58>
 8017b12:	68bb      	ldr	r3, [r7, #8]
 8017b14:	2b01      	cmp	r3, #1
 8017b16:	d90b      	bls.n	8017b30 <mg_path_is_sane+0x58>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	3301      	adds	r3, #1
 8017b1c:	781b      	ldrb	r3, [r3, #0]
 8017b1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017b20:	d106      	bne.n	8017b30 <mg_path_is_sane+0x58>
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	3302      	adds	r3, #2
 8017b26:	781b      	ldrb	r3, [r3, #0]
 8017b28:	2b2e      	cmp	r3, #46	@ 0x2e
 8017b2a:	d101      	bne.n	8017b30 <mg_path_is_sane+0x58>
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	e00d      	b.n	8017b4c <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	3301      	adds	r3, #1
 8017b34:	60fb      	str	r3, [r7, #12]
 8017b36:	68bb      	ldr	r3, [r7, #8]
 8017b38:	3b01      	subs	r3, #1
 8017b3a:	60bb      	str	r3, [r7, #8]
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	781b      	ldrb	r3, [r3, #0]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d002      	beq.n	8017b4a <mg_path_is_sane+0x72>
 8017b44:	68bb      	ldr	r3, [r7, #8]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d1db      	bne.n	8017b02 <mg_path_is_sane+0x2a>
    }
  }
  return true;
 8017b4a:	2301      	movs	r3, #1
}
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	3714      	adds	r7, #20
 8017b50:	46bd      	mov	sp, r7
 8017b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b56:	4770      	bx	lr

08017b58 <mg_phy_id_to_str>:
  MG_PHY_LAN87x_REG_SCSR = 31,
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 8017b58:	b480      	push	{r7}
 8017b5a:	b083      	sub	sp, #12
 8017b5c:	af00      	add	r7, sp, #0
 8017b5e:	4603      	mov	r3, r0
 8017b60:	460a      	mov	r2, r1
 8017b62:	80fb      	strh	r3, [r7, #6]
 8017b64:	4613      	mov	r3, r2
 8017b66:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 8017b68:	88fb      	ldrh	r3, [r7, #6]
 8017b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017b6e:	d00b      	beq.n	8017b88 <mg_phy_id_to_str+0x30>
 8017b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017b74:	dc28      	bgt.n	8017bc8 <mg_phy_id_to_str+0x70>
 8017b76:	2b22      	cmp	r3, #34	@ 0x22
 8017b78:	d020      	beq.n	8017bbc <mg_phy_id_to_str+0x64>
 8017b7a:	2b22      	cmp	r3, #34	@ 0x22
 8017b7c:	dc24      	bgt.n	8017bc8 <mg_phy_id_to_str+0x70>
 8017b7e:	2b07      	cmp	r3, #7
 8017b80:	d01e      	beq.n	8017bc0 <mg_phy_id_to_str+0x68>
 8017b82:	2b1c      	cmp	r3, #28
 8017b84:	d01e      	beq.n	8017bc4 <mg_phy_id_to_str+0x6c>
 8017b86:	e01f      	b.n	8017bc8 <mg_phy_id_to_str+0x70>
    case MG_PHY_DP83x:
      switch (id2) {
 8017b88:	88bb      	ldrh	r3, [r7, #4]
 8017b8a:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8017b8e:	4293      	cmp	r3, r2
 8017b90:	d00c      	beq.n	8017bac <mg_phy_id_to_str+0x54>
 8017b92:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8017b96:	4293      	cmp	r3, r2
 8017b98:	dc0e      	bgt.n	8017bb8 <mg_phy_id_to_str+0x60>
 8017b9a:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8017b9e:	4293      	cmp	r3, r2
 8017ba0:	d006      	beq.n	8017bb0 <mg_phy_id_to_str+0x58>
 8017ba2:	f24a 1240 	movw	r2, #41280	@ 0xa140
 8017ba6:	4293      	cmp	r3, r2
 8017ba8:	d004      	beq.n	8017bb4 <mg_phy_id_to_str+0x5c>
 8017baa:	e005      	b.n	8017bb8 <mg_phy_id_to_str+0x60>
        case MG_PHY_DP83867:
          return "DP83867";
 8017bac:	4b0a      	ldr	r3, [pc, #40]	@ (8017bd8 <mg_phy_id_to_str+0x80>)
 8017bae:	e00c      	b.n	8017bca <mg_phy_id_to_str+0x72>
        case MG_PHY_DP83848:
          return "DP83848";
 8017bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8017bdc <mg_phy_id_to_str+0x84>)
 8017bb2:	e00a      	b.n	8017bca <mg_phy_id_to_str+0x72>
        case MG_PHY_DP83825:
          return "DP83825";
 8017bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8017be0 <mg_phy_id_to_str+0x88>)
 8017bb6:	e008      	b.n	8017bca <mg_phy_id_to_str+0x72>
        default:
          return "DP83x";
 8017bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8017be4 <mg_phy_id_to_str+0x8c>)
 8017bba:	e006      	b.n	8017bca <mg_phy_id_to_str+0x72>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 8017bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8017be8 <mg_phy_id_to_str+0x90>)
 8017bbe:	e004      	b.n	8017bca <mg_phy_id_to_str+0x72>
    case MG_PHY_LAN87x:
      return "LAN87x";
 8017bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8017bec <mg_phy_id_to_str+0x94>)
 8017bc2:	e002      	b.n	8017bca <mg_phy_id_to_str+0x72>
    case MG_PHY_RTL8201:
      return "RTL8201";
 8017bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8017bf0 <mg_phy_id_to_str+0x98>)
 8017bc6:	e000      	b.n	8017bca <mg_phy_id_to_str+0x72>
    default:
      return "unknown";
 8017bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8017bf4 <mg_phy_id_to_str+0x9c>)
  }
  (void) id2;
}
 8017bca:	4618      	mov	r0, r3
 8017bcc:	370c      	adds	r7, #12
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd4:	4770      	bx	lr
 8017bd6:	bf00      	nop
 8017bd8:	08027fc0 	.word	0x08027fc0
 8017bdc:	08027fc8 	.word	0x08027fc8
 8017be0:	08027fd0 	.word	0x08027fd0
 8017be4:	08027fd8 	.word	0x08027fd8
 8017be8:	08027fe0 	.word	0x08027fe0
 8017bec:	08027fe8 	.word	0x08027fe8
 8017bf0:	08027ff0 	.word	0x08027ff0
 8017bf4:	08027ff8 	.word	0x08027ff8

08017bf8 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 8017bf8:	b5b0      	push	{r4, r5, r7, lr}
 8017bfa:	b084      	sub	sp, #16
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
 8017c00:	460b      	mov	r3, r1
 8017c02:	70fb      	strb	r3, [r7, #3]
 8017c04:	4613      	mov	r3, r2
 8017c06:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	685b      	ldr	r3, [r3, #4]
 8017c0c:	78f8      	ldrb	r0, [r7, #3]
 8017c0e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8017c12:	2100      	movs	r1, #0
 8017c14:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 8017c16:	bf00      	nop
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	78fa      	ldrb	r2, [r7, #3]
 8017c1e:	2100      	movs	r1, #0
 8017c20:	4610      	mov	r0, r2
 8017c22:	4798      	blx	r3
 8017c24:	4603      	mov	r3, r0
 8017c26:	b21b      	sxth	r3, r3
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	dbf5      	blt.n	8017c18 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	78fa      	ldrb	r2, [r7, #3]
 8017c32:	2102      	movs	r1, #2
 8017c34:	4610      	mov	r0, r2
 8017c36:	4798      	blx	r3
 8017c38:	4603      	mov	r3, r0
 8017c3a:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	78fa      	ldrb	r2, [r7, #3]
 8017c42:	2103      	movs	r1, #3
 8017c44:	4610      	mov	r0, r2
 8017c46:	4798      	blx	r3
 8017c48:	4603      	mov	r3, r0
 8017c4a:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 8017c4c:	4b42      	ldr	r3, [pc, #264]	@ (8017d58 <mg_phy_init+0x160>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	2b01      	cmp	r3, #1
 8017c52:	dd14      	ble.n	8017c7e <mg_phy_init+0x86>
 8017c54:	4b41      	ldr	r3, [pc, #260]	@ (8017d5c <mg_phy_init+0x164>)
 8017c56:	f244 4232 	movw	r2, #17458	@ 0x4432
 8017c5a:	4941      	ldr	r1, [pc, #260]	@ (8017d60 <mg_phy_init+0x168>)
 8017c5c:	2002      	movs	r0, #2
 8017c5e:	f7f0 f967 	bl	8007f30 <mg_log_prefix>
 8017c62:	89fc      	ldrh	r4, [r7, #14]
 8017c64:	89bd      	ldrh	r5, [r7, #12]
 8017c66:	89ba      	ldrh	r2, [r7, #12]
 8017c68:	89fb      	ldrh	r3, [r7, #14]
 8017c6a:	4611      	mov	r1, r2
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f7ff ff73 	bl	8017b58 <mg_phy_id_to_str>
 8017c72:	4603      	mov	r3, r0
 8017c74:	462a      	mov	r2, r5
 8017c76:	4621      	mov	r1, r4
 8017c78:	483a      	ldr	r0, [pc, #232]	@ (8017d64 <mg_phy_init+0x16c>)
 8017c7a:	f7f0 f9a9 	bl	8007fd0 <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 8017c7e:	89fb      	ldrh	r3, [r7, #14]
 8017c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017c84:	d11f      	bne.n	8017cc6 <mg_phy_init+0xce>
 8017c86:	89bb      	ldrh	r3, [r7, #12]
 8017c88:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8017c8c:	4293      	cmp	r3, r2
 8017c8e:	d11a      	bne.n	8017cc6 <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	685b      	ldr	r3, [r3, #4]
 8017c94:	78f8      	ldrb	r0, [r7, #3]
 8017c96:	221f      	movs	r2, #31
 8017c98:	210d      	movs	r1, #13
 8017c9a:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	685b      	ldr	r3, [r3, #4]
 8017ca0:	78f8      	ldrb	r0, [r7, #3]
 8017ca2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8017ca6:	210e      	movs	r1, #14
 8017ca8:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	685b      	ldr	r3, [r3, #4]
 8017cae:	78f8      	ldrb	r0, [r7, #3]
 8017cb0:	f244 021f 	movw	r2, #16415	@ 0x401f
 8017cb4:	210d      	movs	r1, #13
 8017cb6:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	685b      	ldr	r3, [r3, #4]
 8017cbc:	78f8      	ldrb	r0, [r7, #3]
 8017cbe:	f240 120d 	movw	r2, #269	@ 0x10d
 8017cc2:	210e      	movs	r1, #14
 8017cc4:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 8017cc6:	78bb      	ldrb	r3, [r7, #2]
 8017cc8:	f003 0302 	and.w	r3, r3, #2
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d12e      	bne.n	8017d2e <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 8017cd0:	89fb      	ldrh	r3, [r7, #14]
 8017cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017cd6:	d110      	bne.n	8017cfa <mg_phy_init+0x102>
 8017cd8:	89bb      	ldrh	r3, [r7, #12]
 8017cda:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8017cde:	4293      	cmp	r3, r2
 8017ce0:	d00b      	beq.n	8017cfa <mg_phy_init+0x102>
 8017ce2:	89bb      	ldrh	r3, [r7, #12]
 8017ce4:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8017ce8:	4293      	cmp	r3, r2
 8017cea:	d006      	beq.n	8017cfa <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	685b      	ldr	r3, [r3, #4]
 8017cf0:	78f8      	ldrb	r0, [r7, #3]
 8017cf2:	2281      	movs	r2, #129	@ 0x81
 8017cf4:	2117      	movs	r1, #23
 8017cf6:	4798      	blx	r3
 8017cf8:	e019      	b.n	8017d2e <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 8017cfa:	89fb      	ldrh	r3, [r7, #14]
 8017cfc:	2b22      	cmp	r3, #34	@ 0x22
 8017cfe:	d116      	bne.n	8017d2e <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	78fa      	ldrb	r2, [r7, #3]
 8017d0a:	2100      	movs	r1, #0
 8017d0c:	4610      	mov	r0, r2
 8017d0e:	4798      	blx	r3
 8017d10:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8017d12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8017d16:	b29a      	uxth	r2, r3
 8017d18:	78fb      	ldrb	r3, [r7, #3]
 8017d1a:	2100      	movs	r1, #0
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	685b      	ldr	r3, [r3, #4]
 8017d24:	78f8      	ldrb	r0, [r7, #3]
 8017d26:	f248 1280 	movw	r2, #33152	@ 0x8180
 8017d2a:	211f      	movs	r1, #31
 8017d2c:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 8017d2e:	78bb      	ldrb	r3, [r7, #2]
 8017d30:	f003 0301 	and.w	r3, r3, #1
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d00a      	beq.n	8017d4e <mg_phy_init+0x156>
 8017d38:	89fb      	ldrh	r3, [r7, #14]
 8017d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017d3e:	d106      	bne.n	8017d4e <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	685b      	ldr	r3, [r3, #4]
 8017d44:	78f8      	ldrb	r0, [r7, #3]
 8017d46:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017d4a:	2118      	movs	r1, #24
 8017d4c:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 8017d4e:	bf00      	nop
 8017d50:	3710      	adds	r7, #16
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bdb0      	pop	{r4, r5, r7, pc}
 8017d56:	bf00      	nop
 8017d58:	24000240 	.word	0x24000240
 8017d5c:	08029228 	.word	0x08029228
 8017d60:	0802597c 	.word	0x0802597c
 8017d64:	08028000 	.word	0x08028000

08017d68 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b08a      	sub	sp, #40	@ 0x28
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	60f8      	str	r0, [r7, #12]
 8017d70:	607a      	str	r2, [r7, #4]
 8017d72:	603b      	str	r3, [r7, #0]
 8017d74:	460b      	mov	r3, r1
 8017d76:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 8017d78:	2300      	movs	r3, #0
 8017d7a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	7afa      	ldrb	r2, [r7, #11]
 8017d84:	2101      	movs	r1, #1
 8017d86:	4610      	mov	r0, r2
 8017d88:	4798      	blx	r3
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 8017d8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017d90:	f003 0320 	and.w	r3, r3, #32
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d00c      	beq.n	8017db2 <mg_phy_up+0x4a>
 8017d98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017d9a:	f003 0304 	and.w	r3, r3, #4
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d107      	bne.n	8017db2 <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	7afa      	ldrb	r2, [r7, #11]
 8017da8:	2101      	movs	r1, #1
 8017daa:	4610      	mov	r0, r2
 8017dac:	4798      	blx	r3
 8017dae:	4603      	mov	r3, r0
 8017db0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 8017db2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017db4:	f003 0304 	and.w	r3, r3, #4
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	bf14      	ite	ne
 8017dbc:	2301      	movne	r3, #1
 8017dbe:	2300      	moveq	r3, #0
 8017dc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 8017dc4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	f000 80bc 	beq.w	8017f46 <mg_phy_up+0x1de>
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	f000 80b8 	beq.w	8017f46 <mg_phy_up+0x1de>
 8017dd6:	683b      	ldr	r3, [r7, #0]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	f000 80b4 	beq.w	8017f46 <mg_phy_up+0x1de>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	7afa      	ldrb	r2, [r7, #11]
 8017de4:	2102      	movs	r1, #2
 8017de6:	4610      	mov	r0, r2
 8017de8:	4798      	blx	r3
 8017dea:	4603      	mov	r3, r0
 8017dec:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 8017dee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017df4:	d14b      	bne.n	8017e8e <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	7afa      	ldrb	r2, [r7, #11]
 8017dfc:	2103      	movs	r1, #3
 8017dfe:	4610      	mov	r0, r2
 8017e00:	4798      	blx	r3
 8017e02:	4603      	mov	r3, r0
 8017e04:	837b      	strh	r3, [r7, #26]
      if (id2 == MG_PHY_DP83867) {
 8017e06:	8b7b      	ldrh	r3, [r7, #26]
 8017e08:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8017e0c:	4293      	cmp	r3, r2
 8017e0e:	d120      	bne.n	8017e52 <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	7afa      	ldrb	r2, [r7, #11]
 8017e16:	2111      	movs	r1, #17
 8017e18:	4610      	mov	r0, r2
 8017e1a:	4798      	blx	r3
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(13);
 8017e20:	8afb      	ldrh	r3, [r7, #22]
 8017e22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	bf14      	ite	ne
 8017e2a:	2301      	movne	r3, #1
 8017e2c:	2300      	moveq	r3, #0
 8017e2e:	b2da      	uxtb	r2, r3
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8017e34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	db06      	blt.n	8017e4a <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 8017e3c:	8afb      	ldrh	r3, [r7, #22]
 8017e3e:	0b9b      	lsrs	r3, r3, #14
 8017e40:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8017e42:	f003 0301 	and.w	r3, r3, #1
 8017e46:	b2da      	uxtb	r2, r3
 8017e48:	e000      	b.n	8017e4c <mg_phy_up+0xe4>
 8017e4a:	2202      	movs	r2, #2
 8017e4c:	683b      	ldr	r3, [r7, #0]
 8017e4e:	701a      	strb	r2, [r3, #0]
 8017e50:	e079      	b.n	8017f46 <mg_phy_up+0x1de>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	7afa      	ldrb	r2, [r7, #11]
 8017e58:	2110      	movs	r1, #16
 8017e5a:	4610      	mov	r0, r2
 8017e5c:	4798      	blx	r3
 8017e5e:	4603      	mov	r3, r0
 8017e60:	833b      	strh	r3, [r7, #24]
        *full_duplex = physts & MG_BIT(2);
 8017e62:	8b3b      	ldrh	r3, [r7, #24]
 8017e64:	f003 0304 	and.w	r3, r3, #4
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	bf14      	ite	ne
 8017e6c:	2301      	movne	r3, #1
 8017e6e:	2300      	moveq	r3, #0
 8017e70:	b2da      	uxtb	r2, r3
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8017e76:	8b3b      	ldrh	r3, [r7, #24]
 8017e78:	f003 0302 	and.w	r3, r3, #2
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	bf0c      	ite	eq
 8017e80:	2301      	moveq	r3, #1
 8017e82:	2300      	movne	r3, #0
 8017e84:	b2db      	uxtb	r3, r3
 8017e86:	461a      	mov	r2, r3
 8017e88:	683b      	ldr	r3, [r7, #0]
 8017e8a:	701a      	strb	r2, [r3, #0]
 8017e8c:	e05b      	b.n	8017f46 <mg_phy_up+0x1de>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 8017e8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017e90:	2b22      	cmp	r3, #34	@ 0x22
 8017e92:	d11d      	bne.n	8017ed0 <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	7afa      	ldrb	r2, [r7, #11]
 8017e9a:	211e      	movs	r1, #30
 8017e9c:	4610      	mov	r0, r2
 8017e9e:	4798      	blx	r3
 8017ea0:	4603      	mov	r3, r0
 8017ea2:	83bb      	strh	r3, [r7, #28]
      *full_duplex = pc1r & MG_BIT(2);
 8017ea4:	8bbb      	ldrh	r3, [r7, #28]
 8017ea6:	f003 0304 	and.w	r3, r3, #4
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	bf14      	ite	ne
 8017eae:	2301      	movne	r3, #1
 8017eb0:	2300      	moveq	r3, #0
 8017eb2:	b2da      	uxtb	r2, r3
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8017eb8:	8bbb      	ldrh	r3, [r7, #28]
 8017eba:	f003 0303 	and.w	r3, r3, #3
 8017ebe:	2b01      	cmp	r3, #1
 8017ec0:	bf14      	ite	ne
 8017ec2:	2301      	movne	r3, #1
 8017ec4:	2300      	moveq	r3, #0
 8017ec6:	b2db      	uxtb	r3, r3
 8017ec8:	461a      	mov	r2, r3
 8017eca:	683b      	ldr	r3, [r7, #0]
 8017ecc:	701a      	strb	r2, [r3, #0]
 8017ece:	e03a      	b.n	8017f46 <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_LAN87x) {
 8017ed0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017ed2:	2b07      	cmp	r3, #7
 8017ed4:	d11a      	bne.n	8017f0c <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	7afa      	ldrb	r2, [r7, #11]
 8017edc:	211f      	movs	r1, #31
 8017ede:	4610      	mov	r0, r2
 8017ee0:	4798      	blx	r3
 8017ee2:	4603      	mov	r3, r0
 8017ee4:	83fb      	strh	r3, [r7, #30]
      *full_duplex = scsr & MG_BIT(4);
 8017ee6:	8bfb      	ldrh	r3, [r7, #30]
 8017ee8:	f003 0310 	and.w	r3, r3, #16
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	bf14      	ite	ne
 8017ef0:	2301      	movne	r3, #1
 8017ef2:	2300      	moveq	r3, #0
 8017ef4:	b2da      	uxtb	r2, r3
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8017efa:	8bfb      	ldrh	r3, [r7, #30]
 8017efc:	08db      	lsrs	r3, r3, #3
 8017efe:	b2db      	uxtb	r3, r3
 8017f00:	f003 0301 	and.w	r3, r3, #1
 8017f04:	b2da      	uxtb	r2, r3
 8017f06:	683b      	ldr	r3, [r7, #0]
 8017f08:	701a      	strb	r2, [r3, #0]
 8017f0a:	e01c      	b.n	8017f46 <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_RTL8201) {
 8017f0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017f0e:	2b1c      	cmp	r3, #28
 8017f10:	d119      	bne.n	8017f46 <mg_phy_up+0x1de>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	7afa      	ldrb	r2, [r7, #11]
 8017f18:	2100      	movs	r1, #0
 8017f1a:	4610      	mov	r0, r2
 8017f1c:	4798      	blx	r3
 8017f1e:	4603      	mov	r3, r0
 8017f20:	843b      	strh	r3, [r7, #32]
      *full_duplex = bcr & MG_BIT(8);
 8017f22:	8c3b      	ldrh	r3, [r7, #32]
 8017f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	bf14      	ite	ne
 8017f2c:	2301      	movne	r3, #1
 8017f2e:	2300      	moveq	r3, #0
 8017f30:	b2da      	uxtb	r2, r3
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8017f36:	8c3b      	ldrh	r3, [r7, #32]
 8017f38:	0b5b      	lsrs	r3, r3, #13
 8017f3a:	b2db      	uxtb	r3, r3
 8017f3c:	f003 0301 	and.w	r3, r3, #1
 8017f40:	b2da      	uxtb	r2, r3
 8017f42:	683b      	ldr	r3, [r7, #0]
 8017f44:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 8017f46:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	3728      	adds	r7, #40	@ 0x28
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}
	...

08017f54 <eth_read_phy>:
static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  // TX descriptors
static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // RX ethernet buffers
static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // TX ethernet buffers
static struct mg_tcpip_if *s_ifp;                         // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8017f54:	b480      	push	{r7}
 8017f56:	b083      	sub	sp, #12
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	460a      	mov	r2, r1
 8017f5e:	71fb      	strb	r3, [r7, #7]
 8017f60:	4613      	mov	r3, r2
 8017f62:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 8017f64:	4b17      	ldr	r3, [pc, #92]	@ (8017fc4 <eth_read_phy+0x70>)
 8017f66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8017f6a:	4a16      	ldr	r2, [pc, #88]	@ (8017fc4 <eth_read_phy+0x70>)
 8017f6c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8017f70:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 8017f74:	4b13      	ldr	r3, [pc, #76]	@ (8017fc4 <eth_read_phy+0x70>)
 8017f76:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8017f7a:	79fb      	ldrb	r3, [r7, #7]
 8017f7c:	0559      	lsls	r1, r3, #21
 8017f7e:	79bb      	ldrb	r3, [r7, #6]
 8017f80:	041b      	lsls	r3, r3, #16
 8017f82:	430b      	orrs	r3, r1
 8017f84:	4313      	orrs	r3, r2
 8017f86:	4a0f      	ldr	r2, [pc, #60]	@ (8017fc4 <eth_read_phy+0x70>)
 8017f88:	f043 030c 	orr.w	r3, r3, #12
 8017f8c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8017f90:	4b0c      	ldr	r3, [pc, #48]	@ (8017fc4 <eth_read_phy+0x70>)
 8017f92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8017f96:	4a0b      	ldr	r2, [pc, #44]	@ (8017fc4 <eth_read_phy+0x70>)
 8017f98:	f043 0301 	orr.w	r3, r3, #1
 8017f9c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8017fa0:	bf00      	nop
 8017fa2:	4b08      	ldr	r3, [pc, #32]	@ (8017fc4 <eth_read_phy+0x70>)
 8017fa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8017fa8:	f003 0301 	and.w	r3, r3, #1
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d1f8      	bne.n	8017fa2 <eth_read_phy+0x4e>
  return (uint16_t) ETH->MACMDIODR;
 8017fb0:	4b04      	ldr	r3, [pc, #16]	@ (8017fc4 <eth_read_phy+0x70>)
 8017fb2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017fb6:	b29b      	uxth	r3, r3
}
 8017fb8:	4618      	mov	r0, r3
 8017fba:	370c      	adds	r7, #12
 8017fbc:	46bd      	mov	sp, r7
 8017fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc2:	4770      	bx	lr
 8017fc4:	40028000 	.word	0x40028000

08017fc8 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 8017fc8:	b480      	push	{r7}
 8017fca:	b083      	sub	sp, #12
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	4603      	mov	r3, r0
 8017fd0:	71fb      	strb	r3, [r7, #7]
 8017fd2:	460b      	mov	r3, r1
 8017fd4:	71bb      	strb	r3, [r7, #6]
 8017fd6:	4613      	mov	r3, r2
 8017fd8:	80bb      	strh	r3, [r7, #4]
  ETH->MACMDIODR = val;
 8017fda:	4a18      	ldr	r2, [pc, #96]	@ (801803c <eth_write_phy+0x74>)
 8017fdc:	88bb      	ldrh	r3, [r7, #4]
 8017fde:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 8017fe2:	4b16      	ldr	r3, [pc, #88]	@ (801803c <eth_write_phy+0x74>)
 8017fe4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8017fe8:	4a14      	ldr	r2, [pc, #80]	@ (801803c <eth_write_phy+0x74>)
 8017fea:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8017fee:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 8017ff2:	4b12      	ldr	r3, [pc, #72]	@ (801803c <eth_write_phy+0x74>)
 8017ff4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8017ff8:	79fb      	ldrb	r3, [r7, #7]
 8017ffa:	0559      	lsls	r1, r3, #21
 8017ffc:	79bb      	ldrb	r3, [r7, #6]
 8017ffe:	041b      	lsls	r3, r3, #16
 8018000:	430b      	orrs	r3, r1
 8018002:	4313      	orrs	r3, r2
 8018004:	4a0d      	ldr	r2, [pc, #52]	@ (801803c <eth_write_phy+0x74>)
 8018006:	f043 0304 	orr.w	r3, r3, #4
 801800a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 801800e:	4b0b      	ldr	r3, [pc, #44]	@ (801803c <eth_write_phy+0x74>)
 8018010:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018014:	4a09      	ldr	r2, [pc, #36]	@ (801803c <eth_write_phy+0x74>)
 8018016:	f043 0301 	orr.w	r3, r3, #1
 801801a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 801801e:	bf00      	nop
 8018020:	4b06      	ldr	r3, [pc, #24]	@ (801803c <eth_write_phy+0x74>)
 8018022:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018026:	f003 0301 	and.w	r3, r3, #1
 801802a:	2b00      	cmp	r3, #0
 801802c:	d1f8      	bne.n	8018020 <eth_write_phy+0x58>
}
 801802e:	bf00      	nop
 8018030:	bf00      	nop
 8018032:	370c      	adds	r7, #12
 8018034:	46bd      	mov	sp, r7
 8018036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803a:	4770      	bx	lr
 801803c:	40028000 	.word	0x40028000

08018040 <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 8018040:	b580      	push	{r7, lr}
 8018042:	b08a      	sub	sp, #40	@ 0x28
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801804c:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 801804e:	4a8e      	ldr	r2, [pc, #568]	@ (8018288 <mg_tcpip_driver_stm32h_init+0x248>)
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	6013      	str	r3, [r2, #0]
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8018054:	69bb      	ldr	r3, [r7, #24]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d002      	beq.n	8018060 <mg_tcpip_driver_stm32h_init+0x20>
 801805a:	69bb      	ldr	r3, [r7, #24]
 801805c:	791b      	ldrb	r3, [r3, #4]
 801805e:	e000      	b.n	8018062 <mg_tcpip_driver_stm32h_init+0x22>
 8018060:	2300      	movs	r3, #0
 8018062:	75fb      	strb	r3, [r7, #23]
  uint8_t phy_conf = d == NULL ? MG_PHY_CLOCKS_MAC : d->phy_conf;
 8018064:	69bb      	ldr	r3, [r7, #24]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d002      	beq.n	8018070 <mg_tcpip_driver_stm32h_init+0x30>
 801806a:	69bb      	ldr	r3, [r7, #24]
 801806c:	795b      	ldrb	r3, [r3, #5]
 801806e:	e000      	b.n	8018072 <mg_tcpip_driver_stm32h_init+0x32>
 8018070:	2302      	movs	r3, #2
 8018072:	75bb      	strb	r3, [r7, #22]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8018074:	2300      	movs	r3, #0
 8018076:	627b      	str	r3, [r7, #36]	@ 0x24
 8018078:	e017      	b.n	80180aa <mg_tcpip_driver_stm32h_init+0x6a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 801807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801807c:	f240 6204 	movw	r2, #1540	@ 0x604
 8018080:	fb02 f303 	mul.w	r3, r2, r3
 8018084:	4a81      	ldr	r2, [pc, #516]	@ (801828c <mg_tcpip_driver_stm32h_init+0x24c>)
 8018086:	4413      	add	r3, r2
 8018088:	4619      	mov	r1, r3
 801808a:	4a81      	ldr	r2, [pc, #516]	@ (8018290 <mg_tcpip_driver_stm32h_init+0x250>)
 801808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801808e:	011b      	lsls	r3, r3, #4
 8018090:	4413      	add	r3, r2
 8018092:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
 8018094:	4a7e      	ldr	r2, [pc, #504]	@ (8018290 <mg_tcpip_driver_stm32h_init+0x250>)
 8018096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018098:	011b      	lsls	r3, r3, #4
 801809a:	4413      	add	r3, r2
 801809c:	330c      	adds	r3, #12
 801809e:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80180a2:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80180a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180a6:	3301      	adds	r3, #1
 80180a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80180aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180ac:	2b03      	cmp	r3, #3
 80180ae:	dde4      	ble.n	801807a <mg_tcpip_driver_stm32h_init+0x3a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80180b0:	2300      	movs	r3, #0
 80180b2:	623b      	str	r3, [r7, #32]
 80180b4:	e00f      	b.n	80180d6 <mg_tcpip_driver_stm32h_init+0x96>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 80180b6:	6a3b      	ldr	r3, [r7, #32]
 80180b8:	f240 6204 	movw	r2, #1540	@ 0x604
 80180bc:	fb02 f303 	mul.w	r3, r2, r3
 80180c0:	4a74      	ldr	r2, [pc, #464]	@ (8018294 <mg_tcpip_driver_stm32h_init+0x254>)
 80180c2:	4413      	add	r3, r2
 80180c4:	4619      	mov	r1, r3
 80180c6:	4a74      	ldr	r2, [pc, #464]	@ (8018298 <mg_tcpip_driver_stm32h_init+0x258>)
 80180c8:	6a3b      	ldr	r3, [r7, #32]
 80180ca:	011b      	lsls	r3, r3, #4
 80180cc:	4413      	add	r3, r2
 80180ce:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80180d0:	6a3b      	ldr	r3, [r7, #32]
 80180d2:	3301      	adds	r3, #1
 80180d4:	623b      	str	r3, [r7, #32]
 80180d6:	6a3b      	ldr	r3, [r7, #32]
 80180d8:	2b03      	cmp	r3, #3
 80180da:	ddec      	ble.n	80180b6 <mg_tcpip_driver_stm32h_init+0x76>
  }

  ETH->DMAMR |= MG_BIT(0);  // Software reset
 80180dc:	4b6f      	ldr	r3, [pc, #444]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 80180de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	4a6d      	ldr	r2, [pc, #436]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 80180e6:	f043 0301 	orr.w	r3, r3, #1
 80180ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80180ee:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 4; i++)
 80180f0:	2300      	movs	r3, #0
 80180f2:	61fb      	str	r3, [r7, #28]
 80180f4:	e002      	b.n	80180fc <mg_tcpip_driver_stm32h_init+0xbc>
 80180f6:	69fb      	ldr	r3, [r7, #28]
 80180f8:	3301      	adds	r3, #1
 80180fa:	61fb      	str	r3, [r7, #28]
 80180fc:	69fb      	ldr	r3, [r7, #28]
 80180fe:	2b03      	cmp	r3, #3
 8018100:	ddf9      	ble.n	80180f6 <mg_tcpip_driver_stm32h_init+0xb6>
    (void) 0;  // wait at least 4 clocks before reading
  while ((ETH->DMAMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 8018102:	bf00      	nop
 8018104:	4b65      	ldr	r3, [pc, #404]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 8018106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	f003 0301 	and.w	r3, r3, #1
 8018110:	2b00      	cmp	r3, #0
 8018112:	d1f7      	bne.n	8018104 <mg_tcpip_driver_stm32h_init+0xc4>

  // Set MDC clock divider. Get user value, else, assume max freq
  int cr = (d == NULL || d->mdc_cr < 0) ? 7 : d->mdc_cr;
 8018114:	69bb      	ldr	r3, [r7, #24]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d006      	beq.n	8018128 <mg_tcpip_driver_stm32h_init+0xe8>
 801811a:	69bb      	ldr	r3, [r7, #24]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	2b00      	cmp	r3, #0
 8018120:	db02      	blt.n	8018128 <mg_tcpip_driver_stm32h_init+0xe8>
 8018122:	69bb      	ldr	r3, [r7, #24]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	e000      	b.n	801812a <mg_tcpip_driver_stm32h_init+0xea>
 8018128:	2307      	movs	r3, #7
 801812a:	613b      	str	r3, [r7, #16]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 801812c:	693b      	ldr	r3, [r7, #16]
 801812e:	021b      	lsls	r3, r3, #8
 8018130:	4a5a      	ldr	r2, [pc, #360]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 8018132:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8018136:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;        // use interrupt mode 0 (58.8.1) (reset value)
 801813a:	4b58      	ldr	r3, [pc, #352]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 801813c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018140:	461a      	mov	r2, r3
 8018142:	2300      	movs	r3, #0
 8018144:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= MG_BIT(12);  // AAL NOTE(scaprile): is this actually needed
 8018146:	4b55      	ldr	r3, [pc, #340]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 8018148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801814c:	685b      	ldr	r3, [r3, #4]
 801814e:	4a53      	ldr	r2, [pc, #332]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 8018150:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8018154:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018158:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;  // Do not enable additional irq sources (reset value)
 801815a:	4b50      	ldr	r3, [pc, #320]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 801815c:	2200      	movs	r2, #0
 801815e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ETH->MACTFCR = MG_BIT(7);  // Disable zero-quanta pause
 8018162:	4b4e      	ldr	r3, [pc, #312]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 8018164:	2280      	movs	r2, #128	@ 0x80
 8018166:	671a      	str	r2, [r3, #112]	@ 0x70
  // ETH->MACPFR = MG_BIT(31);  // Receive all
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8018168:	4a4d      	ldr	r2, [pc, #308]	@ (80182a0 <mg_tcpip_driver_stm32h_init+0x260>)
 801816a:	f107 0308 	add.w	r3, r7, #8
 801816e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018172:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, phy_conf);
 8018176:	7dba      	ldrb	r2, [r7, #22]
 8018178:	7df9      	ldrb	r1, [r7, #23]
 801817a:	f107 0308 	add.w	r3, r7, #8
 801817e:	4618      	mov	r0, r3
 8018180:	f7ff fd3a 	bl	8017bf8 <mg_phy_init>
  ETH->DMACRDLAR =
 8018184:	4a45      	ldr	r2, [pc, #276]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 8018186:	4b42      	ldr	r3, [pc, #264]	@ (8018290 <mg_tcpip_driver_stm32h_init+0x250>)
  ETH->DMACRDLAR =
 8018188:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801818c:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 8018190:	4b42      	ldr	r3, [pc, #264]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 8018192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018196:	461a      	mov	r2, r3
 8018198:	2303      	movs	r3, #3
 801819a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
  ETH->DMACRDTPR =
 801819e:	4a3f      	ldr	r2, [pc, #252]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 80181a0:	4b40      	ldr	r3, [pc, #256]	@ (80182a4 <mg_tcpip_driver_stm32h_init+0x264>)
  ETH->DMACRDTPR =
 80181a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80181a6:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 80181aa:	4a3c      	ldr	r2, [pc, #240]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 80181ac:	4b3a      	ldr	r3, [pc, #232]	@ (8018298 <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACTDLAR =
 80181ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80181b2:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 80181b6:	4b39      	ldr	r3, [pc, #228]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 80181b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80181bc:	461a      	mov	r2, r3
 80181be:	2303      	movs	r3, #3
 80181c0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  ETH->DMACTDTPR =
 80181c4:	4a35      	ldr	r2, [pc, #212]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 80181c6:	4b34      	ldr	r3, [pc, #208]	@ (8018298 <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACTDTPR =
 80181c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80181cc:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 80181d0:	4b32      	ldr	r3, [pc, #200]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 80181d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80181d6:	461a      	mov	r2, r3
 80181d8:	2300      	movs	r3, #0
 80181da:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
#if !MG_ENABLE_DRIVER_STM32H
  MG_SET_BITS(ETH->DMACTCR, 0x3F << 16, MG_BIT(16));
  MG_SET_BITS(ETH->DMACRCR, 0x3F << 16, MG_BIT(16));
#endif
  ETH->DMACIER = MG_BIT(6) | MG_BIT(15);  // RIE, NIE
 80181de:	4b2f      	ldr	r3, [pc, #188]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 80181e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80181e4:	461a      	mov	r2, r3
 80181e6:	f248 0340 	movw	r3, #32832	@ 0x8040
 80181ea:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  ETH->MACCR = MG_BIT(0) | MG_BIT(1) | MG_BIT(13) | MG_BIT(14) |
 80181ee:	4b2b      	ldr	r3, [pc, #172]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 80181f0:	f24e 0203 	movw	r2, #57347	@ 0xe003
 80181f4:	601a      	str	r2, [r3, #0]
               MG_BIT(15);  // RE, TE, Duplex, Fast, Reserved
#if MG_ENABLE_DRIVER_STM32H
  ETH->MTLTQOMR |= MG_BIT(1);  // TSF
 80181f6:	4b29      	ldr	r3, [pc, #164]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 80181f8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80181fc:	4a27      	ldr	r2, [pc, #156]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 80181fe:	f043 0302 	orr.w	r3, r3, #2
 8018202:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  ETH->MTLRQOMR |= MG_BIT(5);  // RSF
 8018206:	4b25      	ldr	r3, [pc, #148]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 8018208:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801820c:	4a23      	ldr	r2, [pc, #140]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 801820e:	f043 0320 	orr.w	r3, r3, #32
 8018212:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
#else
  ETH->MTLTQOMR |= (7 << 16) | MG_BIT(3) | MG_BIT(1);  // 2KB Q0, TSF
  ETH->MTLRQOMR |= (7 << 20) | MG_BIT(5);              // 2KB Q, RSF
  MG_SET_BITS(ETH->RESERVED6[3], 3, 2);  // Enable RxQ0 (MAC_RXQ_CTRL0)
#endif
  ETH->DMACTCR |= MG_BIT(0);  // ST
 8018216:	4b21      	ldr	r3, [pc, #132]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 8018218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801821c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018220:	4a1e      	ldr	r2, [pc, #120]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 8018222:	f043 0301 	orr.w	r3, r3, #1
 8018226:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801822a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  ETH->DMACRCR |= MG_BIT(0);  // SR
 801822e:	4b1b      	ldr	r3, [pc, #108]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 8018230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018234:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018238:	4a18      	ldr	r2, [pc, #96]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 801823a:	f043 0301 	orr.w	r3, r3, #1
 801823e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018242:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	795b      	ldrb	r3, [r3, #5]
 801824a:	021b      	lsls	r3, r3, #8
 801824c:	687a      	ldr	r2, [r7, #4]
 801824e:	7912      	ldrb	r2, [r2, #4]
 8018250:	4611      	mov	r1, r2
 8018252:	4a12      	ldr	r2, [pc, #72]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
 8018254:	430b      	orrs	r3, r1
 8018256:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	78db      	ldrb	r3, [r3, #3]
 801825e:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	789b      	ldrb	r3, [r3, #2]
 8018264:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8018266:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	785b      	ldrb	r3, [r3, #1]
 801826c:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 801826e:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8018270:	687a      	ldr	r2, [r7, #4]
 8018272:	7812      	ldrb	r2, [r2, #0]
 8018274:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8018276:	4a09      	ldr	r2, [pc, #36]	@ (801829c <mg_tcpip_driver_stm32h_init+0x25c>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8018278:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 801827a:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  return true;
 801827e:	2301      	movs	r3, #1
}
 8018280:	4618      	mov	r0, r3
 8018282:	3728      	adds	r7, #40	@ 0x28
 8018284:	46bd      	mov	sp, r7
 8018286:	bd80      	pop	{r7, pc}
 8018288:	24003e74 	.word	0x24003e74
 801828c:	24000e54 	.word	0x24000e54
 8018290:	24000dd4 	.word	0x24000dd4
 8018294:	24002664 	.word	0x24002664
 8018298:	24000e14 	.word	0x24000e14
 801829c:	40028000 	.word	0x40028000
 80182a0:	0802801c 	.word	0x0802801c
 80182a4:	24000e04 	.word	0x24000e04

080182a8 <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b088      	sub	sp, #32
 80182ac:	af02      	add	r7, sp, #8
 80182ae:	60f8      	str	r0, [r7, #12]
 80182b0:	60b9      	str	r1, [r7, #8]
 80182b2:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 80182b4:	68bb      	ldr	r3, [r7, #8]
 80182b6:	f240 6204 	movw	r2, #1540	@ 0x604
 80182ba:	4293      	cmp	r3, r2
 80182bc:	d912      	bls.n	80182e4 <mg_tcpip_driver_stm32h_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 80182be:	4b5d      	ldr	r3, [pc, #372]	@ (8018434 <mg_tcpip_driver_stm32h_tx+0x18c>)
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	dd0b      	ble.n	80182de <mg_tcpip_driver_stm32h_tx+0x36>
 80182c6:	4b5c      	ldr	r3, [pc, #368]	@ (8018438 <mg_tcpip_driver_stm32h_tx+0x190>)
 80182c8:	f244 72e0 	movw	r2, #18400	@ 0x47e0
 80182cc:	495b      	ldr	r1, [pc, #364]	@ (801843c <mg_tcpip_driver_stm32h_tx+0x194>)
 80182ce:	2001      	movs	r0, #1
 80182d0:	f7ef fe2e 	bl	8007f30 <mg_log_prefix>
 80182d4:	68bb      	ldr	r3, [r7, #8]
 80182d6:	4619      	mov	r1, r3
 80182d8:	4859      	ldr	r0, [pc, #356]	@ (8018440 <mg_tcpip_driver_stm32h_tx+0x198>)
 80182da:	f7ef fe79 	bl	8007fd0 <mg_log>
    len = 0;  // Frame is too big
 80182de:	2300      	movs	r3, #0
 80182e0:	60bb      	str	r3, [r7, #8]
 80182e2:	e08b      	b.n	80183fc <mg_tcpip_driver_stm32h_tx+0x154>
  } else if ((s_txdesc[s_txno][3] & MG_BIT(31))) {
 80182e4:	4b57      	ldr	r3, [pc, #348]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	4a57      	ldr	r2, [pc, #348]	@ (8018448 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80182ea:	011b      	lsls	r3, r3, #4
 80182ec:	4413      	add	r3, r2
 80182ee:	330c      	adds	r3, #12
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	da48      	bge.n	8018388 <mg_tcpip_driver_stm32h_tx+0xe0>
    ifp->nerr++;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80182fa:	1c5a      	adds	r2, r3, #1
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	679a      	str	r2, [r3, #120]	@ 0x78
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
 8018300:	4b4c      	ldr	r3, [pc, #304]	@ (8018434 <mg_tcpip_driver_stm32h_tx+0x18c>)
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	2b00      	cmp	r3, #0
 8018306:	dd1e      	ble.n	8018346 <mg_tcpip_driver_stm32h_tx+0x9e>
 8018308:	4b4b      	ldr	r3, [pc, #300]	@ (8018438 <mg_tcpip_driver_stm32h_tx+0x190>)
 801830a:	f244 72e4 	movw	r2, #18404	@ 0x47e4
 801830e:	494b      	ldr	r1, [pc, #300]	@ (801843c <mg_tcpip_driver_stm32h_tx+0x194>)
 8018310:	2001      	movs	r0, #1
 8018312:	f7ef fe0d 	bl	8007f30 <mg_log_prefix>
 8018316:	4b4b      	ldr	r3, [pc, #300]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 8018318:	6819      	ldr	r1, [r3, #0]
 801831a:	4b4a      	ldr	r3, [pc, #296]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	4a4a      	ldr	r2, [pc, #296]	@ (8018448 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8018320:	011b      	lsls	r3, r3, #4
 8018322:	4413      	add	r3, r2
 8018324:	330c      	adds	r3, #12
 8018326:	681a      	ldr	r2, [r3, #0]
 8018328:	4b48      	ldr	r3, [pc, #288]	@ (801844c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 801832a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801832e:	f8d3 0160 	ldr.w	r0, [r3, #352]	@ 0x160
 8018332:	4b46      	ldr	r3, [pc, #280]	@ (801844c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8018334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018338:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 801833c:	9300      	str	r3, [sp, #0]
 801833e:	4603      	mov	r3, r0
 8018340:	4843      	ldr	r0, [pc, #268]	@ (8018450 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8018342:	f7ef fe45 	bl	8007fd0 <mg_log>
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 8018346:	2300      	movs	r3, #0
 8018348:	617b      	str	r3, [r7, #20]
 801834a:	e017      	b.n	801837c <mg_tcpip_driver_stm32h_tx+0xd4>
 801834c:	4b39      	ldr	r3, [pc, #228]	@ (8018434 <mg_tcpip_driver_stm32h_tx+0x18c>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	2b00      	cmp	r3, #0
 8018352:	dd10      	ble.n	8018376 <mg_tcpip_driver_stm32h_tx+0xce>
 8018354:	4b38      	ldr	r3, [pc, #224]	@ (8018438 <mg_tcpip_driver_stm32h_tx+0x190>)
 8018356:	f244 72e6 	movw	r2, #18406	@ 0x47e6
 801835a:	4938      	ldr	r1, [pc, #224]	@ (801843c <mg_tcpip_driver_stm32h_tx+0x194>)
 801835c:	2001      	movs	r0, #1
 801835e:	f7ef fde7 	bl	8007f30 <mg_log_prefix>
 8018362:	4a39      	ldr	r2, [pc, #228]	@ (8018448 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8018364:	697b      	ldr	r3, [r7, #20]
 8018366:	011b      	lsls	r3, r3, #4
 8018368:	4413      	add	r3, r2
 801836a:	330c      	adds	r3, #12
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	4619      	mov	r1, r3
 8018370:	4838      	ldr	r0, [pc, #224]	@ (8018454 <mg_tcpip_driver_stm32h_tx+0x1ac>)
 8018372:	f7ef fe2d 	bl	8007fd0 <mg_log>
 8018376:	697b      	ldr	r3, [r7, #20]
 8018378:	3301      	adds	r3, #1
 801837a:	617b      	str	r3, [r7, #20]
 801837c:	697b      	ldr	r3, [r7, #20]
 801837e:	2b03      	cmp	r3, #3
 8018380:	dde4      	ble.n	801834c <mg_tcpip_driver_stm32h_tx+0xa4>
    len = 0;  // All descriptors are busy, fail
 8018382:	2300      	movs	r3, #0
 8018384:	60bb      	str	r3, [r7, #8]
 8018386:	e039      	b.n	80183fc <mg_tcpip_driver_stm32h_tx+0x154>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);              // Copy data
 8018388:	4b2e      	ldr	r3, [pc, #184]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	f240 6204 	movw	r2, #1540	@ 0x604
 8018390:	fb02 f303 	mul.w	r3, r2, r3
 8018394:	4a30      	ldr	r2, [pc, #192]	@ (8018458 <mg_tcpip_driver_stm32h_tx+0x1b0>)
 8018396:	4413      	add	r3, r2
 8018398:	68ba      	ldr	r2, [r7, #8]
 801839a:	68f9      	ldr	r1, [r7, #12]
 801839c:	4618      	mov	r0, r3
 801839e:	f009 fe16 	bl	8021fce <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;           // Set data len
 80183a2:	4b28      	ldr	r3, [pc, #160]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	4a28      	ldr	r2, [pc, #160]	@ (8018448 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80183a8:	011b      	lsls	r3, r3, #4
 80183aa:	4413      	add	r3, r2
 80183ac:	3308      	adds	r3, #8
 80183ae:	68ba      	ldr	r2, [r7, #8]
 80183b0:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = MG_BIT(28) | MG_BIT(29);  // FD, LD
 80183b2:	4b24      	ldr	r3, [pc, #144]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	4a24      	ldr	r2, [pc, #144]	@ (8018448 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80183b8:	011b      	lsls	r3, r3, #4
 80183ba:	4413      	add	r3, r2
 80183bc:	330c      	adds	r3, #12
 80183be:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80183c2:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 80183c4:	4b1f      	ldr	r3, [pc, #124]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	4a1f      	ldr	r2, [pc, #124]	@ (8018448 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80183ca:	011b      	lsls	r3, r3, #4
 80183cc:	4413      	add	r3, r2
 80183ce:	330c      	adds	r3, #12
 80183d0:	681a      	ldr	r2, [r3, #0]
 80183d2:	4b1c      	ldr	r3, [pc, #112]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80183da:	491b      	ldr	r1, [pc, #108]	@ (8018448 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80183dc:	011b      	lsls	r3, r3, #4
 80183de:	440b      	add	r3, r1
 80183e0:	330c      	adds	r3, #12
 80183e2:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 80183e4:	4b17      	ldr	r3, [pc, #92]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	3301      	adds	r3, #1
 80183ea:	4a16      	ldr	r2, [pc, #88]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80183ec:	6013      	str	r3, [r2, #0]
 80183ee:	4b15      	ldr	r3, [pc, #84]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	2b03      	cmp	r3, #3
 80183f4:	d902      	bls.n	80183fc <mg_tcpip_driver_stm32h_tx+0x154>
 80183f6:	4b13      	ldr	r3, [pc, #76]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 80183f8:	2200      	movs	r2, #0
 80183fa:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= MG_BIT(2) | MG_BIT(1);  // Clear any prior TBU, TPS
 80183fc:	4b13      	ldr	r3, [pc, #76]	@ (801844c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80183fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018402:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018406:	4a11      	ldr	r2, [pc, #68]	@ (801844c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8018408:	f043 0306 	orr.w	r3, r3, #6
 801840c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018410:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 8018414:	4b0b      	ldr	r3, [pc, #44]	@ (8018444 <mg_tcpip_driver_stm32h_tx+0x19c>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	011b      	lsls	r3, r3, #4
 801841a:	4a0b      	ldr	r2, [pc, #44]	@ (8018448 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 801841c:	441a      	add	r2, r3
 801841e:	4b0b      	ldr	r3, [pc, #44]	@ (801844c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8018420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018424:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  return len;
 8018428:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 801842a:	4618      	mov	r0, r3
 801842c:	3718      	adds	r7, #24
 801842e:	46bd      	mov	sp, r7
 8018430:	bd80      	pop	{r7, pc}
 8018432:	bf00      	nop
 8018434:	24000240 	.word	0x24000240
 8018438:	08029234 	.word	0x08029234
 801843c:	0802597c 	.word	0x0802597c
 8018440:	08028024 	.word	0x08028024
 8018444:	24003e78 	.word	0x24003e78
 8018448:	24000e14 	.word	0x24000e14
 801844c:	40028000 	.word	0x40028000
 8018450:	08028038 	.word	0x08028038
 8018454:	08028060 	.word	0x08028060
 8018458:	24002664 	.word	0x24002664

0801845c <mg_tcpip_driver_stm32h_up>:

static bool mg_tcpip_driver_stm32h_up(struct mg_tcpip_if *ifp) {
 801845c:	b580      	push	{r7, lr}
 801845e:	b088      	sub	sp, #32
 8018460:	af00      	add	r7, sp, #0
 8018462:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018468:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 801846a:	69bb      	ldr	r3, [r7, #24]
 801846c:	2b00      	cmp	r3, #0
 801846e:	d002      	beq.n	8018476 <mg_tcpip_driver_stm32h_up+0x1a>
 8018470:	69bb      	ldr	r3, [r7, #24]
 8018472:	791b      	ldrb	r3, [r3, #4]
 8018474:	e000      	b.n	8018478 <mg_tcpip_driver_stm32h_up+0x1c>
 8018476:	2300      	movs	r3, #0
 8018478:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 801847a:	2300      	movs	r3, #0
 801847c:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 801847e:	2300      	movs	r3, #0
 8018480:	75bb      	strb	r3, [r7, #22]
 8018482:	2300      	movs	r3, #0
 8018484:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8018486:	4a2b      	ldr	r2, [pc, #172]	@ (8018534 <mg_tcpip_driver_stm32h_up+0xd8>)
 8018488:	f107 030c 	add.w	r3, r7, #12
 801848c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018490:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 8018494:	f107 0315 	add.w	r3, r7, #21
 8018498:	f107 0214 	add.w	r2, r7, #20
 801849c:	7df9      	ldrb	r1, [r7, #23]
 801849e:	f107 000c 	add.w	r0, r7, #12
 80184a2:	f7ff fc61 	bl	8017d68 <mg_phy_up>
 80184a6:	4603      	mov	r3, r0
 80184a8:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d13a      	bne.n	801852a <mg_tcpip_driver_stm32h_up+0xce>
 80184b4:	7dbb      	ldrb	r3, [r7, #22]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d037      	beq.n	801852a <mg_tcpip_driver_stm32h_up+0xce>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(13);  // 100M, Full-duplex
 80184ba:	4b1f      	ldr	r3, [pc, #124]	@ (8018538 <mg_tcpip_driver_stm32h_up+0xdc>)
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80184c2:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 80184c4:	7d7b      	ldrb	r3, [r7, #21]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d103      	bne.n	80184d2 <mg_tcpip_driver_stm32h_up+0x76>
 80184ca:	69fb      	ldr	r3, [r7, #28]
 80184cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80184d0:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(13);         // Half-duplex
 80184d2:	7d3b      	ldrb	r3, [r7, #20]
 80184d4:	f083 0301 	eor.w	r3, r3, #1
 80184d8:	b2db      	uxtb	r3, r3
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d003      	beq.n	80184e6 <mg_tcpip_driver_stm32h_up+0x8a>
 80184de:	69fb      	ldr	r3, [r7, #28]
 80184e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80184e4:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 80184e6:	4a14      	ldr	r2, [pc, #80]	@ (8018538 <mg_tcpip_driver_stm32h_up+0xdc>)
 80184e8:	69fb      	ldr	r3, [r7, #28]
 80184ea:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 80184ec:	4b13      	ldr	r3, [pc, #76]	@ (801853c <mg_tcpip_driver_stm32h_up+0xe0>)
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	2b02      	cmp	r3, #2
 80184f2:	dd1a      	ble.n	801852a <mg_tcpip_driver_stm32h_up+0xce>
 80184f4:	4b12      	ldr	r3, [pc, #72]	@ (8018540 <mg_tcpip_driver_stm32h_up+0xe4>)
 80184f6:	f644 0205 	movw	r2, #18437	@ 0x4805
 80184fa:	4912      	ldr	r1, [pc, #72]	@ (8018544 <mg_tcpip_driver_stm32h_up+0xe8>)
 80184fc:	2003      	movs	r0, #3
 80184fe:	f7ef fd17 	bl	8007f30 <mg_log_prefix>
 8018502:	69fb      	ldr	r3, [r7, #28]
 8018504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018508:	2b00      	cmp	r3, #0
 801850a:	d001      	beq.n	8018510 <mg_tcpip_driver_stm32h_up+0xb4>
 801850c:	2164      	movs	r1, #100	@ 0x64
 801850e:	e000      	b.n	8018512 <mg_tcpip_driver_stm32h_up+0xb6>
 8018510:	210a      	movs	r1, #10
 8018512:	69fb      	ldr	r3, [r7, #28]
 8018514:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018518:	2b00      	cmp	r3, #0
 801851a:	d001      	beq.n	8018520 <mg_tcpip_driver_stm32h_up+0xc4>
 801851c:	4b0a      	ldr	r3, [pc, #40]	@ (8018548 <mg_tcpip_driver_stm32h_up+0xec>)
 801851e:	e000      	b.n	8018522 <mg_tcpip_driver_stm32h_up+0xc6>
 8018520:	4b0a      	ldr	r3, [pc, #40]	@ (801854c <mg_tcpip_driver_stm32h_up+0xf0>)
 8018522:	461a      	mov	r2, r3
 8018524:	480a      	ldr	r0, [pc, #40]	@ (8018550 <mg_tcpip_driver_stm32h_up+0xf4>)
 8018526:	f7ef fd53 	bl	8007fd0 <mg_log>
              maccr & MG_BIT(13) ? "full" : "half"));
  }
  return up;
 801852a:	7dbb      	ldrb	r3, [r7, #22]
}
 801852c:	4618      	mov	r0, r3
 801852e:	3720      	adds	r7, #32
 8018530:	46bd      	mov	sp, r7
 8018532:	bd80      	pop	{r7, pc}
 8018534:	0802801c 	.word	0x0802801c
 8018538:	40028000 	.word	0x40028000
 801853c:	24000240 	.word	0x24000240
 8018540:	08029250 	.word	0x08029250
 8018544:	0802597c 	.word	0x0802597c
 8018548:	08028068 	.word	0x08028068
 801854c:	08028070 	.word	0x08028070
 8018550:	08028078 	.word	0x08028078

08018554 <ETH_IRQHandler>:
#if MG_ENABLE_DRIVER_MCXN
void ETHERNET_IRQHandler(void);
void ETHERNET_IRQHandler(void) {
#else
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 8018554:	b580      	push	{r7, lr}
 8018556:	b082      	sub	sp, #8
 8018558:	af00      	add	r7, sp, #0
#endif
  if (ETH->DMACSR & MG_BIT(6)) {           // Frame received, loop
 801855a:	4b40      	ldr	r3, [pc, #256]	@ (801865c <ETH_IRQHandler+0x108>)
 801855c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018560:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018568:	2b00      	cmp	r3, #0
 801856a:	d065      	beq.n	8018638 <ETH_IRQHandler+0xe4>
    ETH->DMACSR = MG_BIT(15) | MG_BIT(6);  // Clear flag
 801856c:	4b3b      	ldr	r3, [pc, #236]	@ (801865c <ETH_IRQHandler+0x108>)
 801856e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018572:	461a      	mov	r2, r3
 8018574:	f248 0340 	movw	r3, #32832	@ 0x8040
 8018578:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 801857c:	2300      	movs	r3, #0
 801857e:	607b      	str	r3, [r7, #4]
 8018580:	e055      	b.n	801862e <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 8018582:	4b37      	ldr	r3, [pc, #220]	@ (8018660 <ETH_IRQHandler+0x10c>)
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	4a37      	ldr	r2, [pc, #220]	@ (8018664 <ETH_IRQHandler+0x110>)
 8018588:	011b      	lsls	r3, r3, #4
 801858a:	4413      	add	r3, r2
 801858c:	330c      	adds	r3, #12
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	2b00      	cmp	r3, #0
 8018592:	db50      	blt.n	8018636 <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (MG_BIT(28) | MG_BIT(29))) ==
 8018594:	4b32      	ldr	r3, [pc, #200]	@ (8018660 <ETH_IRQHandler+0x10c>)
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	4a32      	ldr	r2, [pc, #200]	@ (8018664 <ETH_IRQHandler+0x110>)
 801859a:	011b      	lsls	r3, r3, #4
 801859c:	4413      	add	r3, r2
 801859e:	330c      	adds	r3, #12
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80185a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80185aa:	d128      	bne.n	80185fe <ETH_IRQHandler+0xaa>
           (MG_BIT(28) | MG_BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & MG_BIT(15))) {  // skip partial/errored frames
 80185ac:	4b2c      	ldr	r3, [pc, #176]	@ (8018660 <ETH_IRQHandler+0x10c>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	4a2c      	ldr	r2, [pc, #176]	@ (8018664 <ETH_IRQHandler+0x110>)
 80185b2:	011b      	lsls	r3, r3, #4
 80185b4:	4413      	add	r3, r2
 80185b6:	330c      	adds	r3, #12
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(28) | MG_BIT(29))) &&
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d11d      	bne.n	80185fe <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (MG_BIT(15) - 1);
 80185c2:	4b27      	ldr	r3, [pc, #156]	@ (8018660 <ETH_IRQHandler+0x10c>)
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	4a27      	ldr	r2, [pc, #156]	@ (8018664 <ETH_IRQHandler+0x110>)
 80185c8:	011b      	lsls	r3, r3, #4
 80185ca:	4413      	add	r3, r2
 80185cc:	330c      	adds	r3, #12
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80185d4:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 80185d6:	4b22      	ldr	r3, [pc, #136]	@ (8018660 <ETH_IRQHandler+0x10c>)
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	f240 6204 	movw	r2, #1540	@ 0x604
 80185de:	fb02 f303 	mul.w	r3, r2, r3
 80185e2:	4a21      	ldr	r2, [pc, #132]	@ (8018668 <ETH_IRQHandler+0x114>)
 80185e4:	1898      	adds	r0, r3, r2
 80185e6:	683b      	ldr	r3, [r7, #0]
 80185e8:	2b04      	cmp	r3, #4
 80185ea:	d902      	bls.n	80185f2 <ETH_IRQHandler+0x9e>
 80185ec:	683b      	ldr	r3, [r7, #0]
 80185ee:	3b04      	subs	r3, #4
 80185f0:	e000      	b.n	80185f4 <ETH_IRQHandler+0xa0>
 80185f2:	683b      	ldr	r3, [r7, #0]
 80185f4:	4a1d      	ldr	r2, [pc, #116]	@ (801866c <ETH_IRQHandler+0x118>)
 80185f6:	6812      	ldr	r2, [r2, #0]
 80185f8:	4619      	mov	r1, r3
 80185fa:	f7f4 f8fd 	bl	800c7f8 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] =
 80185fe:	4b18      	ldr	r3, [pc, #96]	@ (8018660 <ETH_IRQHandler+0x10c>)
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	4a18      	ldr	r2, [pc, #96]	@ (8018664 <ETH_IRQHandler+0x110>)
 8018604:	011b      	lsls	r3, r3, #4
 8018606:	4413      	add	r3, r2
 8018608:	330c      	adds	r3, #12
 801860a:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 801860e:	601a      	str	r2, [r3, #0]
          MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8018610:	4b13      	ldr	r3, [pc, #76]	@ (8018660 <ETH_IRQHandler+0x10c>)
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	3301      	adds	r3, #1
 8018616:	4a12      	ldr	r2, [pc, #72]	@ (8018660 <ETH_IRQHandler+0x10c>)
 8018618:	6013      	str	r3, [r2, #0]
 801861a:	4b11      	ldr	r3, [pc, #68]	@ (8018660 <ETH_IRQHandler+0x10c>)
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	2b03      	cmp	r3, #3
 8018620:	d902      	bls.n	8018628 <ETH_IRQHandler+0xd4>
 8018622:	4b0f      	ldr	r3, [pc, #60]	@ (8018660 <ETH_IRQHandler+0x10c>)
 8018624:	2200      	movs	r2, #0
 8018626:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	3301      	adds	r3, #1
 801862c:	607b      	str	r3, [r7, #4]
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	2b09      	cmp	r3, #9
 8018632:	d9a6      	bls.n	8018582 <ETH_IRQHandler+0x2e>
 8018634:	e000      	b.n	8018638 <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 8018636:	bf00      	nop
    }
  }
  ETH->DMACSR =
 8018638:	4b08      	ldr	r3, [pc, #32]	@ (801865c <ETH_IRQHandler+0x108>)
 801863a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801863e:	461a      	mov	r2, r3
 8018640:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8018644:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      MG_BIT(7) | MG_BIT(8);  // Clear possible RBU RPS while processing
  ETH->DMACRDTPR =
 8018648:	4a04      	ldr	r2, [pc, #16]	@ (801865c <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 801864a:	4b09      	ldr	r3, [pc, #36]	@ (8018670 <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 801864c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018650:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
}
 8018654:	bf00      	nop
 8018656:	3708      	adds	r7, #8
 8018658:	46bd      	mov	sp, r7
 801865a:	bd80      	pop	{r7, pc}
 801865c:	40028000 	.word	0x40028000
 8018660:	24003e7c 	.word	0x24003e7c
 8018664:	24000dd4 	.word	0x24000dd4
 8018668:	24000e54 	.word	0x24000e54
 801866c:	24003e74 	.word	0x24003e74
 8018670:	24000e04 	.word	0x24000e04

08018674 <scmp>:
} packed_files[] = {
  {"/web_root/index.html.gz", v1, sizeof(v1), 1729663508},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 8018674:	b480      	push	{r7}
 8018676:	b083      	sub	sp, #12
 8018678:	af00      	add	r7, sp, #0
 801867a:	6078      	str	r0, [r7, #4]
 801867c:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 801867e:	e005      	b.n	801868c <scmp+0x18>
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	3301      	adds	r3, #1
 8018684:	607b      	str	r3, [r7, #4]
 8018686:	683b      	ldr	r3, [r7, #0]
 8018688:	3301      	adds	r3, #1
 801868a:	603b      	str	r3, [r7, #0]
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	781b      	ldrb	r3, [r3, #0]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d005      	beq.n	80186a0 <scmp+0x2c>
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	781a      	ldrb	r2, [r3, #0]
 8018698:	683b      	ldr	r3, [r7, #0]
 801869a:	781b      	ldrb	r3, [r3, #0]
 801869c:	429a      	cmp	r2, r3
 801869e:	d0ef      	beq.n	8018680 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	781b      	ldrb	r3, [r3, #0]
 80186a4:	461a      	mov	r2, r3
 80186a6:	683b      	ldr	r3, [r7, #0]
 80186a8:	781b      	ldrb	r3, [r3, #0]
 80186aa:	1ad3      	subs	r3, r2, r3
}
 80186ac:	4618      	mov	r0, r3
 80186ae:	370c      	adds	r7, #12
 80186b0:	46bd      	mov	sp, r7
 80186b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b6:	4770      	bx	lr

080186b8 <mg_unlist>:
const char *mg_unlist(size_t no) {
 80186b8:	b480      	push	{r7}
 80186ba:	b083      	sub	sp, #12
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 80186c0:	4906      	ldr	r1, [pc, #24]	@ (80186dc <mg_unlist+0x24>)
 80186c2:	687a      	ldr	r2, [r7, #4]
 80186c4:	4613      	mov	r3, r2
 80186c6:	005b      	lsls	r3, r3, #1
 80186c8:	4413      	add	r3, r2
 80186ca:	00db      	lsls	r3, r3, #3
 80186cc:	440b      	add	r3, r1
 80186ce:	681b      	ldr	r3, [r3, #0]
}
 80186d0:	4618      	mov	r0, r3
 80186d2:	370c      	adds	r7, #12
 80186d4:	46bd      	mov	sp, r7
 80186d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186da:	4770      	bx	lr
 80186dc:	08035038 	.word	0x08035038

080186e0 <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b086      	sub	sp, #24
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	60f8      	str	r0, [r7, #12]
 80186e8:	60b9      	str	r1, [r7, #8]
 80186ea:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 80186ec:	4b16      	ldr	r3, [pc, #88]	@ (8018748 <mg_unpack+0x68>)
 80186ee:	617b      	str	r3, [r7, #20]
 80186f0:	e020      	b.n	8018734 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 80186f2:	697b      	ldr	r3, [r7, #20]
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	68f9      	ldr	r1, [r7, #12]
 80186f8:	4618      	mov	r0, r3
 80186fa:	f7ff ffbb 	bl	8018674 <scmp>
 80186fe:	4603      	mov	r3, r0
 8018700:	2b00      	cmp	r3, #0
 8018702:	d113      	bne.n	801872c <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d004      	beq.n	8018714 <mg_unpack+0x34>
 801870a:	697b      	ldr	r3, [r7, #20]
 801870c:	689b      	ldr	r3, [r3, #8]
 801870e:	1e5a      	subs	r2, r3, #1
 8018710:	68bb      	ldr	r3, [r7, #8]
 8018712:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d005      	beq.n	8018726 <mg_unpack+0x46>
 801871a:	697b      	ldr	r3, [r7, #20]
 801871c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018720:	6879      	ldr	r1, [r7, #4]
 8018722:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 8018726:	697b      	ldr	r3, [r7, #20]
 8018728:	685b      	ldr	r3, [r3, #4]
 801872a:	e008      	b.n	801873e <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 801872c:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 801872e:	697b      	ldr	r3, [r7, #20]
 8018730:	3318      	adds	r3, #24
 8018732:	617b      	str	r3, [r7, #20]
 8018734:	697b      	ldr	r3, [r7, #20]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d1da      	bne.n	80186f2 <mg_unpack+0x12>
  }
  return NULL;
 801873c:	2300      	movs	r3, #0
}
 801873e:	4618      	mov	r0, r3
 8018740:	3718      	adds	r7, #24
 8018742:	46bd      	mov	sp, r7
 8018744:	bd80      	pop	{r7, pc}
 8018746:	bf00      	nop
 8018748:	08035038 	.word	0x08035038

0801874c <timer_fn_1>:
//	    }
//	  }
//}
// Add this line in mongoose_glue.h
extern float scaledValue;
static void timer_fn_1(void *arg) {
 801874c:	b580      	push	{r7, lr}
 801874e:	b09a      	sub	sp, #104	@ 0x68
 8018750:	af02      	add	r7, sp, #8
 8018752:	60f8      	str	r0, [r7, #12]
	static int increment =0;
	 if (g_mqtt_conn != NULL) {
 8018754:	4b25      	ldr	r3, [pc, #148]	@ (80187ec <timer_fn_1+0xa0>)
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d043      	beq.n	80187e4 <timer_fn_1+0x98>
	    struct mg_mqtt_opts opts;
	    char msg[16];
	   snprintf(msg, sizeof(msg), "%.2f", scaledValue);
 801875c:	4b24      	ldr	r3, [pc, #144]	@ (80187f0 <timer_fn_1+0xa4>)
 801875e:	edd3 7a00 	vldr	s15, [r3]
 8018762:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018766:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801876a:	ed8d 7b00 	vstr	d7, [sp]
 801876e:	4a21      	ldr	r2, [pc, #132]	@ (80187f4 <timer_fn_1+0xa8>)
 8018770:	2110      	movs	r1, #16
 8018772:	4618      	mov	r0, r3
 8018774:	f009 f9e0 	bl	8021b38 <sniprintf>
	    memset(&opts, 0, sizeof(opts));
 8018778:	f107 0310 	add.w	r3, r7, #16
 801877c:	2240      	movs	r2, #64	@ 0x40
 801877e:	2100      	movs	r1, #0
 8018780:	4618      	mov	r0, r3
 8018782:	f009 fb2f 	bl	8021de4 <memset>
	    opts.topic = mg_str("companysix/d1/topic1|mils");
 8018786:	463b      	mov	r3, r7
 8018788:	491b      	ldr	r1, [pc, #108]	@ (80187f8 <timer_fn_1+0xac>)
 801878a:	4618      	mov	r0, r3
 801878c:	f7f6 fa98 	bl	800ecc0 <mg_str_s>
 8018790:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018794:	463a      	mov	r2, r7
 8018796:	e892 0003 	ldmia.w	r2, {r0, r1}
 801879a:	e883 0003 	stmia.w	r3, {r0, r1}
	    opts.message = mg_str(msg);
 801879e:	463b      	mov	r3, r7
 80187a0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80187a4:	4611      	mov	r1, r2
 80187a6:	4618      	mov	r0, r3
 80187a8:	f7f6 fa8a 	bl	800ecc0 <mg_str_s>
 80187ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80187b0:	463a      	mov	r2, r7
 80187b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187b6:	e883 0003 	stmia.w	r3, {r0, r1}
	    mg_mqtt_pub(g_mqtt_conn, &opts);
 80187ba:	4b0c      	ldr	r3, [pc, #48]	@ (80187ec <timer_fn_1+0xa0>)
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	f107 0210 	add.w	r2, r7, #16
 80187c2:	4611      	mov	r1, r2
 80187c4:	4618      	mov	r0, r3
 80187c6:	f7f0 f943 	bl	8008a50 <mg_mqtt_pub>
	    if(increment >101){
 80187ca:	4b0c      	ldr	r3, [pc, #48]	@ (80187fc <timer_fn_1+0xb0>)
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	2b65      	cmp	r3, #101	@ 0x65
 80187d0:	dd03      	ble.n	80187da <timer_fn_1+0x8e>
	    	increment =0;
 80187d2:	4b0a      	ldr	r3, [pc, #40]	@ (80187fc <timer_fn_1+0xb0>)
 80187d4:	2200      	movs	r2, #0
 80187d6:	601a      	str	r2, [r3, #0]
	    }
	    else{
	    	increment++;
	    }
}
}
 80187d8:	e004      	b.n	80187e4 <timer_fn_1+0x98>
	    	increment++;
 80187da:	4b08      	ldr	r3, [pc, #32]	@ (80187fc <timer_fn_1+0xb0>)
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	3301      	adds	r3, #1
 80187e0:	4a06      	ldr	r2, [pc, #24]	@ (80187fc <timer_fn_1+0xb0>)
 80187e2:	6013      	str	r3, [r2, #0]
}
 80187e4:	bf00      	nop
 80187e6:	3760      	adds	r7, #96	@ 0x60
 80187e8:	46bd      	mov	sp, r7
 80187ea:	bd80      	pop	{r7, pc}
 80187ec:	24003f7c 	.word	0x24003f7c
 80187f0:	24000d78 	.word	0x24000d78
 80187f4:	080280a8 	.word	0x080280a8
 80187f8:	080280b0 	.word	0x080280b0
 80187fc:	24003f18 	.word	0x24003f18

08018800 <glue_init_1>:
void glue_init_1(void) {
 8018800:	b580      	push	{r7, lr}
 8018802:	b084      	sub	sp, #16
 8018804:	af04      	add	r7, sp, #16
	  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, timer_fn_1, NULL);
 8018806:	2300      	movs	r3, #0
 8018808:	9302      	str	r3, [sp, #8]
 801880a:	4b0d      	ldr	r3, [pc, #52]	@ (8018840 <glue_init_1+0x40>)
 801880c:	9301      	str	r3, [sp, #4]
 801880e:	2301      	movs	r3, #1
 8018810:	9300      	str	r3, [sp, #0]
 8018812:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018816:	f04f 0300 	mov.w	r3, #0
 801881a:	480a      	ldr	r0, [pc, #40]	@ (8018844 <glue_init_1+0x44>)
 801881c:	f7f1 f95c 	bl	8009ad8 <mg_timer_add>
  MG_DEBUG(("Custom init done"));
 8018820:	4b09      	ldr	r3, [pc, #36]	@ (8018848 <glue_init_1+0x48>)
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	2b02      	cmp	r3, #2
 8018826:	dd08      	ble.n	801883a <glue_init_1+0x3a>
 8018828:	4b08      	ldr	r3, [pc, #32]	@ (801884c <glue_init_1+0x4c>)
 801882a:	2276      	movs	r2, #118	@ 0x76
 801882c:	4908      	ldr	r1, [pc, #32]	@ (8018850 <glue_init_1+0x50>)
 801882e:	2003      	movs	r0, #3
 8018830:	f7ef fb7e 	bl	8007f30 <mg_log_prefix>
 8018834:	4807      	ldr	r0, [pc, #28]	@ (8018854 <glue_init_1+0x54>)
 8018836:	f7ef fbcb 	bl	8007fd0 <mg_log>
}//2
 801883a:	bf00      	nop
 801883c:	46bd      	mov	sp, r7
 801883e:	bd80      	pop	{r7, pc}
 8018840:	0801874d 	.word	0x0801874d
 8018844:	24003f1c 	.word	0x24003f1c
 8018848:	24000240 	.word	0x24000240
 801884c:	08035068 	.word	0x08035068
 8018850:	080280cc 	.word	0x080280cc
 8018854:	080280e8 	.word	0x080280e8

08018858 <timer_fn_2>:
static void timer_fn_2(void *arg) {
 8018858:	b580      	push	{r7, lr}
 801885a:	b098      	sub	sp, #96	@ 0x60
 801885c:	af00      	add	r7, sp, #0
 801885e:	60f8      	str	r0, [r7, #12]
	static int decrement =100;
	 if (g_mqtt_conn != NULL) {
 8018860:	4b22      	ldr	r3, [pc, #136]	@ (80188ec <timer_fn_2+0x94>)
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d03d      	beq.n	80188e4 <timer_fn_2+0x8c>
	    struct mg_mqtt_opts opts;
	    char msg[16];
	   snprintf(msg, sizeof(msg), "%d", decrement);
 8018868:	4b21      	ldr	r3, [pc, #132]	@ (80188f0 <timer_fn_2+0x98>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8018870:	4a20      	ldr	r2, [pc, #128]	@ (80188f4 <timer_fn_2+0x9c>)
 8018872:	2110      	movs	r1, #16
 8018874:	f009 f960 	bl	8021b38 <sniprintf>
	    memset(&opts, 0, sizeof(opts));
 8018878:	f107 0310 	add.w	r3, r7, #16
 801887c:	2240      	movs	r2, #64	@ 0x40
 801887e:	2100      	movs	r1, #0
 8018880:	4618      	mov	r0, r3
 8018882:	f009 faaf 	bl	8021de4 <memset>
	    opts.topic = mg_str("nodered/d2/s2");
 8018886:	463b      	mov	r3, r7
 8018888:	491b      	ldr	r1, [pc, #108]	@ (80188f8 <timer_fn_2+0xa0>)
 801888a:	4618      	mov	r0, r3
 801888c:	f7f6 fa18 	bl	800ecc0 <mg_str_s>
 8018890:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018894:	463a      	mov	r2, r7
 8018896:	e892 0003 	ldmia.w	r2, {r0, r1}
 801889a:	e883 0003 	stmia.w	r3, {r0, r1}
	    opts.message = mg_str(msg);
 801889e:	463b      	mov	r3, r7
 80188a0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80188a4:	4611      	mov	r1, r2
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7f6 fa0a 	bl	800ecc0 <mg_str_s>
 80188ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80188b0:	463a      	mov	r2, r7
 80188b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80188b6:	e883 0003 	stmia.w	r3, {r0, r1}
	    mg_mqtt_pub(g_mqtt_conn, &opts);
 80188ba:	4b0c      	ldr	r3, [pc, #48]	@ (80188ec <timer_fn_2+0x94>)
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	f107 0210 	add.w	r2, r7, #16
 80188c2:	4611      	mov	r1, r2
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7f0 f8c3 	bl	8008a50 <mg_mqtt_pub>
	    if(decrement <0){
 80188ca:	4b09      	ldr	r3, [pc, #36]	@ (80188f0 <timer_fn_2+0x98>)
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	da03      	bge.n	80188da <timer_fn_2+0x82>
	    	decrement =100;
 80188d2:	4b07      	ldr	r3, [pc, #28]	@ (80188f0 <timer_fn_2+0x98>)
 80188d4:	2264      	movs	r2, #100	@ 0x64
 80188d6:	601a      	str	r2, [r3, #0]
	    }
	    else{
	    	decrement--;
	    }
}
}
 80188d8:	e004      	b.n	80188e4 <timer_fn_2+0x8c>
	    	decrement--;
 80188da:	4b05      	ldr	r3, [pc, #20]	@ (80188f0 <timer_fn_2+0x98>)
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	3b01      	subs	r3, #1
 80188e0:	4a03      	ldr	r2, [pc, #12]	@ (80188f0 <timer_fn_2+0x98>)
 80188e2:	6013      	str	r3, [r2, #0]
}
 80188e4:	bf00      	nop
 80188e6:	3760      	adds	r7, #96	@ 0x60
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}
 80188ec:	24003f7c 	.word	0x24003f7c
 80188f0:	24000348 	.word	0x24000348
 80188f4:	080280fc 	.word	0x080280fc
 80188f8:	08028100 	.word	0x08028100

080188fc <glue_init_2>:
void glue_init_2(void) {
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b084      	sub	sp, #16
 8018900:	af04      	add	r7, sp, #16
	  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, timer_fn_2, NULL);
 8018902:	2300      	movs	r3, #0
 8018904:	9302      	str	r3, [sp, #8]
 8018906:	4b0d      	ldr	r3, [pc, #52]	@ (801893c <glue_init_2+0x40>)
 8018908:	9301      	str	r3, [sp, #4]
 801890a:	2301      	movs	r3, #1
 801890c:	9300      	str	r3, [sp, #0]
 801890e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018912:	f04f 0300 	mov.w	r3, #0
 8018916:	480a      	ldr	r0, [pc, #40]	@ (8018940 <glue_init_2+0x44>)
 8018918:	f7f1 f8de 	bl	8009ad8 <mg_timer_add>
  MG_DEBUG(("Custom init done"));
 801891c:	4b09      	ldr	r3, [pc, #36]	@ (8018944 <glue_init_2+0x48>)
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	2b02      	cmp	r3, #2
 8018922:	dd08      	ble.n	8018936 <glue_init_2+0x3a>
 8018924:	4b08      	ldr	r3, [pc, #32]	@ (8018948 <glue_init_2+0x4c>)
 8018926:	228c      	movs	r2, #140	@ 0x8c
 8018928:	4908      	ldr	r1, [pc, #32]	@ (801894c <glue_init_2+0x50>)
 801892a:	2003      	movs	r0, #3
 801892c:	f7ef fb00 	bl	8007f30 <mg_log_prefix>
 8018930:	4807      	ldr	r0, [pc, #28]	@ (8018950 <glue_init_2+0x54>)
 8018932:	f7ef fb4d 	bl	8007fd0 <mg_log>
}
 8018936:	bf00      	nop
 8018938:	46bd      	mov	sp, r7
 801893a:	bd80      	pop	{r7, pc}
 801893c:	08018859 	.word	0x08018859
 8018940:	24003f1c 	.word	0x24003f1c
 8018944:	24000240 	.word	0x24000240
 8018948:	08035074 	.word	0x08035074
 801894c:	080280cc 	.word	0x080280cc
 8018950:	080280e8 	.word	0x080280e8

08018954 <timer_fn_3>:
static void timer_fn_3(void *arg) {
 8018954:	b580      	push	{r7, lr}
 8018956:	b09a      	sub	sp, #104	@ 0x68
 8018958:	af00      	add	r7, sp, #0
 801895a:	60f8      	str	r0, [r7, #12]
	 int random_value = rand() % 101;
 801895c:	f008 f898 	bl	8020a90 <rand>
 8018960:	4603      	mov	r3, r0
 8018962:	4a21      	ldr	r2, [pc, #132]	@ (80189e8 <timer_fn_3+0x94>)
 8018964:	fb82 1203 	smull	r1, r2, r2, r3
 8018968:	1111      	asrs	r1, r2, #4
 801896a:	17da      	asrs	r2, r3, #31
 801896c:	1a8a      	subs	r2, r1, r2
 801896e:	2165      	movs	r1, #101	@ 0x65
 8018970:	fb01 f202 	mul.w	r2, r1, r2
 8018974:	1a9b      	subs	r3, r3, r2
 8018976:	667b      	str	r3, [r7, #100]	@ 0x64
	 if (g_mqtt_conn != NULL) {
 8018978:	4b1c      	ldr	r3, [pc, #112]	@ (80189ec <timer_fn_3+0x98>)
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d02f      	beq.n	80189e0 <timer_fn_3+0x8c>
	    struct mg_mqtt_opts opts;
	    char msg[16];
	   snprintf(msg, sizeof(msg), "%d", random_value);
 8018980:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8018984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018986:	4a1a      	ldr	r2, [pc, #104]	@ (80189f0 <timer_fn_3+0x9c>)
 8018988:	2110      	movs	r1, #16
 801898a:	f009 f8d5 	bl	8021b38 <sniprintf>
	    memset(&opts, 0, sizeof(opts));
 801898e:	f107 0314 	add.w	r3, r7, #20
 8018992:	2240      	movs	r2, #64	@ 0x40
 8018994:	2100      	movs	r1, #0
 8018996:	4618      	mov	r0, r3
 8018998:	f009 fa24 	bl	8021de4 <memset>
	    opts.topic = mg_str("nodered/d2/s3");
 801899c:	463b      	mov	r3, r7
 801899e:	4915      	ldr	r1, [pc, #84]	@ (80189f4 <timer_fn_3+0xa0>)
 80189a0:	4618      	mov	r0, r3
 80189a2:	f7f6 f98d 	bl	800ecc0 <mg_str_s>
 80189a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80189aa:	463a      	mov	r2, r7
 80189ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189b0:	e883 0003 	stmia.w	r3, {r0, r1}
	    opts.message = mg_str(msg);
 80189b4:	463b      	mov	r3, r7
 80189b6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80189ba:	4611      	mov	r1, r2
 80189bc:	4618      	mov	r0, r3
 80189be:	f7f6 f97f 	bl	800ecc0 <mg_str_s>
 80189c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80189c6:	463a      	mov	r2, r7
 80189c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189cc:	e883 0003 	stmia.w	r3, {r0, r1}
	    mg_mqtt_pub(g_mqtt_conn, &opts);
 80189d0:	4b06      	ldr	r3, [pc, #24]	@ (80189ec <timer_fn_3+0x98>)
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	f107 0214 	add.w	r2, r7, #20
 80189d8:	4611      	mov	r1, r2
 80189da:	4618      	mov	r0, r3
 80189dc:	f7f0 f838 	bl	8008a50 <mg_mqtt_pub>
}
}
 80189e0:	bf00      	nop
 80189e2:	3768      	adds	r7, #104	@ 0x68
 80189e4:	46bd      	mov	sp, r7
 80189e6:	bd80      	pop	{r7, pc}
 80189e8:	288df0cb 	.word	0x288df0cb
 80189ec:	24003f7c 	.word	0x24003f7c
 80189f0:	080280fc 	.word	0x080280fc
 80189f4:	08028110 	.word	0x08028110

080189f8 <glue_init_3>:
void glue_init_3(void) {
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b084      	sub	sp, #16
 80189fc:	af04      	add	r7, sp, #16
	  mg_timer_add(&g_mgr, 5000, MG_TIMER_REPEAT, timer_fn_3, NULL);
 80189fe:	2300      	movs	r3, #0
 8018a00:	9302      	str	r3, [sp, #8]
 8018a02:	4b0d      	ldr	r3, [pc, #52]	@ (8018a38 <glue_init_3+0x40>)
 8018a04:	9301      	str	r3, [sp, #4]
 8018a06:	2301      	movs	r3, #1
 8018a08:	9300      	str	r3, [sp, #0]
 8018a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8018a0e:	f04f 0300 	mov.w	r3, #0
 8018a12:	480a      	ldr	r0, [pc, #40]	@ (8018a3c <glue_init_3+0x44>)
 8018a14:	f7f1 f860 	bl	8009ad8 <mg_timer_add>
  MG_DEBUG(("Custom init done"));
 8018a18:	4b09      	ldr	r3, [pc, #36]	@ (8018a40 <glue_init_3+0x48>)
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	2b02      	cmp	r3, #2
 8018a1e:	dd08      	ble.n	8018a32 <glue_init_3+0x3a>
 8018a20:	4b08      	ldr	r3, [pc, #32]	@ (8018a44 <glue_init_3+0x4c>)
 8018a22:	229c      	movs	r2, #156	@ 0x9c
 8018a24:	4908      	ldr	r1, [pc, #32]	@ (8018a48 <glue_init_3+0x50>)
 8018a26:	2003      	movs	r0, #3
 8018a28:	f7ef fa82 	bl	8007f30 <mg_log_prefix>
 8018a2c:	4807      	ldr	r0, [pc, #28]	@ (8018a4c <glue_init_3+0x54>)
 8018a2e:	f7ef facf 	bl	8007fd0 <mg_log>
}
 8018a32:	bf00      	nop
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bd80      	pop	{r7, pc}
 8018a38:	08018955 	.word	0x08018955
 8018a3c:	24003f1c 	.word	0x24003f1c
 8018a40:	24000240 	.word	0x24000240
 8018a44:	08035080 	.word	0x08035080
 8018a48:	080280cc 	.word	0x080280cc
 8018a4c:	080280e8 	.word	0x080280e8

08018a50 <glue_lock>:
//}

void glue_lock_init(void) {  // callback to initialize the MQTT semaphore
}

void glue_lock(void) {  // Lock mutex. Implement only if you use MQTT publish
 8018a50:	b480      	push	{r7}
 8018a52:	af00      	add	r7, sp, #0
}
 8018a54:	bf00      	nop
 8018a56:	46bd      	mov	sp, r7
 8018a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a5c:	4770      	bx	lr

08018a5e <glue_unlock>:

void glue_unlock(void) {  // Unlock mutex. Implement only if you use MQTT publish
 8018a5e:	b480      	push	{r7}
 8018a60:	af00      	add	r7, sp, #0
}
 8018a62:	bf00      	nop
 8018a64:	46bd      	mov	sp, r7
 8018a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6a:	4770      	bx	lr

08018a6c <glue_mqtt_tls_init>:

void glue_mqtt_tls_init(struct mg_connection *c) {
 8018a6c:	b580      	push	{r7, lr}
 8018a6e:	b08c      	sub	sp, #48	@ 0x30
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	6078      	str	r0, [r7, #4]
  bool is_tls = mg_url_is_ssl(WIZARD_MQTT_URL);
 8018a74:	481a      	ldr	r0, [pc, #104]	@ (8018ae0 <glue_mqtt_tls_init+0x74>)
 8018a76:	f7fe fe05 	bl	8017684 <mg_url_is_ssl>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	bf14      	ite	ne
 8018a80:	2301      	movne	r3, #1
 8018a82:	2300      	moveq	r3, #0
 8018a84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  MG_DEBUG(("%lu TLS enabled: %s", c->id, is_tls ? "yes" : "no"));
 8018a88:	4b16      	ldr	r3, [pc, #88]	@ (8018ae4 <glue_mqtt_tls_init+0x78>)
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	2b02      	cmp	r3, #2
 8018a8e:	dd12      	ble.n	8018ab6 <glue_mqtt_tls_init+0x4a>
 8018a90:	4b15      	ldr	r3, [pc, #84]	@ (8018ae8 <glue_mqtt_tls_init+0x7c>)
 8018a92:	22af      	movs	r2, #175	@ 0xaf
 8018a94:	4915      	ldr	r1, [pc, #84]	@ (8018aec <glue_mqtt_tls_init+0x80>)
 8018a96:	2003      	movs	r0, #3
 8018a98:	f7ef fa4a 	bl	8007f30 <mg_log_prefix>
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8018aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d001      	beq.n	8018aac <glue_mqtt_tls_init+0x40>
 8018aa8:	4b11      	ldr	r3, [pc, #68]	@ (8018af0 <glue_mqtt_tls_init+0x84>)
 8018aaa:	e000      	b.n	8018aae <glue_mqtt_tls_init+0x42>
 8018aac:	4b11      	ldr	r3, [pc, #68]	@ (8018af4 <glue_mqtt_tls_init+0x88>)
 8018aae:	461a      	mov	r2, r3
 8018ab0:	4811      	ldr	r0, [pc, #68]	@ (8018af8 <glue_mqtt_tls_init+0x8c>)
 8018ab2:	f7ef fa8d 	bl	8007fd0 <mg_log>
  if (is_tls) {
 8018ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d00c      	beq.n	8018ad8 <glue_mqtt_tls_init+0x6c>
    struct mg_tls_opts opts;
    memset(&opts, 0, sizeof(opts));
 8018abe:	f107 0308 	add.w	r3, r7, #8
 8018ac2:	2224      	movs	r2, #36	@ 0x24
 8018ac4:	2100      	movs	r1, #0
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f009 f98c 	bl	8021de4 <memset>
    // opts.ca = mg_str(ca_certificate);
    mg_tls_init(c, &opts);
 8018acc:	f107 0308 	add.w	r3, r7, #8
 8018ad0:	4619      	mov	r1, r3
 8018ad2:	6878      	ldr	r0, [r7, #4]
 8018ad4:	f7f9 faee 	bl	80120b4 <mg_tls_init>
  }
}
 8018ad8:	bf00      	nop
 8018ada:	3730      	adds	r7, #48	@ 0x30
 8018adc:	46bd      	mov	sp, r7
 8018ade:	bd80      	pop	{r7, pc}
 8018ae0:	08028120 	.word	0x08028120
 8018ae4:	24000240 	.word	0x24000240
 8018ae8:	0803508c 	.word	0x0803508c
 8018aec:	080280cc 	.word	0x080280cc
 8018af0:	08028134 	.word	0x08028134
 8018af4:	08028138 	.word	0x08028138
 8018af8:	0802813c 	.word	0x0802813c

08018afc <glue_mqtt_on_connect>:

// Called when we connected to the MQTT server
void glue_mqtt_on_connect(struct mg_connection *c, int code) {
 8018afc:	b580      	push	{r7, lr}
 8018afe:	b096      	sub	sp, #88	@ 0x58
 8018b00:	af02      	add	r7, sp, #8
 8018b02:	60f8      	str	r0, [r7, #12]
 8018b04:	60b9      	str	r1, [r7, #8]
  struct mg_mqtt_opts opts;
  memset(&opts, 0, sizeof(opts));
 8018b06:	f107 0310 	add.w	r3, r7, #16
 8018b0a:	2240      	movs	r2, #64	@ 0x40
 8018b0c:	2100      	movs	r1, #0
 8018b0e:	4618      	mov	r0, r3
 8018b10:	f009 f968 	bl	8021de4 <memset>
  opts.user=mg_str("Sarayu");
 8018b14:	463b      	mov	r3, r7
 8018b16:	4922      	ldr	r1, [pc, #136]	@ (8018ba0 <glue_mqtt_on_connect+0xa4>)
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7f6 f8d1 	bl	800ecc0 <mg_str_s>
 8018b1e:	f107 0310 	add.w	r3, r7, #16
 8018b22:	463a      	mov	r2, r7
 8018b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b28:	e883 0003 	stmia.w	r3, {r0, r1}
  opts.pass=mg_str("IOTteam@123");
 8018b2c:	463b      	mov	r3, r7
 8018b2e:	491d      	ldr	r1, [pc, #116]	@ (8018ba4 <glue_mqtt_on_connect+0xa8>)
 8018b30:	4618      	mov	r0, r3
 8018b32:	f7f6 f8c5 	bl	800ecc0 <mg_str_s>
 8018b36:	f107 0318 	add.w	r3, r7, #24
 8018b3a:	463a      	mov	r2, r7
 8018b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b40:	e883 0003 	stmia.w	r3, {r0, r1}
  opts.qos = 1;
 8018b44:	2301      	movs	r3, #1
 8018b46:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  opts.topic = mg_str("device1/rx");
 8018b4a:	463b      	mov	r3, r7
 8018b4c:	4916      	ldr	r1, [pc, #88]	@ (8018ba8 <glue_mqtt_on_connect+0xac>)
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f7f6 f8b6 	bl	800ecc0 <mg_str_s>
 8018b54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018b58:	463a      	mov	r2, r7
 8018b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b5e:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_mqtt_sub(c, &opts);
 8018b62:	f107 0310 	add.w	r3, r7, #16
 8018b66:	4619      	mov	r1, r3
 8018b68:	68f8      	ldr	r0, [r7, #12]
 8018b6a:	f7f0 f83f 	bl	8008bec <mg_mqtt_sub>
  MG_DEBUG(("%lu code %d. Subscribing to [%.*s]", c->id, code, opts.topic.len,
 8018b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8018bac <glue_mqtt_on_connect+0xb0>)
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	2b02      	cmp	r3, #2
 8018b74:	dd0f      	ble.n	8018b96 <glue_mqtt_on_connect+0x9a>
 8018b76:	4b0e      	ldr	r3, [pc, #56]	@ (8018bb0 <glue_mqtt_on_connect+0xb4>)
 8018b78:	22c1      	movs	r2, #193	@ 0xc1
 8018b7a:	490e      	ldr	r1, [pc, #56]	@ (8018bb4 <glue_mqtt_on_connect+0xb8>)
 8018b7c:	2003      	movs	r0, #3
 8018b7e:	f7ef f9d7 	bl	8007f30 <mg_log_prefix>
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8018b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b8a:	9300      	str	r3, [sp, #0]
 8018b8c:	4613      	mov	r3, r2
 8018b8e:	68ba      	ldr	r2, [r7, #8]
 8018b90:	4809      	ldr	r0, [pc, #36]	@ (8018bb8 <glue_mqtt_on_connect+0xbc>)
 8018b92:	f7ef fa1d 	bl	8007fd0 <mg_log>
            opts.topic.buf));
}
 8018b96:	bf00      	nop
 8018b98:	3750      	adds	r7, #80	@ 0x50
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	bd80      	pop	{r7, pc}
 8018b9e:	bf00      	nop
 8018ba0:	08028150 	.word	0x08028150
 8018ba4:	08028158 	.word	0x08028158
 8018ba8:	08028164 	.word	0x08028164
 8018bac:	24000240 	.word	0x24000240
 8018bb0:	080350a0 	.word	0x080350a0
 8018bb4:	080280cc 	.word	0x080280cc
 8018bb8:	08028170 	.word	0x08028170

08018bbc <glue_mqtt_on_message>:

// This function gets called for every received MQTT message
void glue_mqtt_on_message(struct mg_connection *c, struct mg_str topic,
                          struct mg_str data) {
 8018bbc:	b082      	sub	sp, #8
 8018bbe:	b590      	push	{r4, r7, lr}
 8018bc0:	b0b5      	sub	sp, #212	@ 0xd4
 8018bc2:	af04      	add	r7, sp, #16
 8018bc4:	6178      	str	r0, [r7, #20]
 8018bc6:	f107 000c 	add.w	r0, r7, #12
 8018bca:	e880 0006 	stmia.w	r0, {r1, r2}
 8018bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  char tmp[100];
  struct mg_mqtt_opts opts;

  mg_snprintf(tmp, sizeof(tmp), "Got [%.*s] -> [%.*s] !", topic.len, topic.buf,
 8018bd2:	693c      	ldr	r4, [r7, #16]
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8018bda:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8018bde:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8018be2:	9102      	str	r1, [sp, #8]
 8018be4:	9201      	str	r2, [sp, #4]
 8018be6:	9300      	str	r3, [sp, #0]
 8018be8:	4623      	mov	r3, r4
 8018bea:	4a25      	ldr	r2, [pc, #148]	@ (8018c80 <glue_mqtt_on_message+0xc4>)
 8018bec:	2164      	movs	r1, #100	@ 0x64
 8018bee:	f7f4 fd55 	bl	800d69c <mg_snprintf>
              data.len, data.buf);
  MG_DEBUG(("%lu %s", c->id, tmp));
 8018bf2:	4b24      	ldr	r3, [pc, #144]	@ (8018c84 <glue_mqtt_on_message+0xc8>)
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	2b02      	cmp	r3, #2
 8018bf8:	dd0d      	ble.n	8018c16 <glue_mqtt_on_message+0x5a>
 8018bfa:	4b23      	ldr	r3, [pc, #140]	@ (8018c88 <glue_mqtt_on_message+0xcc>)
 8018bfc:	22cd      	movs	r2, #205	@ 0xcd
 8018bfe:	4923      	ldr	r1, [pc, #140]	@ (8018c8c <glue_mqtt_on_message+0xd0>)
 8018c00:	2003      	movs	r0, #3
 8018c02:	f7ef f995 	bl	8007f30 <mg_log_prefix>
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018c0a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8018c0e:	4619      	mov	r1, r3
 8018c10:	481f      	ldr	r0, [pc, #124]	@ (8018c90 <glue_mqtt_on_message+0xd4>)
 8018c12:	f7ef f9dd 	bl	8007fd0 <mg_log>

  // Send response to the TX topic
  if (g_mqtt_conn != NULL) {
 8018c16:	4b1f      	ldr	r3, [pc, #124]	@ (8018c94 <glue_mqtt_on_message+0xd8>)
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d028      	beq.n	8018c70 <glue_mqtt_on_message+0xb4>
    memset(&opts, 0, sizeof(opts));
 8018c1e:	f107 031c 	add.w	r3, r7, #28
 8018c22:	2240      	movs	r2, #64	@ 0x40
 8018c24:	2100      	movs	r1, #0
 8018c26:	4618      	mov	r0, r3
 8018c28:	f009 f8dc 	bl	8021de4 <memset>
    opts.topic = mg_str("device1/tx");
 8018c2c:	463b      	mov	r3, r7
 8018c2e:	491a      	ldr	r1, [pc, #104]	@ (8018c98 <glue_mqtt_on_message+0xdc>)
 8018c30:	4618      	mov	r0, r3
 8018c32:	f7f6 f845 	bl	800ecc0 <mg_str_s>
 8018c36:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018c3a:	463a      	mov	r2, r7
 8018c3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c40:	e883 0003 	stmia.w	r3, {r0, r1}
    opts.message = mg_str(tmp);
 8018c44:	463b      	mov	r3, r7
 8018c46:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8018c4a:	4611      	mov	r1, r2
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	f7f6 f837 	bl	800ecc0 <mg_str_s>
 8018c52:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018c56:	463a      	mov	r2, r7
 8018c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c5c:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_mqtt_pub(g_mqtt_conn, &opts);
 8018c60:	4b0c      	ldr	r3, [pc, #48]	@ (8018c94 <glue_mqtt_on_message+0xd8>)
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	f107 021c 	add.w	r2, r7, #28
 8018c68:	4611      	mov	r1, r2
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	f7ef fef0 	bl	8008a50 <mg_mqtt_pub>
  }
}
 8018c70:	bf00      	nop
 8018c72:	37c4      	adds	r7, #196	@ 0xc4
 8018c74:	46bd      	mov	sp, r7
 8018c76:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8018c7a:	b002      	add	sp, #8
 8018c7c:	4770      	bx	lr
 8018c7e:	bf00      	nop
 8018c80:	08028194 	.word	0x08028194
 8018c84:	24000240 	.word	0x24000240
 8018c88:	080350b8 	.word	0x080350b8
 8018c8c:	080280cc 	.word	0x080280cc
 8018c90:	080281ac 	.word	0x080281ac
 8018c94:	24003f7c 	.word	0x24003f7c
 8018c98:	080281b4 	.word	0x080281b4

08018c9c <glue_mqtt_on_cmd>:

void glue_mqtt_on_cmd(struct mg_connection *c, struct mg_mqtt_message *mm) {
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b082      	sub	sp, #8
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	6078      	str	r0, [r7, #4]
 8018ca4:	6039      	str	r1, [r7, #0]
  MG_DEBUG(("%lu cmd %d qos %d", c->id, mm->cmd, mm->qos));
 8018ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8018cd8 <glue_mqtt_on_cmd+0x3c>)
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	2b02      	cmp	r3, #2
 8018cac:	dd0f      	ble.n	8018cce <glue_mqtt_on_cmd+0x32>
 8018cae:	4b0b      	ldr	r3, [pc, #44]	@ (8018cdc <glue_mqtt_on_cmd+0x40>)
 8018cb0:	22d9      	movs	r2, #217	@ 0xd9
 8018cb2:	490b      	ldr	r1, [pc, #44]	@ (8018ce0 <glue_mqtt_on_cmd+0x44>)
 8018cb4:	2003      	movs	r0, #3
 8018cb6:	f7ef f93b 	bl	8007f30 <mg_log_prefix>
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8018cbe:	683b      	ldr	r3, [r7, #0]
 8018cc0:	7e9b      	ldrb	r3, [r3, #26]
 8018cc2:	461a      	mov	r2, r3
 8018cc4:	683b      	ldr	r3, [r7, #0]
 8018cc6:	7edb      	ldrb	r3, [r3, #27]
 8018cc8:	4806      	ldr	r0, [pc, #24]	@ (8018ce4 <glue_mqtt_on_cmd+0x48>)
 8018cca:	f7ef f981 	bl	8007fd0 <mg_log>
}
 8018cce:	bf00      	nop
 8018cd0:	3708      	adds	r7, #8
 8018cd2:	46bd      	mov	sp, r7
 8018cd4:	bd80      	pop	{r7, pc}
 8018cd6:	bf00      	nop
 8018cd8:	24000240 	.word	0x24000240
 8018cdc:	080350d0 	.word	0x080350d0
 8018ce0:	080280cc 	.word	0x080280cc
 8018ce4:	080281c0 	.word	0x080281c0

08018ce8 <glue_mqtt_connect>:

struct mg_connection *glue_mqtt_connect(struct mg_mgr *mgr,
                                        mg_event_handler_t fn) {
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b098      	sub	sp, #96	@ 0x60
 8018cec:	af02      	add	r7, sp, #8
 8018cee:	60f8      	str	r0, [r7, #12]
 8018cf0:	60b9      	str	r1, [r7, #8]
  const char *url = WIZARD_MQTT_URL;
 8018cf2:	4b19      	ldr	r3, [pc, #100]	@ (8018d58 <glue_mqtt_connect+0x70>)
 8018cf4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_mqtt_opts opts;
  memset(&opts, 0, sizeof(opts));
 8018cf6:	f107 0314 	add.w	r3, r7, #20
 8018cfa:	2240      	movs	r2, #64	@ 0x40
 8018cfc:	2100      	movs	r1, #0
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f009 f870 	bl	8021de4 <memset>
  opts.clean = true;
 8018d04:	2301      	movs	r3, #1
 8018d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  opts.user=mg_str("Sarayu");
 8018d0a:	463b      	mov	r3, r7
 8018d0c:	4913      	ldr	r1, [pc, #76]	@ (8018d5c <glue_mqtt_connect+0x74>)
 8018d0e:	4618      	mov	r0, r3
 8018d10:	f7f5 ffd6 	bl	800ecc0 <mg_str_s>
 8018d14:	f107 0314 	add.w	r3, r7, #20
 8018d18:	463a      	mov	r2, r7
 8018d1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018d1e:	e883 0003 	stmia.w	r3, {r0, r1}
   opts.pass=mg_str("IOTteam@123");
 8018d22:	463b      	mov	r3, r7
 8018d24:	490e      	ldr	r1, [pc, #56]	@ (8018d60 <glue_mqtt_connect+0x78>)
 8018d26:	4618      	mov	r0, r3
 8018d28:	f7f5 ffca 	bl	800ecc0 <mg_str_s>
 8018d2c:	f107 031c 	add.w	r3, r7, #28
 8018d30:	463a      	mov	r2, r7
 8018d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018d36:	e883 0003 	stmia.w	r3, {r0, r1}
  return mg_mqtt_connect(mgr, url, &opts, fn, NULL);
 8018d3a:	f107 0214 	add.w	r2, r7, #20
 8018d3e:	2300      	movs	r3, #0
 8018d40:	9300      	str	r3, [sp, #0]
 8018d42:	68bb      	ldr	r3, [r7, #8]
 8018d44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018d46:	68f8      	ldr	r0, [r7, #12]
 8018d48:	f7f0 fa2a 	bl	80091a0 <mg_mqtt_connect>
 8018d4c:	4603      	mov	r3, r0
}
 8018d4e:	4618      	mov	r0, r3
 8018d50:	3758      	adds	r7, #88	@ 0x58
 8018d52:	46bd      	mov	sp, r7
 8018d54:	bd80      	pop	{r7, pc}
 8018d56:	bf00      	nop
 8018d58:	08028120 	.word	0x08028120
 8018d5c:	08028150 	.word	0x08028150
 8018d60:	08028158 	.word	0x08028158

08018d64 <glue_sntp_on_time>:


void glue_sntp_on_time(uint64_t utc_time_in_milliseconds) {
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b084      	sub	sp, #16
 8018d68:	af02      	add	r7, sp, #8
 8018d6a:	e9c7 0100 	strd	r0, r1, [r7]
  MG_INFO(("UTC time in milliseconds from SNTP: %llu, current time: %llu",
 8018d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8018da0 <glue_sntp_on_time+0x3c>)
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	2b01      	cmp	r3, #1
 8018d74:	dd10      	ble.n	8018d98 <glue_sntp_on_time+0x34>
 8018d76:	4b0b      	ldr	r3, [pc, #44]	@ (8018da4 <glue_sntp_on_time+0x40>)
 8018d78:	22e9      	movs	r2, #233	@ 0xe9
 8018d7a:	490b      	ldr	r1, [pc, #44]	@ (8018da8 <glue_sntp_on_time+0x44>)
 8018d7c:	2002      	movs	r0, #2
 8018d7e:	f7ef f8d7 	bl	8007f30 <mg_log_prefix>
 8018d82:	f7f5 fcd7 	bl	800e734 <mg_now>
 8018d86:	4602      	mov	r2, r0
 8018d88:	460b      	mov	r3, r1
 8018d8a:	e9cd 2300 	strd	r2, r3, [sp]
 8018d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018d92:	4806      	ldr	r0, [pc, #24]	@ (8018dac <glue_sntp_on_time+0x48>)
 8018d94:	f7ef f91c 	bl	8007fd0 <mg_log>
           utc_time_in_milliseconds, mg_now()));
}
 8018d98:	bf00      	nop
 8018d9a:	3708      	adds	r7, #8
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}
 8018da0:	24000240 	.word	0x24000240
 8018da4:	080350e4 	.word	0x080350e4
 8018da8:	080280cc 	.word	0x080280cc
 8018dac:	080281d4 	.word	0x080281d4

08018db0 <glue_modbus_read_reg>:

// Mock a device that has 5 read/write registers at address 1000
static uint16_t s_modbus_regs[] = {11, 22, 33, 44, 55};
static uint16_t s_modbus_base = 1000;  // Base address of our registers

bool glue_modbus_read_reg(uint16_t address, uint16_t *value) {
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b084      	sub	sp, #16
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	4603      	mov	r3, r0
 8018db8:	6039      	str	r1, [r7, #0]
 8018dba:	80fb      	strh	r3, [r7, #6]
  bool success = false;
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8018dc0:	2305      	movs	r3, #5
 8018dc2:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8018dc4:	4b19      	ldr	r3, [pc, #100]	@ (8018e2c <glue_modbus_read_reg+0x7c>)
 8018dc6:	881b      	ldrh	r3, [r3, #0]
 8018dc8:	88fa      	ldrh	r2, [r7, #6]
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	d312      	bcc.n	8018df4 <glue_modbus_read_reg+0x44>
 8018dce:	88fa      	ldrh	r2, [r7, #6]
 8018dd0:	4b16      	ldr	r3, [pc, #88]	@ (8018e2c <glue_modbus_read_reg+0x7c>)
 8018dd2:	881b      	ldrh	r3, [r3, #0]
 8018dd4:	4619      	mov	r1, r3
 8018dd6:	68bb      	ldr	r3, [r7, #8]
 8018dd8:	440b      	add	r3, r1
 8018dda:	429a      	cmp	r2, r3
 8018ddc:	d20a      	bcs.n	8018df4 <glue_modbus_read_reg+0x44>
    *value = s_modbus_regs[address - s_modbus_base];
 8018dde:	88fb      	ldrh	r3, [r7, #6]
 8018de0:	4a12      	ldr	r2, [pc, #72]	@ (8018e2c <glue_modbus_read_reg+0x7c>)
 8018de2:	8812      	ldrh	r2, [r2, #0]
 8018de4:	1a9b      	subs	r3, r3, r2
 8018de6:	4a12      	ldr	r2, [pc, #72]	@ (8018e30 <glue_modbus_read_reg+0x80>)
 8018de8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8018dec:	683b      	ldr	r3, [r7, #0]
 8018dee:	801a      	strh	r2, [r3, #0]
    success = true;
 8018df0:	2301      	movs	r3, #1
 8018df2:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "OK" : "FAIL", address, *value));
 8018df4:	4b0f      	ldr	r3, [pc, #60]	@ (8018e34 <glue_modbus_read_reg+0x84>)
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	2b01      	cmp	r3, #1
 8018dfa:	dd11      	ble.n	8018e20 <glue_modbus_read_reg+0x70>
 8018dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8018e38 <glue_modbus_read_reg+0x88>)
 8018dfe:	22f9      	movs	r2, #249	@ 0xf9
 8018e00:	490e      	ldr	r1, [pc, #56]	@ (8018e3c <glue_modbus_read_reg+0x8c>)
 8018e02:	2002      	movs	r0, #2
 8018e04:	f7ef f894 	bl	8007f30 <mg_log_prefix>
 8018e08:	7bfb      	ldrb	r3, [r7, #15]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d001      	beq.n	8018e12 <glue_modbus_read_reg+0x62>
 8018e0e:	490c      	ldr	r1, [pc, #48]	@ (8018e40 <glue_modbus_read_reg+0x90>)
 8018e10:	e000      	b.n	8018e14 <glue_modbus_read_reg+0x64>
 8018e12:	490c      	ldr	r1, [pc, #48]	@ (8018e44 <glue_modbus_read_reg+0x94>)
 8018e14:	88fa      	ldrh	r2, [r7, #6]
 8018e16:	683b      	ldr	r3, [r7, #0]
 8018e18:	881b      	ldrh	r3, [r3, #0]
 8018e1a:	480b      	ldr	r0, [pc, #44]	@ (8018e48 <glue_modbus_read_reg+0x98>)
 8018e1c:	f7ef f8d8 	bl	8007fd0 <mg_log>
  return success;
 8018e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e22:	4618      	mov	r0, r3
 8018e24:	3710      	adds	r7, #16
 8018e26:	46bd      	mov	sp, r7
 8018e28:	bd80      	pop	{r7, pc}
 8018e2a:	bf00      	nop
 8018e2c:	24000282 	.word	0x24000282
 8018e30:	24000278 	.word	0x24000278
 8018e34:	24000240 	.word	0x24000240
 8018e38:	080350f8 	.word	0x080350f8
 8018e3c:	080280cc 	.word	0x080280cc
 8018e40:	08028214 	.word	0x08028214
 8018e44:	08028218 	.word	0x08028218
 8018e48:	08028220 	.word	0x08028220

08018e4c <glue_modbus_write_reg>:

bool glue_modbus_write_reg(uint16_t address, uint16_t value) {
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b084      	sub	sp, #16
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	4603      	mov	r3, r0
 8018e54:	460a      	mov	r2, r1
 8018e56:	80fb      	strh	r3, [r7, #6]
 8018e58:	4613      	mov	r3, r2
 8018e5a:	80bb      	strh	r3, [r7, #4]
  bool success = false;
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8018e60:	2305      	movs	r3, #5
 8018e62:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8018e64:	4b18      	ldr	r3, [pc, #96]	@ (8018ec8 <glue_modbus_write_reg+0x7c>)
 8018e66:	881b      	ldrh	r3, [r3, #0]
 8018e68:	88fa      	ldrh	r2, [r7, #6]
 8018e6a:	429a      	cmp	r2, r3
 8018e6c:	d311      	bcc.n	8018e92 <glue_modbus_write_reg+0x46>
 8018e6e:	88fa      	ldrh	r2, [r7, #6]
 8018e70:	4b15      	ldr	r3, [pc, #84]	@ (8018ec8 <glue_modbus_write_reg+0x7c>)
 8018e72:	881b      	ldrh	r3, [r3, #0]
 8018e74:	4619      	mov	r1, r3
 8018e76:	68bb      	ldr	r3, [r7, #8]
 8018e78:	440b      	add	r3, r1
 8018e7a:	429a      	cmp	r2, r3
 8018e7c:	d209      	bcs.n	8018e92 <glue_modbus_write_reg+0x46>
    s_modbus_regs[address - s_modbus_base] = value;
 8018e7e:	88fb      	ldrh	r3, [r7, #6]
 8018e80:	4a11      	ldr	r2, [pc, #68]	@ (8018ec8 <glue_modbus_write_reg+0x7c>)
 8018e82:	8812      	ldrh	r2, [r2, #0]
 8018e84:	1a9b      	subs	r3, r3, r2
 8018e86:	4911      	ldr	r1, [pc, #68]	@ (8018ecc <glue_modbus_write_reg+0x80>)
 8018e88:	88ba      	ldrh	r2, [r7, #4]
 8018e8a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    success = true;
 8018e8e:	2301      	movs	r3, #1
 8018e90:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "OK" : "FAIL", address, value));
 8018e92:	4b0f      	ldr	r3, [pc, #60]	@ (8018ed0 <glue_modbus_write_reg+0x84>)
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	2b01      	cmp	r3, #1
 8018e98:	dd11      	ble.n	8018ebe <glue_modbus_write_reg+0x72>
 8018e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8018ed4 <glue_modbus_write_reg+0x88>)
 8018e9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8018ea0:	490d      	ldr	r1, [pc, #52]	@ (8018ed8 <glue_modbus_write_reg+0x8c>)
 8018ea2:	2002      	movs	r0, #2
 8018ea4:	f7ef f844 	bl	8007f30 <mg_log_prefix>
 8018ea8:	7bfb      	ldrb	r3, [r7, #15]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d001      	beq.n	8018eb2 <glue_modbus_write_reg+0x66>
 8018eae:	490b      	ldr	r1, [pc, #44]	@ (8018edc <glue_modbus_write_reg+0x90>)
 8018eb0:	e000      	b.n	8018eb4 <glue_modbus_write_reg+0x68>
 8018eb2:	490b      	ldr	r1, [pc, #44]	@ (8018ee0 <glue_modbus_write_reg+0x94>)
 8018eb4:	88fa      	ldrh	r2, [r7, #6]
 8018eb6:	88bb      	ldrh	r3, [r7, #4]
 8018eb8:	480a      	ldr	r0, [pc, #40]	@ (8018ee4 <glue_modbus_write_reg+0x98>)
 8018eba:	f7ef f889 	bl	8007fd0 <mg_log>
  return success;
 8018ebe:	7bfb      	ldrb	r3, [r7, #15]

}
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	3710      	adds	r7, #16
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bd80      	pop	{r7, pc}
 8018ec8:	24000282 	.word	0x24000282
 8018ecc:	24000278 	.word	0x24000278
 8018ed0:	24000240 	.word	0x24000240
 8018ed4:	08035110 	.word	0x08035110
 8018ed8:	080280cc 	.word	0x080280cc
 8018edc:	08028214 	.word	0x08028214
 8018ee0:	08028218 	.word	0x08028218
 8018ee4:	08028220 	.word	0x08028220

08018ee8 <glue_authenticate>:


// Authenticate user/password. Return access level for the authenticated user:
//   0 - authentication error
//   1,2,3... - authentication success. Higher levels are more privileged than lower
int glue_authenticate(const char *user, const char *pass) {
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b084      	sub	sp, #16
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
 8018ef0:	6039      	str	r1, [r7, #0]
  int level = 0; // Authentication failure
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	60fb      	str	r3, [r7, #12]
  if (strcmp(user, "Sarayu") == 0 && strcmp(pass, "Sarayu@123") == 0) {
 8018ef6:	4913      	ldr	r1, [pc, #76]	@ (8018f44 <glue_authenticate+0x5c>)
 8018ef8:	6878      	ldr	r0, [r7, #4]
 8018efa:	f7e7 f9f1 	bl	80002e0 <strcmp>
 8018efe:	4603      	mov	r3, r0
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d109      	bne.n	8018f18 <glue_authenticate+0x30>
 8018f04:	4910      	ldr	r1, [pc, #64]	@ (8018f48 <glue_authenticate+0x60>)
 8018f06:	6838      	ldr	r0, [r7, #0]
 8018f08:	f7e7 f9ea 	bl	80002e0 <strcmp>
 8018f0c:	4603      	mov	r3, r0
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d102      	bne.n	8018f18 <glue_authenticate+0x30>
    level = 7;  // Administrator
 8018f12:	2307      	movs	r3, #7
 8018f14:	60fb      	str	r3, [r7, #12]
 8018f16:	e00f      	b.n	8018f38 <glue_authenticate+0x50>
  } else if (strcmp(user, "user") == 0 && strcmp(pass, "user") == 0) {
 8018f18:	490c      	ldr	r1, [pc, #48]	@ (8018f4c <glue_authenticate+0x64>)
 8018f1a:	6878      	ldr	r0, [r7, #4]
 8018f1c:	f7e7 f9e0 	bl	80002e0 <strcmp>
 8018f20:	4603      	mov	r3, r0
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d108      	bne.n	8018f38 <glue_authenticate+0x50>
 8018f26:	4909      	ldr	r1, [pc, #36]	@ (8018f4c <glue_authenticate+0x64>)
 8018f28:	6838      	ldr	r0, [r7, #0]
 8018f2a:	f7e7 f9d9 	bl	80002e0 <strcmp>
 8018f2e:	4603      	mov	r3, r0
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d101      	bne.n	8018f38 <glue_authenticate+0x50>
    level = 3;  // Ordinary dude
 8018f34:	2303      	movs	r3, #3
 8018f36:	60fb      	str	r3, [r7, #12]
  }
  return level;
 8018f38:	68fb      	ldr	r3, [r7, #12]
}
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	3710      	adds	r7, #16
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	bd80      	pop	{r7, pc}
 8018f42:	bf00      	nop
 8018f44:	08028150 	.word	0x08028150
 8018f48:	08028230 	.word	0x08028230
 8018f4c:	0802823c 	.word	0x0802823c

08018f50 <glue_check_reboot>:


// reboot
static uint64_t s_action_timeout_reboot;  // Time when reboot ends
bool glue_check_reboot(void) {
 8018f50:	b580      	push	{r7, lr}
 8018f52:	af00      	add	r7, sp, #0
  return s_action_timeout_reboot > mg_now(); // Return true if reboot is in progress
 8018f54:	f7f5 fbee 	bl	800e734 <mg_now>
 8018f58:	4b05      	ldr	r3, [pc, #20]	@ (8018f70 <glue_check_reboot+0x20>)
 8018f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f5e:	4290      	cmp	r0, r2
 8018f60:	eb71 0303 	sbcs.w	r3, r1, r3
 8018f64:	bf34      	ite	cc
 8018f66:	2301      	movcc	r3, #1
 8018f68:	2300      	movcs	r3, #0
 8018f6a:	b2db      	uxtb	r3, r3
}
 8018f6c:	4618      	mov	r0, r3
 8018f6e:	bd80      	pop	{r7, pc}
 8018f70:	24003f10 	.word	0x24003f10

08018f74 <glue_start_reboot>:
void glue_start_reboot(void) {
 8018f74:	b5b0      	push	{r4, r5, r7, lr}
 8018f76:	af00      	add	r7, sp, #0
  s_action_timeout_reboot = mg_now() + 1000; // Start reboot, finish after 1 second
 8018f78:	f7f5 fbdc 	bl	800e734 <mg_now>
 8018f7c:	4602      	mov	r2, r0
 8018f7e:	460b      	mov	r3, r1
 8018f80:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8018f84:	f143 0500 	adc.w	r5, r3, #0
 8018f88:	4b02      	ldr	r3, [pc, #8]	@ (8018f94 <glue_start_reboot+0x20>)
 8018f8a:	e9c3 4500 	strd	r4, r5, [r3]
}
 8018f8e:	bf00      	nop
 8018f90:	bdb0      	pop	{r4, r5, r7, pc}
 8018f92:	bf00      	nop
 8018f94:	24003f10 	.word	0x24003f10

08018f98 <glue_ota_begin_firmware_update>:

// firmware_update
void  *glue_ota_begin_firmware_update(char *file_name, size_t total_size) {
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b084      	sub	sp, #16
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	6078      	str	r0, [r7, #4]
 8018fa0:	6039      	str	r1, [r7, #0]
  bool ok = mg_ota_begin(total_size);
 8018fa2:	6838      	ldr	r0, [r7, #0]
 8018fa4:	f7f4 f8da 	bl	800d15c <mg_ota_begin>
 8018fa8:	4603      	mov	r3, r0
 8018faa:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("%s size %lu, ok: %d", file_name, total_size, ok));
 8018fac:	4b0d      	ldr	r3, [pc, #52]	@ (8018fe4 <glue_ota_begin_firmware_update+0x4c>)
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	2b02      	cmp	r3, #2
 8018fb2:	dd0c      	ble.n	8018fce <glue_ota_begin_firmware_update+0x36>
 8018fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8018fe8 <glue_ota_begin_firmware_update+0x50>)
 8018fb6:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8018fba:	490c      	ldr	r1, [pc, #48]	@ (8018fec <glue_ota_begin_firmware_update+0x54>)
 8018fbc:	2003      	movs	r0, #3
 8018fbe:	f7ee ffb7 	bl	8007f30 <mg_log_prefix>
 8018fc2:	7bfb      	ldrb	r3, [r7, #15]
 8018fc4:	683a      	ldr	r2, [r7, #0]
 8018fc6:	6879      	ldr	r1, [r7, #4]
 8018fc8:	4809      	ldr	r0, [pc, #36]	@ (8018ff0 <glue_ota_begin_firmware_update+0x58>)
 8018fca:	f7ef f801 	bl	8007fd0 <mg_log>
  return ok ? (void *) 1 : NULL;
 8018fce:	7bfb      	ldrb	r3, [r7, #15]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d001      	beq.n	8018fd8 <glue_ota_begin_firmware_update+0x40>
 8018fd4:	2301      	movs	r3, #1
 8018fd6:	e000      	b.n	8018fda <glue_ota_begin_firmware_update+0x42>
 8018fd8:	2300      	movs	r3, #0
}
 8018fda:	4618      	mov	r0, r3
 8018fdc:	3710      	adds	r7, #16
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	bd80      	pop	{r7, pc}
 8018fe2:	bf00      	nop
 8018fe4:	24000240 	.word	0x24000240
 8018fe8:	08035128 	.word	0x08035128
 8018fec:	080280cc 	.word	0x080280cc
 8018ff0:	08028244 	.word	0x08028244

08018ff4 <glue_ota_end_firmware_update>:
bool  glue_ota_end_firmware_update(void *context) {
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b088      	sub	sp, #32
 8018ff8:	af04      	add	r7, sp, #16
 8018ffa:	6078      	str	r0, [r7, #4]
  bool ok = mg_ota_end();
 8018ffc:	f7f4 f9ec 	bl	800d3d8 <mg_ota_end>
 8019000:	4603      	mov	r3, r0
 8019002:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("ctx: %p, success: %d", context, ok));
 8019004:	4b1a      	ldr	r3, [pc, #104]	@ (8019070 <glue_ota_end_firmware_update+0x7c>)
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	2b02      	cmp	r3, #2
 801900a:	dd0c      	ble.n	8019026 <glue_ota_end_firmware_update+0x32>
 801900c:	4b19      	ldr	r3, [pc, #100]	@ (8019074 <glue_ota_end_firmware_update+0x80>)
 801900e:	f240 1229 	movw	r2, #297	@ 0x129
 8019012:	4919      	ldr	r1, [pc, #100]	@ (8019078 <glue_ota_end_firmware_update+0x84>)
 8019014:	2003      	movs	r0, #3
 8019016:	f7ee ff8b 	bl	8007f30 <mg_log_prefix>
 801901a:	7bfb      	ldrb	r3, [r7, #15]
 801901c:	461a      	mov	r2, r3
 801901e:	6879      	ldr	r1, [r7, #4]
 8019020:	4816      	ldr	r0, [pc, #88]	@ (801907c <glue_ota_end_firmware_update+0x88>)
 8019022:	f7ee ffd5 	bl	8007fd0 <mg_log>
  if (ok) {
 8019026:	7bfb      	ldrb	r3, [r7, #15]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d01c      	beq.n	8019066 <glue_ota_end_firmware_update+0x72>
    MG_INFO(("Rebooting in %lu ms", WIZARD_REBOOT_TIMEOUT_MS));
 801902c:	4b10      	ldr	r3, [pc, #64]	@ (8019070 <glue_ota_end_firmware_update+0x7c>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	2b01      	cmp	r3, #1
 8019032:	dd0b      	ble.n	801904c <glue_ota_end_firmware_update+0x58>
 8019034:	4b0f      	ldr	r3, [pc, #60]	@ (8019074 <glue_ota_end_firmware_update+0x80>)
 8019036:	f240 122b 	movw	r2, #299	@ 0x12b
 801903a:	490f      	ldr	r1, [pc, #60]	@ (8019078 <glue_ota_end_firmware_update+0x84>)
 801903c:	2002      	movs	r0, #2
 801903e:	f7ee ff77 	bl	8007f30 <mg_log_prefix>
 8019042:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8019046:	480e      	ldr	r0, [pc, #56]	@ (8019080 <glue_ota_end_firmware_update+0x8c>)
 8019048:	f7ee ffc2 	bl	8007fd0 <mg_log>
    mg_timer_add(&g_mgr, WIZARD_REBOOT_TIMEOUT_MS, 0,
 801904c:	2300      	movs	r3, #0
 801904e:	9302      	str	r3, [sp, #8]
 8019050:	4b0c      	ldr	r3, [pc, #48]	@ (8019084 <glue_ota_end_firmware_update+0x90>)
 8019052:	9301      	str	r3, [sp, #4]
 8019054:	2300      	movs	r3, #0
 8019056:	9300      	str	r3, [sp, #0]
 8019058:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801905c:	f04f 0300 	mov.w	r3, #0
 8019060:	4809      	ldr	r0, [pc, #36]	@ (8019088 <glue_ota_end_firmware_update+0x94>)
 8019062:	f7f0 fd39 	bl	8009ad8 <mg_timer_add>
      (void(*)(void *)) mg_device_reset, NULL);
  }
  return ok;
 8019066:	7bfb      	ldrb	r3, [r7, #15]
}
 8019068:	4618      	mov	r0, r3
 801906a:	3710      	adds	r7, #16
 801906c:	46bd      	mov	sp, r7
 801906e:	bd80      	pop	{r7, pc}
 8019070:	24000240 	.word	0x24000240
 8019074:	08035148 	.word	0x08035148
 8019078:	080280cc 	.word	0x080280cc
 801907c:	08028258 	.word	0x08028258
 8019080:	08028270 	.word	0x08028270
 8019084:	08025749 	.word	0x08025749
 8019088:	24003f1c 	.word	0x24003f1c

0801908c <glue_ota_write_firmware_update>:
bool  glue_ota_write_firmware_update(void *context, void *buf, size_t len) {
 801908c:	b580      	push	{r7, lr}
 801908e:	b084      	sub	sp, #16
 8019090:	af00      	add	r7, sp, #0
 8019092:	60f8      	str	r0, [r7, #12]
 8019094:	60b9      	str	r1, [r7, #8]
 8019096:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("ctx: %p %p/%lu", context, buf, len));
 8019098:	4b0c      	ldr	r3, [pc, #48]	@ (80190cc <glue_ota_write_firmware_update+0x40>)
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	2b02      	cmp	r3, #2
 801909e:	dd0c      	ble.n	80190ba <glue_ota_write_firmware_update+0x2e>
 80190a0:	4b0b      	ldr	r3, [pc, #44]	@ (80190d0 <glue_ota_write_firmware_update+0x44>)
 80190a2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80190a6:	490b      	ldr	r1, [pc, #44]	@ (80190d4 <glue_ota_write_firmware_update+0x48>)
 80190a8:	2003      	movs	r0, #3
 80190aa:	f7ee ff41 	bl	8007f30 <mg_log_prefix>
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	68ba      	ldr	r2, [r7, #8]
 80190b2:	68f9      	ldr	r1, [r7, #12]
 80190b4:	4808      	ldr	r0, [pc, #32]	@ (80190d8 <glue_ota_write_firmware_update+0x4c>)
 80190b6:	f7ee ff8b 	bl	8007fd0 <mg_log>
  return mg_ota_write(buf, len);
 80190ba:	6879      	ldr	r1, [r7, #4]
 80190bc:	68b8      	ldr	r0, [r7, #8]
 80190be:	f7f4 f8cf 	bl	800d260 <mg_ota_write>
 80190c2:	4603      	mov	r3, r0
}
 80190c4:	4618      	mov	r0, r3
 80190c6:	3710      	adds	r7, #16
 80190c8:	46bd      	mov	sp, r7
 80190ca:	bd80      	pop	{r7, pc}
 80190cc:	24000240 	.word	0x24000240
 80190d0:	08035168 	.word	0x08035168
 80190d4:	080280cc 	.word	0x080280cc
 80190d8:	08028284 	.word	0x08028284

080190dc <glue_file_open_file_upload>:

// file_upload
void  *glue_file_open_file_upload(char *file_name, size_t total_size) {
 80190dc:	b580      	push	{r7, lr}
 80190de:	b0a4      	sub	sp, #144	@ 0x90
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	6078      	str	r0, [r7, #4]
 80190e4:	6039      	str	r1, [r7, #0]
  char path[128], *p = NULL;
 80190e6:	2300      	movs	r3, #0
 80190e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  FILE *fp = NULL;
 80190ec:	2300      	movs	r3, #0
 80190ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if ((p = strrchr(file_name, '/')) == NULL) p = file_name;
 80190f2:	212f      	movs	r1, #47	@ 0x2f
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	f008 feaf 	bl	8021e58 <strrchr>
 80190fa:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80190fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019102:	2b00      	cmp	r3, #0
 8019104:	d102      	bne.n	801910c <glue_file_open_file_upload+0x30>
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  mg_snprintf(path, sizeof(path), "/tmp/%s", p);
 801910c:	f107 0008 	add.w	r0, r7, #8
 8019110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019114:	4a0e      	ldr	r2, [pc, #56]	@ (8019150 <glue_file_open_file_upload+0x74>)
 8019116:	2180      	movs	r1, #128	@ 0x80
 8019118:	f7f4 fac0 	bl	800d69c <mg_snprintf>
#if MG_ENABLE_POSIX_FS
  fp = fopen(path, "w+b");
#endif
  MG_DEBUG(("opening [%s] size %lu, fp %p", path, total_size, fp));
 801911c:	4b0d      	ldr	r3, [pc, #52]	@ (8019154 <glue_file_open_file_upload+0x78>)
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	2b02      	cmp	r3, #2
 8019122:	dd0e      	ble.n	8019142 <glue_file_open_file_upload+0x66>
 8019124:	4b0c      	ldr	r3, [pc, #48]	@ (8019158 <glue_file_open_file_upload+0x7c>)
 8019126:	f240 123f 	movw	r2, #319	@ 0x13f
 801912a:	490c      	ldr	r1, [pc, #48]	@ (801915c <glue_file_open_file_upload+0x80>)
 801912c:	2003      	movs	r0, #3
 801912e:	f7ee feff 	bl	8007f30 <mg_log_prefix>
 8019132:	f107 0108 	add.w	r1, r7, #8
 8019136:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801913a:	683a      	ldr	r2, [r7, #0]
 801913c:	4808      	ldr	r0, [pc, #32]	@ (8019160 <glue_file_open_file_upload+0x84>)
 801913e:	f7ee ff47 	bl	8007fd0 <mg_log>
  return fp;
 8019142:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8019146:	4618      	mov	r0, r3
 8019148:	3790      	adds	r7, #144	@ 0x90
 801914a:	46bd      	mov	sp, r7
 801914c:	bd80      	pop	{r7, pc}
 801914e:	bf00      	nop
 8019150:	08028294 	.word	0x08028294
 8019154:	24000240 	.word	0x24000240
 8019158:	08035188 	.word	0x08035188
 801915c:	080280cc 	.word	0x080280cc
 8019160:	0802829c 	.word	0x0802829c

08019164 <glue_file_close_file_upload>:
bool  glue_file_close_file_upload(void *fp) {
 8019164:	b580      	push	{r7, lr}
 8019166:	b082      	sub	sp, #8
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("closing %p", fp));
 801916c:	4b09      	ldr	r3, [pc, #36]	@ (8019194 <glue_file_close_file_upload+0x30>)
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	2b02      	cmp	r3, #2
 8019172:	dd0a      	ble.n	801918a <glue_file_close_file_upload+0x26>
 8019174:	4b08      	ldr	r3, [pc, #32]	@ (8019198 <glue_file_close_file_upload+0x34>)
 8019176:	f240 1243 	movw	r2, #323	@ 0x143
 801917a:	4908      	ldr	r1, [pc, #32]	@ (801919c <glue_file_close_file_upload+0x38>)
 801917c:	2003      	movs	r0, #3
 801917e:	f7ee fed7 	bl	8007f30 <mg_log_prefix>
 8019182:	6879      	ldr	r1, [r7, #4]
 8019184:	4806      	ldr	r0, [pc, #24]	@ (80191a0 <glue_file_close_file_upload+0x3c>)
 8019186:	f7ee ff23 	bl	8007fd0 <mg_log>
#if MG_ENABLE_POSIX_FS
  return fclose((FILE *) fp) == 0;
#else
  return false;
 801918a:	2300      	movs	r3, #0
#endif
}
 801918c:	4618      	mov	r0, r3
 801918e:	3708      	adds	r7, #8
 8019190:	46bd      	mov	sp, r7
 8019192:	bd80      	pop	{r7, pc}
 8019194:	24000240 	.word	0x24000240
 8019198:	080351a4 	.word	0x080351a4
 801919c:	080280cc 	.word	0x080280cc
 80191a0:	080282bc 	.word	0x080282bc

080191a4 <glue_file_write_file_upload>:
bool  glue_file_write_file_upload(void *fp, void *buf, size_t len) {
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b084      	sub	sp, #16
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	60f8      	str	r0, [r7, #12]
 80191ac:	60b9      	str	r1, [r7, #8]
 80191ae:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("writing fp %p %p %lu bytes", fp, buf, len));
 80191b0:	4b0a      	ldr	r3, [pc, #40]	@ (80191dc <glue_file_write_file_upload+0x38>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	2b02      	cmp	r3, #2
 80191b6:	dd0c      	ble.n	80191d2 <glue_file_write_file_upload+0x2e>
 80191b8:	4b09      	ldr	r3, [pc, #36]	@ (80191e0 <glue_file_write_file_upload+0x3c>)
 80191ba:	f240 124b 	movw	r2, #331	@ 0x14b
 80191be:	4909      	ldr	r1, [pc, #36]	@ (80191e4 <glue_file_write_file_upload+0x40>)
 80191c0:	2003      	movs	r0, #3
 80191c2:	f7ee feb5 	bl	8007f30 <mg_log_prefix>
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	68ba      	ldr	r2, [r7, #8]
 80191ca:	68f9      	ldr	r1, [r7, #12]
 80191cc:	4806      	ldr	r0, [pc, #24]	@ (80191e8 <glue_file_write_file_upload+0x44>)
 80191ce:	f7ee feff 	bl	8007fd0 <mg_log>
#if MG_ENABLE_POSIX_FS
  return fwrite(buf, 1, len, (FILE *) fp) == len;
#else
  return false;
 80191d2:	2300      	movs	r3, #0
#endif
}
 80191d4:	4618      	mov	r0, r3
 80191d6:	3710      	adds	r7, #16
 80191d8:	46bd      	mov	sp, r7
 80191da:	bd80      	pop	{r7, pc}
 80191dc:	24000240 	.word	0x24000240
 80191e0:	080351c0 	.word	0x080351c0
 80191e4:	080280cc 	.word	0x080280cc
 80191e8:	080282c8 	.word	0x080282c8

080191ec <glue_graph_get_graph1>:

// graph1
size_t glue_graph_get_graph1(uint32_t from, uint32_t to,
                              uint32_t *x_values, double *y_values, size_t len) {
 80191ec:	b5b0      	push	{r4, r5, r7, lr}
 80191ee:	b0a4      	sub	sp, #144	@ 0x90
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	60f8      	str	r0, [r7, #12]
 80191f4:	60b9      	str	r1, [r7, #8]
 80191f6:	607a      	str	r2, [r7, #4]
 80191f8:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80191fa:	2300      	movs	r3, #0
 80191fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t timestamps[] = {1724576787,1724576847,1724576907,1724576967,1724577027,1724577087,1724577147,1724577207,1724577267,1724577327};  // Those are example values
 8019200:	4b25      	ldr	r3, [pc, #148]	@ (8019298 <glue_graph_get_graph1+0xac>)
 8019202:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8019206:	461d      	mov	r5, r3
 8019208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801920a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801920c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801920e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019210:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019214:	e884 0003 	stmia.w	r4, {r0, r1}
  double values[] = {20.3,27.2,29.7,27.9,25.1,23.8,22.5,22.2,23.3,23.9};  // Use real device data
 8019218:	4a20      	ldr	r2, [pc, #128]	@ (801929c <glue_graph_get_graph1+0xb0>)
 801921a:	f107 0310 	add.w	r3, r7, #16
 801921e:	4611      	mov	r1, r2
 8019220:	2250      	movs	r2, #80	@ 0x50
 8019222:	4618      	mov	r0, r3
 8019224:	f008 fed3 	bl	8021fce <memcpy>
  for (i = 0; i < len; i++) {
 8019228:	2300      	movs	r3, #0
 801922a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801922e:	e024      	b.n	801927a <glue_graph_get_graph1+0x8e>
    if (i >= sizeof(values) / sizeof(values[0])) break;
 8019230:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019234:	2b09      	cmp	r3, #9
 8019236:	d827      	bhi.n	8019288 <glue_graph_get_graph1+0x9c>
    x_values[i] = timestamps[i];
 8019238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801923c:	009b      	lsls	r3, r3, #2
 801923e:	687a      	ldr	r2, [r7, #4]
 8019240:	441a      	add	r2, r3
 8019242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019246:	009b      	lsls	r3, r3, #2
 8019248:	3390      	adds	r3, #144	@ 0x90
 801924a:	443b      	add	r3, r7
 801924c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8019250:	6013      	str	r3, [r2, #0]
    y_values[i] = values[i];
 8019252:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019256:	00db      	lsls	r3, r3, #3
 8019258:	683a      	ldr	r2, [r7, #0]
 801925a:	18d1      	adds	r1, r2, r3
 801925c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019260:	00db      	lsls	r3, r3, #3
 8019262:	3390      	adds	r3, #144	@ 0x90
 8019264:	443b      	add	r3, r7
 8019266:	3b80      	subs	r3, #128	@ 0x80
 8019268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801926c:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < len; i++) {
 8019270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019274:	3301      	adds	r3, #1
 8019276:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801927a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801927e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019282:	429a      	cmp	r2, r3
 8019284:	d3d4      	bcc.n	8019230 <glue_graph_get_graph1+0x44>
 8019286:	e000      	b.n	801928a <glue_graph_get_graph1+0x9e>
    if (i >= sizeof(values) / sizeof(values[0])) break;
 8019288:	bf00      	nop
  }
  (void) from, (void) to;
  return i;
 801928a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 801928e:	4618      	mov	r0, r3
 8019290:	3790      	adds	r7, #144	@ 0x90
 8019292:	46bd      	mov	sp, r7
 8019294:	bdb0      	pop	{r4, r5, r7, pc}
 8019296:	bf00      	nop
 8019298:	080282e4 	.word	0x080282e4
 801929c:	08028310 	.word	0x08028310

080192a0 <glue_get_state>:

static struct state s_state = {42, 27, 70, 10, "1.0.0", true, false, 83};
void glue_get_state(struct state *data) {
 80192a0:	b4b0      	push	{r4, r5, r7}
 80192a2:	b083      	sub	sp, #12
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
  *data = s_state;  // Sync with your device
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	4a08      	ldr	r2, [pc, #32]	@ (80192cc <glue_get_state+0x2c>)
 80192ac:	461c      	mov	r4, r3
 80192ae:	4615      	mov	r5, r2
 80192b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80192b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80192b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80192b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80192b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80192bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80192c0:	bf00      	nop
 80192c2:	370c      	adds	r7, #12
 80192c4:	46bd      	mov	sp, r7
 80192c6:	bcb0      	pop	{r4, r5, r7}
 80192c8:	4770      	bx	lr
 80192ca:	bf00      	nop
 80192cc:	24000284 	.word	0x24000284

080192d0 <glue_set_state>:
void glue_set_state(struct state *data) {
 80192d0:	b4b0      	push	{r4, r5, r7}
 80192d2:	b083      	sub	sp, #12
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
  s_state = *data; // Sync with your device
 80192d8:	4a08      	ldr	r2, [pc, #32]	@ (80192fc <glue_set_state+0x2c>)
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	4614      	mov	r4, r2
 80192de:	461d      	mov	r5, r3
 80192e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80192e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80192e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80192e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80192e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80192ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80192f0:	bf00      	nop
 80192f2:	370c      	adds	r7, #12
 80192f4:	46bd      	mov	sp, r7
 80192f6:	bcb0      	pop	{r4, r5, r7}
 80192f8:	4770      	bx	lr
 80192fa:	bf00      	nop
 80192fc:	24000284 	.word	0x24000284

08019300 <glue_get_leds>:

static struct leds s_leds = {false, true, false};
void glue_get_leds(struct leds *data) {
 8019300:	b480      	push	{r7}
 8019302:	b083      	sub	sp, #12
 8019304:	af00      	add	r7, sp, #0
 8019306:	6078      	str	r0, [r7, #4]
  *data = s_leds;  // Sync with your device
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	4a05      	ldr	r2, [pc, #20]	@ (8019320 <glue_get_leds+0x20>)
 801930c:	8811      	ldrh	r1, [r2, #0]
 801930e:	7892      	ldrb	r2, [r2, #2]
 8019310:	8019      	strh	r1, [r3, #0]
 8019312:	709a      	strb	r2, [r3, #2]
}
 8019314:	bf00      	nop
 8019316:	370c      	adds	r7, #12
 8019318:	46bd      	mov	sp, r7
 801931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801931e:	4770      	bx	lr
 8019320:	240002b0 	.word	0x240002b0

08019324 <glue_set_leds>:
void glue_set_leds(struct leds *data) {
 8019324:	b480      	push	{r7}
 8019326:	b083      	sub	sp, #12
 8019328:	af00      	add	r7, sp, #0
 801932a:	6078      	str	r0, [r7, #4]
  s_leds = *data; // Sync with your device
 801932c:	4b05      	ldr	r3, [pc, #20]	@ (8019344 <glue_set_leds+0x20>)
 801932e:	687a      	ldr	r2, [r7, #4]
 8019330:	8811      	ldrh	r1, [r2, #0]
 8019332:	7892      	ldrb	r2, [r2, #2]
 8019334:	8019      	strh	r1, [r3, #0]
 8019336:	709a      	strb	r2, [r3, #2]
}
 8019338:	bf00      	nop
 801933a:	370c      	adds	r7, #12
 801933c:	46bd      	mov	sp, r7
 801933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019342:	4770      	bx	lr
 8019344:	240002b0 	.word	0x240002b0

08019348 <glue_get_settings>:

static struct settings s_settings = {"edit & save me", 2, 123.12345, 17, true};
void glue_get_settings(struct settings *data) {
 8019348:	b4b0      	push	{r4, r5, r7}
 801934a:	b083      	sub	sp, #12
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
  *data = s_settings;  // Sync with your device
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	4a09      	ldr	r2, [pc, #36]	@ (8019378 <glue_get_settings+0x30>)
 8019354:	461c      	mov	r4, r3
 8019356:	4615      	mov	r5, r2
 8019358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801935a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801935c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801935e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019364:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8019368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801936c:	bf00      	nop
 801936e:	370c      	adds	r7, #12
 8019370:	46bd      	mov	sp, r7
 8019372:	bcb0      	pop	{r4, r5, r7}
 8019374:	4770      	bx	lr
 8019376:	bf00      	nop
 8019378:	240002b8 	.word	0x240002b8

0801937c <glue_set_settings>:
void glue_set_settings(struct settings *data) {
 801937c:	b4b0      	push	{r4, r5, r7}
 801937e:	b083      	sub	sp, #12
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
  s_settings = *data; // Sync with your device
 8019384:	4a09      	ldr	r2, [pc, #36]	@ (80193ac <glue_set_settings+0x30>)
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	4614      	mov	r4, r2
 801938a:	461d      	mov	r5, r3
 801938c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801938e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019398:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801939c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80193a0:	bf00      	nop
 80193a2:	370c      	adds	r7, #12
 80193a4:	46bd      	mov	sp, r7
 80193a6:	bcb0      	pop	{r4, r5, r7}
 80193a8:	4770      	bx	lr
 80193aa:	bf00      	nop
 80193ac:	240002b8 	.word	0x240002b8

080193b0 <glue_get_security>:

static struct security s_security = {"admin", "user"};
void glue_get_security(struct security *data) {
 80193b0:	b580      	push	{r7, lr}
 80193b2:	b082      	sub	sp, #8
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
  *data = s_security;  // Sync with your device
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	4a05      	ldr	r2, [pc, #20]	@ (80193d0 <glue_get_security+0x20>)
 80193bc:	4618      	mov	r0, r3
 80193be:	4611      	mov	r1, r2
 80193c0:	2350      	movs	r3, #80	@ 0x50
 80193c2:	461a      	mov	r2, r3
 80193c4:	f008 fe03 	bl	8021fce <memcpy>
}
 80193c8:	bf00      	nop
 80193ca:	3708      	adds	r7, #8
 80193cc:	46bd      	mov	sp, r7
 80193ce:	bd80      	pop	{r7, pc}
 80193d0:	240002f8 	.word	0x240002f8

080193d4 <glue_set_security>:
void glue_set_security(struct security *data) {
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b082      	sub	sp, #8
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
  s_security = *data; // Sync with your device
 80193dc:	4a05      	ldr	r2, [pc, #20]	@ (80193f4 <glue_set_security+0x20>)
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	4610      	mov	r0, r2
 80193e2:	4619      	mov	r1, r3
 80193e4:	2350      	movs	r3, #80	@ 0x50
 80193e6:	461a      	mov	r2, r3
 80193e8:	f008 fdf1 	bl	8021fce <memcpy>
}
 80193ec:	bf00      	nop
 80193ee:	3708      	adds	r7, #8
 80193f0:	46bd      	mov	sp, r7
 80193f2:	bd80      	pop	{r7, pc}
 80193f4:	240002f8 	.word	0x240002f8

080193f8 <find_handler>:
  {"settings", "object", false, 3, 7, 0UL, s_settings_attributes, (void (*)(void *)) glue_get_settings, (void (*)(void *)) glue_set_settings, NULL, NULL, NULL, NULL, NULL, NULL, sizeof(struct settings)},
  {"security", "object", false, 7, 7, 0UL, s_security_attributes, (void (*)(void *)) glue_get_security, (void (*)(void *)) glue_set_security, NULL, NULL, NULL, NULL, NULL, NULL, sizeof(struct security)},
  {"events", "array", false, 0, 0, 0UL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0}
};

static struct apihandler *find_handler(struct mg_http_message *hm) {
 80193f8:	b590      	push	{r4, r7, lr}
 80193fa:	b089      	sub	sp, #36	@ 0x24
 80193fc:	af02      	add	r7, sp, #8
 80193fe:	6078      	str	r0, [r7, #4]
  size_t i;
  if (hm->uri.len < 6 || strncmp(hm->uri.buf, "/api/", 5) != 0) return NULL;
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	68db      	ldr	r3, [r3, #12]
 8019404:	2b05      	cmp	r3, #5
 8019406:	d909      	bls.n	801941c <find_handler+0x24>
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	689b      	ldr	r3, [r3, #8]
 801940c:	2205      	movs	r2, #5
 801940e:	4932      	ldr	r1, [pc, #200]	@ (80194d8 <find_handler+0xe0>)
 8019410:	4618      	mov	r0, r3
 8019412:	f008 fcfc 	bl	8021e0e <strncmp>
 8019416:	4603      	mov	r3, r0
 8019418:	2b00      	cmp	r3, #0
 801941a:	d001      	beq.n	8019420 <find_handler+0x28>
 801941c:	2300      	movs	r3, #0
 801941e:	e056      	b.n	80194ce <find_handler+0xd6>
  for (i = 0; i < sizeof(s_apihandlers) / sizeof(s_apihandlers[0]); i++) {
 8019420:	2300      	movs	r3, #0
 8019422:	617b      	str	r3, [r7, #20]
 8019424:	e04f      	b.n	80194c6 <find_handler+0xce>
    struct apihandler *h = &s_apihandlers[i];
 8019426:	697b      	ldr	r3, [r7, #20]
 8019428:	019b      	lsls	r3, r3, #6
 801942a:	4a2c      	ldr	r2, [pc, #176]	@ (80194dc <find_handler+0xe4>)
 801942c:	4413      	add	r3, r2
 801942e:	613b      	str	r3, [r7, #16]
    size_t n = strlen(h->name);
 8019430:	693b      	ldr	r3, [r7, #16]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	4618      	mov	r0, r3
 8019436:	f7e6 ffb3 	bl	80003a0 <strlen>
 801943a:	60f8      	str	r0, [r7, #12]
    if (n + 5 > hm->uri.len) continue;
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	1d5a      	adds	r2, r3, #5
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	68db      	ldr	r3, [r3, #12]
 8019444:	429a      	cmp	r2, r3
 8019446:	d836      	bhi.n	80194b6 <find_handler+0xbe>
    if (strncmp(hm->uri.buf + 5, h->name, n) != 0) continue;
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	689b      	ldr	r3, [r3, #8]
 801944c:	1d58      	adds	r0, r3, #5
 801944e:	693b      	ldr	r3, [r7, #16]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	68fa      	ldr	r2, [r7, #12]
 8019454:	4619      	mov	r1, r3
 8019456:	f008 fcda 	bl	8021e0e <strncmp>
 801945a:	4603      	mov	r3, r0
 801945c:	2b00      	cmp	r3, #0
 801945e:	d12c      	bne.n	80194ba <find_handler+0xc2>
    MG_INFO(("%.*s %s %lu %lu", hm->uri.len, hm->uri.buf, h->name, n + 5,
 8019460:	4b1f      	ldr	r3, [pc, #124]	@ (80194e0 <find_handler+0xe8>)
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	2b01      	cmp	r3, #1
 8019466:	dd16      	ble.n	8019496 <find_handler+0x9e>
 8019468:	4b1e      	ldr	r3, [pc, #120]	@ (80194e4 <find_handler+0xec>)
 801946a:	2282      	movs	r2, #130	@ 0x82
 801946c:	491e      	ldr	r1, [pc, #120]	@ (80194e8 <find_handler+0xf0>)
 801946e:	2002      	movs	r0, #2
 8019470:	f7ee fd5e 	bl	8007f30 <mg_log_prefix>
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	68d9      	ldr	r1, [r3, #12]
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	6898      	ldr	r0, [r3, #8]
 801947c:	693b      	ldr	r3, [r7, #16]
 801947e:	681c      	ldr	r4, [r3, #0]
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	3305      	adds	r3, #5
 8019484:	687a      	ldr	r2, [r7, #4]
 8019486:	68d2      	ldr	r2, [r2, #12]
 8019488:	9201      	str	r2, [sp, #4]
 801948a:	9300      	str	r3, [sp, #0]
 801948c:	4623      	mov	r3, r4
 801948e:	4602      	mov	r2, r0
 8019490:	4816      	ldr	r0, [pc, #88]	@ (80194ec <find_handler+0xf4>)
 8019492:	f7ee fd9d 	bl	8007fd0 <mg_log>
             hm->uri.len));
    if (n + 5 < hm->uri.len && hm->uri.buf[n + 5] != '/') continue;
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	1d5a      	adds	r2, r3, #5
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	68db      	ldr	r3, [r3, #12]
 801949e:	429a      	cmp	r2, r3
 80194a0:	d207      	bcs.n	80194b2 <find_handler+0xba>
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	689a      	ldr	r2, [r3, #8]
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	3305      	adds	r3, #5
 80194aa:	4413      	add	r3, r2
 80194ac:	781b      	ldrb	r3, [r3, #0]
 80194ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80194b0:	d105      	bne.n	80194be <find_handler+0xc6>
    return h;
 80194b2:	693b      	ldr	r3, [r7, #16]
 80194b4:	e00b      	b.n	80194ce <find_handler+0xd6>
    if (n + 5 > hm->uri.len) continue;
 80194b6:	bf00      	nop
 80194b8:	e002      	b.n	80194c0 <find_handler+0xc8>
    if (strncmp(hm->uri.buf + 5, h->name, n) != 0) continue;
 80194ba:	bf00      	nop
 80194bc:	e000      	b.n	80194c0 <find_handler+0xc8>
    if (n + 5 < hm->uri.len && hm->uri.buf[n + 5] != '/') continue;
 80194be:	bf00      	nop
  for (i = 0; i < sizeof(s_apihandlers) / sizeof(s_apihandlers[0]); i++) {
 80194c0:	697b      	ldr	r3, [r7, #20]
 80194c2:	3301      	adds	r3, #1
 80194c4:	617b      	str	r3, [r7, #20]
 80194c6:	697b      	ldr	r3, [r7, #20]
 80194c8:	2b08      	cmp	r3, #8
 80194ca:	d9ac      	bls.n	8019426 <find_handler+0x2e>
  }
  return NULL;
 80194cc:	2300      	movs	r3, #0
}
 80194ce:	4618      	mov	r0, r3
 80194d0:	371c      	adds	r7, #28
 80194d2:	46bd      	mov	sp, r7
 80194d4:	bd90      	pop	{r4, r7, pc}
 80194d6:	bf00      	nop
 80194d8:	080284c4 	.word	0x080284c4
 80194dc:	2400055c 	.word	0x2400055c
 80194e0:	24000240 	.word	0x24000240
 80194e4:	080351dc 	.word	0x080351dc
 80194e8:	080284cc 	.word	0x080284cc
 80194ec:	080284e8 	.word	0x080284e8

080194f0 <mg_json_get_str2>:

void mg_json_get_str2(struct mg_str json, const char *path, char *buf,
                      size_t len) {
 80194f0:	b590      	push	{r4, r7, lr}
 80194f2:	b089      	sub	sp, #36	@ 0x24
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	f107 0408 	add.w	r4, r7, #8
 80194fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80194fe:	607a      	str	r2, [r7, #4]
 8019500:	603b      	str	r3, [r7, #0]
  struct mg_str s = mg_json_get_tok(json, path);
 8019502:	f107 0010 	add.w	r0, r7, #16
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	f107 0208 	add.w	r2, r7, #8
 801950c:	ca06      	ldmia	r2, {r1, r2}
 801950e:	f7ee fb89 	bl	8007c24 <mg_json_get_tok>
  if (s.len > 1 && s.buf[0] == '"') {
 8019512:	697b      	ldr	r3, [r7, #20]
 8019514:	2b01      	cmp	r3, #1
 8019516:	d913      	bls.n	8019540 <mg_json_get_str2+0x50>
 8019518:	693b      	ldr	r3, [r7, #16]
 801951a:	781b      	ldrb	r3, [r3, #0]
 801951c:	2b22      	cmp	r3, #34	@ 0x22
 801951e:	d10f      	bne.n	8019540 <mg_json_get_str2+0x50>
    mg_json_unescape(mg_str_n(s.buf + 1, s.len - 2), buf, len);
 8019520:	693b      	ldr	r3, [r7, #16]
 8019522:	1c59      	adds	r1, r3, #1
 8019524:	697b      	ldr	r3, [r7, #20]
 8019526:	1e9a      	subs	r2, r3, #2
 8019528:	f107 0318 	add.w	r3, r7, #24
 801952c:	4618      	mov	r0, r3
 801952e:	f7f5 fbe4 	bl	800ecfa <mg_str_n>
 8019532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019534:	683a      	ldr	r2, [r7, #0]
 8019536:	f107 0118 	add.w	r1, r7, #24
 801953a:	c903      	ldmia	r1, {r0, r1}
 801953c:	f7ee fc18 	bl	8007d70 <mg_json_unescape>
  }
}
 8019540:	bf00      	nop
 8019542:	3724      	adds	r7, #36	@ 0x24
 8019544:	46bd      	mov	sp, r7
 8019546:	bd90      	pop	{r4, r7, pc}

08019548 <authenticate>:
};

static struct user *s_users;  // List of authenticated users

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 8019548:	b580      	push	{r7, lr}
 801954a:	b0ba      	sub	sp, #232	@ 0xe8
 801954c:	af02      	add	r7, sp, #8
 801954e:	6078      	str	r0, [r7, #4]
  char user[100], pass[100];
  struct user *u, *result = NULL;
 8019550:	2300      	movs	r3, #0
 8019552:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 8019556:	f107 030c 	add.w	r3, r7, #12
 801955a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 801955e:	2264      	movs	r2, #100	@ 0x64
 8019560:	9200      	str	r2, [sp, #0]
 8019562:	2264      	movs	r2, #100	@ 0x64
 8019564:	6878      	ldr	r0, [r7, #4]
 8019566:	f7ec febb 	bl	80062e0 <mg_http_creds>

  if (user[0] != '\0' && pass[0] != '\0') {
 801956a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 801956e:	2b00      	cmp	r3, #0
 8019570:	d06e      	beq.n	8019650 <authenticate+0x108>
 8019572:	7b3b      	ldrb	r3, [r7, #12]
 8019574:	2b00      	cmp	r3, #0
 8019576:	d06b      	beq.n	8019650 <authenticate+0x108>
    // Both user and password is set, auth by user/password via glue API
    int level = glue_authenticate(user, pass);
 8019578:	f107 020c 	add.w	r2, r7, #12
 801957c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8019580:	4611      	mov	r1, r2
 8019582:	4618      	mov	r0, r3
 8019584:	f7ff fcb0 	bl	8018ee8 <glue_authenticate>
 8019588:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    MG_DEBUG(("user %s, level: %d", user, level));
 801958c:	4b55      	ldr	r3, [pc, #340]	@ (80196e4 <authenticate+0x19c>)
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	2b02      	cmp	r3, #2
 8019592:	dd0d      	ble.n	80195b0 <authenticate+0x68>
 8019594:	4b54      	ldr	r3, [pc, #336]	@ (80196e8 <authenticate+0x1a0>)
 8019596:	22a6      	movs	r2, #166	@ 0xa6
 8019598:	4954      	ldr	r1, [pc, #336]	@ (80196ec <authenticate+0x1a4>)
 801959a:	2003      	movs	r0, #3
 801959c:	f7ee fcc8 	bl	8007f30 <mg_log_prefix>
 80195a0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80195a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80195a8:	4619      	mov	r1, r3
 80195aa:	4851      	ldr	r0, [pc, #324]	@ (80196f0 <authenticate+0x1a8>)
 80195ac:	f7ee fd10 	bl	8007fd0 <mg_log>
    if (level > 0) {  // Proceed only if the firmware authenticated us
 80195b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	dd75      	ble.n	80196a4 <authenticate+0x15c>
      // uint64_t uid = hash(3, mg_str(user), mg_str(":"), mg_str(pass));
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 80195b8:	4b4e      	ldr	r3, [pc, #312]	@ (80196f4 <authenticate+0x1ac>)
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80195c0:	e014      	b.n	80195ec <authenticate+0xa4>
        if (strcmp(user, u->name) == 0) result = u;
 80195c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80195c6:	1d1a      	adds	r2, r3, #4
 80195c8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80195cc:	4611      	mov	r1, r2
 80195ce:	4618      	mov	r0, r3
 80195d0:	f7e6 fe86 	bl	80002e0 <strcmp>
 80195d4:	4603      	mov	r3, r0
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d103      	bne.n	80195e2 <authenticate+0x9a>
 80195da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80195de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 80195e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80195ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d003      	beq.n	80195fc <authenticate+0xb4>
 80195f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d0e2      	beq.n	80195c2 <authenticate+0x7a>
      }
      // Not yet authenticated, add to the list
      if (result == NULL) {
 80195fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019600:	2b00      	cmp	r3, #0
 8019602:	d14f      	bne.n	80196a4 <authenticate+0x15c>
        result = (struct user *) calloc(1, sizeof(*result));
 8019604:	2140      	movs	r1, #64	@ 0x40
 8019606:	2001      	movs	r0, #1
 8019608:	f007 f93a 	bl	8020880 <calloc>
 801960c:	4603      	mov	r3, r0
 801960e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        mg_snprintf(result->name, sizeof(result->name), "%s", user);
 8019612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019616:	1d18      	adds	r0, r3, #4
 8019618:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801961c:	4a36      	ldr	r2, [pc, #216]	@ (80196f8 <authenticate+0x1b0>)
 801961e:	2120      	movs	r1, #32
 8019620:	f7f4 f83c 	bl	800d69c <mg_snprintf>
        mg_random_str(result->token, sizeof(result->token) - 1);
 8019624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019628:	3324      	adds	r3, #36	@ 0x24
 801962a:	2114      	movs	r1, #20
 801962c:	4618      	mov	r0, r3
 801962e:	f7fe f9a3 	bl	8017978 <mg_random_str>
        result->level = level, result->next = s_users, s_users = result;
 8019632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019636:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801963a:	63da      	str	r2, [r3, #60]	@ 0x3c
 801963c:	4b2d      	ldr	r3, [pc, #180]	@ (80196f4 <authenticate+0x1ac>)
 801963e:	681a      	ldr	r2, [r3, #0]
 8019640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019644:	601a      	str	r2, [r3, #0]
 8019646:	4a2b      	ldr	r2, [pc, #172]	@ (80196f4 <authenticate+0x1ac>)
 8019648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801964c:	6013      	str	r3, [r2, #0]
  if (user[0] != '\0' && pass[0] != '\0') {
 801964e:	e029      	b.n	80196a4 <authenticate+0x15c>
      }
    }
  } else if (user[0] == '\0' && pass[0] != '\0') {
 8019650:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8019654:	2b00      	cmp	r3, #0
 8019656:	d126      	bne.n	80196a6 <authenticate+0x15e>
 8019658:	7b3b      	ldrb	r3, [r7, #12]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d023      	beq.n	80196a6 <authenticate+0x15e>
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 801965e:	4b25      	ldr	r3, [pc, #148]	@ (80196f4 <authenticate+0x1ac>)
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8019666:	e014      	b.n	8019692 <authenticate+0x14a>
      if (strcmp(u->token, pass) == 0) result = u;
 8019668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801966c:	3324      	adds	r3, #36	@ 0x24
 801966e:	f107 020c 	add.w	r2, r7, #12
 8019672:	4611      	mov	r1, r2
 8019674:	4618      	mov	r0, r3
 8019676:	f7e6 fe33 	bl	80002e0 <strcmp>
 801967a:	4603      	mov	r3, r0
 801967c:	2b00      	cmp	r3, #0
 801967e:	d103      	bne.n	8019688 <authenticate+0x140>
 8019680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019684:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8019688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8019692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019696:	2b00      	cmp	r3, #0
 8019698:	d005      	beq.n	80196a6 <authenticate+0x15e>
 801969a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d0e2      	beq.n	8019668 <authenticate+0x120>
 80196a2:	e000      	b.n	80196a6 <authenticate+0x15e>
  if (user[0] != '\0' && pass[0] != '\0') {
 80196a4:	bf00      	nop
    }
  }
  MG_VERBOSE(("[%s/%s] -> %s", user, pass, result ? "OK" : "FAIL"));
 80196a6:	4b0f      	ldr	r3, [pc, #60]	@ (80196e4 <authenticate+0x19c>)
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	2b03      	cmp	r3, #3
 80196ac:	dd13      	ble.n	80196d6 <authenticate+0x18e>
 80196ae:	4b0e      	ldr	r3, [pc, #56]	@ (80196e8 <authenticate+0x1a0>)
 80196b0:	22b9      	movs	r2, #185	@ 0xb9
 80196b2:	490e      	ldr	r1, [pc, #56]	@ (80196ec <authenticate+0x1a4>)
 80196b4:	2004      	movs	r0, #4
 80196b6:	f7ee fc3b 	bl	8007f30 <mg_log_prefix>
 80196ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d001      	beq.n	80196c6 <authenticate+0x17e>
 80196c2:	4b0e      	ldr	r3, [pc, #56]	@ (80196fc <authenticate+0x1b4>)
 80196c4:	e000      	b.n	80196c8 <authenticate+0x180>
 80196c6:	4b0e      	ldr	r3, [pc, #56]	@ (8019700 <authenticate+0x1b8>)
 80196c8:	f107 020c 	add.w	r2, r7, #12
 80196cc:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80196d0:	480c      	ldr	r0, [pc, #48]	@ (8019704 <authenticate+0x1bc>)
 80196d2:	f7ee fc7d 	bl	8007fd0 <mg_log>
  return result;
 80196d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
}
 80196da:	4618      	mov	r0, r3
 80196dc:	37e0      	adds	r7, #224	@ 0xe0
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}
 80196e2:	bf00      	nop
 80196e4:	24000240 	.word	0x24000240
 80196e8:	080351ec 	.word	0x080351ec
 80196ec:	080284cc 	.word	0x080284cc
 80196f0:	080284f8 	.word	0x080284f8
 80196f4:	24003f68 	.word	0x24003f68
 80196f8:	0802850c 	.word	0x0802850c
 80196fc:	08028510 	.word	0x08028510
 8019700:	08028514 	.word	0x08028514
 8019704:	0802851c 	.word	0x0802851c

08019708 <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 8019708:	b580      	push	{r7, lr}
 801970a:	b0cc      	sub	sp, #304	@ 0x130
 801970c:	af0a      	add	r7, sp, #40	@ 0x28
 801970e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8019712:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8019716:	6018      	str	r0, [r3, #0]
 8019718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801971c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8019720:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->token, c->is_tls ? "Secure; " : "", 3600 * 24);
 8019722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8019726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8019730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8019734:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801973e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019742:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8019744:	2b00      	cmp	r3, #0
 8019746:	d001      	beq.n	801974c <handle_login+0x44>
 8019748:	4b1e      	ldr	r3, [pc, #120]	@ (80197c4 <handle_login+0xbc>)
 801974a:	e000      	b.n	801974e <handle_login+0x46>
 801974c:	4b1e      	ldr	r3, [pc, #120]	@ (80197c8 <handle_login+0xc0>)
 801974e:	f107 0008 	add.w	r0, r7, #8
 8019752:	491e      	ldr	r1, [pc, #120]	@ (80197cc <handle_login+0xc4>)
 8019754:	9101      	str	r1, [sp, #4]
 8019756:	9300      	str	r3, [sp, #0]
 8019758:	4613      	mov	r3, r2
 801975a:	4a1d      	ldr	r2, [pc, #116]	@ (80197d0 <handle_login+0xc8>)
 801975c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019760:	f7f3 ff9c 	bl	800d69c <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}",  //
                MG_ESC("user"), MG_ESC(u->name),  //
 8019764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8019768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	3304      	adds	r3, #4
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}",  //
 8019770:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8019774:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8019778:	6812      	ldr	r2, [r2, #0]
 801977a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801977c:	f107 0108 	add.w	r1, r7, #8
 8019780:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8019784:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8019788:	9209      	str	r2, [sp, #36]	@ 0x24
 801978a:	4a12      	ldr	r2, [pc, #72]	@ (80197d4 <handle_login+0xcc>)
 801978c:	9208      	str	r2, [sp, #32]
 801978e:	2200      	movs	r2, #0
 8019790:	9207      	str	r2, [sp, #28]
 8019792:	4a11      	ldr	r2, [pc, #68]	@ (80197d8 <handle_login+0xd0>)
 8019794:	9206      	str	r2, [sp, #24]
 8019796:	9305      	str	r3, [sp, #20]
 8019798:	2300      	movs	r3, #0
 801979a:	9304      	str	r3, [sp, #16]
 801979c:	4b0e      	ldr	r3, [pc, #56]	@ (80197d8 <handle_login+0xd0>)
 801979e:	9303      	str	r3, [sp, #12]
 80197a0:	4b0e      	ldr	r3, [pc, #56]	@ (80197dc <handle_login+0xd4>)
 80197a2:	9302      	str	r3, [sp, #8]
 80197a4:	2300      	movs	r3, #0
 80197a6:	9301      	str	r3, [sp, #4]
 80197a8:	4b0b      	ldr	r3, [pc, #44]	@ (80197d8 <handle_login+0xd0>)
 80197aa:	9300      	str	r3, [sp, #0]
 80197ac:	4b0c      	ldr	r3, [pc, #48]	@ (80197e0 <handle_login+0xd8>)
 80197ae:	460a      	mov	r2, r1
 80197b0:	21c8      	movs	r1, #200	@ 0xc8
 80197b2:	6800      	ldr	r0, [r0, #0]
 80197b4:	f7eb fe1e 	bl	80053f4 <mg_http_reply>
                MG_ESC("level"), u->level);
}
 80197b8:	bf00      	nop
 80197ba:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80197be:	46bd      	mov	sp, r7
 80197c0:	bd80      	pop	{r7, pc}
 80197c2:	bf00      	nop
 80197c4:	0802852c 	.word	0x0802852c
 80197c8:	08028538 	.word	0x08028538
 80197cc:	00015180 	.word	0x00015180
 80197d0:	0802853c 	.word	0x0802853c
 80197d4:	080283b4 	.word	0x080283b4
 80197d8:	0800db29 	.word	0x0800db29
 80197dc:	08028598 	.word	0x08028598
 80197e0:	08028588 	.word	0x08028588

080197e4 <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b0c2      	sub	sp, #264	@ 0x108
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80197ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80197f2:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 80197f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80197f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8019802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019806:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8019808:	2b00      	cmp	r3, #0
 801980a:	d001      	beq.n	8019810 <handle_logout+0x2c>
 801980c:	4b0d      	ldr	r3, [pc, #52]	@ (8019844 <handle_logout+0x60>)
 801980e:	e000      	b.n	8019812 <handle_logout+0x2e>
 8019810:	4b0d      	ldr	r3, [pc, #52]	@ (8019848 <handle_logout+0x64>)
 8019812:	f107 0008 	add.w	r0, r7, #8
 8019816:	4a0d      	ldr	r2, [pc, #52]	@ (801984c <handle_logout+0x68>)
 8019818:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801981c:	f7f3 ff3e 	bl	800d69c <mg_snprintf>
  mg_http_reply(c, 401, cookie, "Unauthorized\n");
 8019820:	f107 0208 	add.w	r2, r7, #8
 8019824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8019828:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 801982c:	4b08      	ldr	r3, [pc, #32]	@ (8019850 <handle_logout+0x6c>)
 801982e:	f240 1191 	movw	r1, #401	@ 0x191
 8019832:	6800      	ldr	r0, [r0, #0]
 8019834:	f7eb fdde 	bl	80053f4 <mg_http_reply>
}
 8019838:	bf00      	nop
 801983a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 801983e:	46bd      	mov	sp, r7
 8019840:	bd80      	pop	{r7, pc}
 8019842:	bf00      	nop
 8019844:	0802852c 	.word	0x0802852c
 8019848:	08028538 	.word	0x08028538
 801984c:	080285a0 	.word	0x080285a0
 8019850:	08028604 	.word	0x08028604

08019854 <close_uploaded_file>:
struct action_state {
  char marker;       // Tells that we're an action connection
  bool (*fn)(void);  // Action status function
};

static void close_uploaded_file(struct upload_state *us) {
 8019854:	b580      	push	{r7, lr}
 8019856:	b082      	sub	sp, #8
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
  us->marker = 0;
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	2200      	movs	r2, #0
 8019860:	701a      	strb	r2, [r3, #0]
  if (us->fn_close != NULL && us->fp != NULL) {
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	691b      	ldr	r3, [r3, #16]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d00c      	beq.n	8019884 <close_uploaded_file+0x30>
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	68db      	ldr	r3, [r3, #12]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d008      	beq.n	8019884 <close_uploaded_file+0x30>
    us->fn_close(us->fp);
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	691b      	ldr	r3, [r3, #16]
 8019876:	687a      	ldr	r2, [r7, #4]
 8019878:	68d2      	ldr	r2, [r2, #12]
 801987a:	4610      	mov	r0, r2
 801987c:	4798      	blx	r3
    us->fp = NULL;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	2200      	movs	r2, #0
 8019882:	60da      	str	r2, [r3, #12]
  }
  memset(us, 0, sizeof(*us));
 8019884:	2218      	movs	r2, #24
 8019886:	2100      	movs	r1, #0
 8019888:	6878      	ldr	r0, [r7, #4]
 801988a:	f008 faab 	bl	8021de4 <memset>
}
 801988e:	bf00      	nop
 8019890:	3708      	adds	r7, #8
 8019892:	46bd      	mov	sp, r7
 8019894:	bd80      	pop	{r7, pc}
	...

08019898 <upload_handler>:

static void upload_handler(struct mg_connection *c, int ev, void *ev_data) {
 8019898:	b590      	push	{r4, r7, lr}
 801989a:	b08d      	sub	sp, #52	@ 0x34
 801989c:	af04      	add	r7, sp, #16
 801989e:	60f8      	str	r0, [r7, #12]
 80198a0:	60b9      	str	r1, [r7, #8]
 80198a2:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	3388      	adds	r3, #136	@ 0x88
 80198a8:	61fb      	str	r3, [r7, #28]
        c, "FAILURE: sizeof(c->data) == %lu, need %lu. Set -DMG_DATA_SIZE=XXX",
        sizeof(c->data), sizeof(*us));
    return;
  }
  // Catch uploaded file data for both MG_EV_READ and MG_EV_HTTP_HDRS
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 80198aa:	69fb      	ldr	r3, [r7, #28]
 80198ac:	781b      	ldrb	r3, [r3, #0]
 80198ae:	2b55      	cmp	r3, #85	@ 0x55
 80198b0:	f040 80ac 	bne.w	8019a0c <upload_handler+0x174>
 80198b4:	68bb      	ldr	r3, [r7, #8]
 80198b6:	2b07      	cmp	r3, #7
 80198b8:	f040 80a8 	bne.w	8019a0c <upload_handler+0x174>
 80198bc:	69fb      	ldr	r3, [r7, #28]
 80198be:	685b      	ldr	r3, [r3, #4]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	f000 80a3 	beq.w	8019a0c <upload_handler+0x174>
      c->recv.len > 0) {
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	f000 809e 	beq.w	8019a0c <upload_handler+0x174>
    size_t alignment = 128;  // Maximum flash write granularity (MCXN947 ROM)
 80198d0:	2380      	movs	r3, #128	@ 0x80
 80198d2:	61bb      	str	r3, [r7, #24]
    size_t aligned = (us->received + c->recv.len < us->expected)
 80198d4:	69fb      	ldr	r3, [r7, #28]
 80198d6:	689a      	ldr	r2, [r3, #8]
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80198dc:	441a      	add	r2, r3
 80198de:	69fb      	ldr	r3, [r7, #28]
 80198e0:	685b      	ldr	r3, [r3, #4]
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
                         : c->recv.len;  // Last write can be unaligned
 80198e2:	429a      	cmp	r2, r3
 80198e4:	d210      	bcs.n	8019908 <upload_handler+0x70>
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
 80198e6:	69bb      	ldr	r3, [r7, #24]
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d102      	bne.n	80198f2 <upload_handler+0x5a>
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80198f0:	e007      	b.n	8019902 <upload_handler+0x6a>
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80198f6:	69bb      	ldr	r3, [r7, #24]
 80198f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80198fc:	69ba      	ldr	r2, [r7, #24]
 80198fe:	fb02 f303 	mul.w	r3, r2, r3
 8019902:	617b      	str	r3, [r7, #20]
                         : c->recv.len;  // Last write can be unaligned
 8019904:	697b      	ldr	r3, [r7, #20]
 8019906:	e001      	b.n	801990c <upload_handler+0x74>
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    size_t aligned = (us->received + c->recv.len < us->expected)
 801990c:	617b      	str	r3, [r7, #20]
    bool ok = aligned > 0 ? us->fn_write(us->fp, c->recv.buf, aligned) : true;
 801990e:	697b      	ldr	r3, [r7, #20]
 8019910:	2b00      	cmp	r3, #0
 8019912:	d00a      	beq.n	801992a <upload_handler+0x92>
 8019914:	69fb      	ldr	r3, [r7, #28]
 8019916:	695b      	ldr	r3, [r3, #20]
 8019918:	69fa      	ldr	r2, [r7, #28]
 801991a:	68d0      	ldr	r0, [r2, #12]
 801991c:	68fa      	ldr	r2, [r7, #12]
 801991e:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8019920:	697a      	ldr	r2, [r7, #20]
 8019922:	4798      	blx	r3
 8019924:	4603      	mov	r3, r0
 8019926:	2b00      	cmp	r3, #0
 8019928:	d001      	beq.n	801992e <upload_handler+0x96>
 801992a:	2301      	movs	r3, #1
 801992c:	e000      	b.n	8019930 <upload_handler+0x98>
 801992e:	2300      	movs	r3, #0
 8019930:	74fb      	strb	r3, [r7, #19]
    us->received += aligned;
 8019932:	69fb      	ldr	r3, [r7, #28]
 8019934:	689a      	ldr	r2, [r3, #8]
 8019936:	697b      	ldr	r3, [r7, #20]
 8019938:	441a      	add	r2, r3
 801993a:	69fb      	ldr	r3, [r7, #28]
 801993c:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu chunk: %lu/%lu, %lu/%lu, ok: %d", c->id, aligned,
 801993e:	4b3a      	ldr	r3, [pc, #232]	@ (8019a28 <upload_handler+0x190>)
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	2b02      	cmp	r3, #2
 8019944:	dd17      	ble.n	8019976 <upload_handler+0xde>
 8019946:	4b39      	ldr	r3, [pc, #228]	@ (8019a2c <upload_handler+0x194>)
 8019948:	22fb      	movs	r2, #251	@ 0xfb
 801994a:	4939      	ldr	r1, [pc, #228]	@ (8019a30 <upload_handler+0x198>)
 801994c:	2003      	movs	r0, #3
 801994e:	f7ee faef 	bl	8007f30 <mg_log_prefix>
 8019952:	68fb      	ldr	r3, [r7, #12]
 8019954:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 801995a:	69fb      	ldr	r3, [r7, #28]
 801995c:	689b      	ldr	r3, [r3, #8]
 801995e:	69fa      	ldr	r2, [r7, #28]
 8019960:	6852      	ldr	r2, [r2, #4]
 8019962:	7cf9      	ldrb	r1, [r7, #19]
 8019964:	9102      	str	r1, [sp, #8]
 8019966:	9201      	str	r2, [sp, #4]
 8019968:	9300      	str	r3, [sp, #0]
 801996a:	4623      	mov	r3, r4
 801996c:	697a      	ldr	r2, [r7, #20]
 801996e:	4601      	mov	r1, r0
 8019970:	4830      	ldr	r0, [pc, #192]	@ (8019a34 <upload_handler+0x19c>)
 8019972:	f7ee fb2d 	bl	8007fd0 <mg_log>
              c->recv.len, us->received, us->expected, ok));
    mg_iobuf_del(&c->recv, 0, aligned);  // Delete received data
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	3338      	adds	r3, #56	@ 0x38
 801997a:	697a      	ldr	r2, [r7, #20]
 801997c:	2100      	movs	r1, #0
 801997e:	4618      	mov	r0, r3
 8019980:	f7ed fbe6 	bl	8007150 <mg_iobuf_del>
    if (ok == false) {
 8019984:	7cfb      	ldrb	r3, [r7, #19]
 8019986:	f083 0301 	eor.w	r3, r3, #1
 801998a:	b2db      	uxtb	r3, r3
 801998c:	2b00      	cmp	r3, #0
 801998e:	d011      	beq.n	80199b4 <upload_handler+0x11c>
      mg_http_reply(c, 400, "", "Upload error\n");
 8019990:	4b29      	ldr	r3, [pc, #164]	@ (8019a38 <upload_handler+0x1a0>)
 8019992:	4a2a      	ldr	r2, [pc, #168]	@ (8019a3c <upload_handler+0x1a4>)
 8019994:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019998:	68f8      	ldr	r0, [r7, #12]
 801999a:	f7eb fd2b 	bl	80053f4 <mg_http_reply>
      close_uploaded_file(us);
 801999e:	69f8      	ldr	r0, [r7, #28]
 80199a0:	f7ff ff58 	bl	8019854 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 80199a4:	68fa      	ldr	r2, [r7, #12]
 80199a6:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80199aa:	f043 0310 	orr.w	r3, r3, #16
 80199ae:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 80199b2:	e02b      	b.n	8019a0c <upload_handler+0x174>
    } else if (us->received >= us->expected) {
 80199b4:	69fb      	ldr	r3, [r7, #28]
 80199b6:	689a      	ldr	r2, [r3, #8]
 80199b8:	69fb      	ldr	r3, [r7, #28]
 80199ba:	685b      	ldr	r3, [r3, #4]
 80199bc:	429a      	cmp	r2, r3
 80199be:	d325      	bcc.n	8019a0c <upload_handler+0x174>
      // Uploaded everything. Send response back
      MG_INFO(("%lu done, %lu bytes", c->id, us->received));
 80199c0:	4b19      	ldr	r3, [pc, #100]	@ (8019a28 <upload_handler+0x190>)
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	2b01      	cmp	r3, #1
 80199c6:	dd0e      	ble.n	80199e6 <upload_handler+0x14e>
 80199c8:	4b18      	ldr	r3, [pc, #96]	@ (8019a2c <upload_handler+0x194>)
 80199ca:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80199ce:	4918      	ldr	r1, [pc, #96]	@ (8019a30 <upload_handler+0x198>)
 80199d0:	2002      	movs	r0, #2
 80199d2:	f7ee faad 	bl	8007f30 <mg_log_prefix>
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80199da:	69fb      	ldr	r3, [r7, #28]
 80199dc:	689b      	ldr	r3, [r3, #8]
 80199de:	461a      	mov	r2, r3
 80199e0:	4817      	ldr	r0, [pc, #92]	@ (8019a40 <upload_handler+0x1a8>)
 80199e2:	f7ee faf5 	bl	8007fd0 <mg_log>
      mg_http_reply(c, 200, NULL, "%lu ok\n", us->received);
 80199e6:	69fb      	ldr	r3, [r7, #28]
 80199e8:	689b      	ldr	r3, [r3, #8]
 80199ea:	9300      	str	r3, [sp, #0]
 80199ec:	4b15      	ldr	r3, [pc, #84]	@ (8019a44 <upload_handler+0x1ac>)
 80199ee:	2200      	movs	r2, #0
 80199f0:	21c8      	movs	r1, #200	@ 0xc8
 80199f2:	68f8      	ldr	r0, [r7, #12]
 80199f4:	f7eb fcfe 	bl	80053f4 <mg_http_reply>
      close_uploaded_file(us);
 80199f8:	69f8      	ldr	r0, [r7, #28]
 80199fa:	f7ff ff2b 	bl	8019854 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 80199fe:	68fa      	ldr	r2, [r7, #12]
 8019a00:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8019a04:	f043 0310 	orr.w	r3, r3, #16
 8019a08:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    }
  }

  // Close uploading file descriptor
  if (us->marker == 'U' && ev == MG_EV_CLOSE) close_uploaded_file(us);
 8019a0c:	69fb      	ldr	r3, [r7, #28]
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	2b55      	cmp	r3, #85	@ 0x55
 8019a12:	d105      	bne.n	8019a20 <upload_handler+0x188>
 8019a14:	68bb      	ldr	r3, [r7, #8]
 8019a16:	2b09      	cmp	r3, #9
 8019a18:	d102      	bne.n	8019a20 <upload_handler+0x188>
 8019a1a:	69f8      	ldr	r0, [r7, #28]
 8019a1c:	f7ff ff1a 	bl	8019854 <close_uploaded_file>
  (void) ev_data;
}
 8019a20:	3724      	adds	r7, #36	@ 0x24
 8019a22:	46bd      	mov	sp, r7
 8019a24:	bd90      	pop	{r4, r7, pc}
 8019a26:	bf00      	nop
 8019a28:	24000240 	.word	0x24000240
 8019a2c:	080351fc 	.word	0x080351fc
 8019a30:	080284cc 	.word	0x080284cc
 8019a34:	08028614 	.word	0x08028614
 8019a38:	08028638 	.word	0x08028638
 8019a3c:	08028538 	.word	0x08028538
 8019a40:	08028648 	.word	0x08028648
 8019a44:	0802865c 	.word	0x0802865c

08019a48 <prep_upload>:

static void prep_upload(struct mg_connection *c, struct mg_http_message *hm,
                        void *(*fn_open)(char *, size_t),
                        bool (*fn_close)(void *),
                        bool (*fn_write)(void *, void *, size_t)) {
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b0a8      	sub	sp, #160	@ 0xa0
 8019a4c:	af02      	add	r7, sp, #8
 8019a4e:	60f8      	str	r0, [r7, #12]
 8019a50:	60b9      	str	r1, [r7, #8]
 8019a52:	607a      	str	r2, [r7, #4]
 8019a54:	603b      	str	r3, [r7, #0]
  struct upload_state *us = (struct upload_state *) c->data;
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	3388      	adds	r3, #136	@ 0x88
 8019a5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  struct mg_str parts[3];
  char path[MG_PATH_MAX];
  memset(us, 0, sizeof(*us));                    // Cleanup upload state
 8019a5e:	2218      	movs	r2, #24
 8019a60:	2100      	movs	r1, #0
 8019a62:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8019a66:	f008 f9bd 	bl	8021de4 <memset>
  memset(parts, 0, sizeof(parts));               // Init match parts
 8019a6a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8019a6e:	2218      	movs	r2, #24
 8019a70:	2100      	movs	r1, #0
 8019a72:	4618      	mov	r0, r3
 8019a74:	f008 f9b6 	bl	8021de4 <memset>
  mg_match(hm->uri, mg_str("/api/*/#"), parts);  // Fetch file name
 8019a78:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8019a7c:	493e      	ldr	r1, [pc, #248]	@ (8019b78 <prep_upload+0x130>)
 8019a7e:	4618      	mov	r0, r3
 8019a80:	f7f5 f91e 	bl	800ecc0 <mg_str_s>
 8019a84:	68b9      	ldr	r1, [r7, #8]
 8019a86:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8019a8a:	9300      	str	r3, [sp, #0]
 8019a8c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8019a90:	cb0c      	ldmia	r3, {r2, r3}
 8019a92:	3108      	adds	r1, #8
 8019a94:	c903      	ldmia	r1, {r0, r1}
 8019a96:	f7f5 fa1d 	bl	800eed4 <mg_match>
  mg_url_decode(parts[1].buf, parts[1].len, path, sizeof(path), 0);
 8019a9a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8019a9c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8019aa0:	f107 0210 	add.w	r2, r7, #16
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	9300      	str	r3, [sp, #0]
 8019aa8:	2364      	movs	r3, #100	@ 0x64
 8019aaa:	f7ea fb8a 	bl	80041c2 <mg_url_decode>
  us->fp = fn_open(path, hm->body.len);
 8019aae:	68bb      	ldr	r3, [r7, #8]
 8019ab0:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 8019ab4:	f107 0210 	add.w	r2, r7, #16
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	4610      	mov	r0, r2
 8019abc:	4798      	blx	r3
 8019abe:	4602      	mov	r2, r0
 8019ac0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019ac4:	60da      	str	r2, [r3, #12]
  MG_DEBUG(("file: [%s] size: %lu fp: %p", path, hm->body.len, us->fp));
 8019ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8019b7c <prep_upload+0x134>)
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	2b02      	cmp	r3, #2
 8019acc:	dd11      	ble.n	8019af2 <prep_upload+0xaa>
 8019ace:	4b2c      	ldr	r3, [pc, #176]	@ (8019b80 <prep_upload+0x138>)
 8019ad0:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 8019ad4:	492b      	ldr	r1, [pc, #172]	@ (8019b84 <prep_upload+0x13c>)
 8019ad6:	2003      	movs	r0, #3
 8019ad8:	f7ee fa2a 	bl	8007f30 <mg_log_prefix>
 8019adc:	68bb      	ldr	r3, [r7, #8]
 8019ade:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019ae2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019ae6:	68db      	ldr	r3, [r3, #12]
 8019ae8:	f107 0110 	add.w	r1, r7, #16
 8019aec:	4826      	ldr	r0, [pc, #152]	@ (8019b88 <prep_upload+0x140>)
 8019aee:	f7ee fa6f 	bl	8007fd0 <mg_log>
  us->marker = 'U';  // Mark us as an upload connection
 8019af2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019af6:	2255      	movs	r2, #85	@ 0x55
 8019af8:	701a      	strb	r2, [r3, #0]
  if (us->fp == NULL) {
 8019afa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019afe:	68db      	ldr	r3, [r3, #12]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d10e      	bne.n	8019b22 <prep_upload+0xda>
    mg_http_reply(c, 400, JSON_HEADERS, "File open error\n");
 8019b04:	4b21      	ldr	r3, [pc, #132]	@ (8019b8c <prep_upload+0x144>)
 8019b06:	4a22      	ldr	r2, [pc, #136]	@ (8019b90 <prep_upload+0x148>)
 8019b08:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019b0c:	68f8      	ldr	r0, [r7, #12]
 8019b0e:	f7eb fc71 	bl	80053f4 <mg_http_reply>
    c->is_draining = 1;
 8019b12:	68fa      	ldr	r2, [r7, #12]
 8019b14:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8019b18:	f043 0310 	orr.w	r3, r3, #16
 8019b1c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
    c->fn = upload_handler;                   // Change event handler function
    c->pfn = NULL;                            // Detach HTTP handler
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
  }
}
 8019b20:	e026      	b.n	8019b70 <prep_upload+0x128>
    us->expected = hm->body.len;              // Store number of bytes we expect
 8019b22:	68bb      	ldr	r3, [r7, #8]
 8019b24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019b2c:	605a      	str	r2, [r3, #4]
    us->fn_close = fn_close;                  // Store closing function
 8019b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019b32:	683a      	ldr	r2, [r7, #0]
 8019b34:	611a      	str	r2, [r3, #16]
    us->fn_write = fn_write;                  // Store writing function
 8019b36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019b3a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8019b3e:	615a      	str	r2, [r3, #20]
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8019b46:	68bb      	ldr	r3, [r7, #8]
 8019b48:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8019b4c:	461a      	mov	r2, r3
 8019b4e:	2100      	movs	r1, #0
 8019b50:	f7ed fafe 	bl	8007150 <mg_iobuf_del>
    c->fn = upload_handler;                   // Change event handler function
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	4a0f      	ldr	r2, [pc, #60]	@ (8019b94 <prep_upload+0x14c>)
 8019b58:	679a      	str	r2, [r3, #120]	@ 0x78
    c->pfn = NULL;                            // Detach HTTP handler
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	3340      	adds	r3, #64	@ 0x40
 8019b66:	461a      	mov	r2, r3
 8019b68:	2107      	movs	r1, #7
 8019b6a:	68f8      	ldr	r0, [r7, #12]
 8019b6c:	f7e8 fed6 	bl	800291c <mg_call>
}
 8019b70:	bf00      	nop
 8019b72:	3798      	adds	r7, #152	@ 0x98
 8019b74:	46bd      	mov	sp, r7
 8019b76:	bd80      	pop	{r7, pc}
 8019b78:	08028664 	.word	0x08028664
 8019b7c:	24000240 	.word	0x24000240
 8019b80:	0803520c 	.word	0x0803520c
 8019b84:	080284cc 	.word	0x080284cc
 8019b88:	08028670 	.word	0x08028670
 8019b8c:	0802868c 	.word	0x0802868c
 8019b90:	080286a0 	.word	0x080286a0
 8019b94:	08019899 	.word	0x08019899

08019b98 <handle_uploads>:

static void handle_uploads(struct mg_connection *c, int ev, void *ev_data) {
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b08c      	sub	sp, #48	@ 0x30
 8019b9c:	af02      	add	r7, sp, #8
 8019b9e:	60f8      	str	r0, [r7, #12]
 8019ba0:	60b9      	str	r1, [r7, #8]
 8019ba2:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	3388      	adds	r3, #136	@ 0x88
 8019ba8:	627b      	str	r3, [r7, #36]	@ 0x24

  // Catch /upload requests early, without buffering whole body
  // When we receive MG_EV_HTTP_HDRS event, that means we've received all
  // HTTP headers but not necessarily full HTTP body
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0) {
 8019baa:	68bb      	ldr	r3, [r7, #8]
 8019bac:	2b0a      	cmp	r3, #10
 8019bae:	d160      	bne.n	8019c72 <handle_uploads+0xda>
 8019bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bb2:	781b      	ldrb	r3, [r3, #0]
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d15c      	bne.n	8019c72 <handle_uploads+0xda>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	623b      	str	r3, [r7, #32]
    struct apihandler *h = find_handler(hm);
 8019bbc:	6a38      	ldr	r0, [r7, #32]
 8019bbe:	f7ff fc1b 	bl	80193f8 <find_handler>
 8019bc2:	61f8      	str	r0, [r7, #28]
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 8019bc4:	6a38      	ldr	r0, [r7, #32]
 8019bc6:	f7ff fcbf 	bl	8019548 <authenticate>
 8019bca:	61b8      	str	r0, [r7, #24]
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) &&
 8019bcc:	f107 0310 	add.w	r3, r7, #16
 8019bd0:	492a      	ldr	r1, [pc, #168]	@ (8019c7c <handle_uploads+0xe4>)
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	f7f5 f874 	bl	800ecc0 <mg_str_s>
 8019bd8:	6a39      	ldr	r1, [r7, #32]
 8019bda:	2300      	movs	r3, #0
 8019bdc:	9300      	str	r3, [sp, #0]
 8019bde:	f107 0310 	add.w	r3, r7, #16
 8019be2:	cb0c      	ldmia	r3, {r2, r3}
 8019be4:	3108      	adds	r1, #8
 8019be6:	c903      	ldmia	r1, {r0, r1}
 8019be8:	f7f5 f974 	bl	800eed4 <mg_match>
 8019bec:	4603      	mov	r3, r0
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d01e      	beq.n	8019c30 <handle_uploads+0x98>
 8019bf2:	69bb      	ldr	r3, [r7, #24]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d013      	beq.n	8019c20 <handle_uploads+0x88>
        (u == NULL ||
 8019bf8:	69fb      	ldr	r3, [r7, #28]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d018      	beq.n	8019c30 <handle_uploads+0x98>
         (h != NULL && (u->level < h->read_level ||
 8019bfe:	69bb      	ldr	r3, [r7, #24]
 8019c00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019c02:	69fb      	ldr	r3, [r7, #28]
 8019c04:	68db      	ldr	r3, [r3, #12]
 8019c06:	429a      	cmp	r2, r3
 8019c08:	db0a      	blt.n	8019c20 <handle_uploads+0x88>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 8019c0a:	6a3b      	ldr	r3, [r7, #32]
 8019c0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
         (h != NULL && (u->level < h->read_level ||
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d00d      	beq.n	8019c30 <handle_uploads+0x98>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 8019c14:	69bb      	ldr	r3, [r7, #24]
 8019c16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019c18:	69fb      	ldr	r3, [r7, #28]
 8019c1a:	691b      	ldr	r3, [r3, #16]
 8019c1c:	429a      	cmp	r2, r3
 8019c1e:	da07      	bge.n	8019c30 <handle_uploads+0x98>
      // MG_INFO(("DENY: %d, %d %d", u->level, h->read_level, h->write_level));
      mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 8019c20:	4b17      	ldr	r3, [pc, #92]	@ (8019c80 <handle_uploads+0xe8>)
 8019c22:	4a18      	ldr	r2, [pc, #96]	@ (8019c84 <handle_uploads+0xec>)
 8019c24:	f240 1193 	movw	r1, #403	@ 0x193
 8019c28:	68f8      	ldr	r0, [r7, #12]
 8019c2a:	f7eb fbe3 	bl	80053f4 <mg_http_reply>
            (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
      // OTA/upload endpoints
      prep_upload(c, hm, h->opener, h->closer, h->writer);
    }
  }
}
 8019c2e:	e020      	b.n	8019c72 <handle_uploads+0xda>
        if (h != NULL &&
 8019c30:	69fb      	ldr	r3, [r7, #28]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d01d      	beq.n	8019c72 <handle_uploads+0xda>
            (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8019c36:	69fb      	ldr	r3, [r7, #28]
 8019c38:	685b      	ldr	r3, [r3, #4]
 8019c3a:	4913      	ldr	r1, [pc, #76]	@ (8019c88 <handle_uploads+0xf0>)
 8019c3c:	4618      	mov	r0, r3
 8019c3e:	f7e6 fb4f 	bl	80002e0 <strcmp>
 8019c42:	4603      	mov	r3, r0
        if (h != NULL &&
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d008      	beq.n	8019c5a <handle_uploads+0xc2>
            (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8019c48:	69fb      	ldr	r3, [r7, #28]
 8019c4a:	685b      	ldr	r3, [r3, #4]
 8019c4c:	490f      	ldr	r1, [pc, #60]	@ (8019c8c <handle_uploads+0xf4>)
 8019c4e:	4618      	mov	r0, r3
 8019c50:	f7e6 fb46 	bl	80002e0 <strcmp>
 8019c54:	4603      	mov	r3, r0
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d10b      	bne.n	8019c72 <handle_uploads+0xda>
      prep_upload(c, hm, h->opener, h->closer, h->writer);
 8019c5a:	69fb      	ldr	r3, [r7, #28]
 8019c5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019c5e:	69fb      	ldr	r3, [r7, #28]
 8019c60:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8019c62:	69fb      	ldr	r3, [r7, #28]
 8019c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019c66:	9300      	str	r3, [sp, #0]
 8019c68:	460b      	mov	r3, r1
 8019c6a:	6a39      	ldr	r1, [r7, #32]
 8019c6c:	68f8      	ldr	r0, [r7, #12]
 8019c6e:	f7ff feeb 	bl	8019a48 <prep_upload>
}
 8019c72:	bf00      	nop
 8019c74:	3728      	adds	r7, #40	@ 0x28
 8019c76:	46bd      	mov	sp, r7
 8019c78:	bd80      	pop	{r7, pc}
 8019c7a:	bf00      	nop
 8019c7c:	080286dc 	.word	0x080286dc
 8019c80:	080286e4 	.word	0x080286e4
 8019c84:	080286a0 	.word	0x080286a0
 8019c88:	0802846c 	.word	0x0802846c
 8019c8c:	0802845c 	.word	0x0802845c

08019c90 <handle_action>:

static void handle_action(struct mg_connection *c, struct mg_http_message *hm,
                          bool (*check_fn)(void), void (*start_fn)(void)) {
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b088      	sub	sp, #32
 8019c94:	af02      	add	r7, sp, #8
 8019c96:	60f8      	str	r0, [r7, #12]
 8019c98:	60b9      	str	r1, [r7, #8]
 8019c9a:	607a      	str	r2, [r7, #4]
 8019c9c:	603b      	str	r3, [r7, #0]
  if (hm->body.len > 0) {
 8019c9e:	68bb      	ldr	r3, [r7, #8]
 8019ca0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d017      	beq.n	8019cd8 <handle_action+0x48>
    start_fn();
 8019ca8:	683b      	ldr	r3, [r7, #0]
 8019caa:	4798      	blx	r3
    if (check_fn()) {
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	4798      	blx	r3
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d009      	beq.n	8019cca <handle_action+0x3a>
      struct action_state *as = (struct action_state *) c->data;
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	3388      	adds	r3, #136	@ 0x88
 8019cba:	617b      	str	r3, [r7, #20]
      as->marker = 'A';
 8019cbc:	697b      	ldr	r3, [r7, #20]
 8019cbe:	2241      	movs	r2, #65	@ 0x41
 8019cc0:	701a      	strb	r2, [r3, #0]
      as->fn = check_fn;
 8019cc2:	697b      	ldr	r3, [r7, #20]
 8019cc4:	687a      	ldr	r2, [r7, #4]
 8019cc6:	605a      	str	r2, [r3, #4]
      mg_http_reply(c, 200, JSON_HEADERS, "false");
    }
  } else {
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
  }
}
 8019cc8:	e015      	b.n	8019cf6 <handle_action+0x66>
      mg_http_reply(c, 200, JSON_HEADERS, "false");
 8019cca:	4b0d      	ldr	r3, [pc, #52]	@ (8019d00 <handle_action+0x70>)
 8019ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8019d04 <handle_action+0x74>)
 8019cce:	21c8      	movs	r1, #200	@ 0xc8
 8019cd0:	68f8      	ldr	r0, [r7, #12]
 8019cd2:	f7eb fb8f 	bl	80053f4 <mg_http_reply>
}
 8019cd6:	e00e      	b.n	8019cf6 <handle_action+0x66>
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	4798      	blx	r3
 8019cdc:	4603      	mov	r3, r0
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d001      	beq.n	8019ce6 <handle_action+0x56>
 8019ce2:	4b09      	ldr	r3, [pc, #36]	@ (8019d08 <handle_action+0x78>)
 8019ce4:	e000      	b.n	8019ce8 <handle_action+0x58>
 8019ce6:	4b06      	ldr	r3, [pc, #24]	@ (8019d00 <handle_action+0x70>)
 8019ce8:	9300      	str	r3, [sp, #0]
 8019cea:	4b08      	ldr	r3, [pc, #32]	@ (8019d0c <handle_action+0x7c>)
 8019cec:	4a05      	ldr	r2, [pc, #20]	@ (8019d04 <handle_action+0x74>)
 8019cee:	21c8      	movs	r1, #200	@ 0xc8
 8019cf0:	68f8      	ldr	r0, [r7, #12]
 8019cf2:	f7eb fb7f 	bl	80053f4 <mg_http_reply>
}
 8019cf6:	bf00      	nop
 8019cf8:	3718      	adds	r7, #24
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	bd80      	pop	{r7, pc}
 8019cfe:	bf00      	nop
 8019d00:	080286f4 	.word	0x080286f4
 8019d04:	080286a0 	.word	0x080286a0
 8019d08:	080286fc 	.word	0x080286fc
 8019d0c:	0802850c 	.word	0x0802850c

08019d10 <print_struct>:

size_t print_struct(void (*out)(char, void *), void *ptr, va_list *ap) {
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b08e      	sub	sp, #56	@ 0x38
 8019d14:	af04      	add	r7, sp, #16
 8019d16:	60f8      	str	r0, [r7, #12]
 8019d18:	60b9      	str	r1, [r7, #8]
 8019d1a:	607a      	str	r2, [r7, #4]
  struct apihandler *h = va_arg(*ap, struct apihandler *);
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	1d19      	adds	r1, r3, #4
 8019d22:	687a      	ldr	r2, [r7, #4]
 8019d24:	6011      	str	r1, [r2, #0]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	61bb      	str	r3, [r7, #24]
  char *data = va_arg(*ap, char *);
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	1d19      	adds	r1, r3, #4
 8019d30:	687a      	ldr	r2, [r7, #4]
 8019d32:	6011      	str	r1, [r2, #0]
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 8019d38:	2300      	movs	r3, #0
 8019d3a:	623b      	str	r3, [r7, #32]
  for (i = 0; h->attributes[i].name != NULL; i++) {
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d40:	e0bf      	b.n	8019ec2 <print_struct+0x1b2>
    char *attrptr = data + h->attributes[i].offset;
 8019d42:	69bb      	ldr	r3, [r7, #24]
 8019d44:	6999      	ldr	r1, [r3, #24]
 8019d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d48:	4613      	mov	r3, r2
 8019d4a:	005b      	lsls	r3, r3, #1
 8019d4c:	4413      	add	r3, r2
 8019d4e:	00db      	lsls	r3, r3, #3
 8019d50:	440b      	add	r3, r1
 8019d52:	68db      	ldr	r3, [r3, #12]
 8019d54:	697a      	ldr	r2, [r7, #20]
 8019d56:	4413      	add	r3, r2
 8019d58:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",",
 8019d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d101      	bne.n	8019d64 <print_struct+0x54>
 8019d60:	4860      	ldr	r0, [pc, #384]	@ (8019ee4 <print_struct+0x1d4>)
 8019d62:	e000      	b.n	8019d66 <print_struct+0x56>
 8019d64:	4860      	ldr	r0, [pc, #384]	@ (8019ee8 <print_struct+0x1d8>)
                      MG_ESC(h->attributes[i].name));
 8019d66:	69bb      	ldr	r3, [r7, #24]
 8019d68:	6999      	ldr	r1, [r3, #24]
 8019d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d6c:	4613      	mov	r3, r2
 8019d6e:	005b      	lsls	r3, r3, #1
 8019d70:	4413      	add	r3, r2
 8019d72:	00db      	lsls	r3, r3, #3
 8019d74:	440b      	add	r3, r1
 8019d76:	681b      	ldr	r3, [r3, #0]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",",
 8019d78:	9302      	str	r3, [sp, #8]
 8019d7a:	2300      	movs	r3, #0
 8019d7c:	9301      	str	r3, [sp, #4]
 8019d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8019eec <print_struct+0x1dc>)
 8019d80:	9300      	str	r3, [sp, #0]
 8019d82:	4603      	mov	r3, r0
 8019d84:	4a5a      	ldr	r2, [pc, #360]	@ (8019ef0 <print_struct+0x1e0>)
 8019d86:	68b9      	ldr	r1, [r7, #8]
 8019d88:	68f8      	ldr	r0, [r7, #12]
 8019d8a:	f7e9 fa7a 	bl	8003282 <mg_xprintf>
 8019d8e:	4602      	mov	r2, r0
 8019d90:	6a3b      	ldr	r3, [r7, #32]
 8019d92:	4413      	add	r3, r2
 8019d94:	623b      	str	r3, [r7, #32]
    if (strcmp(h->attributes[i].type, "int") == 0) {
 8019d96:	69bb      	ldr	r3, [r7, #24]
 8019d98:	6999      	ldr	r1, [r3, #24]
 8019d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d9c:	4613      	mov	r3, r2
 8019d9e:	005b      	lsls	r3, r3, #1
 8019da0:	4413      	add	r3, r2
 8019da2:	00db      	lsls	r3, r3, #3
 8019da4:	440b      	add	r3, r1
 8019da6:	685b      	ldr	r3, [r3, #4]
 8019da8:	4952      	ldr	r1, [pc, #328]	@ (8019ef4 <print_struct+0x1e4>)
 8019daa:	4618      	mov	r0, r3
 8019dac:	f7e6 fa98 	bl	80002e0 <strcmp>
 8019db0:	4603      	mov	r3, r0
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d10b      	bne.n	8019dce <print_struct+0xbe>
      len += mg_xprintf(out, ptr, "%d", *(int *) attrptr);
 8019db6:	693b      	ldr	r3, [r7, #16]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	4a4f      	ldr	r2, [pc, #316]	@ (8019ef8 <print_struct+0x1e8>)
 8019dbc:	68b9      	ldr	r1, [r7, #8]
 8019dbe:	68f8      	ldr	r0, [r7, #12]
 8019dc0:	f7e9 fa5f 	bl	8003282 <mg_xprintf>
 8019dc4:	4602      	mov	r2, r0
 8019dc6:	6a3b      	ldr	r3, [r7, #32]
 8019dc8:	4413      	add	r3, r2
 8019dca:	623b      	str	r3, [r7, #32]
 8019dcc:	e076      	b.n	8019ebc <print_struct+0x1ac>
    } else if (strcmp(h->attributes[i].type, "double") == 0) {
 8019dce:	69bb      	ldr	r3, [r7, #24]
 8019dd0:	6999      	ldr	r1, [r3, #24]
 8019dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019dd4:	4613      	mov	r3, r2
 8019dd6:	005b      	lsls	r3, r3, #1
 8019dd8:	4413      	add	r3, r2
 8019dda:	00db      	lsls	r3, r3, #3
 8019ddc:	440b      	add	r3, r1
 8019dde:	685b      	ldr	r3, [r3, #4]
 8019de0:	4946      	ldr	r1, [pc, #280]	@ (8019efc <print_struct+0x1ec>)
 8019de2:	4618      	mov	r0, r3
 8019de4:	f7e6 fa7c 	bl	80002e0 <strcmp>
 8019de8:	4603      	mov	r3, r0
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d11d      	bne.n	8019e2a <print_struct+0x11a>
      const char *fmt = h->attributes[i].format;
 8019dee:	69bb      	ldr	r3, [r7, #24]
 8019df0:	6999      	ldr	r1, [r3, #24]
 8019df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019df4:	4613      	mov	r3, r2
 8019df6:	005b      	lsls	r3, r3, #1
 8019df8:	4413      	add	r3, r2
 8019dfa:	00db      	lsls	r3, r3, #3
 8019dfc:	440b      	add	r3, r1
 8019dfe:	689b      	ldr	r3, [r3, #8]
 8019e00:	61fb      	str	r3, [r7, #28]
      if (fmt == NULL) fmt = "%g";
 8019e02:	69fb      	ldr	r3, [r7, #28]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d101      	bne.n	8019e0c <print_struct+0xfc>
 8019e08:	4b3d      	ldr	r3, [pc, #244]	@ (8019f00 <print_struct+0x1f0>)
 8019e0a:	61fb      	str	r3, [r7, #28]
      len += mg_xprintf(out, ptr, fmt, *(double *) attrptr);
 8019e0c:	693b      	ldr	r3, [r7, #16]
 8019e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e12:	e9cd 2300 	strd	r2, r3, [sp]
 8019e16:	69fa      	ldr	r2, [r7, #28]
 8019e18:	68b9      	ldr	r1, [r7, #8]
 8019e1a:	68f8      	ldr	r0, [r7, #12]
 8019e1c:	f7e9 fa31 	bl	8003282 <mg_xprintf>
 8019e20:	4602      	mov	r2, r0
 8019e22:	6a3b      	ldr	r3, [r7, #32]
 8019e24:	4413      	add	r3, r2
 8019e26:	623b      	str	r3, [r7, #32]
 8019e28:	e048      	b.n	8019ebc <print_struct+0x1ac>
    } else if (strcmp(h->attributes[i].type, "bool") == 0) {
 8019e2a:	69bb      	ldr	r3, [r7, #24]
 8019e2c:	6999      	ldr	r1, [r3, #24]
 8019e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019e30:	4613      	mov	r3, r2
 8019e32:	005b      	lsls	r3, r3, #1
 8019e34:	4413      	add	r3, r2
 8019e36:	00db      	lsls	r3, r3, #3
 8019e38:	440b      	add	r3, r1
 8019e3a:	685b      	ldr	r3, [r3, #4]
 8019e3c:	4931      	ldr	r1, [pc, #196]	@ (8019f04 <print_struct+0x1f4>)
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f7e6 fa4e 	bl	80002e0 <strcmp>
 8019e44:	4603      	mov	r3, r0
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d110      	bne.n	8019e6c <print_struct+0x15c>
      len += mg_xprintf(out, ptr, "%s", *(bool *) attrptr ? "true" : "false");
 8019e4a:	693b      	ldr	r3, [r7, #16]
 8019e4c:	781b      	ldrb	r3, [r3, #0]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d001      	beq.n	8019e56 <print_struct+0x146>
 8019e52:	4b2d      	ldr	r3, [pc, #180]	@ (8019f08 <print_struct+0x1f8>)
 8019e54:	e000      	b.n	8019e58 <print_struct+0x148>
 8019e56:	4b2d      	ldr	r3, [pc, #180]	@ (8019f0c <print_struct+0x1fc>)
 8019e58:	4a2d      	ldr	r2, [pc, #180]	@ (8019f10 <print_struct+0x200>)
 8019e5a:	68b9      	ldr	r1, [r7, #8]
 8019e5c:	68f8      	ldr	r0, [r7, #12]
 8019e5e:	f7e9 fa10 	bl	8003282 <mg_xprintf>
 8019e62:	4602      	mov	r2, r0
 8019e64:	6a3b      	ldr	r3, [r7, #32]
 8019e66:	4413      	add	r3, r2
 8019e68:	623b      	str	r3, [r7, #32]
 8019e6a:	e027      	b.n	8019ebc <print_struct+0x1ac>
    } else if (strcmp(h->attributes[i].type, "string") == 0) {
 8019e6c:	69bb      	ldr	r3, [r7, #24]
 8019e6e:	6999      	ldr	r1, [r3, #24]
 8019e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019e72:	4613      	mov	r3, r2
 8019e74:	005b      	lsls	r3, r3, #1
 8019e76:	4413      	add	r3, r2
 8019e78:	00db      	lsls	r3, r3, #3
 8019e7a:	440b      	add	r3, r1
 8019e7c:	685b      	ldr	r3, [r3, #4]
 8019e7e:	4925      	ldr	r1, [pc, #148]	@ (8019f14 <print_struct+0x204>)
 8019e80:	4618      	mov	r0, r3
 8019e82:	f7e6 fa2d 	bl	80002e0 <strcmp>
 8019e86:	4603      	mov	r3, r0
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d10e      	bne.n	8019eaa <print_struct+0x19a>
      len += mg_xprintf(out, ptr, "%m", MG_ESC(attrptr));
 8019e8c:	693b      	ldr	r3, [r7, #16]
 8019e8e:	9301      	str	r3, [sp, #4]
 8019e90:	2300      	movs	r3, #0
 8019e92:	9300      	str	r3, [sp, #0]
 8019e94:	4b15      	ldr	r3, [pc, #84]	@ (8019eec <print_struct+0x1dc>)
 8019e96:	4a20      	ldr	r2, [pc, #128]	@ (8019f18 <print_struct+0x208>)
 8019e98:	68b9      	ldr	r1, [r7, #8]
 8019e9a:	68f8      	ldr	r0, [r7, #12]
 8019e9c:	f7e9 f9f1 	bl	8003282 <mg_xprintf>
 8019ea0:	4602      	mov	r2, r0
 8019ea2:	6a3b      	ldr	r3, [r7, #32]
 8019ea4:	4413      	add	r3, r2
 8019ea6:	623b      	str	r3, [r7, #32]
 8019ea8:	e008      	b.n	8019ebc <print_struct+0x1ac>
    } else {
      len += mg_xprintf(out, ptr, "null");
 8019eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8019f1c <print_struct+0x20c>)
 8019eac:	68b9      	ldr	r1, [r7, #8]
 8019eae:	68f8      	ldr	r0, [r7, #12]
 8019eb0:	f7e9 f9e7 	bl	8003282 <mg_xprintf>
 8019eb4:	4602      	mov	r2, r0
 8019eb6:	6a3b      	ldr	r3, [r7, #32]
 8019eb8:	4413      	add	r3, r2
 8019eba:	623b      	str	r3, [r7, #32]
  for (i = 0; h->attributes[i].name != NULL; i++) {
 8019ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ebe:	3301      	adds	r3, #1
 8019ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8019ec2:	69bb      	ldr	r3, [r7, #24]
 8019ec4:	6999      	ldr	r1, [r3, #24]
 8019ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019ec8:	4613      	mov	r3, r2
 8019eca:	005b      	lsls	r3, r3, #1
 8019ecc:	4413      	add	r3, r2
 8019ece:	00db      	lsls	r3, r3, #3
 8019ed0:	440b      	add	r3, r1
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	f47f af34 	bne.w	8019d42 <print_struct+0x32>
    }
  }
  return len;
 8019eda:	6a3b      	ldr	r3, [r7, #32]
}
 8019edc:	4618      	mov	r0, r3
 8019ede:	3728      	adds	r7, #40	@ 0x28
 8019ee0:	46bd      	mov	sp, r7
 8019ee2:	bd80      	pop	{r7, pc}
 8019ee4:	08028538 	.word	0x08028538
 8019ee8:	08028704 	.word	0x08028704
 8019eec:	0800db29 	.word	0x0800db29
 8019ef0:	08028708 	.word	0x08028708
 8019ef4:	08028368 	.word	0x08028368
 8019ef8:	08028710 	.word	0x08028710
 8019efc:	080283f8 	.word	0x080283f8
 8019f00:	08028714 	.word	0x08028714
 8019f04:	080283a4 	.word	0x080283a4
 8019f08:	080286fc 	.word	0x080286fc
 8019f0c:	080286f4 	.word	0x080286f4
 8019f10:	0802850c 	.word	0x0802850c
 8019f14:	08028394 	.word	0x08028394
 8019f18:	08028718 	.word	0x08028718
 8019f1c:	0802871c 	.word	0x0802871c

08019f20 <handle_object>:

static void handle_object(struct mg_connection *c, struct mg_http_message *hm,
                          struct apihandler *h) {
 8019f20:	b580      	push	{r7, lr}
 8019f22:	b0a8      	sub	sp, #160	@ 0xa0
 8019f24:	af04      	add	r7, sp, #16
 8019f26:	60f8      	str	r0, [r7, #12]
 8019f28:	60b9      	str	r1, [r7, #8]
 8019f2a:	607a      	str	r2, [r7, #4]
  void *data = calloc(1, h->data_size);
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f30:	4619      	mov	r1, r3
 8019f32:	2001      	movs	r0, #1
 8019f34:	f006 fca4 	bl	8020880 <calloc>
 8019f38:	4603      	mov	r3, r0
 8019f3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h->getter(data);
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	69db      	ldr	r3, [r3, #28]
 8019f42:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8019f46:	4798      	blx	r3
  if (hm->body.len > 0 && h->data_size > 0) {
 8019f48:	68bb      	ldr	r3, [r7, #8]
 8019f4a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	f000 80d6 	beq.w	801a100 <handle_object+0x1e0>
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	f000 80d1 	beq.w	801a100 <handle_object+0x1e0>
    char *tmp = calloc(1, h->data_size);
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f62:	4619      	mov	r1, r3
 8019f64:	2001      	movs	r0, #1
 8019f66:	f006 fc8b 	bl	8020880 <calloc>
 8019f6a:	4603      	mov	r3, r0
 8019f6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    size_t i;
    memcpy(tmp, data, h->data_size);
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f74:	461a      	mov	r2, r3
 8019f76:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8019f7a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8019f7e:	f008 f826 	bl	8021fce <memcpy>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8019f82:	2300      	movs	r3, #0
 8019f84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8019f88:	e08e      	b.n	801a0a8 <handle_object+0x188>
      const struct attribute *a = &h->attributes[i];
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	6999      	ldr	r1, [r3, #24]
 8019f8e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8019f92:	4613      	mov	r3, r2
 8019f94:	005b      	lsls	r3, r3, #1
 8019f96:	4413      	add	r3, r2
 8019f98:	00db      	lsls	r3, r3, #3
 8019f9a:	440b      	add	r3, r1
 8019f9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      char jpath[100];
      mg_snprintf(jpath, sizeof(jpath), "$.%s", a->name);
 8019fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	f107 0010 	add.w	r0, r7, #16
 8019faa:	4a60      	ldr	r2, [pc, #384]	@ (801a12c <handle_object+0x20c>)
 8019fac:	2164      	movs	r1, #100	@ 0x64
 8019fae:	f7f3 fb75 	bl	800d69c <mg_snprintf>
      if (strcmp(a->type, "int") == 0) {
 8019fb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019fb6:	685b      	ldr	r3, [r3, #4]
 8019fb8:	495d      	ldr	r1, [pc, #372]	@ (801a130 <handle_object+0x210>)
 8019fba:	4618      	mov	r0, r3
 8019fbc:	f7e6 f990 	bl	80002e0 <strcmp>
 8019fc0:	4603      	mov	r3, r0
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d11c      	bne.n	801a000 <handle_object+0xe0>
        double d;
        if (mg_json_get_num(hm->body, jpath, &d)) {
 8019fc6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019fca:	f107 0210 	add.w	r2, r7, #16
 8019fce:	68b9      	ldr	r1, [r7, #8]
 8019fd0:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8019fd4:	c903      	ldmia	r1, {r0, r1}
 8019fd6:	f7ed fe4a 	bl	8007c6e <mg_json_get_num>
 8019fda:	4603      	mov	r3, r0
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d05e      	beq.n	801a09e <handle_object+0x17e>
          int v = (int) d;
 8019fe0:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8019fe4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019fe8:	ee17 3a90 	vmov	r3, s15
 8019fec:	677b      	str	r3, [r7, #116]	@ 0x74
          memcpy(tmp + a->offset, &v, sizeof(v));
 8019fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019ff2:	68db      	ldr	r3, [r3, #12]
 8019ff4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019ff8:	4413      	add	r3, r2
 8019ffa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8019ffc:	601a      	str	r2, [r3, #0]
 8019ffe:	e04e      	b.n	801a09e <handle_object+0x17e>
        }
      } else if (strcmp(a->type, "bool") == 0) {
 801a000:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a004:	685b      	ldr	r3, [r3, #4]
 801a006:	494b      	ldr	r1, [pc, #300]	@ (801a134 <handle_object+0x214>)
 801a008:	4618      	mov	r0, r3
 801a00a:	f7e6 f969 	bl	80002e0 <strcmp>
 801a00e:	4603      	mov	r3, r0
 801a010:	2b00      	cmp	r3, #0
 801a012:	d10e      	bne.n	801a032 <handle_object+0x112>
        mg_json_get_bool(hm->body, jpath, (bool *) (tmp + a->offset));
 801a014:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a018:	68db      	ldr	r3, [r3, #12]
 801a01a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a01e:	4413      	add	r3, r2
 801a020:	f107 0210 	add.w	r2, r7, #16
 801a024:	68b9      	ldr	r1, [r7, #8]
 801a026:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801a02a:	c903      	ldmia	r1, {r0, r1}
 801a02c:	f7ed fe64 	bl	8007cf8 <mg_json_get_bool>
 801a030:	e035      	b.n	801a09e <handle_object+0x17e>
      } else if (strcmp(a->type, "double") == 0) {
 801a032:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a036:	685b      	ldr	r3, [r3, #4]
 801a038:	493f      	ldr	r1, [pc, #252]	@ (801a138 <handle_object+0x218>)
 801a03a:	4618      	mov	r0, r3
 801a03c:	f7e6 f950 	bl	80002e0 <strcmp>
 801a040:	4603      	mov	r3, r0
 801a042:	2b00      	cmp	r3, #0
 801a044:	d10e      	bne.n	801a064 <handle_object+0x144>
        mg_json_get_num(hm->body, jpath, (double *) (tmp + a->offset));
 801a046:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a04a:	68db      	ldr	r3, [r3, #12]
 801a04c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a050:	4413      	add	r3, r2
 801a052:	f107 0210 	add.w	r2, r7, #16
 801a056:	68b9      	ldr	r1, [r7, #8]
 801a058:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801a05c:	c903      	ldmia	r1, {r0, r1}
 801a05e:	f7ed fe06 	bl	8007c6e <mg_json_get_num>
 801a062:	e01c      	b.n	801a09e <handle_object+0x17e>
      } else if (strcmp(a->type, "string") == 0) {
 801a064:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a068:	685b      	ldr	r3, [r3, #4]
 801a06a:	4934      	ldr	r1, [pc, #208]	@ (801a13c <handle_object+0x21c>)
 801a06c:	4618      	mov	r0, r3
 801a06e:	f7e6 f937 	bl	80002e0 <strcmp>
 801a072:	4603      	mov	r3, r0
 801a074:	2b00      	cmp	r3, #0
 801a076:	d112      	bne.n	801a09e <handle_object+0x17e>
        mg_json_get_str2(hm->body, jpath, tmp + a->offset, a->size);
 801a078:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a07c:	68db      	ldr	r3, [r3, #12]
 801a07e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a082:	18d0      	adds	r0, r2, r3
 801a084:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a088:	691b      	ldr	r3, [r3, #16]
 801a08a:	f107 0210 	add.w	r2, r7, #16
 801a08e:	68b9      	ldr	r1, [r7, #8]
 801a090:	9300      	str	r3, [sp, #0]
 801a092:	4603      	mov	r3, r0
 801a094:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801a098:	c903      	ldmia	r1, {r0, r1}
 801a09a:	f7ff fa29 	bl	80194f0 <mg_json_get_str2>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 801a09e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a0a2:	3301      	adds	r3, #1
 801a0a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	6999      	ldr	r1, [r3, #24]
 801a0ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801a0b0:	4613      	mov	r3, r2
 801a0b2:	005b      	lsls	r3, r3, #1
 801a0b4:	4413      	add	r3, r2
 801a0b6:	00db      	lsls	r3, r3, #3
 801a0b8:	440b      	add	r3, r1
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	f47f af64 	bne.w	8019f8a <handle_object+0x6a>
      }
    }
    // If structure changes, increment version
    if (memcmp(data, tmp, h->data_size) != 0) s_device_change_version++;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a0c6:	461a      	mov	r2, r3
 801a0c8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801a0cc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801a0d0:	f007 fe5e 	bl	8021d90 <memcmp>
 801a0d4:	4603      	mov	r3, r0
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d004      	beq.n	801a0e4 <handle_object+0x1c4>
 801a0da:	4b19      	ldr	r3, [pc, #100]	@ (801a140 <handle_object+0x220>)
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	3301      	adds	r3, #1
 801a0e0:	4a17      	ldr	r2, [pc, #92]	@ (801a140 <handle_object+0x220>)
 801a0e2:	6013      	str	r3, [r2, #0]
    h->setter(tmp);
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	6a1b      	ldr	r3, [r3, #32]
 801a0e8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801a0ec:	4798      	blx	r3
    free(tmp);
 801a0ee:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801a0f2:	f006 fbe9 	bl	80208c8 <free>
    h->getter(data);  // Re-sync again after setting
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	69db      	ldr	r3, [r3, #28]
 801a0fa:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801a0fe:	4798      	blx	r3
  }
  mg_http_reply(c, 200, JSON_HEADERS, "{%M}\n", print_struct, h, data);
 801a100:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a104:	9302      	str	r3, [sp, #8]
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	9301      	str	r3, [sp, #4]
 801a10a:	4b0e      	ldr	r3, [pc, #56]	@ (801a144 <handle_object+0x224>)
 801a10c:	9300      	str	r3, [sp, #0]
 801a10e:	4b0e      	ldr	r3, [pc, #56]	@ (801a148 <handle_object+0x228>)
 801a110:	4a0e      	ldr	r2, [pc, #56]	@ (801a14c <handle_object+0x22c>)
 801a112:	21c8      	movs	r1, #200	@ 0xc8
 801a114:	68f8      	ldr	r0, [r7, #12]
 801a116:	f7eb f96d 	bl	80053f4 <mg_http_reply>
  free(data);
 801a11a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801a11e:	f006 fbd3 	bl	80208c8 <free>
}
 801a122:	bf00      	nop
 801a124:	3790      	adds	r7, #144	@ 0x90
 801a126:	46bd      	mov	sp, r7
 801a128:	bd80      	pop	{r7, pc}
 801a12a:	bf00      	nop
 801a12c:	08028724 	.word	0x08028724
 801a130:	08028368 	.word	0x08028368
 801a134:	080283a4 	.word	0x080283a4
 801a138:	080283f8 	.word	0x080283f8
 801a13c:	08028394 	.word	0x08028394
 801a140:	24003f64 	.word	0x24003f64
 801a144:	08019d11 	.word	0x08019d11
 801a148:	0802872c 	.word	0x0802872c
 801a14c:	080286a0 	.word	0x080286a0

0801a150 <print_timeseries>:

size_t print_timeseries(void (*out)(char, void *), void *ptr, va_list *ap) {
 801a150:	b580      	push	{r7, lr}
 801a152:	b08e      	sub	sp, #56	@ 0x38
 801a154:	af04      	add	r7, sp, #16
 801a156:	60f8      	str	r0, [r7, #12]
 801a158:	60b9      	str	r1, [r7, #8]
 801a15a:	607a      	str	r2, [r7, #4]
  uint32_t *timestamps = va_arg(*ap, uint32_t *);
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	1d19      	adds	r1, r3, #4
 801a162:	687a      	ldr	r2, [r7, #4]
 801a164:	6011      	str	r1, [r2, #0]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	61fb      	str	r3, [r7, #28]
  double *values = va_arg(*ap, double *);
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	1d19      	adds	r1, r3, #4
 801a170:	687a      	ldr	r2, [r7, #4]
 801a172:	6011      	str	r1, [r2, #0]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	61bb      	str	r3, [r7, #24]
  size_t count = va_arg(*ap, size_t);
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	1d19      	adds	r1, r3, #4
 801a17e:	687a      	ldr	r2, [r7, #4]
 801a180:	6011      	str	r1, [r2, #0]
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 801a186:	2300      	movs	r3, #0
 801a188:	623b      	str	r3, [r7, #32]
  for (i = 0; i < count; i++) {
 801a18a:	2300      	movs	r3, #0
 801a18c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a18e:	e021      	b.n	801a1d4 <print_timeseries+0x84>
    const char *comma = i == 0 ? "" : ",";
 801a190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a192:	2b00      	cmp	r3, #0
 801a194:	d101      	bne.n	801a19a <print_timeseries+0x4a>
 801a196:	4b14      	ldr	r3, [pc, #80]	@ (801a1e8 <print_timeseries+0x98>)
 801a198:	e000      	b.n	801a19c <print_timeseries+0x4c>
 801a19a:	4b14      	ldr	r3, [pc, #80]	@ (801a1ec <print_timeseries+0x9c>)
 801a19c:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s[%lu,%g]", comma, timestamps[i], values[i]);
 801a19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1a0:	009b      	lsls	r3, r3, #2
 801a1a2:	69fa      	ldr	r2, [r7, #28]
 801a1a4:	4413      	add	r3, r2
 801a1a6:	6819      	ldr	r1, [r3, #0]
 801a1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1aa:	00db      	lsls	r3, r3, #3
 801a1ac:	69ba      	ldr	r2, [r7, #24]
 801a1ae:	4413      	add	r3, r2
 801a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a1b8:	9100      	str	r1, [sp, #0]
 801a1ba:	693b      	ldr	r3, [r7, #16]
 801a1bc:	4a0c      	ldr	r2, [pc, #48]	@ (801a1f0 <print_timeseries+0xa0>)
 801a1be:	68b9      	ldr	r1, [r7, #8]
 801a1c0:	68f8      	ldr	r0, [r7, #12]
 801a1c2:	f7e9 f85e 	bl	8003282 <mg_xprintf>
 801a1c6:	4602      	mov	r2, r0
 801a1c8:	6a3b      	ldr	r3, [r7, #32]
 801a1ca:	4413      	add	r3, r2
 801a1cc:	623b      	str	r3, [r7, #32]
  for (i = 0; i < count; i++) {
 801a1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1d0:	3301      	adds	r3, #1
 801a1d2:	627b      	str	r3, [r7, #36]	@ 0x24
 801a1d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a1d6:	697b      	ldr	r3, [r7, #20]
 801a1d8:	429a      	cmp	r2, r3
 801a1da:	d3d9      	bcc.n	801a190 <print_timeseries+0x40>
  }
  return len;
 801a1dc:	6a3b      	ldr	r3, [r7, #32]
}
 801a1de:	4618      	mov	r0, r3
 801a1e0:	3728      	adds	r7, #40	@ 0x28
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	bd80      	pop	{r7, pc}
 801a1e6:	bf00      	nop
 801a1e8:	08028538 	.word	0x08028538
 801a1ec:	08028704 	.word	0x08028704
 801a1f0:	08028734 	.word	0x08028734

0801a1f4 <handle_graph>:

static void handle_graph(struct mg_connection *c, struct mg_http_message *hm,
                         struct apihandler *h) {
 801a1f4:	b5b0      	push	{r4, r5, r7, lr}
 801a1f6:	b0c8      	sub	sp, #288	@ 0x120
 801a1f8:	af04      	add	r7, sp, #16
 801a1fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a1fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801a202:	6018      	str	r0, [r3, #0]
 801a204:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801a20c:	6019      	str	r1, [r3, #0]
 801a20e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a212:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801a216:	601a      	str	r2, [r3, #0]
  long from = mg_json_get_long(hm->body, "$.from", 0);
 801a218:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a21c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801a220:	6819      	ldr	r1, [r3, #0]
 801a222:	2300      	movs	r3, #0
 801a224:	4a21      	ldr	r2, [pc, #132]	@ (801a2ac <handle_graph+0xb8>)
 801a226:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801a22a:	c903      	ldmia	r1, {r0, r1}
 801a22c:	f7ed fe2e 	bl	8007e8c <mg_json_get_long>
 801a230:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  long to = mg_json_get_long(hm->body, "$.to", 0);
 801a234:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801a23c:	6819      	ldr	r1, [r3, #0]
 801a23e:	2300      	movs	r3, #0
 801a240:	4a1b      	ldr	r2, [pc, #108]	@ (801a2b0 <handle_graph+0xbc>)
 801a242:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801a246:	c903      	ldmia	r1, {r0, r1}
 801a248:	f7ed fe20 	bl	8007e8c <mg_json_get_long>
 801a24c:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
  uint32_t timestamps[20];
  double values[sizeof(timestamps) / sizeof(timestamps[0])];
  size_t count = h->grapher(from, to, timestamps, values,
 801a250:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a254:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 801a25c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 801a260:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 801a264:	f107 0310 	add.w	r3, r7, #16
 801a268:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 801a26c:	2514      	movs	r5, #20
 801a26e:	9500      	str	r5, [sp, #0]
 801a270:	47a0      	blx	r4
 801a272:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
                            sizeof(timestamps) / sizeof(timestamps[0]));
  mg_http_reply(c, 200, JSON_HEADERS, "[%M]\n", print_timeseries, timestamps,
 801a276:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801a27a:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 801a27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a282:	9303      	str	r3, [sp, #12]
 801a284:	f107 0310 	add.w	r3, r7, #16
 801a288:	9302      	str	r3, [sp, #8]
 801a28a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 801a28e:	9301      	str	r3, [sp, #4]
 801a290:	4b08      	ldr	r3, [pc, #32]	@ (801a2b4 <handle_graph+0xc0>)
 801a292:	9300      	str	r3, [sp, #0]
 801a294:	4b08      	ldr	r3, [pc, #32]	@ (801a2b8 <handle_graph+0xc4>)
 801a296:	4a09      	ldr	r2, [pc, #36]	@ (801a2bc <handle_graph+0xc8>)
 801a298:	21c8      	movs	r1, #200	@ 0xc8
 801a29a:	6800      	ldr	r0, [r0, #0]
 801a29c:	f7eb f8aa 	bl	80053f4 <mg_http_reply>
                values, count);
}
 801a2a0:	bf00      	nop
 801a2a2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 801a2a6:	46bd      	mov	sp, r7
 801a2a8:	bdb0      	pop	{r4, r5, r7, pc}
 801a2aa:	bf00      	nop
 801a2ac:	08028740 	.word	0x08028740
 801a2b0:	08028748 	.word	0x08028748
 801a2b4:	0801a151 	.word	0x0801a151
 801a2b8:	08028750 	.word	0x08028750
 801a2bc:	080286a0 	.word	0x080286a0

0801a2c0 <handle_api_call>:

static void handle_api_call(struct mg_connection *c, struct mg_http_message *hm,
                            struct apihandler *h) {
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b086      	sub	sp, #24
 801a2c4:	af02      	add	r7, sp, #8
 801a2c6:	60f8      	str	r0, [r7, #12]
 801a2c8:	60b9      	str	r1, [r7, #8]
 801a2ca:	607a      	str	r2, [r7, #4]
  if (strcmp(h->type, "object") == 0) {
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	685b      	ldr	r3, [r3, #4]
 801a2d0:	491d      	ldr	r1, [pc, #116]	@ (801a348 <handle_api_call+0x88>)
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	f7e6 f804 	bl	80002e0 <strcmp>
 801a2d8:	4603      	mov	r3, r0
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d105      	bne.n	801a2ea <handle_api_call+0x2a>
    handle_object(c, hm, h);
 801a2de:	687a      	ldr	r2, [r7, #4]
 801a2e0:	68b9      	ldr	r1, [r7, #8]
 801a2e2:	68f8      	ldr	r0, [r7, #12]
 801a2e4:	f7ff fe1c 	bl	8019f20 <handle_object>
  } else if (strcmp(h->type, "graph") == 0) {
    handle_graph(c, hm, h);
  } else {
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
  }
}
 801a2e8:	e02a      	b.n	801a340 <handle_api_call+0x80>
  } else if (strcmp(h->type, "action") == 0) {
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	685b      	ldr	r3, [r3, #4]
 801a2ee:	4917      	ldr	r1, [pc, #92]	@ (801a34c <handle_api_call+0x8c>)
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	f7e5 fff5 	bl	80002e0 <strcmp>
 801a2f6:	4603      	mov	r3, r0
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d108      	bne.n	801a30e <handle_api_call+0x4e>
    handle_action(c, hm, h->checker, h->starter);
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a304:	68b9      	ldr	r1, [r7, #8]
 801a306:	68f8      	ldr	r0, [r7, #12]
 801a308:	f7ff fcc2 	bl	8019c90 <handle_action>
}
 801a30c:	e018      	b.n	801a340 <handle_api_call+0x80>
  } else if (strcmp(h->type, "graph") == 0) {
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	685b      	ldr	r3, [r3, #4]
 801a312:	490f      	ldr	r1, [pc, #60]	@ (801a350 <handle_api_call+0x90>)
 801a314:	4618      	mov	r0, r3
 801a316:	f7e5 ffe3 	bl	80002e0 <strcmp>
 801a31a:	4603      	mov	r3, r0
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d105      	bne.n	801a32c <handle_api_call+0x6c>
    handle_graph(c, hm, h);
 801a320:	687a      	ldr	r2, [r7, #4]
 801a322:	68b9      	ldr	r1, [r7, #8]
 801a324:	68f8      	ldr	r0, [r7, #12]
 801a326:	f7ff ff65 	bl	801a1f4 <handle_graph>
}
 801a32a:	e009      	b.n	801a340 <handle_api_call+0x80>
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	685b      	ldr	r3, [r3, #4]
 801a330:	9300      	str	r3, [sp, #0]
 801a332:	4b08      	ldr	r3, [pc, #32]	@ (801a354 <handle_api_call+0x94>)
 801a334:	4a08      	ldr	r2, [pc, #32]	@ (801a358 <handle_api_call+0x98>)
 801a336:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801a33a:	68f8      	ldr	r0, [r7, #12]
 801a33c:	f7eb f85a 	bl	80053f4 <mg_http_reply>
}
 801a340:	bf00      	nop
 801a342:	3710      	adds	r7, #16
 801a344:	46bd      	mov	sp, r7
 801a346:	bd80      	pop	{r7, pc}
 801a348:	0802848c 	.word	0x0802848c
 801a34c:	08028444 	.word	0x08028444
 801a350:	0802847c 	.word	0x0802847c
 801a354:	08028758 	.word	0x08028758
 801a358:	080286a0 	.word	0x080286a0

0801a35c <http_ev_handler>:
  s_device_change_version++;
}
#endif  // WIZARD_ENABLE_HTTP_UI

// Mongoose event handler function, gets called by the mg_mgr_poll()
static void http_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 801a35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a35e:	b0ad      	sub	sp, #180	@ 0xb4
 801a360:	af06      	add	r7, sp, #24
 801a362:	61f8      	str	r0, [r7, #28]
 801a364:	61b9      	str	r1, [r7, #24]
 801a366:	617a      	str	r2, [r7, #20]
#if WIZARD_ENABLE_HTTP_UI
  handle_uploads(c, ev, ev_data);
 801a368:	697a      	ldr	r2, [r7, #20]
 801a36a:	69b9      	ldr	r1, [r7, #24]
 801a36c:	69f8      	ldr	r0, [r7, #28]
 801a36e:	f7ff fc13 	bl	8019b98 <handle_uploads>
  if (ev == MG_EV_POLL && c->data[0] == 'A') {
 801a372:	69bb      	ldr	r3, [r7, #24]
 801a374:	2b02      	cmp	r3, #2
 801a376:	d120      	bne.n	801a3ba <http_ev_handler+0x5e>
 801a378:	69fb      	ldr	r3, [r7, #28]
 801a37a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 801a37e:	2b41      	cmp	r3, #65	@ 0x41
 801a380:	d11b      	bne.n	801a3ba <http_ev_handler+0x5e>
    // Check if action in progress is complete
    struct action_state *as = (struct action_state *) c->data;
 801a382:	69fb      	ldr	r3, [r7, #28]
 801a384:	3388      	adds	r3, #136	@ 0x88
 801a386:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (as->fn() == false) {
 801a38a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a38e:	685b      	ldr	r3, [r3, #4]
 801a390:	4798      	blx	r3
 801a392:	4603      	mov	r3, r0
 801a394:	f083 0301 	eor.w	r3, r3, #1
 801a398:	b2db      	uxtb	r3, r3
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	f000 8157 	beq.w	801a64e <http_ev_handler+0x2f2>
      mg_http_reply(c, 200, JSON_HEADERS, "true");
 801a3a0:	4bae      	ldr	r3, [pc, #696]	@ (801a65c <http_ev_handler+0x300>)
 801a3a2:	4aaf      	ldr	r2, [pc, #700]	@ (801a660 <http_ev_handler+0x304>)
 801a3a4:	21c8      	movs	r1, #200	@ 0xc8
 801a3a6:	69f8      	ldr	r0, [r7, #28]
 801a3a8:	f7eb f824 	bl	80053f4 <mg_http_reply>
      memset(as, 0, sizeof(*as));
 801a3ac:	2208      	movs	r2, #8
 801a3ae:	2100      	movs	r1, #0
 801a3b0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 801a3b4:	f007 fd16 	bl	8021de4 <memset>
  if (ev == MG_EV_POLL && c->data[0] == 'A') {
 801a3b8:	e149      	b.n	801a64e <http_ev_handler+0x2f2>
    }
  } else
#endif
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 801a3ba:	69bb      	ldr	r3, [r7, #24]
 801a3bc:	2b0b      	cmp	r3, #11
 801a3be:	f040 8115 	bne.w	801a5ec <http_ev_handler+0x290>
 801a3c2:	69fb      	ldr	r3, [r7, #28]
 801a3c4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 801a3c8:	2b55      	cmp	r3, #85	@ 0x55
 801a3ca:	f000 810f 	beq.w	801a5ec <http_ev_handler+0x290>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 801a3ce:	697b      	ldr	r3, [r7, #20]
 801a3d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
#if WIZARD_ENABLE_HTTP_UI
    struct apihandler *h = find_handler(hm);
 801a3d4:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 801a3d8:	f7ff f80e 	bl	80193f8 <find_handler>
 801a3dc:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 801a3e0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 801a3e4:	f7ff f8b0 	bl	8019548 <authenticate>
 801a3e8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) &&
 801a3ec:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a3f0:	499c      	ldr	r1, [pc, #624]	@ (801a664 <http_ev_handler+0x308>)
 801a3f2:	4618      	mov	r0, r3
 801a3f4:	f7f4 fc64 	bl	800ecc0 <mg_str_s>
 801a3f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a3fc:	2300      	movs	r3, #0
 801a3fe:	9300      	str	r3, [sp, #0]
 801a400:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a404:	cb0c      	ldmia	r3, {r2, r3}
 801a406:	3108      	adds	r1, #8
 801a408:	c903      	ldmia	r1, {r0, r1}
 801a40a:	f7f4 fd63 	bl	800eed4 <mg_match>
 801a40e:	4603      	mov	r3, r0
 801a410:	2b00      	cmp	r3, #0
 801a412:	d025      	beq.n	801a460 <http_ev_handler+0x104>
 801a414:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d019      	beq.n	801a450 <http_ev_handler+0xf4>
        (u == NULL ||
 801a41c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a420:	2b00      	cmp	r3, #0
 801a422:	d01d      	beq.n	801a460 <http_ev_handler+0x104>
         (h != NULL && (u->level < h->read_level ||
 801a424:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a428:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a42a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a42e:	68db      	ldr	r3, [r3, #12]
 801a430:	429a      	cmp	r2, r3
 801a432:	db0d      	blt.n	801a450 <http_ev_handler+0xf4>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 801a434:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a438:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
         (h != NULL && (u->level < h->read_level ||
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d00f      	beq.n	801a460 <http_ev_handler+0x104>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 801a440:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a44a:	691b      	ldr	r3, [r3, #16]
 801a44c:	429a      	cmp	r2, r3
 801a44e:	da07      	bge.n	801a460 <http_ev_handler+0x104>
      // MG_INFO(("DENY: %d, %d %d", u->level, h->read_level, h->write_level));
      mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 801a450:	4b85      	ldr	r3, [pc, #532]	@ (801a668 <http_ev_handler+0x30c>)
 801a452:	4a83      	ldr	r2, [pc, #524]	@ (801a660 <http_ev_handler+0x304>)
 801a454:	f240 1193 	movw	r1, #403	@ 0x193
 801a458:	69f8      	ldr	r0, [r7, #28]
 801a45a:	f7ea ffcb 	bl	80053f4 <mg_http_reply>
 801a45e:	e091      	b.n	801a584 <http_ev_handler+0x228>
    } else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 801a460:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801a464:	4981      	ldr	r1, [pc, #516]	@ (801a66c <http_ev_handler+0x310>)
 801a466:	4618      	mov	r0, r3
 801a468:	f7f4 fc2a 	bl	800ecc0 <mg_str_s>
 801a46c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a470:	2300      	movs	r3, #0
 801a472:	9300      	str	r3, [sp, #0]
 801a474:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801a478:	cb0c      	ldmia	r3, {r2, r3}
 801a47a:	3108      	adds	r1, #8
 801a47c:	c903      	ldmia	r1, {r0, r1}
 801a47e:	f7f4 fd29 	bl	800eed4 <mg_match>
 801a482:	4603      	mov	r3, r0
 801a484:	2b00      	cmp	r3, #0
 801a486:	d005      	beq.n	801a494 <http_ev_handler+0x138>
      handle_login(c, u);
 801a488:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801a48c:	69f8      	ldr	r0, [r7, #28]
 801a48e:	f7ff f93b 	bl	8019708 <handle_login>
 801a492:	e077      	b.n	801a584 <http_ev_handler+0x228>
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 801a494:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801a498:	4975      	ldr	r1, [pc, #468]	@ (801a670 <http_ev_handler+0x314>)
 801a49a:	4618      	mov	r0, r3
 801a49c:	f7f4 fc10 	bl	800ecc0 <mg_str_s>
 801a4a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	9300      	str	r3, [sp, #0]
 801a4a8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801a4ac:	cb0c      	ldmia	r3, {r2, r3}
 801a4ae:	3108      	adds	r1, #8
 801a4b0:	c903      	ldmia	r1, {r0, r1}
 801a4b2:	f7f4 fd0f 	bl	800eed4 <mg_match>
 801a4b6:	4603      	mov	r3, r0
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d003      	beq.n	801a4c4 <http_ev_handler+0x168>
      handle_logout(c);
 801a4bc:	69f8      	ldr	r0, [r7, #28]
 801a4be:	f7ff f991 	bl	80197e4 <handle_logout>
 801a4c2:	e05f      	b.n	801a584 <http_ev_handler+0x228>
    } else
#endif
        if (mg_match(hm->uri, mg_str("/api/ok"), NULL)) {
 801a4c4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801a4c8:	496a      	ldr	r1, [pc, #424]	@ (801a674 <http_ev_handler+0x318>)
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	f7f4 fbf8 	bl	800ecc0 <mg_str_s>
 801a4d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	9300      	str	r3, [sp, #0]
 801a4d8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801a4dc:	cb0c      	ldmia	r3, {r2, r3}
 801a4de:	3108      	adds	r1, #8
 801a4e0:	c903      	ldmia	r1, {r0, r1}
 801a4e2:	f7f4 fcf7 	bl	800eed4 <mg_match>
 801a4e6:	4603      	mov	r3, r0
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d006      	beq.n	801a4fa <http_ev_handler+0x19e>
      mg_http_reply(c, 200, JSON_HEADERS, "true\n");
 801a4ec:	4b62      	ldr	r3, [pc, #392]	@ (801a678 <http_ev_handler+0x31c>)
 801a4ee:	4a5c      	ldr	r2, [pc, #368]	@ (801a660 <http_ev_handler+0x304>)
 801a4f0:	21c8      	movs	r1, #200	@ 0xc8
 801a4f2:	69f8      	ldr	r0, [r7, #28]
 801a4f4:	f7ea ff7e 	bl	80053f4 <mg_http_reply>
 801a4f8:	e044      	b.n	801a584 <http_ev_handler+0x228>
    } else if (mg_match(hm->uri, mg_str("/api/heartbeat"), NULL)) {
 801a4fa:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801a4fe:	495f      	ldr	r1, [pc, #380]	@ (801a67c <http_ev_handler+0x320>)
 801a500:	4618      	mov	r0, r3
 801a502:	f7f4 fbdd 	bl	800ecc0 <mg_str_s>
 801a506:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a50a:	2300      	movs	r3, #0
 801a50c:	9300      	str	r3, [sp, #0]
 801a50e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801a512:	cb0c      	ldmia	r3, {r2, r3}
 801a514:	3108      	adds	r1, #8
 801a516:	c903      	ldmia	r1, {r0, r1}
 801a518:	f7f4 fcdc 	bl	800eed4 <mg_match>
 801a51c:	4603      	mov	r3, r0
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d00f      	beq.n	801a542 <http_ev_handler+0x1e6>
      mg_http_reply(c, 200, JSON_HEADERS, "{%m:%lu}\n", MG_ESC("version"),
 801a522:	4b57      	ldr	r3, [pc, #348]	@ (801a680 <http_ev_handler+0x324>)
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	9303      	str	r3, [sp, #12]
 801a528:	4b56      	ldr	r3, [pc, #344]	@ (801a684 <http_ev_handler+0x328>)
 801a52a:	9302      	str	r3, [sp, #8]
 801a52c:	2300      	movs	r3, #0
 801a52e:	9301      	str	r3, [sp, #4]
 801a530:	4b55      	ldr	r3, [pc, #340]	@ (801a688 <http_ev_handler+0x32c>)
 801a532:	9300      	str	r3, [sp, #0]
 801a534:	4b55      	ldr	r3, [pc, #340]	@ (801a68c <http_ev_handler+0x330>)
 801a536:	4a4a      	ldr	r2, [pc, #296]	@ (801a660 <http_ev_handler+0x304>)
 801a538:	21c8      	movs	r1, #200	@ 0xc8
 801a53a:	69f8      	ldr	r0, [r7, #28]
 801a53c:	f7ea ff5a 	bl	80053f4 <mg_http_reply>
 801a540:	e020      	b.n	801a584 <http_ev_handler+0x228>
                    s_device_change_version);
    } else if (h != NULL) {
 801a542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a546:	2b00      	cmp	r3, #0
 801a548:	d007      	beq.n	801a55a <http_ev_handler+0x1fe>
      handle_api_call(c, hm, h);
 801a54a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801a54e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a552:	69f8      	ldr	r0, [r7, #28]
 801a554:	f7ff feb4 	bl	801a2c0 <handle_api_call>
 801a558:	e014      	b.n	801a584 <http_ev_handler+0x228>
    } else
#endif  // WIZARD_ENABLE_HTTP_UI
    {
      struct mg_http_serve_opts opts;
      memset(&opts, 0, sizeof(opts));
 801a55a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a55e:	2218      	movs	r2, #24
 801a560:	2100      	movs	r1, #0
 801a562:	4618      	mov	r0, r3
 801a564:	f007 fc3e 	bl	8021de4 <memset>
      opts.root_dir = "/web_root/";
 801a568:	4b49      	ldr	r3, [pc, #292]	@ (801a690 <http_ev_handler+0x334>)
 801a56a:	64bb      	str	r3, [r7, #72]	@ 0x48
      opts.fs = &mg_fs_packed;
 801a56c:	4b49      	ldr	r3, [pc, #292]	@ (801a694 <http_ev_handler+0x338>)
 801a56e:	65fb      	str	r3, [r7, #92]	@ 0x5c
      opts.extra_headers = NO_CACHE_HEADERS;
 801a570:	4b49      	ldr	r3, [pc, #292]	@ (801a698 <http_ev_handler+0x33c>)
 801a572:	653b      	str	r3, [r7, #80]	@ 0x50
      mg_http_serve_dir(c, hm, &opts);
 801a574:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a578:	461a      	mov	r2, r3
 801a57a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a57e:	69f8      	ldr	r0, [r7, #28]
 801a580:	f7eb fe4a 	bl	8006218 <mg_http_serve_dir>
    }
    // Show this request
    MG_DEBUG(("%lu %.*s %.*s %lu -> %.*s", c->id, hm->method.len,
 801a584:	4b45      	ldr	r3, [pc, #276]	@ (801a69c <http_ev_handler+0x340>)
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	2b02      	cmp	r3, #2
 801a58a:	dd62      	ble.n	801a652 <http_ev_handler+0x2f6>
 801a58c:	4b44      	ldr	r3, [pc, #272]	@ (801a6a0 <http_ev_handler+0x344>)
 801a58e:	f240 12ef 	movw	r2, #495	@ 0x1ef
 801a592:	4944      	ldr	r1, [pc, #272]	@ (801a6a4 <http_ev_handler+0x348>)
 801a594:	2003      	movs	r0, #3
 801a596:	f7ed fccb 	bl	8007f30 <mg_log_prefix>
 801a59a:	69fb      	ldr	r3, [r7, #28]
 801a59c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 801a59e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a5a2:	685e      	ldr	r6, [r3, #4]
 801a5a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	607b      	str	r3, [r7, #4]
 801a5ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a5b0:	68db      	ldr	r3, [r3, #12]
 801a5b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801a5b6:	6892      	ldr	r2, [r2, #8]
 801a5b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a5bc:	f8d1 1204 	ldr.w	r1, [r1, #516]	@ 0x204
 801a5c0:	69f8      	ldr	r0, [r7, #28]
 801a5c2:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801a5c4:	280f      	cmp	r0, #15
 801a5c6:	d901      	bls.n	801a5cc <http_ev_handler+0x270>
 801a5c8:	2003      	movs	r0, #3
 801a5ca:	e000      	b.n	801a5ce <http_ev_handler+0x272>
 801a5cc:	2000      	movs	r0, #0
 801a5ce:	69fc      	ldr	r4, [r7, #28]
 801a5d0:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
 801a5d2:	3409      	adds	r4, #9
 801a5d4:	9404      	str	r4, [sp, #16]
 801a5d6:	9003      	str	r0, [sp, #12]
 801a5d8:	9102      	str	r1, [sp, #8]
 801a5da:	9201      	str	r2, [sp, #4]
 801a5dc:	9300      	str	r3, [sp, #0]
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	4632      	mov	r2, r6
 801a5e2:	4629      	mov	r1, r5
 801a5e4:	4830      	ldr	r0, [pc, #192]	@ (801a6a8 <http_ev_handler+0x34c>)
 801a5e6:	f7ed fcf3 	bl	8007fd0 <mg_log>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 801a5ea:	e032      	b.n	801a652 <http_ev_handler+0x2f6>
              hm->method.buf, hm->uri.len, hm->uri.buf, hm->body.len,
              c->send.len > 15 ? 3 : 0, &c->send.buf[9]));
  } else if (ev == MG_EV_ACCEPT) {
 801a5ec:	69bb      	ldr	r3, [r7, #24]
 801a5ee:	2b05      	cmp	r3, #5
 801a5f0:	d130      	bne.n	801a654 <http_ev_handler+0x2f8>
    if (c->fn_data != NULL) {  // TLS listener
 801a5f2:	69fb      	ldr	r3, [r7, #28]
 801a5f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d02c      	beq.n	801a654 <http_ev_handler+0x2f8>
      struct mg_tls_opts opts;
      memset(&opts, 0, sizeof(opts));
 801a5fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a5fe:	2224      	movs	r2, #36	@ 0x24
 801a600:	2100      	movs	r1, #0
 801a602:	4618      	mov	r0, r3
 801a604:	f007 fbee 	bl	8021de4 <memset>
      opts.cert = mg_str(TLS_CERT);
 801a608:	f107 0308 	add.w	r3, r7, #8
 801a60c:	4927      	ldr	r1, [pc, #156]	@ (801a6ac <http_ev_handler+0x350>)
 801a60e:	4618      	mov	r0, r3
 801a610:	f7f4 fb56 	bl	800ecc0 <mg_str_s>
 801a614:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a618:	f107 0208 	add.w	r2, r7, #8
 801a61c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a620:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_str(TLS_KEY);
 801a624:	f107 0308 	add.w	r3, r7, #8
 801a628:	4921      	ldr	r1, [pc, #132]	@ (801a6b0 <http_ev_handler+0x354>)
 801a62a:	4618      	mov	r0, r3
 801a62c:	f7f4 fb48 	bl	800ecc0 <mg_str_s>
 801a630:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801a634:	f107 0208 	add.w	r2, r7, #8
 801a638:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a63c:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 801a640:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a644:	4619      	mov	r1, r3
 801a646:	69f8      	ldr	r0, [r7, #28]
 801a648:	f7f7 fd34 	bl	80120b4 <mg_tls_init>
    }
  }
}
 801a64c:	e002      	b.n	801a654 <http_ev_handler+0x2f8>
  if (ev == MG_EV_POLL && c->data[0] == 'A') {
 801a64e:	bf00      	nop
 801a650:	e000      	b.n	801a654 <http_ev_handler+0x2f8>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 801a652:	bf00      	nop
}
 801a654:	bf00      	nop
 801a656:	379c      	adds	r7, #156	@ 0x9c
 801a658:	46bd      	mov	sp, r7
 801a65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a65c:	080286fc 	.word	0x080286fc
 801a660:	080286a0 	.word	0x080286a0
 801a664:	080286dc 	.word	0x080286dc
 801a668:	080286e4 	.word	0x080286e4
 801a66c:	08028770 	.word	0x08028770
 801a670:	0802877c 	.word	0x0802877c
 801a674:	08028788 	.word	0x08028788
 801a678:	08028790 	.word	0x08028790
 801a67c:	08028798 	.word	0x08028798
 801a680:	24003f64 	.word	0x24003f64
 801a684:	0802838c 	.word	0x0802838c
 801a688:	0800db29 	.word	0x0800db29
 801a68c:	080287a8 	.word	0x080287a8
 801a690:	080287b4 	.word	0x080287b4
 801a694:	24000008 	.word	0x24000008
 801a698:	080287c0 	.word	0x080287c0
 801a69c:	24000240 	.word	0x24000240
 801a6a0:	08035218 	.word	0x08035218
 801a6a4:	080284cc 	.word	0x080284cc
 801a6a8:	080287dc 	.word	0x080287dc
 801a6ac:	080287f8 	.word	0x080287f8
 801a6b0:	080289d4 	.word	0x080289d4

0801a6b4 <sntp_ev_handler>:
#endif  // WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS

#if WIZARD_ENABLE_SNTP
static uint64_t s_sntp_timer = 0;
bool s_sntp_response_received = false;
static void sntp_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 801a6b4:	b5b0      	push	{r4, r5, r7, lr}
 801a6b6:	b086      	sub	sp, #24
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	60f8      	str	r0, [r7, #12]
 801a6bc:	60b9      	str	r1, [r7, #8]
 801a6be:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_SNTP_TIME) {
 801a6c0:	68bb      	ldr	r3, [r7, #8]
 801a6c2:	2b12      	cmp	r3, #18
 801a6c4:	d115      	bne.n	801a6f2 <sntp_ev_handler+0x3e>
    uint64_t t = *(uint64_t *) ev_data;
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    glue_sntp_on_time(t);
 801a6d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a6d4:	f7fe fb46 	bl	8018d64 <glue_sntp_on_time>
    s_sntp_response_received = true;
 801a6d8:	4b08      	ldr	r3, [pc, #32]	@ (801a6fc <sntp_ev_handler+0x48>)
 801a6da:	2201      	movs	r2, #1
 801a6dc:	701a      	strb	r2, [r3, #0]
    s_sntp_timer += (WIZARD_SNTP_INTERVAL_SECONDS) * 1000;
 801a6de:	4b08      	ldr	r3, [pc, #32]	@ (801a700 <sntp_ev_handler+0x4c>)
 801a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6e4:	4907      	ldr	r1, [pc, #28]	@ (801a704 <sntp_ev_handler+0x50>)
 801a6e6:	1854      	adds	r4, r2, r1
 801a6e8:	f143 0500 	adc.w	r5, r3, #0
 801a6ec:	4b04      	ldr	r3, [pc, #16]	@ (801a700 <sntp_ev_handler+0x4c>)
 801a6ee:	e9c3 4500 	strd	r4, r5, [r3]
  }
  (void) c;
}
 801a6f2:	bf00      	nop
 801a6f4:	3718      	adds	r7, #24
 801a6f6:	46bd      	mov	sp, r7
 801a6f8:	bdb0      	pop	{r4, r5, r7, pc}
 801a6fa:	bf00      	nop
 801a6fc:	24003f78 	.word	0x24003f78
 801a700:	24003f70 	.word	0x24003f70
 801a704:	0036ee80 	.word	0x0036ee80

0801a708 <sntp_timer>:

static void sntp_timer(void *param) {
 801a708:	b580      	push	{r7, lr}
 801a70a:	b086      	sub	sp, #24
 801a70c:	af02      	add	r7, sp, #8
 801a70e:	6078      	str	r0, [r7, #4]
  // uint64_t t1 = mg_now(), t2 = mg_millis();
  uint64_t timeout = (WIZARD_SNTP_INTERVAL_SECONDS) * 1000;
 801a710:	4a14      	ldr	r2, [pc, #80]	@ (801a764 <sntp_timer+0x5c>)
 801a712:	f04f 0300 	mov.w	r3, #0
 801a716:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (s_sntp_response_received == false) timeout = 1000;
 801a71a:	4b13      	ldr	r3, [pc, #76]	@ (801a768 <sntp_timer+0x60>)
 801a71c:	781b      	ldrb	r3, [r3, #0]
 801a71e:	f083 0301 	eor.w	r3, r3, #1
 801a722:	b2db      	uxtb	r3, r3
 801a724:	2b00      	cmp	r3, #0
 801a726:	d005      	beq.n	801a734 <sntp_timer+0x2c>
 801a728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a72c:	f04f 0300 	mov.w	r3, #0
 801a730:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // This function is called every second. Once we received a response,
  // trigger SNTP sync less frequently, as set by the define
  if (mg_timer_expired(&s_sntp_timer, timeout, mg_millis())) {
 801a734:	f7e6 fc24 	bl	8000f80 <mg_millis>
 801a738:	4602      	mov	r2, r0
 801a73a:	460b      	mov	r3, r1
 801a73c:	e9cd 2300 	strd	r2, r3, [sp]
 801a740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a744:	4809      	ldr	r0, [pc, #36]	@ (801a76c <sntp_timer+0x64>)
 801a746:	f7f4 ff75 	bl	800f634 <mg_timer_expired>
 801a74a:	4603      	mov	r3, r0
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d005      	beq.n	801a75c <sntp_timer+0x54>
    mg_sntp_connect(param, WIZARD_SNTP_URL, sntp_ev_handler, NULL);
 801a750:	2300      	movs	r3, #0
 801a752:	4a07      	ldr	r2, [pc, #28]	@ (801a770 <sntp_timer+0x68>)
 801a754:	4907      	ldr	r1, [pc, #28]	@ (801a774 <sntp_timer+0x6c>)
 801a756:	6878      	ldr	r0, [r7, #4]
 801a758:	f7f4 fa74 	bl	800ec44 <mg_sntp_connect>
  }
}
 801a75c:	bf00      	nop
 801a75e:	3710      	adds	r7, #16
 801a760:	46bd      	mov	sp, r7
 801a762:	bd80      	pop	{r7, pc}
 801a764:	0036ee80 	.word	0x0036ee80
 801a768:	24003f78 	.word	0x24003f78
 801a76c:	24003f70 	.word	0x24003f70
 801a770:	0801a6b5 	.word	0x0801a6b5
 801a774:	08028ab8 	.word	0x08028ab8

0801a778 <mqtt_event_handler>:
#endif  // WIZARD_ENABLE_SNTP

#if WIZARD_ENABLE_MQTT
struct mg_connection *g_mqtt_conn;  // MQTT client connection

static void mqtt_event_handler(struct mg_connection *c, int ev, void *ev_data) {
 801a778:	b580      	push	{r7, lr}
 801a77a:	b088      	sub	sp, #32
 801a77c:	af02      	add	r7, sp, #8
 801a77e:	60f8      	str	r0, [r7, #12]
 801a780:	60b9      	str	r1, [r7, #8]
 801a782:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_CONNECT) {
 801a784:	68bb      	ldr	r3, [r7, #8]
 801a786:	2b04      	cmp	r3, #4
 801a788:	d103      	bne.n	801a792 <mqtt_event_handler+0x1a>
    glue_mqtt_tls_init(c);
 801a78a:	68f8      	ldr	r0, [r7, #12]
 801a78c:	f7fe f96e 	bl	8018a6c <glue_mqtt_tls_init>
    glue_mqtt_on_message(c, mm->topic, mm->data);
  } else if (ev == MG_EV_CLOSE) {
    MG_DEBUG(("%lu Closing", c->id));
    g_mqtt_conn = NULL;
  }
}
 801a790:	e037      	b.n	801a802 <mqtt_event_handler+0x8a>
  } else if (ev == MG_EV_MQTT_OPEN) {
 801a792:	68bb      	ldr	r3, [r7, #8]
 801a794:	2b11      	cmp	r3, #17
 801a796:	d106      	bne.n	801a7a6 <mqtt_event_handler+0x2e>
    glue_mqtt_on_connect(c, *(int *) ev_data);
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	4619      	mov	r1, r3
 801a79e:	68f8      	ldr	r0, [r7, #12]
 801a7a0:	f7fe f9ac 	bl	8018afc <glue_mqtt_on_connect>
}
 801a7a4:	e02d      	b.n	801a802 <mqtt_event_handler+0x8a>
  } else if (ev == MG_EV_MQTT_CMD) {
 801a7a6:	68bb      	ldr	r3, [r7, #8]
 801a7a8:	2b0f      	cmp	r3, #15
 801a7aa:	d104      	bne.n	801a7b6 <mqtt_event_handler+0x3e>
    glue_mqtt_on_cmd(c, ev_data);
 801a7ac:	6879      	ldr	r1, [r7, #4]
 801a7ae:	68f8      	ldr	r0, [r7, #12]
 801a7b0:	f7fe fa74 	bl	8018c9c <glue_mqtt_on_cmd>
}
 801a7b4:	e025      	b.n	801a802 <mqtt_event_handler+0x8a>
  } else if (ev == MG_EV_MQTT_MSG) {
 801a7b6:	68bb      	ldr	r3, [r7, #8]
 801a7b8:	2b10      	cmp	r3, #16
 801a7ba:	d10b      	bne.n	801a7d4 <mqtt_event_handler+0x5c>
    struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	617b      	str	r3, [r7, #20]
    glue_mqtt_on_message(c, mm->topic, mm->data);
 801a7c0:	697b      	ldr	r3, [r7, #20]
 801a7c2:	697a      	ldr	r2, [r7, #20]
 801a7c4:	68d9      	ldr	r1, [r3, #12]
 801a7c6:	9100      	str	r1, [sp, #0]
 801a7c8:	689b      	ldr	r3, [r3, #8]
 801a7ca:	ca06      	ldmia	r2, {r1, r2}
 801a7cc:	68f8      	ldr	r0, [r7, #12]
 801a7ce:	f7fe f9f5 	bl	8018bbc <glue_mqtt_on_message>
}
 801a7d2:	e016      	b.n	801a802 <mqtt_event_handler+0x8a>
  } else if (ev == MG_EV_CLOSE) {
 801a7d4:	68bb      	ldr	r3, [r7, #8]
 801a7d6:	2b09      	cmp	r3, #9
 801a7d8:	d113      	bne.n	801a802 <mqtt_event_handler+0x8a>
    MG_DEBUG(("%lu Closing", c->id));
 801a7da:	4b0c      	ldr	r3, [pc, #48]	@ (801a80c <mqtt_event_handler+0x94>)
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	2b02      	cmp	r3, #2
 801a7e0:	dd0c      	ble.n	801a7fc <mqtt_event_handler+0x84>
 801a7e2:	4b0b      	ldr	r3, [pc, #44]	@ (801a810 <mqtt_event_handler+0x98>)
 801a7e4:	f240 2225 	movw	r2, #549	@ 0x225
 801a7e8:	490a      	ldr	r1, [pc, #40]	@ (801a814 <mqtt_event_handler+0x9c>)
 801a7ea:	2003      	movs	r0, #3
 801a7ec:	f7ed fba0 	bl	8007f30 <mg_log_prefix>
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a7f4:	4619      	mov	r1, r3
 801a7f6:	4808      	ldr	r0, [pc, #32]	@ (801a818 <mqtt_event_handler+0xa0>)
 801a7f8:	f7ed fbea 	bl	8007fd0 <mg_log>
    g_mqtt_conn = NULL;
 801a7fc:	4b07      	ldr	r3, [pc, #28]	@ (801a81c <mqtt_event_handler+0xa4>)
 801a7fe:	2200      	movs	r2, #0
 801a800:	601a      	str	r2, [r3, #0]
}
 801a802:	bf00      	nop
 801a804:	3718      	adds	r7, #24
 801a806:	46bd      	mov	sp, r7
 801a808:	bd80      	pop	{r7, pc}
 801a80a:	bf00      	nop
 801a80c:	24000240 	.word	0x24000240
 801a810:	08035228 	.word	0x08035228
 801a814:	080284cc 	.word	0x080284cc
 801a818:	08028ad4 	.word	0x08028ad4
 801a81c:	24003f7c 	.word	0x24003f7c

0801a820 <mqtt_timer>:

static void mqtt_timer(void *arg) {
 801a820:	b580      	push	{r7, lr}
 801a822:	b084      	sub	sp, #16
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	60fb      	str	r3, [r7, #12]
  if (g_mqtt_conn == NULL) {
 801a82c:	4b07      	ldr	r3, [pc, #28]	@ (801a84c <mqtt_timer+0x2c>)
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d106      	bne.n	801a842 <mqtt_timer+0x22>
    g_mqtt_conn = glue_mqtt_connect(mgr, mqtt_event_handler);
 801a834:	4906      	ldr	r1, [pc, #24]	@ (801a850 <mqtt_timer+0x30>)
 801a836:	68f8      	ldr	r0, [r7, #12]
 801a838:	f7fe fa56 	bl	8018ce8 <glue_mqtt_connect>
 801a83c:	4603      	mov	r3, r0
 801a83e:	4a03      	ldr	r2, [pc, #12]	@ (801a84c <mqtt_timer+0x2c>)
 801a840:	6013      	str	r3, [r2, #0]
  }
}
 801a842:	bf00      	nop
 801a844:	3710      	adds	r7, #16
 801a846:	46bd      	mov	sp, r7
 801a848:	bd80      	pop	{r7, pc}
 801a84a:	bf00      	nop
 801a84c:	24003f7c 	.word	0x24003f7c
 801a850:	0801a779 	.word	0x0801a779

0801a854 <handle_modbus_pdu>:
#endif  // WIZARD_ENABLE_MQTT

#if WIZARD_ENABLE_MODBUS
static void handle_modbus_pdu(struct mg_connection *c, uint8_t *buf,
                              size_t len) {
 801a854:	b590      	push	{r4, r7, lr}
 801a856:	b0d1      	sub	sp, #324	@ 0x144
 801a858:	af00      	add	r7, sp, #0
 801a85a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a85e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801a862:	6018      	str	r0, [r3, #0]
 801a864:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a868:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a86c:	6019      	str	r1, [r3, #0]
 801a86e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a872:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801a876:	601a      	str	r2, [r3, #0]
  MG_DEBUG(("Received PDU %p len %lu, hexdump:", buf, len));
 801a878:	4bcf      	ldr	r3, [pc, #828]	@ (801abb8 <handle_modbus_pdu+0x364>)
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	2b02      	cmp	r3, #2
 801a87e:	dd13      	ble.n	801a8a8 <handle_modbus_pdu+0x54>
 801a880:	4bce      	ldr	r3, [pc, #824]	@ (801abbc <handle_modbus_pdu+0x368>)
 801a882:	f240 2235 	movw	r2, #565	@ 0x235
 801a886:	49ce      	ldr	r1, [pc, #824]	@ (801abc0 <handle_modbus_pdu+0x36c>)
 801a888:	2003      	movs	r0, #3
 801a88a:	f7ed fb51 	bl	8007f30 <mg_log_prefix>
 801a88e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a892:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 801a896:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a89a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a89e:	6812      	ldr	r2, [r2, #0]
 801a8a0:	6819      	ldr	r1, [r3, #0]
 801a8a2:	48c8      	ldr	r0, [pc, #800]	@ (801abc4 <handle_modbus_pdu+0x370>)
 801a8a4:	f7ed fb94 	bl	8007fd0 <mg_log>
  mg_hexdump(buf, len);
 801a8a8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a8ac:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 801a8b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a8b4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a8b8:	6811      	ldr	r1, [r2, #0]
 801a8ba:	6818      	ldr	r0, [r3, #0]
 801a8bc:	f7ed fbbe 	bl	800803c <mg_hexdump>
  // size_t hdr_size = 8, max_data_size = sizeof(response) - hdr_size;
  if (len < 12) {
 801a8c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a8c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	2b0b      	cmp	r3, #11
 801a8cc:	d80f      	bhi.n	801a8ee <handle_modbus_pdu+0x9a>
    MG_ERROR(("PDU too small"));
 801a8ce:	4bba      	ldr	r3, [pc, #744]	@ (801abb8 <handle_modbus_pdu+0x364>)
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	f340 81f5 	ble.w	801acc2 <handle_modbus_pdu+0x46e>
 801a8d8:	4bb8      	ldr	r3, [pc, #736]	@ (801abbc <handle_modbus_pdu+0x368>)
 801a8da:	f240 2239 	movw	r2, #569	@ 0x239
 801a8de:	49b8      	ldr	r1, [pc, #736]	@ (801abc0 <handle_modbus_pdu+0x36c>)
 801a8e0:	2001      	movs	r0, #1
 801a8e2:	f7ed fb25 	bl	8007f30 <mg_log_prefix>
 801a8e6:	48b8      	ldr	r0, [pc, #736]	@ (801abc8 <handle_modbus_pdu+0x374>)
 801a8e8:	f7ed fb72 	bl	8007fd0 <mg_log>
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
    MG_DEBUG(("Sending PDU response %lu:", response_len));
    mg_hexdump(response, response_len);
    mg_send(c, response, response_len);
  }
}
 801a8ec:	e1e9      	b.n	801acc2 <handle_modbus_pdu+0x46e>
    uint8_t func = buf[7];  // Function
 801a8ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a8f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	79db      	ldrb	r3, [r3, #7]
 801a8fa:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    bool success = false;
 801a8fe:	2300      	movs	r3, #0
 801a900:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    size_t response_len = 0;
 801a904:	2300      	movs	r3, #0
 801a906:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(response, buf, 8);
 801a90a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a90e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a912:	f107 0014 	add.w	r0, r7, #20
 801a916:	2208      	movs	r2, #8
 801a918:	6819      	ldr	r1, [r3, #0]
 801a91a:	f007 fb58 	bl	8021fce <memcpy>
    if (func == 6) {  // write single holding register
 801a91e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 801a922:	2b06      	cmp	r3, #6
 801a924:	d155      	bne.n	801a9d2 <handle_modbus_pdu+0x17e>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 801a926:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a92a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	3308      	adds	r3, #8
 801a932:	881b      	ldrh	r3, [r3, #0]
 801a934:	4618      	mov	r0, r3
 801a936:	f7fd f87e 	bl	8017a36 <mg_ntohs>
 801a93a:	4603      	mov	r3, r0
 801a93c:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
      uint16_t value = mg_ntohs(*(uint16_t *) &buf[10]);
 801a940:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a944:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	330a      	adds	r3, #10
 801a94c:	881b      	ldrh	r3, [r3, #0]
 801a94e:	4618      	mov	r0, r3
 801a950:	f7fd f871 	bl	8017a36 <mg_ntohs>
 801a954:	4603      	mov	r3, r0
 801a956:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
      success = glue_modbus_write_reg(start, value);
 801a95a:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 801a95e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 801a962:	4611      	mov	r1, r2
 801a964:	4618      	mov	r0, r3
 801a966:	f7fe fa71 	bl	8018e4c <glue_modbus_write_reg>
 801a96a:	4603      	mov	r3, r0
 801a96c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
      *(uint16_t *) &response[8] = mg_htons(start);
 801a970:	f107 0314 	add.w	r3, r7, #20
 801a974:	f103 0408 	add.w	r4, r3, #8
 801a978:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 801a97c:	4618      	mov	r0, r3
 801a97e:	f7fd f85a 	bl	8017a36 <mg_ntohs>
 801a982:	4603      	mov	r3, r0
 801a984:	8023      	strh	r3, [r4, #0]
      *(uint16_t *) &response[10] = mg_htons(value);
 801a986:	f107 0314 	add.w	r3, r7, #20
 801a98a:	f103 040a 	add.w	r4, r3, #10
 801a98e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 801a992:	4618      	mov	r0, r3
 801a994:	f7fd f84f 	bl	8017a36 <mg_ntohs>
 801a998:	4603      	mov	r3, r0
 801a99a:	8023      	strh	r3, [r4, #0]
      response_len = 12;
 801a99c:	230c      	movs	r3, #12
 801a99e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 801a9a2:	4b85      	ldr	r3, [pc, #532]	@ (801abb8 <handle_modbus_pdu+0x364>)
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	2b02      	cmp	r3, #2
 801a9a8:	f340 813f 	ble.w	801ac2a <handle_modbus_pdu+0x3d6>
 801a9ac:	4b83      	ldr	r3, [pc, #524]	@ (801abbc <handle_modbus_pdu+0x368>)
 801a9ae:	f240 224b 	movw	r2, #587	@ 0x24b
 801a9b2:	4983      	ldr	r1, [pc, #524]	@ (801abc0 <handle_modbus_pdu+0x36c>)
 801a9b4:	2003      	movs	r0, #3
 801a9b6:	f7ed fabb 	bl	8007f30 <mg_log_prefix>
 801a9ba:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d001      	beq.n	801a9c6 <handle_modbus_pdu+0x172>
 801a9c2:	4b82      	ldr	r3, [pc, #520]	@ (801abcc <handle_modbus_pdu+0x378>)
 801a9c4:	e000      	b.n	801a9c8 <handle_modbus_pdu+0x174>
 801a9c6:	4b82      	ldr	r3, [pc, #520]	@ (801abd0 <handle_modbus_pdu+0x37c>)
 801a9c8:	4619      	mov	r1, r3
 801a9ca:	4882      	ldr	r0, [pc, #520]	@ (801abd4 <handle_modbus_pdu+0x380>)
 801a9cc:	f7ed fb00 	bl	8007fd0 <mg_log>
 801a9d0:	e12b      	b.n	801ac2a <handle_modbus_pdu+0x3d6>
    } else if (func == 16) {  // Write multiple
 801a9d2:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 801a9d6:	2b10      	cmp	r3, #16
 801a9d8:	f040 808b 	bne.w	801aaf2 <handle_modbus_pdu+0x29e>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 801a9dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a9e0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	3308      	adds	r3, #8
 801a9e8:	881b      	ldrh	r3, [r3, #0]
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	f7fd f823 	bl	8017a36 <mg_ntohs>
 801a9f0:	4603      	mov	r3, r0
 801a9f2:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 801a9f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a9fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	330a      	adds	r3, #10
 801aa02:	881b      	ldrh	r3, [r3, #0]
 801aa04:	4618      	mov	r0, r3
 801aa06:	f7fd f816 	bl	8017a36 <mg_ntohs>
 801aa0a:	4603      	mov	r3, r0
 801aa0c:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
      uint16_t i, *data = (uint16_t *) &buf[13];
 801aa10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801aa14:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	330d      	adds	r3, #13
 801aa1c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      if ((size_t) (num * 2 + 10) < sizeof(response)) {
 801aa20:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801aa24:	3305      	adds	r3, #5
 801aa26:	005b      	lsls	r3, r3, #1
 801aa28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801aa2c:	f080 80fd 	bcs.w	801ac2a <handle_modbus_pdu+0x3d6>
        for (i = 0; i < num; i++) {
 801aa30:	2300      	movs	r3, #0
 801aa32:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 801aa36:	e023      	b.n	801aa80 <handle_modbus_pdu+0x22c>
              glue_modbus_write_reg((uint16_t) (start + i), mg_htons(data[i]));
 801aa38:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 801aa3c:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 801aa40:	4413      	add	r3, r2
 801aa42:	b29c      	uxth	r4, r3
 801aa44:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 801aa48:	005b      	lsls	r3, r3, #1
 801aa4a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801aa4e:	4413      	add	r3, r2
 801aa50:	881b      	ldrh	r3, [r3, #0]
 801aa52:	4618      	mov	r0, r3
 801aa54:	f7fc ffef 	bl	8017a36 <mg_ntohs>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	4619      	mov	r1, r3
 801aa5c:	4620      	mov	r0, r4
 801aa5e:	f7fe f9f5 	bl	8018e4c <glue_modbus_write_reg>
 801aa62:	4603      	mov	r3, r0
 801aa64:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 801aa68:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801aa6c:	f083 0301 	eor.w	r3, r3, #1
 801aa70:	b2db      	uxtb	r3, r3
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d10b      	bne.n	801aa8e <handle_modbus_pdu+0x23a>
        for (i = 0; i < num; i++) {
 801aa76:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 801aa7a:	3301      	adds	r3, #1
 801aa7c:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 801aa80:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 801aa84:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801aa88:	429a      	cmp	r2, r3
 801aa8a:	d3d5      	bcc.n	801aa38 <handle_modbus_pdu+0x1e4>
 801aa8c:	e000      	b.n	801aa90 <handle_modbus_pdu+0x23c>
          if (success == false) break;
 801aa8e:	bf00      	nop
        *(uint16_t *) &response[8] = mg_htons(start);
 801aa90:	f107 0314 	add.w	r3, r7, #20
 801aa94:	f103 0408 	add.w	r4, r3, #8
 801aa98:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 801aa9c:	4618      	mov	r0, r3
 801aa9e:	f7fc ffca 	bl	8017a36 <mg_ntohs>
 801aaa2:	4603      	mov	r3, r0
 801aaa4:	8023      	strh	r3, [r4, #0]
        *(uint16_t *) &response[10] = mg_htons(num);
 801aaa6:	f107 0314 	add.w	r3, r7, #20
 801aaaa:	f103 040a 	add.w	r4, r3, #10
 801aaae:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801aab2:	4618      	mov	r0, r3
 801aab4:	f7fc ffbf 	bl	8017a36 <mg_ntohs>
 801aab8:	4603      	mov	r3, r0
 801aaba:	8023      	strh	r3, [r4, #0]
        response_len = 12;
 801aabc:	230c      	movs	r3, #12
 801aabe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 801aac2:	4b3d      	ldr	r3, [pc, #244]	@ (801abb8 <handle_modbus_pdu+0x364>)
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	2b02      	cmp	r3, #2
 801aac8:	f340 80af 	ble.w	801ac2a <handle_modbus_pdu+0x3d6>
 801aacc:	4b3b      	ldr	r3, [pc, #236]	@ (801abbc <handle_modbus_pdu+0x368>)
 801aace:	f240 2259 	movw	r2, #601	@ 0x259
 801aad2:	493b      	ldr	r1, [pc, #236]	@ (801abc0 <handle_modbus_pdu+0x36c>)
 801aad4:	2003      	movs	r0, #3
 801aad6:	f7ed fa2b 	bl	8007f30 <mg_log_prefix>
 801aada:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d001      	beq.n	801aae6 <handle_modbus_pdu+0x292>
 801aae2:	4b3a      	ldr	r3, [pc, #232]	@ (801abcc <handle_modbus_pdu+0x378>)
 801aae4:	e000      	b.n	801aae8 <handle_modbus_pdu+0x294>
 801aae6:	4b3a      	ldr	r3, [pc, #232]	@ (801abd0 <handle_modbus_pdu+0x37c>)
 801aae8:	4619      	mov	r1, r3
 801aaea:	483a      	ldr	r0, [pc, #232]	@ (801abd4 <handle_modbus_pdu+0x380>)
 801aaec:	f7ed fa70 	bl	8007fd0 <mg_log>
 801aaf0:	e09b      	b.n	801ac2a <handle_modbus_pdu+0x3d6>
    } else if (func == 3 || func == 4) {  // Read multiple
 801aaf2:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 801aaf6:	2b03      	cmp	r3, #3
 801aaf8:	d004      	beq.n	801ab04 <handle_modbus_pdu+0x2b0>
 801aafa:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 801aafe:	2b04      	cmp	r3, #4
 801ab00:	f040 8093 	bne.w	801ac2a <handle_modbus_pdu+0x3d6>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 801ab04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801ab08:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	3308      	adds	r3, #8
 801ab10:	881b      	ldrh	r3, [r3, #0]
 801ab12:	4618      	mov	r0, r3
 801ab14:	f7fc ff8f 	bl	8017a36 <mg_ntohs>
 801ab18:	4603      	mov	r3, r0
 801ab1a:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 801ab1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801ab22:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	330a      	adds	r3, #10
 801ab2a:	881b      	ldrh	r3, [r3, #0]
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	f7fc ff82 	bl	8017a36 <mg_ntohs>
 801ab32:	4603      	mov	r3, r0
 801ab34:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
      if ((size_t) (num * 2 + 9) < sizeof(response)) {
 801ab38:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801ab3c:	005b      	lsls	r3, r3, #1
 801ab3e:	3309      	adds	r3, #9
 801ab40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801ab44:	d271      	bcs.n	801ac2a <handle_modbus_pdu+0x3d6>
        uint16_t i, val, *data = (uint16_t *) &response[9];
 801ab46:	f107 0314 	add.w	r3, r7, #20
 801ab4a:	3309      	adds	r3, #9
 801ab4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        for (i = 0; i < num; i++) {
 801ab50:	2300      	movs	r3, #0
 801ab52:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 801ab56:	e027      	b.n	801aba8 <handle_modbus_pdu+0x354>
          success = glue_modbus_read_reg((uint16_t) (start + i), &val);
 801ab58:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 801ab5c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801ab60:	4413      	add	r3, r2
 801ab62:	b29b      	uxth	r3, r3
 801ab64:	f507 728d 	add.w	r2, r7, #282	@ 0x11a
 801ab68:	4611      	mov	r1, r2
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	f7fe f920 	bl	8018db0 <glue_modbus_read_reg>
 801ab70:	4603      	mov	r3, r0
 801ab72:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 801ab76:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801ab7a:	f083 0301 	eor.w	r3, r3, #1
 801ab7e:	b2db      	uxtb	r3, r3
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d129      	bne.n	801abd8 <handle_modbus_pdu+0x384>
          data[i] = mg_htons(val);
 801ab84:	f8b7 111a 	ldrh.w	r1, [r7, #282]	@ 0x11a
 801ab88:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801ab8c:	005b      	lsls	r3, r3, #1
 801ab8e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801ab92:	18d4      	adds	r4, r2, r3
 801ab94:	4608      	mov	r0, r1
 801ab96:	f7fc ff4e 	bl	8017a36 <mg_ntohs>
 801ab9a:	4603      	mov	r3, r0
 801ab9c:	8023      	strh	r3, [r4, #0]
        for (i = 0; i < num; i++) {
 801ab9e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801aba2:	3301      	adds	r3, #1
 801aba4:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 801aba8:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 801abac:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801abb0:	429a      	cmp	r2, r3
 801abb2:	d3d1      	bcc.n	801ab58 <handle_modbus_pdu+0x304>
 801abb4:	e011      	b.n	801abda <handle_modbus_pdu+0x386>
 801abb6:	bf00      	nop
 801abb8:	24000240 	.word	0x24000240
 801abbc:	0803523c 	.word	0x0803523c
 801abc0:	080284cc 	.word	0x080284cc
 801abc4:	08028ae0 	.word	0x08028ae0
 801abc8:	08028b04 	.word	0x08028b04
 801abcc:	08028b14 	.word	0x08028b14
 801abd0:	08028b1c 	.word	0x08028b1c
 801abd4:	08028b24 	.word	0x08028b24
          if (success == false) break;
 801abd8:	bf00      	nop
        response[8] = (uint8_t) (num * 2);
 801abda:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801abde:	b2db      	uxtb	r3, r3
 801abe0:	005b      	lsls	r3, r3, #1
 801abe2:	b2da      	uxtb	r2, r3
 801abe4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801abe8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801abec:	721a      	strb	r2, [r3, #8]
        response_len = 9 + response[8];
 801abee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801abf2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801abf6:	7a1b      	ldrb	r3, [r3, #8]
 801abf8:	3309      	adds	r3, #9
 801abfa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 801abfe:	4b33      	ldr	r3, [pc, #204]	@ (801accc <handle_modbus_pdu+0x478>)
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	2b02      	cmp	r3, #2
 801ac04:	dd11      	ble.n	801ac2a <handle_modbus_pdu+0x3d6>
 801ac06:	4b32      	ldr	r3, [pc, #200]	@ (801acd0 <handle_modbus_pdu+0x47c>)
 801ac08:	f240 2267 	movw	r2, #615	@ 0x267
 801ac0c:	4931      	ldr	r1, [pc, #196]	@ (801acd4 <handle_modbus_pdu+0x480>)
 801ac0e:	2003      	movs	r0, #3
 801ac10:	f7ed f98e 	bl	8007f30 <mg_log_prefix>
 801ac14:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d001      	beq.n	801ac20 <handle_modbus_pdu+0x3cc>
 801ac1c:	4b2e      	ldr	r3, [pc, #184]	@ (801acd8 <handle_modbus_pdu+0x484>)
 801ac1e:	e000      	b.n	801ac22 <handle_modbus_pdu+0x3ce>
 801ac20:	4b2e      	ldr	r3, [pc, #184]	@ (801acdc <handle_modbus_pdu+0x488>)
 801ac22:	4619      	mov	r1, r3
 801ac24:	482e      	ldr	r0, [pc, #184]	@ (801ace0 <handle_modbus_pdu+0x48c>)
 801ac26:	f7ed f9d3 	bl	8007fd0 <mg_log>
    if (success == false) {
 801ac2a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801ac2e:	f083 0301 	eor.w	r3, r3, #1
 801ac32:	b2db      	uxtb	r3, r3
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d015      	beq.n	801ac64 <handle_modbus_pdu+0x410>
      response_len = 9;
 801ac38:	2309      	movs	r3, #9
 801ac3a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      response[7] |= 0x80;
 801ac3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801ac42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801ac46:	79db      	ldrb	r3, [r3, #7]
 801ac48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801ac4c:	b2da      	uxtb	r2, r3
 801ac4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801ac52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801ac56:	71da      	strb	r2, [r3, #7]
      response[8] = 4;  // Server Device Failure
 801ac58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801ac5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801ac60:	2204      	movs	r2, #4
 801ac62:	721a      	strb	r2, [r3, #8]
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
 801ac64:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801ac68:	b29b      	uxth	r3, r3
 801ac6a:	3b06      	subs	r3, #6
 801ac6c:	b29a      	uxth	r2, r3
 801ac6e:	f107 0314 	add.w	r3, r7, #20
 801ac72:	1d1c      	adds	r4, r3, #4
 801ac74:	4610      	mov	r0, r2
 801ac76:	f7fc fede 	bl	8017a36 <mg_ntohs>
 801ac7a:	4603      	mov	r3, r0
 801ac7c:	8023      	strh	r3, [r4, #0]
    MG_DEBUG(("Sending PDU response %lu:", response_len));
 801ac7e:	4b13      	ldr	r3, [pc, #76]	@ (801accc <handle_modbus_pdu+0x478>)
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	2b02      	cmp	r3, #2
 801ac84:	dd0b      	ble.n	801ac9e <handle_modbus_pdu+0x44a>
 801ac86:	4b12      	ldr	r3, [pc, #72]	@ (801acd0 <handle_modbus_pdu+0x47c>)
 801ac88:	f44f 721c 	mov.w	r2, #624	@ 0x270
 801ac8c:	4911      	ldr	r1, [pc, #68]	@ (801acd4 <handle_modbus_pdu+0x480>)
 801ac8e:	2003      	movs	r0, #3
 801ac90:	f7ed f94e 	bl	8007f30 <mg_log_prefix>
 801ac94:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801ac98:	4812      	ldr	r0, [pc, #72]	@ (801ace4 <handle_modbus_pdu+0x490>)
 801ac9a:	f7ed f999 	bl	8007fd0 <mg_log>
    mg_hexdump(response, response_len);
 801ac9e:	f107 0314 	add.w	r3, r7, #20
 801aca2:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801aca6:	4618      	mov	r0, r3
 801aca8:	f7ed f9c8 	bl	800803c <mg_hexdump>
    mg_send(c, response, response_len);
 801acac:	f107 0114 	add.w	r1, r7, #20
 801acb0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801acb4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801acb8:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801acbc:	6818      	ldr	r0, [r3, #0]
 801acbe:	f7f2 f9c1 	bl	800d044 <mg_send>
}
 801acc2:	bf00      	nop
 801acc4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 801acc8:	46bd      	mov	sp, r7
 801acca:	bd90      	pop	{r4, r7, pc}
 801accc:	24000240 	.word	0x24000240
 801acd0:	0803523c 	.word	0x0803523c
 801acd4:	080284cc 	.word	0x080284cc
 801acd8:	08028b14 	.word	0x08028b14
 801acdc:	08028b1c 	.word	0x08028b1c
 801ace0:	08028b24 	.word	0x08028b24
 801ace4:	08028b38 	.word	0x08028b38

0801ace8 <modbus_ev_handler>:

static void modbus_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 801ace8:	b580      	push	{r7, lr}
 801acea:	b086      	sub	sp, #24
 801acec:	af00      	add	r7, sp, #0
 801acee:	60f8      	str	r0, [r7, #12]
 801acf0:	60b9      	str	r1, [r7, #8]
 801acf2:	607a      	str	r2, [r7, #4]
  // if (ev == MG_EV_OPEN) c->is_hexdumping = 1;
  if (ev == MG_EV_READ) {
 801acf4:	68bb      	ldr	r3, [r7, #8]
 801acf6:	2b07      	cmp	r3, #7
 801acf8:	d13a      	bne.n	801ad70 <modbus_ev_handler+0x88>
    uint16_t len;
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801acfe:	2b06      	cmp	r3, #6
 801ad00:	d933      	bls.n	801ad6a <modbus_ev_handler+0x82>
    len = mg_ntohs(*(uint16_t *) &c->recv.buf[4]);  // PDU length
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ad06:	3304      	adds	r3, #4
 801ad08:	881b      	ldrh	r3, [r3, #0]
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	f7fc fe93 	bl	8017a36 <mg_ntohs>
 801ad10:	4603      	mov	r3, r0
 801ad12:	82fb      	strh	r3, [r7, #22]
    MG_INFO(("Got %lu, expecting %lu", c->recv.len, len + 6));
 801ad14:	4b18      	ldr	r3, [pc, #96]	@ (801ad78 <modbus_ev_handler+0x90>)
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	2b01      	cmp	r3, #1
 801ad1a:	dd0e      	ble.n	801ad3a <modbus_ev_handler+0x52>
 801ad1c:	4b17      	ldr	r3, [pc, #92]	@ (801ad7c <modbus_ev_handler+0x94>)
 801ad1e:	f44f 721f 	mov.w	r2, #636	@ 0x27c
 801ad22:	4917      	ldr	r1, [pc, #92]	@ (801ad80 <modbus_ev_handler+0x98>)
 801ad24:	2002      	movs	r0, #2
 801ad26:	f7ed f903 	bl	8007f30 <mg_log_prefix>
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801ad2e:	8afb      	ldrh	r3, [r7, #22]
 801ad30:	3306      	adds	r3, #6
 801ad32:	461a      	mov	r2, r3
 801ad34:	4813      	ldr	r0, [pc, #76]	@ (801ad84 <modbus_ev_handler+0x9c>)
 801ad36:	f7ed f94b 	bl	8007fd0 <mg_log>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ad3e:	8afb      	ldrh	r3, [r7, #22]
 801ad40:	3306      	adds	r3, #6
 801ad42:	429a      	cmp	r2, r3
 801ad44:	d313      	bcc.n	801ad6e <modbus_ev_handler+0x86>
    handle_modbus_pdu(c, c->recv.buf, len + 6);  // Parse PDU and call user
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801ad4a:	8afb      	ldrh	r3, [r7, #22]
 801ad4c:	3306      	adds	r3, #6
 801ad4e:	461a      	mov	r2, r3
 801ad50:	68f8      	ldr	r0, [r7, #12]
 801ad52:	f7ff fd7f 	bl	801a854 <handle_modbus_pdu>
    mg_iobuf_del(&c->recv, 0, len + 6U);         // Delete received PDU
 801ad56:	68fb      	ldr	r3, [r7, #12]
 801ad58:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801ad5c:	8afb      	ldrh	r3, [r7, #22]
 801ad5e:	3306      	adds	r3, #6
 801ad60:	461a      	mov	r2, r3
 801ad62:	2100      	movs	r1, #0
 801ad64:	f7ec f9f4 	bl	8007150 <mg_iobuf_del>
 801ad68:	e002      	b.n	801ad70 <modbus_ev_handler+0x88>
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 801ad6a:	bf00      	nop
 801ad6c:	e000      	b.n	801ad70 <modbus_ev_handler+0x88>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 801ad6e:	bf00      	nop
  }
  (void) ev_data;
}
 801ad70:	3718      	adds	r7, #24
 801ad72:	46bd      	mov	sp, r7
 801ad74:	bd80      	pop	{r7, pc}
 801ad76:	bf00      	nop
 801ad78:	24000240 	.word	0x24000240
 801ad7c:	08035250 	.word	0x08035250
 801ad80:	080284cc 	.word	0x080284cc
 801ad84:	08028b54 	.word	0x08028b54

0801ad88 <mongoose_init>:
#endif  // WIZARD_ENABLE_MODBUS

void mongoose_init(void) {
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b09e      	sub	sp, #120	@ 0x78
 801ad8c:	af04      	add	r7, sp, #16
  mg_mgr_init(&g_mgr);      // Initialise event manager
 801ad8e:	484c      	ldr	r0, [pc, #304]	@ (801aec0 <mongoose_init+0x138>)
 801ad90:	f7ee fecc 	bl	8009b2c <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level to debug
 801ad94:	4b4b      	ldr	r3, [pc, #300]	@ (801aec4 <mongoose_init+0x13c>)
 801ad96:	2203      	movs	r2, #3
 801ad98:	601a      	str	r2, [r3, #0]

#if WIZARD_ENABLE_HTTP
  MG_INFO(("Starting HTTP listener"));
 801ad9a:	4b4a      	ldr	r3, [pc, #296]	@ (801aec4 <mongoose_init+0x13c>)
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	2b01      	cmp	r3, #1
 801ada0:	dd09      	ble.n	801adb6 <mongoose_init+0x2e>
 801ada2:	4b49      	ldr	r3, [pc, #292]	@ (801aec8 <mongoose_init+0x140>)
 801ada4:	f240 228a 	movw	r2, #650	@ 0x28a
 801ada8:	4948      	ldr	r1, [pc, #288]	@ (801aecc <mongoose_init+0x144>)
 801adaa:	2002      	movs	r0, #2
 801adac:	f7ed f8c0 	bl	8007f30 <mg_log_prefix>
 801adb0:	4847      	ldr	r0, [pc, #284]	@ (801aed0 <mongoose_init+0x148>)
 801adb2:	f7ed f90d 	bl	8007fd0 <mg_log>
  mg_http_listen(&g_mgr, HTTP_URL, http_ev_handler, NULL);
 801adb6:	2300      	movs	r3, #0
 801adb8:	4a46      	ldr	r2, [pc, #280]	@ (801aed4 <mongoose_init+0x14c>)
 801adba:	4947      	ldr	r1, [pc, #284]	@ (801aed8 <mongoose_init+0x150>)
 801adbc:	4840      	ldr	r0, [pc, #256]	@ (801aec0 <mongoose_init+0x138>)
 801adbe:	f7ec f8b3 	bl	8006f28 <mg_http_listen>
#endif
#if WIZARD_ENABLE_HTTPS
  MG_INFO(("Starting HTTPS listener"));
 801adc2:	4b40      	ldr	r3, [pc, #256]	@ (801aec4 <mongoose_init+0x13c>)
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	2b01      	cmp	r3, #1
 801adc8:	dd09      	ble.n	801adde <mongoose_init+0x56>
 801adca:	4b3f      	ldr	r3, [pc, #252]	@ (801aec8 <mongoose_init+0x140>)
 801adcc:	f240 228e 	movw	r2, #654	@ 0x28e
 801add0:	493e      	ldr	r1, [pc, #248]	@ (801aecc <mongoose_init+0x144>)
 801add2:	2002      	movs	r0, #2
 801add4:	f7ed f8ac 	bl	8007f30 <mg_log_prefix>
 801add8:	4840      	ldr	r0, [pc, #256]	@ (801aedc <mongoose_init+0x154>)
 801adda:	f7ed f8f9 	bl	8007fd0 <mg_log>
  mg_http_listen(&g_mgr, HTTPS_URL, http_ev_handler, "");
 801adde:	4b40      	ldr	r3, [pc, #256]	@ (801aee0 <mongoose_init+0x158>)
 801ade0:	4a3c      	ldr	r2, [pc, #240]	@ (801aed4 <mongoose_init+0x14c>)
 801ade2:	4940      	ldr	r1, [pc, #256]	@ (801aee4 <mongoose_init+0x15c>)
 801ade4:	4836      	ldr	r0, [pc, #216]	@ (801aec0 <mongoose_init+0x138>)
 801ade6:	f7ec f89f 	bl	8006f28 <mg_http_listen>
#endif

#if WIZARD_ENABLE_SNTP
  MG_INFO(("Starting SNTP timer"));
 801adea:	4b36      	ldr	r3, [pc, #216]	@ (801aec4 <mongoose_init+0x13c>)
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	2b01      	cmp	r3, #1
 801adf0:	dd09      	ble.n	801ae06 <mongoose_init+0x7e>
 801adf2:	4b35      	ldr	r3, [pc, #212]	@ (801aec8 <mongoose_init+0x140>)
 801adf4:	f240 2293 	movw	r2, #659	@ 0x293
 801adf8:	4934      	ldr	r1, [pc, #208]	@ (801aecc <mongoose_init+0x144>)
 801adfa:	2002      	movs	r0, #2
 801adfc:	f7ed f898 	bl	8007f30 <mg_log_prefix>
 801ae00:	4839      	ldr	r0, [pc, #228]	@ (801aee8 <mongoose_init+0x160>)
 801ae02:	f7ed f8e5 	bl	8007fd0 <mg_log>
  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, sntp_timer, &g_mgr);
 801ae06:	4b2e      	ldr	r3, [pc, #184]	@ (801aec0 <mongoose_init+0x138>)
 801ae08:	9302      	str	r3, [sp, #8]
 801ae0a:	4b38      	ldr	r3, [pc, #224]	@ (801aeec <mongoose_init+0x164>)
 801ae0c:	9301      	str	r3, [sp, #4]
 801ae0e:	2301      	movs	r3, #1
 801ae10:	9300      	str	r3, [sp, #0]
 801ae12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801ae16:	f04f 0300 	mov.w	r3, #0
 801ae1a:	4829      	ldr	r0, [pc, #164]	@ (801aec0 <mongoose_init+0x138>)
 801ae1c:	f7ee fe5c 	bl	8009ad8 <mg_timer_add>
#if WIZARD_DNS_TYPE == 2
  g_mgr.dns4.url = WIZARD_DNS_URL;
#endif

#if WIZARD_ENABLE_MQTT
  MG_INFO(("Starting MQTT reconnection timer"));
 801ae20:	4b28      	ldr	r3, [pc, #160]	@ (801aec4 <mongoose_init+0x13c>)
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	2b01      	cmp	r3, #1
 801ae26:	dd09      	ble.n	801ae3c <mongoose_init+0xb4>
 801ae28:	4b27      	ldr	r3, [pc, #156]	@ (801aec8 <mongoose_init+0x140>)
 801ae2a:	f44f 7227 	mov.w	r2, #668	@ 0x29c
 801ae2e:	4927      	ldr	r1, [pc, #156]	@ (801aecc <mongoose_init+0x144>)
 801ae30:	2002      	movs	r0, #2
 801ae32:	f7ed f87d 	bl	8007f30 <mg_log_prefix>
 801ae36:	482e      	ldr	r0, [pc, #184]	@ (801aef0 <mongoose_init+0x168>)
 801ae38:	f7ed f8ca 	bl	8007fd0 <mg_log>
  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, mqtt_timer, &g_mgr);
 801ae3c:	4b20      	ldr	r3, [pc, #128]	@ (801aec0 <mongoose_init+0x138>)
 801ae3e:	9302      	str	r3, [sp, #8]
 801ae40:	4b2c      	ldr	r3, [pc, #176]	@ (801aef4 <mongoose_init+0x16c>)
 801ae42:	9301      	str	r3, [sp, #4]
 801ae44:	2301      	movs	r3, #1
 801ae46:	9300      	str	r3, [sp, #0]
 801ae48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801ae4c:	f04f 0300 	mov.w	r3, #0
 801ae50:	481b      	ldr	r0, [pc, #108]	@ (801aec0 <mongoose_init+0x138>)
 801ae52:	f7ee fe41 	bl	8009ad8 <mg_timer_add>
#endif

#if WIZARD_ENABLE_MODBUS
  {
    char url[100];
    mg_snprintf(url, sizeof(url), "tcp://0.0.0.0:%d", WIZARD_MODBUS_PORT);
 801ae56:	1d38      	adds	r0, r7, #4
 801ae58:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 801ae5c:	4a26      	ldr	r2, [pc, #152]	@ (801aef8 <mongoose_init+0x170>)
 801ae5e:	2164      	movs	r1, #100	@ 0x64
 801ae60:	f7f2 fc1c 	bl	800d69c <mg_snprintf>
    MG_INFO(("Starting Modbus-TCP server on port %d", WIZARD_MODBUS_PORT));
 801ae64:	4b17      	ldr	r3, [pc, #92]	@ (801aec4 <mongoose_init+0x13c>)
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	2b01      	cmp	r3, #1
 801ae6a:	dd0b      	ble.n	801ae84 <mongoose_init+0xfc>
 801ae6c:	4b16      	ldr	r3, [pc, #88]	@ (801aec8 <mongoose_init+0x140>)
 801ae6e:	f44f 7229 	mov.w	r2, #676	@ 0x2a4
 801ae72:	4916      	ldr	r1, [pc, #88]	@ (801aecc <mongoose_init+0x144>)
 801ae74:	2002      	movs	r0, #2
 801ae76:	f7ed f85b 	bl	8007f30 <mg_log_prefix>
 801ae7a:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 801ae7e:	481f      	ldr	r0, [pc, #124]	@ (801aefc <mongoose_init+0x174>)
 801ae80:	f7ed f8a6 	bl	8007fd0 <mg_log>
    mg_listen(&g_mgr, url, modbus_ev_handler, NULL);
 801ae84:	1d39      	adds	r1, r7, #4
 801ae86:	2300      	movs	r3, #0
 801ae88:	4a1d      	ldr	r2, [pc, #116]	@ (801af00 <mongoose_init+0x178>)
 801ae8a:	480d      	ldr	r0, [pc, #52]	@ (801aec0 <mongoose_init+0x138>)
 801ae8c:	f7ee fd82 	bl	8009994 <mg_listen>
  }
#endif

  MG_INFO(("Mongoose init complete, calling user init"));
 801ae90:	4b0c      	ldr	r3, [pc, #48]	@ (801aec4 <mongoose_init+0x13c>)
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	2b01      	cmp	r3, #1
 801ae96:	dd09      	ble.n	801aeac <mongoose_init+0x124>
 801ae98:	4b0b      	ldr	r3, [pc, #44]	@ (801aec8 <mongoose_init+0x140>)
 801ae9a:	f240 22a9 	movw	r2, #681	@ 0x2a9
 801ae9e:	490b      	ldr	r1, [pc, #44]	@ (801aecc <mongoose_init+0x144>)
 801aea0:	2002      	movs	r0, #2
 801aea2:	f7ed f845 	bl	8007f30 <mg_log_prefix>
 801aea6:	4817      	ldr	r0, [pc, #92]	@ (801af04 <mongoose_init+0x17c>)
 801aea8:	f7ed f892 	bl	8007fd0 <mg_log>
  glue_init_1();
 801aeac:	f7fd fca8 	bl	8018800 <glue_init_1>
  glue_init_2();
 801aeb0:	f7fd fd24 	bl	80188fc <glue_init_2>
  glue_init_3();
 801aeb4:	f7fd fda0 	bl	80189f8 <glue_init_3>
}
 801aeb8:	bf00      	nop
 801aeba:	3768      	adds	r7, #104	@ 0x68
 801aebc:	46bd      	mov	sp, r7
 801aebe:	bd80      	pop	{r7, pc}
 801aec0:	24003f1c 	.word	0x24003f1c
 801aec4:	24000240 	.word	0x24000240
 801aec8:	08035264 	.word	0x08035264
 801aecc:	080284cc 	.word	0x080284cc
 801aed0:	08028b6c 	.word	0x08028b6c
 801aed4:	0801a35d 	.word	0x0801a35d
 801aed8:	08028b84 	.word	0x08028b84
 801aedc:	08028b98 	.word	0x08028b98
 801aee0:	08028538 	.word	0x08028538
 801aee4:	08028bb0 	.word	0x08028bb0
 801aee8:	08028bc4 	.word	0x08028bc4
 801aeec:	0801a709 	.word	0x0801a709
 801aef0:	08028bd8 	.word	0x08028bd8
 801aef4:	0801a821 	.word	0x0801a821
 801aef8:	08028bfc 	.word	0x08028bfc
 801aefc:	08028c10 	.word	0x08028c10
 801af00:	0801ace9 	.word	0x0801ace9
 801af04:	08028c38 	.word	0x08028c38

0801af08 <mongoose_poll>:

void mongoose_poll(void) {
 801af08:	b580      	push	{r7, lr}
 801af0a:	af00      	add	r7, sp, #0
  glue_lock();
 801af0c:	f7fd fda0 	bl	8018a50 <glue_lock>
  mg_mgr_poll(&g_mgr, 50);
 801af10:	2132      	movs	r1, #50	@ 0x32
 801af12:	4803      	ldr	r0, [pc, #12]	@ (801af20 <mongoose_poll+0x18>)
 801af14:	f7f1 ffc6 	bl	800cea4 <mg_mgr_poll>
  glue_unlock();
 801af18:	f7fd fda1 	bl	8018a5e <glue_unlock>
}
 801af1c:	bf00      	nop
 801af1e:	bd80      	pop	{r7, pc}
 801af20:	24003f1c 	.word	0x24003f1c

0801af24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801af24:	b480      	push	{r7}
 801af26:	b083      	sub	sp, #12
 801af28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801af2a:	4b0a      	ldr	r3, [pc, #40]	@ (801af54 <HAL_MspInit+0x30>)
 801af2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801af30:	4a08      	ldr	r2, [pc, #32]	@ (801af54 <HAL_MspInit+0x30>)
 801af32:	f043 0302 	orr.w	r3, r3, #2
 801af36:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801af3a:	4b06      	ldr	r3, [pc, #24]	@ (801af54 <HAL_MspInit+0x30>)
 801af3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801af40:	f003 0302 	and.w	r3, r3, #2
 801af44:	607b      	str	r3, [r7, #4]
 801af46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801af48:	bf00      	nop
 801af4a:	370c      	adds	r7, #12
 801af4c:	46bd      	mov	sp, r7
 801af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af52:	4770      	bx	lr
 801af54:	58024400 	.word	0x58024400

0801af58 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 801af58:	b580      	push	{r7, lr}
 801af5a:	b08e      	sub	sp, #56	@ 0x38
 801af5c:	af00      	add	r7, sp, #0
 801af5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801af60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801af64:	2200      	movs	r2, #0
 801af66:	601a      	str	r2, [r3, #0]
 801af68:	605a      	str	r2, [r3, #4]
 801af6a:	609a      	str	r2, [r3, #8]
 801af6c:	60da      	str	r2, [r3, #12]
 801af6e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	4a5d      	ldr	r2, [pc, #372]	@ (801b0ec <HAL_ETH_MspInit+0x194>)
 801af76:	4293      	cmp	r3, r2
 801af78:	f040 80b3 	bne.w	801b0e2 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 801af7c:	4b5c      	ldr	r3, [pc, #368]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801af7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801af82:	4a5b      	ldr	r2, [pc, #364]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801af84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801af88:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801af8c:	4b58      	ldr	r3, [pc, #352]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801af8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801af92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801af96:	623b      	str	r3, [r7, #32]
 801af98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 801af9a:	4b55      	ldr	r3, [pc, #340]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801af9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801afa0:	4a53      	ldr	r2, [pc, #332]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801afa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801afa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801afaa:	4b51      	ldr	r3, [pc, #324]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801afac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801afb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801afb4:	61fb      	str	r3, [r7, #28]
 801afb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 801afb8:	4b4d      	ldr	r3, [pc, #308]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801afba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801afbe:	4a4c      	ldr	r2, [pc, #304]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801afc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801afc4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801afc8:	4b49      	ldr	r3, [pc, #292]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801afca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801afce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801afd2:	61bb      	str	r3, [r7, #24]
 801afd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801afd6:	4b46      	ldr	r3, [pc, #280]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801afd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801afdc:	4a44      	ldr	r2, [pc, #272]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801afde:	f043 0304 	orr.w	r3, r3, #4
 801afe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801afe6:	4b42      	ldr	r3, [pc, #264]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801afe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801afec:	f003 0304 	and.w	r3, r3, #4
 801aff0:	617b      	str	r3, [r7, #20]
 801aff2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801aff4:	4b3e      	ldr	r3, [pc, #248]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801aff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801affa:	4a3d      	ldr	r2, [pc, #244]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801affc:	f043 0301 	orr.w	r3, r3, #1
 801b000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b004:	4b3a      	ldr	r3, [pc, #232]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801b006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b00a:	f003 0301 	and.w	r3, r3, #1
 801b00e:	613b      	str	r3, [r7, #16]
 801b010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801b012:	4b37      	ldr	r3, [pc, #220]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801b014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b018:	4a35      	ldr	r2, [pc, #212]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801b01a:	f043 0302 	orr.w	r3, r3, #2
 801b01e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b022:	4b33      	ldr	r3, [pc, #204]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801b024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b028:	f003 0302 	and.w	r3, r3, #2
 801b02c:	60fb      	str	r3, [r7, #12]
 801b02e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801b030:	4b2f      	ldr	r3, [pc, #188]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801b032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b036:	4a2e      	ldr	r2, [pc, #184]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801b038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b03c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b040:	4b2b      	ldr	r3, [pc, #172]	@ (801b0f0 <HAL_ETH_MspInit+0x198>)
 801b042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b04a:	60bb      	str	r3, [r7, #8]
 801b04c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 801b04e:	2332      	movs	r3, #50	@ 0x32
 801b050:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b052:	2302      	movs	r3, #2
 801b054:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b056:	2300      	movs	r3, #0
 801b058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b05a:	2300      	movs	r3, #0
 801b05c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801b05e:	230b      	movs	r3, #11
 801b060:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801b062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b066:	4619      	mov	r1, r3
 801b068:	4822      	ldr	r0, [pc, #136]	@ (801b0f4 <HAL_ETH_MspInit+0x19c>)
 801b06a:	f001 f85d 	bl	801c128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 801b06e:	2386      	movs	r3, #134	@ 0x86
 801b070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b072:	2302      	movs	r3, #2
 801b074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b076:	2300      	movs	r3, #0
 801b078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b07a:	2300      	movs	r3, #0
 801b07c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801b07e:	230b      	movs	r3, #11
 801b080:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b086:	4619      	mov	r1, r3
 801b088:	481b      	ldr	r0, [pc, #108]	@ (801b0f8 <HAL_ETH_MspInit+0x1a0>)
 801b08a:	f001 f84d 	bl	801c128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 801b08e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801b092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b094:	2302      	movs	r3, #2
 801b096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b098:	2300      	movs	r3, #0
 801b09a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b09c:	2300      	movs	r3, #0
 801b09e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801b0a0:	230b      	movs	r3, #11
 801b0a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b0a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b0a8:	4619      	mov	r1, r3
 801b0aa:	4814      	ldr	r0, [pc, #80]	@ (801b0fc <HAL_ETH_MspInit+0x1a4>)
 801b0ac:	f001 f83c 	bl	801c128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 801b0b0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 801b0b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b0b6:	2302      	movs	r3, #2
 801b0b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b0be:	2300      	movs	r3, #0
 801b0c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801b0c2:	230b      	movs	r3, #11
 801b0c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801b0c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b0ca:	4619      	mov	r1, r3
 801b0cc:	480c      	ldr	r0, [pc, #48]	@ (801b100 <HAL_ETH_MspInit+0x1a8>)
 801b0ce:	f001 f82b 	bl	801c128 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 801b0d2:	2200      	movs	r2, #0
 801b0d4:	2100      	movs	r1, #0
 801b0d6:	203d      	movs	r0, #61	@ 0x3d
 801b0d8:	f000 fbbd 	bl	801b856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801b0dc:	203d      	movs	r0, #61	@ 0x3d
 801b0de:	f000 fbd4 	bl	801b88a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 801b0e2:	bf00      	nop
 801b0e4:	3738      	adds	r7, #56	@ 0x38
 801b0e6:	46bd      	mov	sp, r7
 801b0e8:	bd80      	pop	{r7, pc}
 801b0ea:	bf00      	nop
 801b0ec:	40028000 	.word	0x40028000
 801b0f0:	58024400 	.word	0x58024400
 801b0f4:	58020800 	.word	0x58020800
 801b0f8:	58020000 	.word	0x58020000
 801b0fc:	58020400 	.word	0x58020400
 801b100:	58021800 	.word	0x58021800

0801b104 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 801b104:	b580      	push	{r7, lr}
 801b106:	b0b4      	sub	sp, #208	@ 0xd0
 801b108:	af00      	add	r7, sp, #0
 801b10a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801b10c:	f107 0310 	add.w	r3, r7, #16
 801b110:	22c0      	movs	r2, #192	@ 0xc0
 801b112:	2100      	movs	r1, #0
 801b114:	4618      	mov	r0, r3
 801b116:	f006 fe65 	bl	8021de4 <memset>
  if(hrng->Instance==RNG)
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	4a14      	ldr	r2, [pc, #80]	@ (801b170 <HAL_RNG_MspInit+0x6c>)
 801b120:	4293      	cmp	r3, r2
 801b122:	d121      	bne.n	801b168 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 801b124:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801b128:	f04f 0300 	mov.w	r3, #0
 801b12c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 801b130:	2300      	movs	r3, #0
 801b132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801b136:	f107 0310 	add.w	r3, r7, #16
 801b13a:	4618      	mov	r0, r3
 801b13c:	f002 f9fe 	bl	801d53c <HAL_RCCEx_PeriphCLKConfig>
 801b140:	4603      	mov	r3, r0
 801b142:	2b00      	cmp	r3, #0
 801b144:	d001      	beq.n	801b14a <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 801b146:	f7e6 f997 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 801b14a:	4b0a      	ldr	r3, [pc, #40]	@ (801b174 <HAL_RNG_MspInit+0x70>)
 801b14c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801b150:	4a08      	ldr	r2, [pc, #32]	@ (801b174 <HAL_RNG_MspInit+0x70>)
 801b152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b156:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 801b15a:	4b06      	ldr	r3, [pc, #24]	@ (801b174 <HAL_RNG_MspInit+0x70>)
 801b15c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801b160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b164:	60fb      	str	r3, [r7, #12]
 801b166:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 801b168:	bf00      	nop
 801b16a:	37d0      	adds	r7, #208	@ 0xd0
 801b16c:	46bd      	mov	sp, r7
 801b16e:	bd80      	pop	{r7, pc}
 801b170:	48021800 	.word	0x48021800
 801b174:	58024400 	.word	0x58024400

0801b178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b0be      	sub	sp, #248	@ 0xf8
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b180:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801b184:	2200      	movs	r2, #0
 801b186:	601a      	str	r2, [r3, #0]
 801b188:	605a      	str	r2, [r3, #4]
 801b18a:	609a      	str	r2, [r3, #8]
 801b18c:	60da      	str	r2, [r3, #12]
 801b18e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801b190:	f107 0320 	add.w	r3, r7, #32
 801b194:	22c0      	movs	r2, #192	@ 0xc0
 801b196:	2100      	movs	r1, #0
 801b198:	4618      	mov	r0, r3
 801b19a:	f006 fe23 	bl	8021de4 <memset>
  if(huart->Instance==USART2)
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	4a5f      	ldr	r2, [pc, #380]	@ (801b320 <HAL_UART_MspInit+0x1a8>)
 801b1a4:	4293      	cmp	r3, r2
 801b1a6:	d16a      	bne.n	801b27e <HAL_UART_MspInit+0x106>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 801b1a8:	f04f 0202 	mov.w	r2, #2
 801b1ac:	f04f 0300 	mov.w	r3, #0
 801b1b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801b1ba:	f107 0320 	add.w	r3, r7, #32
 801b1be:	4618      	mov	r0, r3
 801b1c0:	f002 f9bc 	bl	801d53c <HAL_RCCEx_PeriphCLKConfig>
 801b1c4:	4603      	mov	r3, r0
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d001      	beq.n	801b1ce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 801b1ca:	f7e6 f955 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801b1ce:	4b55      	ldr	r3, [pc, #340]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b1d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b1d4:	4a53      	ldr	r2, [pc, #332]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b1d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b1da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b1de:	4b51      	ldr	r3, [pc, #324]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b1e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b1e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b1e8:	61fb      	str	r3, [r7, #28]
 801b1ea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b1ec:	4b4d      	ldr	r3, [pc, #308]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b1ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b1f2:	4a4c      	ldr	r2, [pc, #304]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b1f4:	f043 0301 	orr.w	r3, r3, #1
 801b1f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b1fc:	4b49      	ldr	r3, [pc, #292]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b1fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b202:	f003 0301 	and.w	r3, r3, #1
 801b206:	61bb      	str	r3, [r7, #24]
 801b208:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801b20a:	4b46      	ldr	r3, [pc, #280]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b20c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b210:	4a44      	ldr	r2, [pc, #272]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b212:	f043 0308 	orr.w	r3, r3, #8
 801b216:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b21a:	4b42      	ldr	r3, [pc, #264]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b21c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b220:	f003 0308 	and.w	r3, r3, #8
 801b224:	617b      	str	r3, [r7, #20]
 801b226:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD4     ------> USART2_DE
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801b228:	2308      	movs	r3, #8
 801b22a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b22e:	2302      	movs	r3, #2
 801b230:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b234:	2300      	movs	r3, #0
 801b236:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b23a:	2300      	movs	r3, #0
 801b23c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801b240:	2307      	movs	r3, #7
 801b242:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b246:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801b24a:	4619      	mov	r1, r3
 801b24c:	4836      	ldr	r0, [pc, #216]	@ (801b328 <HAL_UART_MspInit+0x1b0>)
 801b24e:	f000 ff6b 	bl	801c128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 801b252:	2330      	movs	r3, #48	@ 0x30
 801b254:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b258:	2302      	movs	r3, #2
 801b25a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b25e:	2300      	movs	r3, #0
 801b260:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b264:	2300      	movs	r3, #0
 801b266:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801b26a:	2307      	movs	r3, #7
 801b26c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801b270:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801b274:	4619      	mov	r1, r3
 801b276:	482d      	ldr	r0, [pc, #180]	@ (801b32c <HAL_UART_MspInit+0x1b4>)
 801b278:	f000 ff56 	bl	801c128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 801b27c:	e04b      	b.n	801b316 <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	4a2b      	ldr	r2, [pc, #172]	@ (801b330 <HAL_UART_MspInit+0x1b8>)
 801b284:	4293      	cmp	r3, r2
 801b286:	d146      	bne.n	801b316 <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 801b288:	f04f 0202 	mov.w	r2, #2
 801b28c:	f04f 0300 	mov.w	r3, #0
 801b290:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801b294:	2300      	movs	r3, #0
 801b296:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801b29a:	f107 0320 	add.w	r3, r7, #32
 801b29e:	4618      	mov	r0, r3
 801b2a0:	f002 f94c 	bl	801d53c <HAL_RCCEx_PeriphCLKConfig>
 801b2a4:	4603      	mov	r3, r0
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d001      	beq.n	801b2ae <HAL_UART_MspInit+0x136>
      Error_Handler();
 801b2aa:	f7e6 f8e5 	bl	8001478 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 801b2ae:	4b1d      	ldr	r3, [pc, #116]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b2b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b2b4:	4a1b      	ldr	r2, [pc, #108]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b2b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801b2ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b2be:	4b19      	ldr	r3, [pc, #100]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b2c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b2c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801b2c8:	613b      	str	r3, [r7, #16]
 801b2ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801b2cc:	4b15      	ldr	r3, [pc, #84]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b2ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b2d2:	4a14      	ldr	r2, [pc, #80]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b2d4:	f043 0308 	orr.w	r3, r3, #8
 801b2d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801b2dc:	4b11      	ldr	r3, [pc, #68]	@ (801b324 <HAL_UART_MspInit+0x1ac>)
 801b2de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801b2e2:	f003 0308 	and.w	r3, r3, #8
 801b2e6:	60fb      	str	r3, [r7, #12]
 801b2e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801b2ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801b2ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b2f2:	2302      	movs	r3, #2
 801b2f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b2f8:	2300      	movs	r3, #0
 801b2fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b2fe:	2300      	movs	r3, #0
 801b300:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801b304:	2307      	movs	r3, #7
 801b306:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801b30a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801b30e:	4619      	mov	r1, r3
 801b310:	4806      	ldr	r0, [pc, #24]	@ (801b32c <HAL_UART_MspInit+0x1b4>)
 801b312:	f000 ff09 	bl	801c128 <HAL_GPIO_Init>
}
 801b316:	bf00      	nop
 801b318:	37f8      	adds	r7, #248	@ 0xf8
 801b31a:	46bd      	mov	sp, r7
 801b31c:	bd80      	pop	{r7, pc}
 801b31e:	bf00      	nop
 801b320:	40004400 	.word	0x40004400
 801b324:	58024400 	.word	0x58024400
 801b328:	58020000 	.word	0x58020000
 801b32c:	58020c00 	.word	0x58020c00
 801b330:	40004800 	.word	0x40004800

0801b334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801b334:	b480      	push	{r7}
 801b336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 801b338:	bf00      	nop
 801b33a:	e7fd      	b.n	801b338 <NMI_Handler+0x4>

0801b33c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801b33c:	b480      	push	{r7}
 801b33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801b340:	bf00      	nop
 801b342:	e7fd      	b.n	801b340 <HardFault_Handler+0x4>

0801b344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801b344:	b480      	push	{r7}
 801b346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801b348:	bf00      	nop
 801b34a:	e7fd      	b.n	801b348 <MemManage_Handler+0x4>

0801b34c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801b34c:	b480      	push	{r7}
 801b34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801b350:	bf00      	nop
 801b352:	e7fd      	b.n	801b350 <BusFault_Handler+0x4>

0801b354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801b354:	b480      	push	{r7}
 801b356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801b358:	bf00      	nop
 801b35a:	e7fd      	b.n	801b358 <UsageFault_Handler+0x4>

0801b35c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801b35c:	b480      	push	{r7}
 801b35e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801b360:	bf00      	nop
 801b362:	46bd      	mov	sp, r7
 801b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b368:	4770      	bx	lr

0801b36a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801b36a:	b480      	push	{r7}
 801b36c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801b36e:	bf00      	nop
 801b370:	46bd      	mov	sp, r7
 801b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b376:	4770      	bx	lr

0801b378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801b378:	b480      	push	{r7}
 801b37a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801b37c:	bf00      	nop
 801b37e:	46bd      	mov	sp, r7
 801b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b384:	4770      	bx	lr

0801b386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801b386:	b580      	push	{r7, lr}
 801b388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801b38a:	f000 f949 	bl	801b620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801b38e:	bf00      	nop
 801b390:	bd80      	pop	{r7, pc}

0801b392 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801b392:	b480      	push	{r7}
 801b394:	af00      	add	r7, sp, #0
  return 1;
 801b396:	2301      	movs	r3, #1
}
 801b398:	4618      	mov	r0, r3
 801b39a:	46bd      	mov	sp, r7
 801b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3a0:	4770      	bx	lr

0801b3a2 <_kill>:

int _kill(int pid, int sig)
{
 801b3a2:	b580      	push	{r7, lr}
 801b3a4:	b082      	sub	sp, #8
 801b3a6:	af00      	add	r7, sp, #0
 801b3a8:	6078      	str	r0, [r7, #4]
 801b3aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801b3ac:	f006 fdda 	bl	8021f64 <__errno>
 801b3b0:	4603      	mov	r3, r0
 801b3b2:	2216      	movs	r2, #22
 801b3b4:	601a      	str	r2, [r3, #0]
  return -1;
 801b3b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	3708      	adds	r7, #8
 801b3be:	46bd      	mov	sp, r7
 801b3c0:	bd80      	pop	{r7, pc}

0801b3c2 <_exit>:

void _exit (int status)
{
 801b3c2:	b580      	push	{r7, lr}
 801b3c4:	b082      	sub	sp, #8
 801b3c6:	af00      	add	r7, sp, #0
 801b3c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801b3ca:	f04f 31ff 	mov.w	r1, #4294967295
 801b3ce:	6878      	ldr	r0, [r7, #4]
 801b3d0:	f7ff ffe7 	bl	801b3a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 801b3d4:	bf00      	nop
 801b3d6:	e7fd      	b.n	801b3d4 <_exit+0x12>

0801b3d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b086      	sub	sp, #24
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	60f8      	str	r0, [r7, #12]
 801b3e0:	60b9      	str	r1, [r7, #8]
 801b3e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	617b      	str	r3, [r7, #20]
 801b3e8:	e00a      	b.n	801b400 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801b3ea:	f3af 8000 	nop.w
 801b3ee:	4601      	mov	r1, r0
 801b3f0:	68bb      	ldr	r3, [r7, #8]
 801b3f2:	1c5a      	adds	r2, r3, #1
 801b3f4:	60ba      	str	r2, [r7, #8]
 801b3f6:	b2ca      	uxtb	r2, r1
 801b3f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801b3fa:	697b      	ldr	r3, [r7, #20]
 801b3fc:	3301      	adds	r3, #1
 801b3fe:	617b      	str	r3, [r7, #20]
 801b400:	697a      	ldr	r2, [r7, #20]
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	429a      	cmp	r2, r3
 801b406:	dbf0      	blt.n	801b3ea <_read+0x12>
  }

  return len;
 801b408:	687b      	ldr	r3, [r7, #4]
}
 801b40a:	4618      	mov	r0, r3
 801b40c:	3718      	adds	r7, #24
 801b40e:	46bd      	mov	sp, r7
 801b410:	bd80      	pop	{r7, pc}

0801b412 <_close>:
  }
  return len;
}

int _close(int file)
{
 801b412:	b480      	push	{r7}
 801b414:	b083      	sub	sp, #12
 801b416:	af00      	add	r7, sp, #0
 801b418:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801b41a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b41e:	4618      	mov	r0, r3
 801b420:	370c      	adds	r7, #12
 801b422:	46bd      	mov	sp, r7
 801b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b428:	4770      	bx	lr

0801b42a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801b42a:	b480      	push	{r7}
 801b42c:	b083      	sub	sp, #12
 801b42e:	af00      	add	r7, sp, #0
 801b430:	6078      	str	r0, [r7, #4]
 801b432:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801b434:	683b      	ldr	r3, [r7, #0]
 801b436:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801b43a:	605a      	str	r2, [r3, #4]
  return 0;
 801b43c:	2300      	movs	r3, #0
}
 801b43e:	4618      	mov	r0, r3
 801b440:	370c      	adds	r7, #12
 801b442:	46bd      	mov	sp, r7
 801b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b448:	4770      	bx	lr

0801b44a <_isatty>:

int _isatty(int file)
{
 801b44a:	b480      	push	{r7}
 801b44c:	b083      	sub	sp, #12
 801b44e:	af00      	add	r7, sp, #0
 801b450:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801b452:	2301      	movs	r3, #1
}
 801b454:	4618      	mov	r0, r3
 801b456:	370c      	adds	r7, #12
 801b458:	46bd      	mov	sp, r7
 801b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b45e:	4770      	bx	lr

0801b460 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801b460:	b480      	push	{r7}
 801b462:	b085      	sub	sp, #20
 801b464:	af00      	add	r7, sp, #0
 801b466:	60f8      	str	r0, [r7, #12]
 801b468:	60b9      	str	r1, [r7, #8]
 801b46a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801b46c:	2300      	movs	r3, #0
}
 801b46e:	4618      	mov	r0, r3
 801b470:	3714      	adds	r7, #20
 801b472:	46bd      	mov	sp, r7
 801b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b478:	4770      	bx	lr
	...

0801b47c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801b47c:	b580      	push	{r7, lr}
 801b47e:	b086      	sub	sp, #24
 801b480:	af00      	add	r7, sp, #0
 801b482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801b484:	4a14      	ldr	r2, [pc, #80]	@ (801b4d8 <_sbrk+0x5c>)
 801b486:	4b15      	ldr	r3, [pc, #84]	@ (801b4dc <_sbrk+0x60>)
 801b488:	1ad3      	subs	r3, r2, r3
 801b48a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801b48c:	697b      	ldr	r3, [r7, #20]
 801b48e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801b490:	4b13      	ldr	r3, [pc, #76]	@ (801b4e0 <_sbrk+0x64>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d102      	bne.n	801b49e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801b498:	4b11      	ldr	r3, [pc, #68]	@ (801b4e0 <_sbrk+0x64>)
 801b49a:	4a12      	ldr	r2, [pc, #72]	@ (801b4e4 <_sbrk+0x68>)
 801b49c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801b49e:	4b10      	ldr	r3, [pc, #64]	@ (801b4e0 <_sbrk+0x64>)
 801b4a0:	681a      	ldr	r2, [r3, #0]
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	4413      	add	r3, r2
 801b4a6:	693a      	ldr	r2, [r7, #16]
 801b4a8:	429a      	cmp	r2, r3
 801b4aa:	d207      	bcs.n	801b4bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 801b4ac:	f006 fd5a 	bl	8021f64 <__errno>
 801b4b0:	4603      	mov	r3, r0
 801b4b2:	220c      	movs	r2, #12
 801b4b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801b4b6:	f04f 33ff 	mov.w	r3, #4294967295
 801b4ba:	e009      	b.n	801b4d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801b4bc:	4b08      	ldr	r3, [pc, #32]	@ (801b4e0 <_sbrk+0x64>)
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801b4c2:	4b07      	ldr	r3, [pc, #28]	@ (801b4e0 <_sbrk+0x64>)
 801b4c4:	681a      	ldr	r2, [r3, #0]
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	4413      	add	r3, r2
 801b4ca:	4a05      	ldr	r2, [pc, #20]	@ (801b4e0 <_sbrk+0x64>)
 801b4cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801b4ce:	68fb      	ldr	r3, [r7, #12]
}
 801b4d0:	4618      	mov	r0, r3
 801b4d2:	3718      	adds	r7, #24
 801b4d4:	46bd      	mov	sp, r7
 801b4d6:	bd80      	pop	{r7, pc}
 801b4d8:	24080000 	.word	0x24080000
 801b4dc:	00000400 	.word	0x00000400
 801b4e0:	24003f80 	.word	0x24003f80
 801b4e4:	240040d8 	.word	0x240040d8

0801b4e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 801b4e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 801b520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 801b4ec:	f7e5 fb1c 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801b4f0:	480c      	ldr	r0, [pc, #48]	@ (801b524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801b4f2:	490d      	ldr	r1, [pc, #52]	@ (801b528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801b4f4:	4a0d      	ldr	r2, [pc, #52]	@ (801b52c <LoopFillZerobss+0x1a>)
  movs r3, #0
 801b4f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801b4f8:	e002      	b.n	801b500 <LoopCopyDataInit>

0801b4fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801b4fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801b4fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801b4fe:	3304      	adds	r3, #4

0801b500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801b500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801b502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801b504:	d3f9      	bcc.n	801b4fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801b506:	4a0a      	ldr	r2, [pc, #40]	@ (801b530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 801b508:	4c0a      	ldr	r4, [pc, #40]	@ (801b534 <LoopFillZerobss+0x22>)
  movs r3, #0
 801b50a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801b50c:	e001      	b.n	801b512 <LoopFillZerobss>

0801b50e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801b50e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801b510:	3204      	adds	r2, #4

0801b512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801b512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801b514:	d3fb      	bcc.n	801b50e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801b516:	f006 fd2b 	bl	8021f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801b51a:	f7e5 fd5b 	bl	8000fd4 <main>
  bx  lr
 801b51e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801b520:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801b524:	24000000 	.word	0x24000000
  ldr r1, =_edata
 801b528:	2400096c 	.word	0x2400096c
  ldr r2, =_sidata
 801b52c:	08035734 	.word	0x08035734
  ldr r2, =_sbss
 801b530:	24000a30 	.word	0x24000a30
  ldr r4, =_ebss
 801b534:	240040d4 	.word	0x240040d4

0801b538 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801b538:	e7fe      	b.n	801b538 <ADC3_IRQHandler>
	...

0801b53c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b082      	sub	sp, #8
 801b540:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801b542:	2003      	movs	r0, #3
 801b544:	f000 f97c 	bl	801b840 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801b548:	f001 fe22 	bl	801d190 <HAL_RCC_GetSysClockFreq>
 801b54c:	4602      	mov	r2, r0
 801b54e:	4b15      	ldr	r3, [pc, #84]	@ (801b5a4 <HAL_Init+0x68>)
 801b550:	699b      	ldr	r3, [r3, #24]
 801b552:	0a1b      	lsrs	r3, r3, #8
 801b554:	f003 030f 	and.w	r3, r3, #15
 801b558:	4913      	ldr	r1, [pc, #76]	@ (801b5a8 <HAL_Init+0x6c>)
 801b55a:	5ccb      	ldrb	r3, [r1, r3]
 801b55c:	f003 031f 	and.w	r3, r3, #31
 801b560:	fa22 f303 	lsr.w	r3, r2, r3
 801b564:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801b566:	4b0f      	ldr	r3, [pc, #60]	@ (801b5a4 <HAL_Init+0x68>)
 801b568:	699b      	ldr	r3, [r3, #24]
 801b56a:	f003 030f 	and.w	r3, r3, #15
 801b56e:	4a0e      	ldr	r2, [pc, #56]	@ (801b5a8 <HAL_Init+0x6c>)
 801b570:	5cd3      	ldrb	r3, [r2, r3]
 801b572:	f003 031f 	and.w	r3, r3, #31
 801b576:	687a      	ldr	r2, [r7, #4]
 801b578:	fa22 f303 	lsr.w	r3, r2, r3
 801b57c:	4a0b      	ldr	r2, [pc, #44]	@ (801b5ac <HAL_Init+0x70>)
 801b57e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801b580:	4a0b      	ldr	r2, [pc, #44]	@ (801b5b0 <HAL_Init+0x74>)
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801b586:	2000      	movs	r0, #0
 801b588:	f000 f814 	bl	801b5b4 <HAL_InitTick>
 801b58c:	4603      	mov	r3, r0
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d001      	beq.n	801b596 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801b592:	2301      	movs	r3, #1
 801b594:	e002      	b.n	801b59c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801b596:	f7ff fcc5 	bl	801af24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801b59a:	2300      	movs	r3, #0
}
 801b59c:	4618      	mov	r0, r3
 801b59e:	3708      	adds	r7, #8
 801b5a0:	46bd      	mov	sp, r7
 801b5a2:	bd80      	pop	{r7, pc}
 801b5a4:	58024400 	.word	0x58024400
 801b5a8:	08028c64 	.word	0x08028c64
 801b5ac:	24000004 	.word	0x24000004
 801b5b0:	24000000 	.word	0x24000000

0801b5b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801b5b4:	b580      	push	{r7, lr}
 801b5b6:	b082      	sub	sp, #8
 801b5b8:	af00      	add	r7, sp, #0
 801b5ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801b5bc:	4b15      	ldr	r3, [pc, #84]	@ (801b614 <HAL_InitTick+0x60>)
 801b5be:	781b      	ldrb	r3, [r3, #0]
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d101      	bne.n	801b5c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801b5c4:	2301      	movs	r3, #1
 801b5c6:	e021      	b.n	801b60c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801b5c8:	4b13      	ldr	r3, [pc, #76]	@ (801b618 <HAL_InitTick+0x64>)
 801b5ca:	681a      	ldr	r2, [r3, #0]
 801b5cc:	4b11      	ldr	r3, [pc, #68]	@ (801b614 <HAL_InitTick+0x60>)
 801b5ce:	781b      	ldrb	r3, [r3, #0]
 801b5d0:	4619      	mov	r1, r3
 801b5d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b5d6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b5da:	fbb2 f3f3 	udiv	r3, r2, r3
 801b5de:	4618      	mov	r0, r3
 801b5e0:	f000 f961 	bl	801b8a6 <HAL_SYSTICK_Config>
 801b5e4:	4603      	mov	r3, r0
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d001      	beq.n	801b5ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801b5ea:	2301      	movs	r3, #1
 801b5ec:	e00e      	b.n	801b60c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	2b0f      	cmp	r3, #15
 801b5f2:	d80a      	bhi.n	801b60a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801b5f4:	2200      	movs	r2, #0
 801b5f6:	6879      	ldr	r1, [r7, #4]
 801b5f8:	f04f 30ff 	mov.w	r0, #4294967295
 801b5fc:	f000 f92b 	bl	801b856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801b600:	4a06      	ldr	r2, [pc, #24]	@ (801b61c <HAL_InitTick+0x68>)
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801b606:	2300      	movs	r3, #0
 801b608:	e000      	b.n	801b60c <HAL_InitTick+0x58>
    return HAL_ERROR;
 801b60a:	2301      	movs	r3, #1
}
 801b60c:	4618      	mov	r0, r3
 801b60e:	3708      	adds	r7, #8
 801b610:	46bd      	mov	sp, r7
 801b612:	bd80      	pop	{r7, pc}
 801b614:	240007a0 	.word	0x240007a0
 801b618:	24000000 	.word	0x24000000
 801b61c:	2400079c 	.word	0x2400079c

0801b620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801b620:	b480      	push	{r7}
 801b622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801b624:	4b06      	ldr	r3, [pc, #24]	@ (801b640 <HAL_IncTick+0x20>)
 801b626:	781b      	ldrb	r3, [r3, #0]
 801b628:	461a      	mov	r2, r3
 801b62a:	4b06      	ldr	r3, [pc, #24]	@ (801b644 <HAL_IncTick+0x24>)
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	4413      	add	r3, r2
 801b630:	4a04      	ldr	r2, [pc, #16]	@ (801b644 <HAL_IncTick+0x24>)
 801b632:	6013      	str	r3, [r2, #0]
}
 801b634:	bf00      	nop
 801b636:	46bd      	mov	sp, r7
 801b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b63c:	4770      	bx	lr
 801b63e:	bf00      	nop
 801b640:	240007a0 	.word	0x240007a0
 801b644:	24003f84 	.word	0x24003f84

0801b648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801b648:	b480      	push	{r7}
 801b64a:	af00      	add	r7, sp, #0
  return uwTick;
 801b64c:	4b03      	ldr	r3, [pc, #12]	@ (801b65c <HAL_GetTick+0x14>)
 801b64e:	681b      	ldr	r3, [r3, #0]
}
 801b650:	4618      	mov	r0, r3
 801b652:	46bd      	mov	sp, r7
 801b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b658:	4770      	bx	lr
 801b65a:	bf00      	nop
 801b65c:	24003f84 	.word	0x24003f84

0801b660 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801b660:	b480      	push	{r7}
 801b662:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801b664:	4b03      	ldr	r3, [pc, #12]	@ (801b674 <HAL_GetREVID+0x14>)
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	0c1b      	lsrs	r3, r3, #16
}
 801b66a:	4618      	mov	r0, r3
 801b66c:	46bd      	mov	sp, r7
 801b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b672:	4770      	bx	lr
 801b674:	5c001000 	.word	0x5c001000

0801b678 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 801b678:	b480      	push	{r7}
 801b67a:	b083      	sub	sp, #12
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 801b680:	4b06      	ldr	r3, [pc, #24]	@ (801b69c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801b682:	685b      	ldr	r3, [r3, #4]
 801b684:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 801b688:	4904      	ldr	r1, [pc, #16]	@ (801b69c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	4313      	orrs	r3, r2
 801b68e:	604b      	str	r3, [r1, #4]
}
 801b690:	bf00      	nop
 801b692:	370c      	adds	r7, #12
 801b694:	46bd      	mov	sp, r7
 801b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b69a:	4770      	bx	lr
 801b69c:	58000400 	.word	0x58000400

0801b6a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b6a0:	b480      	push	{r7}
 801b6a2:	b085      	sub	sp, #20
 801b6a4:	af00      	add	r7, sp, #0
 801b6a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	f003 0307 	and.w	r3, r3, #7
 801b6ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801b6b0:	4b0b      	ldr	r3, [pc, #44]	@ (801b6e0 <__NVIC_SetPriorityGrouping+0x40>)
 801b6b2:	68db      	ldr	r3, [r3, #12]
 801b6b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b6b6:	68ba      	ldr	r2, [r7, #8]
 801b6b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801b6bc:	4013      	ands	r3, r2
 801b6be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801b6c4:	68bb      	ldr	r3, [r7, #8]
 801b6c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801b6c8:	4b06      	ldr	r3, [pc, #24]	@ (801b6e4 <__NVIC_SetPriorityGrouping+0x44>)
 801b6ca:	4313      	orrs	r3, r2
 801b6cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801b6ce:	4a04      	ldr	r2, [pc, #16]	@ (801b6e0 <__NVIC_SetPriorityGrouping+0x40>)
 801b6d0:	68bb      	ldr	r3, [r7, #8]
 801b6d2:	60d3      	str	r3, [r2, #12]
}
 801b6d4:	bf00      	nop
 801b6d6:	3714      	adds	r7, #20
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6de:	4770      	bx	lr
 801b6e0:	e000ed00 	.word	0xe000ed00
 801b6e4:	05fa0000 	.word	0x05fa0000

0801b6e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801b6e8:	b480      	push	{r7}
 801b6ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b6ec:	4b04      	ldr	r3, [pc, #16]	@ (801b700 <__NVIC_GetPriorityGrouping+0x18>)
 801b6ee:	68db      	ldr	r3, [r3, #12]
 801b6f0:	0a1b      	lsrs	r3, r3, #8
 801b6f2:	f003 0307 	and.w	r3, r3, #7
}
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6fe:	4770      	bx	lr
 801b700:	e000ed00 	.word	0xe000ed00

0801b704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b704:	b480      	push	{r7}
 801b706:	b083      	sub	sp, #12
 801b708:	af00      	add	r7, sp, #0
 801b70a:	4603      	mov	r3, r0
 801b70c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b70e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b712:	2b00      	cmp	r3, #0
 801b714:	db0b      	blt.n	801b72e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b716:	88fb      	ldrh	r3, [r7, #6]
 801b718:	f003 021f 	and.w	r2, r3, #31
 801b71c:	4907      	ldr	r1, [pc, #28]	@ (801b73c <__NVIC_EnableIRQ+0x38>)
 801b71e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b722:	095b      	lsrs	r3, r3, #5
 801b724:	2001      	movs	r0, #1
 801b726:	fa00 f202 	lsl.w	r2, r0, r2
 801b72a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801b72e:	bf00      	nop
 801b730:	370c      	adds	r7, #12
 801b732:	46bd      	mov	sp, r7
 801b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b738:	4770      	bx	lr
 801b73a:	bf00      	nop
 801b73c:	e000e100 	.word	0xe000e100

0801b740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801b740:	b480      	push	{r7}
 801b742:	b083      	sub	sp, #12
 801b744:	af00      	add	r7, sp, #0
 801b746:	4603      	mov	r3, r0
 801b748:	6039      	str	r1, [r7, #0]
 801b74a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b74c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b750:	2b00      	cmp	r3, #0
 801b752:	db0a      	blt.n	801b76a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b754:	683b      	ldr	r3, [r7, #0]
 801b756:	b2da      	uxtb	r2, r3
 801b758:	490c      	ldr	r1, [pc, #48]	@ (801b78c <__NVIC_SetPriority+0x4c>)
 801b75a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b75e:	0112      	lsls	r2, r2, #4
 801b760:	b2d2      	uxtb	r2, r2
 801b762:	440b      	add	r3, r1
 801b764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801b768:	e00a      	b.n	801b780 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b76a:	683b      	ldr	r3, [r7, #0]
 801b76c:	b2da      	uxtb	r2, r3
 801b76e:	4908      	ldr	r1, [pc, #32]	@ (801b790 <__NVIC_SetPriority+0x50>)
 801b770:	88fb      	ldrh	r3, [r7, #6]
 801b772:	f003 030f 	and.w	r3, r3, #15
 801b776:	3b04      	subs	r3, #4
 801b778:	0112      	lsls	r2, r2, #4
 801b77a:	b2d2      	uxtb	r2, r2
 801b77c:	440b      	add	r3, r1
 801b77e:	761a      	strb	r2, [r3, #24]
}
 801b780:	bf00      	nop
 801b782:	370c      	adds	r7, #12
 801b784:	46bd      	mov	sp, r7
 801b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b78a:	4770      	bx	lr
 801b78c:	e000e100 	.word	0xe000e100
 801b790:	e000ed00 	.word	0xe000ed00

0801b794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b794:	b480      	push	{r7}
 801b796:	b089      	sub	sp, #36	@ 0x24
 801b798:	af00      	add	r7, sp, #0
 801b79a:	60f8      	str	r0, [r7, #12]
 801b79c:	60b9      	str	r1, [r7, #8]
 801b79e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	f003 0307 	and.w	r3, r3, #7
 801b7a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b7a8:	69fb      	ldr	r3, [r7, #28]
 801b7aa:	f1c3 0307 	rsb	r3, r3, #7
 801b7ae:	2b04      	cmp	r3, #4
 801b7b0:	bf28      	it	cs
 801b7b2:	2304      	movcs	r3, #4
 801b7b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b7b6:	69fb      	ldr	r3, [r7, #28]
 801b7b8:	3304      	adds	r3, #4
 801b7ba:	2b06      	cmp	r3, #6
 801b7bc:	d902      	bls.n	801b7c4 <NVIC_EncodePriority+0x30>
 801b7be:	69fb      	ldr	r3, [r7, #28]
 801b7c0:	3b03      	subs	r3, #3
 801b7c2:	e000      	b.n	801b7c6 <NVIC_EncodePriority+0x32>
 801b7c4:	2300      	movs	r3, #0
 801b7c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b7c8:	f04f 32ff 	mov.w	r2, #4294967295
 801b7cc:	69bb      	ldr	r3, [r7, #24]
 801b7ce:	fa02 f303 	lsl.w	r3, r2, r3
 801b7d2:	43da      	mvns	r2, r3
 801b7d4:	68bb      	ldr	r3, [r7, #8]
 801b7d6:	401a      	ands	r2, r3
 801b7d8:	697b      	ldr	r3, [r7, #20]
 801b7da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b7dc:	f04f 31ff 	mov.w	r1, #4294967295
 801b7e0:	697b      	ldr	r3, [r7, #20]
 801b7e2:	fa01 f303 	lsl.w	r3, r1, r3
 801b7e6:	43d9      	mvns	r1, r3
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b7ec:	4313      	orrs	r3, r2
         );
}
 801b7ee:	4618      	mov	r0, r3
 801b7f0:	3724      	adds	r7, #36	@ 0x24
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f8:	4770      	bx	lr
	...

0801b7fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801b7fc:	b580      	push	{r7, lr}
 801b7fe:	b082      	sub	sp, #8
 801b800:	af00      	add	r7, sp, #0
 801b802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	3b01      	subs	r3, #1
 801b808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b80c:	d301      	bcc.n	801b812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801b80e:	2301      	movs	r3, #1
 801b810:	e00f      	b.n	801b832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801b812:	4a0a      	ldr	r2, [pc, #40]	@ (801b83c <SysTick_Config+0x40>)
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	3b01      	subs	r3, #1
 801b818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801b81a:	210f      	movs	r1, #15
 801b81c:	f04f 30ff 	mov.w	r0, #4294967295
 801b820:	f7ff ff8e 	bl	801b740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801b824:	4b05      	ldr	r3, [pc, #20]	@ (801b83c <SysTick_Config+0x40>)
 801b826:	2200      	movs	r2, #0
 801b828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801b82a:	4b04      	ldr	r3, [pc, #16]	@ (801b83c <SysTick_Config+0x40>)
 801b82c:	2207      	movs	r2, #7
 801b82e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801b830:	2300      	movs	r3, #0
}
 801b832:	4618      	mov	r0, r3
 801b834:	3708      	adds	r7, #8
 801b836:	46bd      	mov	sp, r7
 801b838:	bd80      	pop	{r7, pc}
 801b83a:	bf00      	nop
 801b83c:	e000e010 	.word	0xe000e010

0801b840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b840:	b580      	push	{r7, lr}
 801b842:	b082      	sub	sp, #8
 801b844:	af00      	add	r7, sp, #0
 801b846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b848:	6878      	ldr	r0, [r7, #4]
 801b84a:	f7ff ff29 	bl	801b6a0 <__NVIC_SetPriorityGrouping>
}
 801b84e:	bf00      	nop
 801b850:	3708      	adds	r7, #8
 801b852:	46bd      	mov	sp, r7
 801b854:	bd80      	pop	{r7, pc}

0801b856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b856:	b580      	push	{r7, lr}
 801b858:	b086      	sub	sp, #24
 801b85a:	af00      	add	r7, sp, #0
 801b85c:	4603      	mov	r3, r0
 801b85e:	60b9      	str	r1, [r7, #8]
 801b860:	607a      	str	r2, [r7, #4]
 801b862:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801b864:	f7ff ff40 	bl	801b6e8 <__NVIC_GetPriorityGrouping>
 801b868:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b86a:	687a      	ldr	r2, [r7, #4]
 801b86c:	68b9      	ldr	r1, [r7, #8]
 801b86e:	6978      	ldr	r0, [r7, #20]
 801b870:	f7ff ff90 	bl	801b794 <NVIC_EncodePriority>
 801b874:	4602      	mov	r2, r0
 801b876:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b87a:	4611      	mov	r1, r2
 801b87c:	4618      	mov	r0, r3
 801b87e:	f7ff ff5f 	bl	801b740 <__NVIC_SetPriority>
}
 801b882:	bf00      	nop
 801b884:	3718      	adds	r7, #24
 801b886:	46bd      	mov	sp, r7
 801b888:	bd80      	pop	{r7, pc}

0801b88a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b88a:	b580      	push	{r7, lr}
 801b88c:	b082      	sub	sp, #8
 801b88e:	af00      	add	r7, sp, #0
 801b890:	4603      	mov	r3, r0
 801b892:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b898:	4618      	mov	r0, r3
 801b89a:	f7ff ff33 	bl	801b704 <__NVIC_EnableIRQ>
}
 801b89e:	bf00      	nop
 801b8a0:	3708      	adds	r7, #8
 801b8a2:	46bd      	mov	sp, r7
 801b8a4:	bd80      	pop	{r7, pc}

0801b8a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801b8a6:	b580      	push	{r7, lr}
 801b8a8:	b082      	sub	sp, #8
 801b8aa:	af00      	add	r7, sp, #0
 801b8ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801b8ae:	6878      	ldr	r0, [r7, #4]
 801b8b0:	f7ff ffa4 	bl	801b7fc <SysTick_Config>
 801b8b4:	4603      	mov	r3, r0
}
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	3708      	adds	r7, #8
 801b8ba:	46bd      	mov	sp, r7
 801b8bc:	bd80      	pop	{r7, pc}
	...

0801b8c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 801b8c0:	b580      	push	{r7, lr}
 801b8c2:	b084      	sub	sp, #16
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d101      	bne.n	801b8d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 801b8ce:	2301      	movs	r3, #1
 801b8d0:	e0e3      	b.n	801ba9a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d106      	bne.n	801b8ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	2223      	movs	r2, #35	@ 0x23
 801b8e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 801b8e4:	6878      	ldr	r0, [r7, #4]
 801b8e6:	f7ff fb37 	bl	801af58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b8ea:	4b6e      	ldr	r3, [pc, #440]	@ (801baa4 <HAL_ETH_Init+0x1e4>)
 801b8ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801b8f0:	4a6c      	ldr	r2, [pc, #432]	@ (801baa4 <HAL_ETH_Init+0x1e4>)
 801b8f2:	f043 0302 	orr.w	r3, r3, #2
 801b8f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801b8fa:	4b6a      	ldr	r3, [pc, #424]	@ (801baa4 <HAL_ETH_Init+0x1e4>)
 801b8fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801b900:	f003 0302 	and.w	r3, r3, #2
 801b904:	60bb      	str	r3, [r7, #8]
 801b906:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	7a1b      	ldrb	r3, [r3, #8]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d103      	bne.n	801b918 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 801b910:	2000      	movs	r0, #0
 801b912:	f7ff feb1 	bl	801b678 <HAL_SYSCFG_ETHInterfaceSelect>
 801b916:	e003      	b.n	801b920 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 801b918:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801b91c:	f7ff feac 	bl	801b678 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 801b920:	4b61      	ldr	r3, [pc, #388]	@ (801baa8 <HAL_ETH_Init+0x1e8>)
 801b922:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	687a      	ldr	r2, [r7, #4]
 801b930:	6812      	ldr	r2, [r2, #0]
 801b932:	f043 0301 	orr.w	r3, r3, #1
 801b936:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b93a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b93c:	f7ff fe84 	bl	801b648 <HAL_GetTick>
 801b940:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 801b942:	e011      	b.n	801b968 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 801b944:	f7ff fe80 	bl	801b648 <HAL_GetTick>
 801b948:	4602      	mov	r2, r0
 801b94a:	68fb      	ldr	r3, [r7, #12]
 801b94c:	1ad3      	subs	r3, r2, r3
 801b94e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801b952:	d909      	bls.n	801b968 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	2204      	movs	r2, #4
 801b958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	22e0      	movs	r2, #224	@ 0xe0
 801b960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 801b964:	2301      	movs	r3, #1
 801b966:	e098      	b.n	801ba9a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	f003 0301 	and.w	r3, r3, #1
 801b976:	2b00      	cmp	r3, #0
 801b978:	d1e4      	bne.n	801b944 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 801b97a:	6878      	ldr	r0, [r7, #4]
 801b97c:	f000 f89e 	bl	801babc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 801b980:	f001 fd80 	bl	801d484 <HAL_RCC_GetHCLKFreq>
 801b984:	4603      	mov	r3, r0
 801b986:	4a49      	ldr	r2, [pc, #292]	@ (801baac <HAL_ETH_Init+0x1ec>)
 801b988:	fba2 2303 	umull	r2, r3, r2, r3
 801b98c:	0c9a      	lsrs	r2, r3, #18
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	3a01      	subs	r2, #1
 801b994:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 801b998:	6878      	ldr	r0, [r7, #4]
 801b99a:	f000 fa81 	bl	801bea0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b9a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801b9aa:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 801b9ae:	687a      	ldr	r2, [r7, #4]
 801b9b0:	6812      	ldr	r2, [r2, #0]
 801b9b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801b9b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b9ba:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	695b      	ldr	r3, [r3, #20]
 801b9c2:	f003 0303 	and.w	r3, r3, #3
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d009      	beq.n	801b9de <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	2201      	movs	r2, #1
 801b9ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	22e0      	movs	r2, #224	@ 0xe0
 801b9d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 801b9da:	2301      	movs	r3, #1
 801b9dc:	e05d      	b.n	801ba9a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b9e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801b9ea:	4b31      	ldr	r3, [pc, #196]	@ (801bab0 <HAL_ETH_Init+0x1f0>)
 801b9ec:	4013      	ands	r3, r2
 801b9ee:	687a      	ldr	r2, [r7, #4]
 801b9f0:	6952      	ldr	r2, [r2, #20]
 801b9f2:	0051      	lsls	r1, r2, #1
 801b9f4:	687a      	ldr	r2, [r7, #4]
 801b9f6:	6812      	ldr	r2, [r2, #0]
 801b9f8:	430b      	orrs	r3, r1
 801b9fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b9fe:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 801ba02:	6878      	ldr	r0, [r7, #4]
 801ba04:	f000 fae9 	bl	801bfda <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 801ba08:	6878      	ldr	r0, [r7, #4]
 801ba0a:	f000 fb2f 	bl	801c06c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	685b      	ldr	r3, [r3, #4]
 801ba12:	3305      	adds	r3, #5
 801ba14:	781b      	ldrb	r3, [r3, #0]
 801ba16:	021a      	lsls	r2, r3, #8
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	685b      	ldr	r3, [r3, #4]
 801ba1c:	3304      	adds	r3, #4
 801ba1e:	781b      	ldrb	r3, [r3, #0]
 801ba20:	4619      	mov	r1, r3
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	681b      	ldr	r3, [r3, #0]
 801ba26:	430a      	orrs	r2, r1
 801ba28:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	685b      	ldr	r3, [r3, #4]
 801ba30:	3303      	adds	r3, #3
 801ba32:	781b      	ldrb	r3, [r3, #0]
 801ba34:	061a      	lsls	r2, r3, #24
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	685b      	ldr	r3, [r3, #4]
 801ba3a:	3302      	adds	r3, #2
 801ba3c:	781b      	ldrb	r3, [r3, #0]
 801ba3e:	041b      	lsls	r3, r3, #16
 801ba40:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	685b      	ldr	r3, [r3, #4]
 801ba46:	3301      	adds	r3, #1
 801ba48:	781b      	ldrb	r3, [r3, #0]
 801ba4a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801ba4c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	685b      	ldr	r3, [r3, #4]
 801ba52:	781b      	ldrb	r3, [r3, #0]
 801ba54:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 801ba5a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801ba5c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	681a      	ldr	r2, [r3, #0]
 801ba6c:	4b11      	ldr	r3, [pc, #68]	@ (801bab4 <HAL_ETH_Init+0x1f4>)
 801ba6e:	430b      	orrs	r3, r1
 801ba70:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	681a      	ldr	r2, [r3, #0]
 801ba80:	4b0d      	ldr	r3, [pc, #52]	@ (801bab8 <HAL_ETH_Init+0x1f8>)
 801ba82:	430b      	orrs	r3, r1
 801ba84:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	2200      	movs	r2, #0
 801ba8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	2210      	movs	r2, #16
 801ba94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ba98:	2300      	movs	r3, #0
}
 801ba9a:	4618      	mov	r0, r3
 801ba9c:	3710      	adds	r7, #16
 801ba9e:	46bd      	mov	sp, r7
 801baa0:	bd80      	pop	{r7, pc}
 801baa2:	bf00      	nop
 801baa4:	58024400 	.word	0x58024400
 801baa8:	58000400 	.word	0x58000400
 801baac:	431bde83 	.word	0x431bde83
 801bab0:	ffff8001 	.word	0xffff8001
 801bab4:	0c020060 	.word	0x0c020060
 801bab8:	0c20c000 	.word	0x0c20c000

0801babc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 801babc:	b580      	push	{r7, lr}
 801babe:	b084      	sub	sp, #16
 801bac0:	af00      	add	r7, sp, #0
 801bac2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801bacc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801bad4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 801bad6:	f001 fcd5 	bl	801d484 <HAL_RCC_GetHCLKFreq>
 801bada:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 801badc:	68bb      	ldr	r3, [r7, #8]
 801bade:	4a1a      	ldr	r2, [pc, #104]	@ (801bb48 <HAL_ETH_SetMDIOClockRange+0x8c>)
 801bae0:	4293      	cmp	r3, r2
 801bae2:	d804      	bhi.n	801baee <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801baea:	60fb      	str	r3, [r7, #12]
 801baec:	e022      	b.n	801bb34 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 801baee:	68bb      	ldr	r3, [r7, #8]
 801baf0:	4a16      	ldr	r2, [pc, #88]	@ (801bb4c <HAL_ETH_SetMDIOClockRange+0x90>)
 801baf2:	4293      	cmp	r3, r2
 801baf4:	d204      	bcs.n	801bb00 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801bafc:	60fb      	str	r3, [r7, #12]
 801bafe:	e019      	b.n	801bb34 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 801bb00:	68bb      	ldr	r3, [r7, #8]
 801bb02:	4a13      	ldr	r2, [pc, #76]	@ (801bb50 <HAL_ETH_SetMDIOClockRange+0x94>)
 801bb04:	4293      	cmp	r3, r2
 801bb06:	d915      	bls.n	801bb34 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 801bb08:	68bb      	ldr	r3, [r7, #8]
 801bb0a:	4a12      	ldr	r2, [pc, #72]	@ (801bb54 <HAL_ETH_SetMDIOClockRange+0x98>)
 801bb0c:	4293      	cmp	r3, r2
 801bb0e:	d804      	bhi.n	801bb1a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801bb16:	60fb      	str	r3, [r7, #12]
 801bb18:	e00c      	b.n	801bb34 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 801bb1a:	68bb      	ldr	r3, [r7, #8]
 801bb1c:	4a0e      	ldr	r2, [pc, #56]	@ (801bb58 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801bb1e:	4293      	cmp	r3, r2
 801bb20:	d804      	bhi.n	801bb2c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801bb28:	60fb      	str	r3, [r7, #12]
 801bb2a:	e003      	b.n	801bb34 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 801bb32:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	68fa      	ldr	r2, [r7, #12]
 801bb3a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 801bb3e:	bf00      	nop
 801bb40:	3710      	adds	r7, #16
 801bb42:	46bd      	mov	sp, r7
 801bb44:	bd80      	pop	{r7, pc}
 801bb46:	bf00      	nop
 801bb48:	02160ebf 	.word	0x02160ebf
 801bb4c:	03938700 	.word	0x03938700
 801bb50:	05f5e0ff 	.word	0x05f5e0ff
 801bb54:	08f0d17f 	.word	0x08f0d17f
 801bb58:	0ee6b27f 	.word	0x0ee6b27f

0801bb5c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 801bb5c:	b480      	push	{r7}
 801bb5e:	b085      	sub	sp, #20
 801bb60:	af00      	add	r7, sp, #0
 801bb62:	6078      	str	r0, [r7, #4]
 801bb64:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 801bb66:	683b      	ldr	r3, [r7, #0]
 801bb68:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 801bb6a:	683b      	ldr	r3, [r7, #0]
 801bb6c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 801bb6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 801bb70:	683b      	ldr	r3, [r7, #0]
 801bb72:	791b      	ldrb	r3, [r3, #4]
 801bb74:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 801bb76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 801bb78:	683b      	ldr	r3, [r7, #0]
 801bb7a:	7b1b      	ldrb	r3, [r3, #12]
 801bb7c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 801bb7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 801bb80:	683b      	ldr	r3, [r7, #0]
 801bb82:	7b5b      	ldrb	r3, [r3, #13]
 801bb84:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 801bb86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 801bb88:	683b      	ldr	r3, [r7, #0]
 801bb8a:	7b9b      	ldrb	r3, [r3, #14]
 801bb8c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 801bb8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 801bb90:	683b      	ldr	r3, [r7, #0]
 801bb92:	7bdb      	ldrb	r3, [r3, #15]
 801bb94:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 801bb96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 801bb98:	683a      	ldr	r2, [r7, #0]
 801bb9a:	7c12      	ldrb	r2, [r2, #16]
 801bb9c:	2a00      	cmp	r2, #0
 801bb9e:	d102      	bne.n	801bba6 <ETH_SetMACConfig+0x4a>
 801bba0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 801bba4:	e000      	b.n	801bba8 <ETH_SetMACConfig+0x4c>
 801bba6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 801bba8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 801bbaa:	683a      	ldr	r2, [r7, #0]
 801bbac:	7c52      	ldrb	r2, [r2, #17]
 801bbae:	2a00      	cmp	r2, #0
 801bbb0:	d102      	bne.n	801bbb8 <ETH_SetMACConfig+0x5c>
 801bbb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801bbb6:	e000      	b.n	801bbba <ETH_SetMACConfig+0x5e>
 801bbb8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 801bbba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 801bbbc:	683b      	ldr	r3, [r7, #0]
 801bbbe:	7c9b      	ldrb	r3, [r3, #18]
 801bbc0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 801bbc2:	431a      	orrs	r2, r3
               macconf->Speed |
 801bbc4:	683b      	ldr	r3, [r7, #0]
 801bbc6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 801bbc8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 801bbca:	683b      	ldr	r3, [r7, #0]
 801bbcc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 801bbce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 801bbd0:	683b      	ldr	r3, [r7, #0]
 801bbd2:	7f1b      	ldrb	r3, [r3, #28]
 801bbd4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 801bbd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 801bbd8:	683b      	ldr	r3, [r7, #0]
 801bbda:	7f5b      	ldrb	r3, [r3, #29]
 801bbdc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 801bbde:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 801bbe0:	683a      	ldr	r2, [r7, #0]
 801bbe2:	7f92      	ldrb	r2, [r2, #30]
 801bbe4:	2a00      	cmp	r2, #0
 801bbe6:	d102      	bne.n	801bbee <ETH_SetMACConfig+0x92>
 801bbe8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801bbec:	e000      	b.n	801bbf0 <ETH_SetMACConfig+0x94>
 801bbee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 801bbf0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 801bbf2:	683b      	ldr	r3, [r7, #0]
 801bbf4:	7fdb      	ldrb	r3, [r3, #31]
 801bbf6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 801bbf8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 801bbfa:	683a      	ldr	r2, [r7, #0]
 801bbfc:	f892 2020 	ldrb.w	r2, [r2, #32]
 801bc00:	2a00      	cmp	r2, #0
 801bc02:	d102      	bne.n	801bc0a <ETH_SetMACConfig+0xae>
 801bc04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801bc08:	e000      	b.n	801bc0c <ETH_SetMACConfig+0xb0>
 801bc0a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 801bc0c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 801bc0e:	683b      	ldr	r3, [r7, #0]
 801bc10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 801bc12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 801bc14:	683b      	ldr	r3, [r7, #0]
 801bc16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bc1a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 801bc1c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 801bc1e:	683b      	ldr	r3, [r7, #0]
 801bc20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 801bc22:	4313      	orrs	r3, r2
 801bc24:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	681a      	ldr	r2, [r3, #0]
 801bc2c:	4b56      	ldr	r3, [pc, #344]	@ (801bd88 <ETH_SetMACConfig+0x22c>)
 801bc2e:	4013      	ands	r3, r2
 801bc30:	687a      	ldr	r2, [r7, #4]
 801bc32:	6812      	ldr	r2, [r2, #0]
 801bc34:	68f9      	ldr	r1, [r7, #12]
 801bc36:	430b      	orrs	r3, r1
 801bc38:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 801bc3a:	683b      	ldr	r3, [r7, #0]
 801bc3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bc3e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 801bc40:	683b      	ldr	r3, [r7, #0]
 801bc42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801bc46:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 801bc48:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 801bc4a:	683b      	ldr	r3, [r7, #0]
 801bc4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bc50:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 801bc52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 801bc54:	683b      	ldr	r3, [r7, #0]
 801bc56:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bc5a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 801bc5c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 801bc5e:	683a      	ldr	r2, [r7, #0]
 801bc60:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 801bc64:	2a00      	cmp	r2, #0
 801bc66:	d102      	bne.n	801bc6e <ETH_SetMACConfig+0x112>
 801bc68:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801bc6c:	e000      	b.n	801bc70 <ETH_SetMACConfig+0x114>
 801bc6e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 801bc70:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 801bc72:	683b      	ldr	r3, [r7, #0]
 801bc74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 801bc76:	4313      	orrs	r3, r2
 801bc78:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	685a      	ldr	r2, [r3, #4]
 801bc80:	4b42      	ldr	r3, [pc, #264]	@ (801bd8c <ETH_SetMACConfig+0x230>)
 801bc82:	4013      	ands	r3, r2
 801bc84:	687a      	ldr	r2, [r7, #4]
 801bc86:	6812      	ldr	r2, [r2, #0]
 801bc88:	68f9      	ldr	r1, [r7, #12]
 801bc8a:	430b      	orrs	r3, r1
 801bc8c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 801bc8e:	683b      	ldr	r3, [r7, #0]
 801bc90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801bc94:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 801bc96:	683b      	ldr	r3, [r7, #0]
 801bc98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 801bc9a:	4313      	orrs	r3, r2
 801bc9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	68da      	ldr	r2, [r3, #12]
 801bca4:	4b3a      	ldr	r3, [pc, #232]	@ (801bd90 <ETH_SetMACConfig+0x234>)
 801bca6:	4013      	ands	r3, r2
 801bca8:	687a      	ldr	r2, [r7, #4]
 801bcaa:	6812      	ldr	r2, [r2, #0]
 801bcac:	68f9      	ldr	r1, [r7, #12]
 801bcae:	430b      	orrs	r3, r1
 801bcb0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 801bcb2:	683b      	ldr	r3, [r7, #0]
 801bcb4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801bcb8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 801bcba:	683b      	ldr	r3, [r7, #0]
 801bcbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 801bcbe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 801bcc0:	683a      	ldr	r2, [r7, #0]
 801bcc2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 801bcc6:	2a00      	cmp	r2, #0
 801bcc8:	d101      	bne.n	801bcce <ETH_SetMACConfig+0x172>
 801bcca:	2280      	movs	r2, #128	@ 0x80
 801bccc:	e000      	b.n	801bcd0 <ETH_SetMACConfig+0x174>
 801bcce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 801bcd0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 801bcd2:	683b      	ldr	r3, [r7, #0]
 801bcd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bcd6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 801bcd8:	4313      	orrs	r3, r2
 801bcda:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	681b      	ldr	r3, [r3, #0]
 801bce0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801bce2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 801bce6:	4013      	ands	r3, r2
 801bce8:	687a      	ldr	r2, [r7, #4]
 801bcea:	6812      	ldr	r2, [r2, #0]
 801bcec:	68f9      	ldr	r1, [r7, #12]
 801bcee:	430b      	orrs	r3, r1
 801bcf0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 801bcf2:	683b      	ldr	r3, [r7, #0]
 801bcf4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801bcf8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 801bcfa:	683b      	ldr	r3, [r7, #0]
 801bcfc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801bd00:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 801bd02:	4313      	orrs	r3, r2
 801bd04:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801bd0e:	f023 0103 	bic.w	r1, r3, #3
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	68fa      	ldr	r2, [r7, #12]
 801bd18:	430a      	orrs	r2, r1
 801bd1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	681b      	ldr	r3, [r3, #0]
 801bd22:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 801bd26:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801bd2a:	683b      	ldr	r3, [r7, #0]
 801bd2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	681b      	ldr	r3, [r3, #0]
 801bd32:	430a      	orrs	r2, r1
 801bd34:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 801bd38:	683b      	ldr	r3, [r7, #0]
 801bd3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 801bd3c:	683a      	ldr	r2, [r7, #0]
 801bd3e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 801bd42:	2a00      	cmp	r2, #0
 801bd44:	d101      	bne.n	801bd4a <ETH_SetMACConfig+0x1ee>
 801bd46:	2240      	movs	r2, #64	@ 0x40
 801bd48:	e000      	b.n	801bd4c <ETH_SetMACConfig+0x1f0>
 801bd4a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 801bd4c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 801bd4e:	683b      	ldr	r3, [r7, #0]
 801bd50:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 801bd54:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 801bd56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 801bd58:	683b      	ldr	r3, [r7, #0]
 801bd5a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 801bd5e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 801bd60:	4313      	orrs	r3, r2
 801bd62:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801bd6c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	68fa      	ldr	r2, [r7, #12]
 801bd76:	430a      	orrs	r2, r1
 801bd78:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 801bd7c:	bf00      	nop
 801bd7e:	3714      	adds	r7, #20
 801bd80:	46bd      	mov	sp, r7
 801bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd86:	4770      	bx	lr
 801bd88:	00048083 	.word	0x00048083
 801bd8c:	c0f88000 	.word	0xc0f88000
 801bd90:	fffffef0 	.word	0xfffffef0

0801bd94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 801bd94:	b480      	push	{r7}
 801bd96:	b085      	sub	sp, #20
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
 801bd9c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bda6:	681a      	ldr	r2, [r3, #0]
 801bda8:	4b38      	ldr	r3, [pc, #224]	@ (801be8c <ETH_SetDMAConfig+0xf8>)
 801bdaa:	4013      	ands	r3, r2
 801bdac:	683a      	ldr	r2, [r7, #0]
 801bdae:	6811      	ldr	r1, [r2, #0]
 801bdb0:	687a      	ldr	r2, [r7, #4]
 801bdb2:	6812      	ldr	r2, [r2, #0]
 801bdb4:	430b      	orrs	r3, r1
 801bdb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bdba:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 801bdbc:	683b      	ldr	r3, [r7, #0]
 801bdbe:	791b      	ldrb	r3, [r3, #4]
 801bdc0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 801bdc2:	683b      	ldr	r3, [r7, #0]
 801bdc4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 801bdc6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 801bdc8:	683b      	ldr	r3, [r7, #0]
 801bdca:	7b1b      	ldrb	r3, [r3, #12]
 801bdcc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 801bdce:	4313      	orrs	r3, r2
 801bdd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	681b      	ldr	r3, [r3, #0]
 801bdd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bdda:	685a      	ldr	r2, [r3, #4]
 801bddc:	4b2c      	ldr	r3, [pc, #176]	@ (801be90 <ETH_SetDMAConfig+0xfc>)
 801bdde:	4013      	ands	r3, r2
 801bde0:	687a      	ldr	r2, [r7, #4]
 801bde2:	6812      	ldr	r2, [r2, #0]
 801bde4:	68f9      	ldr	r1, [r7, #12]
 801bde6:	430b      	orrs	r3, r1
 801bde8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bdec:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 801bdee:	683b      	ldr	r3, [r7, #0]
 801bdf0:	7b5b      	ldrb	r3, [r3, #13]
 801bdf2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 801bdf4:	683b      	ldr	r3, [r7, #0]
 801bdf6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 801bdf8:	4313      	orrs	r3, r2
 801bdfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	681b      	ldr	r3, [r3, #0]
 801be00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801be04:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801be08:	4b22      	ldr	r3, [pc, #136]	@ (801be94 <ETH_SetDMAConfig+0x100>)
 801be0a:	4013      	ands	r3, r2
 801be0c:	687a      	ldr	r2, [r7, #4]
 801be0e:	6812      	ldr	r2, [r2, #0]
 801be10:	68f9      	ldr	r1, [r7, #12]
 801be12:	430b      	orrs	r3, r1
 801be14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801be18:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 801be1c:	683b      	ldr	r3, [r7, #0]
 801be1e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 801be20:	683b      	ldr	r3, [r7, #0]
 801be22:	7d1b      	ldrb	r3, [r3, #20]
 801be24:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 801be26:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 801be28:	683b      	ldr	r3, [r7, #0]
 801be2a:	7f5b      	ldrb	r3, [r3, #29]
 801be2c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 801be2e:	4313      	orrs	r3, r2
 801be30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801be3a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 801be3e:	4b16      	ldr	r3, [pc, #88]	@ (801be98 <ETH_SetDMAConfig+0x104>)
 801be40:	4013      	ands	r3, r2
 801be42:	687a      	ldr	r2, [r7, #4]
 801be44:	6812      	ldr	r2, [r2, #0]
 801be46:	68f9      	ldr	r1, [r7, #12]
 801be48:	430b      	orrs	r3, r1
 801be4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801be4e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 801be52:	683b      	ldr	r3, [r7, #0]
 801be54:	7f1b      	ldrb	r3, [r3, #28]
 801be56:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 801be58:	683b      	ldr	r3, [r7, #0]
 801be5a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 801be5c:	4313      	orrs	r3, r2
 801be5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801be68:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801be6c:	4b0b      	ldr	r3, [pc, #44]	@ (801be9c <ETH_SetDMAConfig+0x108>)
 801be6e:	4013      	ands	r3, r2
 801be70:	687a      	ldr	r2, [r7, #4]
 801be72:	6812      	ldr	r2, [r2, #0]
 801be74:	68f9      	ldr	r1, [r7, #12]
 801be76:	430b      	orrs	r3, r1
 801be78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801be7c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 801be80:	bf00      	nop
 801be82:	3714      	adds	r7, #20
 801be84:	46bd      	mov	sp, r7
 801be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be8a:	4770      	bx	lr
 801be8c:	ffff87fd 	.word	0xffff87fd
 801be90:	ffff2ffe 	.word	0xffff2ffe
 801be94:	fffec000 	.word	0xfffec000
 801be98:	ffc0efef 	.word	0xffc0efef
 801be9c:	7fc0ffff 	.word	0x7fc0ffff

0801bea0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 801bea0:	b580      	push	{r7, lr}
 801bea2:	b0a4      	sub	sp, #144	@ 0x90
 801bea4:	af00      	add	r7, sp, #0
 801bea6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 801bea8:	2301      	movs	r3, #1
 801beaa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801beae:	2300      	movs	r3, #0
 801beb0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 801beb2:	2300      	movs	r3, #0
 801beb4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801beb8:	2300      	movs	r3, #0
 801beba:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 801bebe:	2301      	movs	r3, #1
 801bec0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 801bec4:	2301      	movs	r3, #1
 801bec6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 801beca:	2301      	movs	r3, #1
 801becc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 801bed0:	2300      	movs	r3, #0
 801bed2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 801bed6:	2301      	movs	r3, #1
 801bed8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801bedc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801bee0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 801bee2:	2300      	movs	r3, #0
 801bee4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 801bee8:	2300      	movs	r3, #0
 801beea:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 801beec:	2300      	movs	r3, #0
 801beee:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 801bef2:	2300      	movs	r3, #0
 801bef4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 801bef8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 801befc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 801befe:	2300      	movs	r3, #0
 801bf00:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 801bf04:	2300      	movs	r3, #0
 801bf06:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 801bf08:	2301      	movs	r3, #1
 801bf0a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 801bf0e:	2300      	movs	r3, #0
 801bf10:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 801bf14:	2300      	movs	r3, #0
 801bf16:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801bf1a:	2300      	movs	r3, #0
 801bf1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 801bf1e:	2300      	movs	r3, #0
 801bf20:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 801bf22:	2300      	movs	r3, #0
 801bf24:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 801bf26:	2300      	movs	r3, #0
 801bf28:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 801bf32:	2301      	movs	r3, #1
 801bf34:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 801bf38:	2320      	movs	r3, #32
 801bf3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 801bf3e:	2301      	movs	r3, #1
 801bf40:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 801bf44:	2300      	movs	r3, #0
 801bf46:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801bf4a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801bf4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 801bf50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801bf54:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 801bf56:	2300      	movs	r3, #0
 801bf58:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801bf5c:	2302      	movs	r3, #2
 801bf5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 801bf62:	2300      	movs	r3, #0
 801bf64:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801bf68:	2300      	movs	r3, #0
 801bf6a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801bf6e:	2300      	movs	r3, #0
 801bf70:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 801bf74:	2301      	movs	r3, #1
 801bf76:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 801bf7a:	2300      	movs	r3, #0
 801bf7c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 801bf7e:	2301      	movs	r3, #1
 801bf80:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 801bf84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801bf88:	4619      	mov	r1, r3
 801bf8a:	6878      	ldr	r0, [r7, #4]
 801bf8c:	f7ff fde6 	bl	801bb5c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801bf90:	2301      	movs	r3, #1
 801bf92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801bf94:	2301      	movs	r3, #1
 801bf96:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 801bf98:	2300      	movs	r3, #0
 801bf9a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 801bf9c:	2300      	movs	r3, #0
 801bf9e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801bfaa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801bfae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 801bfb0:	2300      	movs	r3, #0
 801bfb2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801bfb4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801bfb8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 801bfba:	2300      	movs	r3, #0
 801bfbc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 801bfc0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801bfc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 801bfc6:	f107 0308 	add.w	r3, r7, #8
 801bfca:	4619      	mov	r1, r3
 801bfcc:	6878      	ldr	r0, [r7, #4]
 801bfce:	f7ff fee1 	bl	801bd94 <ETH_SetDMAConfig>
}
 801bfd2:	bf00      	nop
 801bfd4:	3790      	adds	r7, #144	@ 0x90
 801bfd6:	46bd      	mov	sp, r7
 801bfd8:	bd80      	pop	{r7, pc}

0801bfda <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801bfda:	b480      	push	{r7}
 801bfdc:	b085      	sub	sp, #20
 801bfde:	af00      	add	r7, sp, #0
 801bfe0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	60fb      	str	r3, [r7, #12]
 801bfe6:	e01d      	b.n	801c024 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	68d9      	ldr	r1, [r3, #12]
 801bfec:	68fa      	ldr	r2, [r7, #12]
 801bfee:	4613      	mov	r3, r2
 801bff0:	005b      	lsls	r3, r3, #1
 801bff2:	4413      	add	r3, r2
 801bff4:	00db      	lsls	r3, r3, #3
 801bff6:	440b      	add	r3, r1
 801bff8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 801bffa:	68bb      	ldr	r3, [r7, #8]
 801bffc:	2200      	movs	r2, #0
 801bffe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 801c000:	68bb      	ldr	r3, [r7, #8]
 801c002:	2200      	movs	r2, #0
 801c004:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 801c006:	68bb      	ldr	r3, [r7, #8]
 801c008:	2200      	movs	r2, #0
 801c00a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 801c00c:	68bb      	ldr	r3, [r7, #8]
 801c00e:	2200      	movs	r2, #0
 801c010:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 801c012:	68b9      	ldr	r1, [r7, #8]
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	68fa      	ldr	r2, [r7, #12]
 801c018:	3206      	adds	r2, #6
 801c01a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801c01e:	68fb      	ldr	r3, [r7, #12]
 801c020:	3301      	adds	r3, #1
 801c022:	60fb      	str	r3, [r7, #12]
 801c024:	68fb      	ldr	r3, [r7, #12]
 801c026:	2b03      	cmp	r3, #3
 801c028:	d9de      	bls.n	801bfe8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	2200      	movs	r2, #0
 801c02e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c038:	461a      	mov	r2, r3
 801c03a:	2303      	movs	r3, #3
 801c03c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	68da      	ldr	r2, [r3, #12]
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c04c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	68da      	ldr	r2, [r3, #12]
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c05c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 801c060:	bf00      	nop
 801c062:	3714      	adds	r7, #20
 801c064:	46bd      	mov	sp, r7
 801c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c06a:	4770      	bx	lr

0801c06c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801c06c:	b480      	push	{r7}
 801c06e:	b085      	sub	sp, #20
 801c070:	af00      	add	r7, sp, #0
 801c072:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801c074:	2300      	movs	r3, #0
 801c076:	60fb      	str	r3, [r7, #12]
 801c078:	e023      	b.n	801c0c2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	6919      	ldr	r1, [r3, #16]
 801c07e:	68fa      	ldr	r2, [r7, #12]
 801c080:	4613      	mov	r3, r2
 801c082:	005b      	lsls	r3, r3, #1
 801c084:	4413      	add	r3, r2
 801c086:	00db      	lsls	r3, r3, #3
 801c088:	440b      	add	r3, r1
 801c08a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 801c08c:	68bb      	ldr	r3, [r7, #8]
 801c08e:	2200      	movs	r2, #0
 801c090:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 801c092:	68bb      	ldr	r3, [r7, #8]
 801c094:	2200      	movs	r2, #0
 801c096:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 801c098:	68bb      	ldr	r3, [r7, #8]
 801c09a:	2200      	movs	r2, #0
 801c09c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 801c09e:	68bb      	ldr	r3, [r7, #8]
 801c0a0:	2200      	movs	r2, #0
 801c0a2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 801c0a4:	68bb      	ldr	r3, [r7, #8]
 801c0a6:	2200      	movs	r2, #0
 801c0a8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 801c0aa:	68bb      	ldr	r3, [r7, #8]
 801c0ac:	2200      	movs	r2, #0
 801c0ae:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 801c0b0:	68b9      	ldr	r1, [r7, #8]
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	68fa      	ldr	r2, [r7, #12]
 801c0b6:	3212      	adds	r2, #18
 801c0b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801c0bc:	68fb      	ldr	r3, [r7, #12]
 801c0be:	3301      	adds	r3, #1
 801c0c0:	60fb      	str	r3, [r7, #12]
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	2b03      	cmp	r3, #3
 801c0c6:	d9d8      	bls.n	801c07a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	2200      	movs	r2, #0
 801c0cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	2200      	movs	r2, #0
 801c0d2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	2200      	movs	r2, #0
 801c0de:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	2200      	movs	r2, #0
 801c0e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c0ee:	461a      	mov	r2, r3
 801c0f0:	2303      	movs	r3, #3
 801c0f2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	691a      	ldr	r2, [r3, #16]
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c102:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	691b      	ldr	r3, [r3, #16]
 801c10a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	681b      	ldr	r3, [r3, #0]
 801c112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c116:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 801c11a:	bf00      	nop
 801c11c:	3714      	adds	r7, #20
 801c11e:	46bd      	mov	sp, r7
 801c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c124:	4770      	bx	lr
	...

0801c128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c128:	b480      	push	{r7}
 801c12a:	b089      	sub	sp, #36	@ 0x24
 801c12c:	af00      	add	r7, sp, #0
 801c12e:	6078      	str	r0, [r7, #4]
 801c130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801c132:	2300      	movs	r3, #0
 801c134:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801c136:	4b89      	ldr	r3, [pc, #548]	@ (801c35c <HAL_GPIO_Init+0x234>)
 801c138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c13a:	e194      	b.n	801c466 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801c13c:	683b      	ldr	r3, [r7, #0]
 801c13e:	681a      	ldr	r2, [r3, #0]
 801c140:	2101      	movs	r1, #1
 801c142:	69fb      	ldr	r3, [r7, #28]
 801c144:	fa01 f303 	lsl.w	r3, r1, r3
 801c148:	4013      	ands	r3, r2
 801c14a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801c14c:	693b      	ldr	r3, [r7, #16]
 801c14e:	2b00      	cmp	r3, #0
 801c150:	f000 8186 	beq.w	801c460 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c154:	683b      	ldr	r3, [r7, #0]
 801c156:	685b      	ldr	r3, [r3, #4]
 801c158:	f003 0303 	and.w	r3, r3, #3
 801c15c:	2b01      	cmp	r3, #1
 801c15e:	d005      	beq.n	801c16c <HAL_GPIO_Init+0x44>
 801c160:	683b      	ldr	r3, [r7, #0]
 801c162:	685b      	ldr	r3, [r3, #4]
 801c164:	f003 0303 	and.w	r3, r3, #3
 801c168:	2b02      	cmp	r3, #2
 801c16a:	d130      	bne.n	801c1ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	689b      	ldr	r3, [r3, #8]
 801c170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801c172:	69fb      	ldr	r3, [r7, #28]
 801c174:	005b      	lsls	r3, r3, #1
 801c176:	2203      	movs	r2, #3
 801c178:	fa02 f303 	lsl.w	r3, r2, r3
 801c17c:	43db      	mvns	r3, r3
 801c17e:	69ba      	ldr	r2, [r7, #24]
 801c180:	4013      	ands	r3, r2
 801c182:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c184:	683b      	ldr	r3, [r7, #0]
 801c186:	68da      	ldr	r2, [r3, #12]
 801c188:	69fb      	ldr	r3, [r7, #28]
 801c18a:	005b      	lsls	r3, r3, #1
 801c18c:	fa02 f303 	lsl.w	r3, r2, r3
 801c190:	69ba      	ldr	r2, [r7, #24]
 801c192:	4313      	orrs	r3, r2
 801c194:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	69ba      	ldr	r2, [r7, #24]
 801c19a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	685b      	ldr	r3, [r3, #4]
 801c1a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c1a2:	2201      	movs	r2, #1
 801c1a4:	69fb      	ldr	r3, [r7, #28]
 801c1a6:	fa02 f303 	lsl.w	r3, r2, r3
 801c1aa:	43db      	mvns	r3, r3
 801c1ac:	69ba      	ldr	r2, [r7, #24]
 801c1ae:	4013      	ands	r3, r2
 801c1b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c1b2:	683b      	ldr	r3, [r7, #0]
 801c1b4:	685b      	ldr	r3, [r3, #4]
 801c1b6:	091b      	lsrs	r3, r3, #4
 801c1b8:	f003 0201 	and.w	r2, r3, #1
 801c1bc:	69fb      	ldr	r3, [r7, #28]
 801c1be:	fa02 f303 	lsl.w	r3, r2, r3
 801c1c2:	69ba      	ldr	r2, [r7, #24]
 801c1c4:	4313      	orrs	r3, r2
 801c1c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	69ba      	ldr	r2, [r7, #24]
 801c1cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c1ce:	683b      	ldr	r3, [r7, #0]
 801c1d0:	685b      	ldr	r3, [r3, #4]
 801c1d2:	f003 0303 	and.w	r3, r3, #3
 801c1d6:	2b03      	cmp	r3, #3
 801c1d8:	d017      	beq.n	801c20a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	68db      	ldr	r3, [r3, #12]
 801c1de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801c1e0:	69fb      	ldr	r3, [r7, #28]
 801c1e2:	005b      	lsls	r3, r3, #1
 801c1e4:	2203      	movs	r2, #3
 801c1e6:	fa02 f303 	lsl.w	r3, r2, r3
 801c1ea:	43db      	mvns	r3, r3
 801c1ec:	69ba      	ldr	r2, [r7, #24]
 801c1ee:	4013      	ands	r3, r2
 801c1f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c1f2:	683b      	ldr	r3, [r7, #0]
 801c1f4:	689a      	ldr	r2, [r3, #8]
 801c1f6:	69fb      	ldr	r3, [r7, #28]
 801c1f8:	005b      	lsls	r3, r3, #1
 801c1fa:	fa02 f303 	lsl.w	r3, r2, r3
 801c1fe:	69ba      	ldr	r2, [r7, #24]
 801c200:	4313      	orrs	r3, r2
 801c202:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	69ba      	ldr	r2, [r7, #24]
 801c208:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c20a:	683b      	ldr	r3, [r7, #0]
 801c20c:	685b      	ldr	r3, [r3, #4]
 801c20e:	f003 0303 	and.w	r3, r3, #3
 801c212:	2b02      	cmp	r3, #2
 801c214:	d123      	bne.n	801c25e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801c216:	69fb      	ldr	r3, [r7, #28]
 801c218:	08da      	lsrs	r2, r3, #3
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	3208      	adds	r2, #8
 801c21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801c224:	69fb      	ldr	r3, [r7, #28]
 801c226:	f003 0307 	and.w	r3, r3, #7
 801c22a:	009b      	lsls	r3, r3, #2
 801c22c:	220f      	movs	r2, #15
 801c22e:	fa02 f303 	lsl.w	r3, r2, r3
 801c232:	43db      	mvns	r3, r3
 801c234:	69ba      	ldr	r2, [r7, #24]
 801c236:	4013      	ands	r3, r2
 801c238:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801c23a:	683b      	ldr	r3, [r7, #0]
 801c23c:	691a      	ldr	r2, [r3, #16]
 801c23e:	69fb      	ldr	r3, [r7, #28]
 801c240:	f003 0307 	and.w	r3, r3, #7
 801c244:	009b      	lsls	r3, r3, #2
 801c246:	fa02 f303 	lsl.w	r3, r2, r3
 801c24a:	69ba      	ldr	r2, [r7, #24]
 801c24c:	4313      	orrs	r3, r2
 801c24e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801c250:	69fb      	ldr	r3, [r7, #28]
 801c252:	08da      	lsrs	r2, r3, #3
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	3208      	adds	r2, #8
 801c258:	69b9      	ldr	r1, [r7, #24]
 801c25a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801c264:	69fb      	ldr	r3, [r7, #28]
 801c266:	005b      	lsls	r3, r3, #1
 801c268:	2203      	movs	r2, #3
 801c26a:	fa02 f303 	lsl.w	r3, r2, r3
 801c26e:	43db      	mvns	r3, r3
 801c270:	69ba      	ldr	r2, [r7, #24]
 801c272:	4013      	ands	r3, r2
 801c274:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801c276:	683b      	ldr	r3, [r7, #0]
 801c278:	685b      	ldr	r3, [r3, #4]
 801c27a:	f003 0203 	and.w	r2, r3, #3
 801c27e:	69fb      	ldr	r3, [r7, #28]
 801c280:	005b      	lsls	r3, r3, #1
 801c282:	fa02 f303 	lsl.w	r3, r2, r3
 801c286:	69ba      	ldr	r2, [r7, #24]
 801c288:	4313      	orrs	r3, r2
 801c28a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	69ba      	ldr	r2, [r7, #24]
 801c290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801c292:	683b      	ldr	r3, [r7, #0]
 801c294:	685b      	ldr	r3, [r3, #4]
 801c296:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	f000 80e0 	beq.w	801c460 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c2a0:	4b2f      	ldr	r3, [pc, #188]	@ (801c360 <HAL_GPIO_Init+0x238>)
 801c2a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c2a6:	4a2e      	ldr	r2, [pc, #184]	@ (801c360 <HAL_GPIO_Init+0x238>)
 801c2a8:	f043 0302 	orr.w	r3, r3, #2
 801c2ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801c2b0:	4b2b      	ldr	r3, [pc, #172]	@ (801c360 <HAL_GPIO_Init+0x238>)
 801c2b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c2b6:	f003 0302 	and.w	r3, r3, #2
 801c2ba:	60fb      	str	r3, [r7, #12]
 801c2bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801c2be:	4a29      	ldr	r2, [pc, #164]	@ (801c364 <HAL_GPIO_Init+0x23c>)
 801c2c0:	69fb      	ldr	r3, [r7, #28]
 801c2c2:	089b      	lsrs	r3, r3, #2
 801c2c4:	3302      	adds	r3, #2
 801c2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c2ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801c2cc:	69fb      	ldr	r3, [r7, #28]
 801c2ce:	f003 0303 	and.w	r3, r3, #3
 801c2d2:	009b      	lsls	r3, r3, #2
 801c2d4:	220f      	movs	r2, #15
 801c2d6:	fa02 f303 	lsl.w	r3, r2, r3
 801c2da:	43db      	mvns	r3, r3
 801c2dc:	69ba      	ldr	r2, [r7, #24]
 801c2de:	4013      	ands	r3, r2
 801c2e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	4a20      	ldr	r2, [pc, #128]	@ (801c368 <HAL_GPIO_Init+0x240>)
 801c2e6:	4293      	cmp	r3, r2
 801c2e8:	d052      	beq.n	801c390 <HAL_GPIO_Init+0x268>
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	4a1f      	ldr	r2, [pc, #124]	@ (801c36c <HAL_GPIO_Init+0x244>)
 801c2ee:	4293      	cmp	r3, r2
 801c2f0:	d031      	beq.n	801c356 <HAL_GPIO_Init+0x22e>
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	4a1e      	ldr	r2, [pc, #120]	@ (801c370 <HAL_GPIO_Init+0x248>)
 801c2f6:	4293      	cmp	r3, r2
 801c2f8:	d02b      	beq.n	801c352 <HAL_GPIO_Init+0x22a>
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	4a1d      	ldr	r2, [pc, #116]	@ (801c374 <HAL_GPIO_Init+0x24c>)
 801c2fe:	4293      	cmp	r3, r2
 801c300:	d025      	beq.n	801c34e <HAL_GPIO_Init+0x226>
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	4a1c      	ldr	r2, [pc, #112]	@ (801c378 <HAL_GPIO_Init+0x250>)
 801c306:	4293      	cmp	r3, r2
 801c308:	d01f      	beq.n	801c34a <HAL_GPIO_Init+0x222>
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	4a1b      	ldr	r2, [pc, #108]	@ (801c37c <HAL_GPIO_Init+0x254>)
 801c30e:	4293      	cmp	r3, r2
 801c310:	d019      	beq.n	801c346 <HAL_GPIO_Init+0x21e>
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	4a1a      	ldr	r2, [pc, #104]	@ (801c380 <HAL_GPIO_Init+0x258>)
 801c316:	4293      	cmp	r3, r2
 801c318:	d013      	beq.n	801c342 <HAL_GPIO_Init+0x21a>
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	4a19      	ldr	r2, [pc, #100]	@ (801c384 <HAL_GPIO_Init+0x25c>)
 801c31e:	4293      	cmp	r3, r2
 801c320:	d00d      	beq.n	801c33e <HAL_GPIO_Init+0x216>
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	4a18      	ldr	r2, [pc, #96]	@ (801c388 <HAL_GPIO_Init+0x260>)
 801c326:	4293      	cmp	r3, r2
 801c328:	d007      	beq.n	801c33a <HAL_GPIO_Init+0x212>
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	4a17      	ldr	r2, [pc, #92]	@ (801c38c <HAL_GPIO_Init+0x264>)
 801c32e:	4293      	cmp	r3, r2
 801c330:	d101      	bne.n	801c336 <HAL_GPIO_Init+0x20e>
 801c332:	2309      	movs	r3, #9
 801c334:	e02d      	b.n	801c392 <HAL_GPIO_Init+0x26a>
 801c336:	230a      	movs	r3, #10
 801c338:	e02b      	b.n	801c392 <HAL_GPIO_Init+0x26a>
 801c33a:	2308      	movs	r3, #8
 801c33c:	e029      	b.n	801c392 <HAL_GPIO_Init+0x26a>
 801c33e:	2307      	movs	r3, #7
 801c340:	e027      	b.n	801c392 <HAL_GPIO_Init+0x26a>
 801c342:	2306      	movs	r3, #6
 801c344:	e025      	b.n	801c392 <HAL_GPIO_Init+0x26a>
 801c346:	2305      	movs	r3, #5
 801c348:	e023      	b.n	801c392 <HAL_GPIO_Init+0x26a>
 801c34a:	2304      	movs	r3, #4
 801c34c:	e021      	b.n	801c392 <HAL_GPIO_Init+0x26a>
 801c34e:	2303      	movs	r3, #3
 801c350:	e01f      	b.n	801c392 <HAL_GPIO_Init+0x26a>
 801c352:	2302      	movs	r3, #2
 801c354:	e01d      	b.n	801c392 <HAL_GPIO_Init+0x26a>
 801c356:	2301      	movs	r3, #1
 801c358:	e01b      	b.n	801c392 <HAL_GPIO_Init+0x26a>
 801c35a:	bf00      	nop
 801c35c:	58000080 	.word	0x58000080
 801c360:	58024400 	.word	0x58024400
 801c364:	58000400 	.word	0x58000400
 801c368:	58020000 	.word	0x58020000
 801c36c:	58020400 	.word	0x58020400
 801c370:	58020800 	.word	0x58020800
 801c374:	58020c00 	.word	0x58020c00
 801c378:	58021000 	.word	0x58021000
 801c37c:	58021400 	.word	0x58021400
 801c380:	58021800 	.word	0x58021800
 801c384:	58021c00 	.word	0x58021c00
 801c388:	58022000 	.word	0x58022000
 801c38c:	58022400 	.word	0x58022400
 801c390:	2300      	movs	r3, #0
 801c392:	69fa      	ldr	r2, [r7, #28]
 801c394:	f002 0203 	and.w	r2, r2, #3
 801c398:	0092      	lsls	r2, r2, #2
 801c39a:	4093      	lsls	r3, r2
 801c39c:	69ba      	ldr	r2, [r7, #24]
 801c39e:	4313      	orrs	r3, r2
 801c3a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c3a2:	4938      	ldr	r1, [pc, #224]	@ (801c484 <HAL_GPIO_Init+0x35c>)
 801c3a4:	69fb      	ldr	r3, [r7, #28]
 801c3a6:	089b      	lsrs	r3, r3, #2
 801c3a8:	3302      	adds	r3, #2
 801c3aa:	69ba      	ldr	r2, [r7, #24]
 801c3ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c3b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c3b4:	681b      	ldr	r3, [r3, #0]
 801c3b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c3b8:	693b      	ldr	r3, [r7, #16]
 801c3ba:	43db      	mvns	r3, r3
 801c3bc:	69ba      	ldr	r2, [r7, #24]
 801c3be:	4013      	ands	r3, r2
 801c3c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c3c2:	683b      	ldr	r3, [r7, #0]
 801c3c4:	685b      	ldr	r3, [r3, #4]
 801c3c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d003      	beq.n	801c3d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801c3ce:	69ba      	ldr	r2, [r7, #24]
 801c3d0:	693b      	ldr	r3, [r7, #16]
 801c3d2:	4313      	orrs	r3, r2
 801c3d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801c3d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c3da:	69bb      	ldr	r3, [r7, #24]
 801c3dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801c3de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c3e2:	685b      	ldr	r3, [r3, #4]
 801c3e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c3e6:	693b      	ldr	r3, [r7, #16]
 801c3e8:	43db      	mvns	r3, r3
 801c3ea:	69ba      	ldr	r2, [r7, #24]
 801c3ec:	4013      	ands	r3, r2
 801c3ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801c3f0:	683b      	ldr	r3, [r7, #0]
 801c3f2:	685b      	ldr	r3, [r3, #4]
 801c3f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d003      	beq.n	801c404 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801c3fc:	69ba      	ldr	r2, [r7, #24]
 801c3fe:	693b      	ldr	r3, [r7, #16]
 801c400:	4313      	orrs	r3, r2
 801c402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801c404:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c408:	69bb      	ldr	r3, [r7, #24]
 801c40a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801c40c:	697b      	ldr	r3, [r7, #20]
 801c40e:	685b      	ldr	r3, [r3, #4]
 801c410:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c412:	693b      	ldr	r3, [r7, #16]
 801c414:	43db      	mvns	r3, r3
 801c416:	69ba      	ldr	r2, [r7, #24]
 801c418:	4013      	ands	r3, r2
 801c41a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c41c:	683b      	ldr	r3, [r7, #0]
 801c41e:	685b      	ldr	r3, [r3, #4]
 801c420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c424:	2b00      	cmp	r3, #0
 801c426:	d003      	beq.n	801c430 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801c428:	69ba      	ldr	r2, [r7, #24]
 801c42a:	693b      	ldr	r3, [r7, #16]
 801c42c:	4313      	orrs	r3, r2
 801c42e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801c430:	697b      	ldr	r3, [r7, #20]
 801c432:	69ba      	ldr	r2, [r7, #24]
 801c434:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801c436:	697b      	ldr	r3, [r7, #20]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c43c:	693b      	ldr	r3, [r7, #16]
 801c43e:	43db      	mvns	r3, r3
 801c440:	69ba      	ldr	r2, [r7, #24]
 801c442:	4013      	ands	r3, r2
 801c444:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801c446:	683b      	ldr	r3, [r7, #0]
 801c448:	685b      	ldr	r3, [r3, #4]
 801c44a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d003      	beq.n	801c45a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801c452:	69ba      	ldr	r2, [r7, #24]
 801c454:	693b      	ldr	r3, [r7, #16]
 801c456:	4313      	orrs	r3, r2
 801c458:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801c45a:	697b      	ldr	r3, [r7, #20]
 801c45c:	69ba      	ldr	r2, [r7, #24]
 801c45e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801c460:	69fb      	ldr	r3, [r7, #28]
 801c462:	3301      	adds	r3, #1
 801c464:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c466:	683b      	ldr	r3, [r7, #0]
 801c468:	681a      	ldr	r2, [r3, #0]
 801c46a:	69fb      	ldr	r3, [r7, #28]
 801c46c:	fa22 f303 	lsr.w	r3, r2, r3
 801c470:	2b00      	cmp	r3, #0
 801c472:	f47f ae63 	bne.w	801c13c <HAL_GPIO_Init+0x14>
  }
}
 801c476:	bf00      	nop
 801c478:	bf00      	nop
 801c47a:	3724      	adds	r7, #36	@ 0x24
 801c47c:	46bd      	mov	sp, r7
 801c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c482:	4770      	bx	lr
 801c484:	58000400 	.word	0x58000400

0801c488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c488:	b480      	push	{r7}
 801c48a:	b083      	sub	sp, #12
 801c48c:	af00      	add	r7, sp, #0
 801c48e:	6078      	str	r0, [r7, #4]
 801c490:	460b      	mov	r3, r1
 801c492:	807b      	strh	r3, [r7, #2]
 801c494:	4613      	mov	r3, r2
 801c496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801c498:	787b      	ldrb	r3, [r7, #1]
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d003      	beq.n	801c4a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801c49e:	887a      	ldrh	r2, [r7, #2]
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801c4a4:	e003      	b.n	801c4ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801c4a6:	887b      	ldrh	r3, [r7, #2]
 801c4a8:	041a      	lsls	r2, r3, #16
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	619a      	str	r2, [r3, #24]
}
 801c4ae:	bf00      	nop
 801c4b0:	370c      	adds	r7, #12
 801c4b2:	46bd      	mov	sp, r7
 801c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4b8:	4770      	bx	lr
	...

0801c4bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	b084      	sub	sp, #16
 801c4c0:	af00      	add	r7, sp, #0
 801c4c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801c4c4:	4b29      	ldr	r3, [pc, #164]	@ (801c56c <HAL_PWREx_ConfigSupply+0xb0>)
 801c4c6:	68db      	ldr	r3, [r3, #12]
 801c4c8:	f003 0307 	and.w	r3, r3, #7
 801c4cc:	2b06      	cmp	r3, #6
 801c4ce:	d00a      	beq.n	801c4e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801c4d0:	4b26      	ldr	r3, [pc, #152]	@ (801c56c <HAL_PWREx_ConfigSupply+0xb0>)
 801c4d2:	68db      	ldr	r3, [r3, #12]
 801c4d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c4d8:	687a      	ldr	r2, [r7, #4]
 801c4da:	429a      	cmp	r2, r3
 801c4dc:	d001      	beq.n	801c4e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801c4de:	2301      	movs	r3, #1
 801c4e0:	e040      	b.n	801c564 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801c4e2:	2300      	movs	r3, #0
 801c4e4:	e03e      	b.n	801c564 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801c4e6:	4b21      	ldr	r3, [pc, #132]	@ (801c56c <HAL_PWREx_ConfigSupply+0xb0>)
 801c4e8:	68db      	ldr	r3, [r3, #12]
 801c4ea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 801c4ee:	491f      	ldr	r1, [pc, #124]	@ (801c56c <HAL_PWREx_ConfigSupply+0xb0>)
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	4313      	orrs	r3, r2
 801c4f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801c4f6:	f7ff f8a7 	bl	801b648 <HAL_GetTick>
 801c4fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c4fc:	e009      	b.n	801c512 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801c4fe:	f7ff f8a3 	bl	801b648 <HAL_GetTick>
 801c502:	4602      	mov	r2, r0
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	1ad3      	subs	r3, r2, r3
 801c508:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c50c:	d901      	bls.n	801c512 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801c50e:	2301      	movs	r3, #1
 801c510:	e028      	b.n	801c564 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c512:	4b16      	ldr	r3, [pc, #88]	@ (801c56c <HAL_PWREx_ConfigSupply+0xb0>)
 801c514:	685b      	ldr	r3, [r3, #4]
 801c516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c51a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c51e:	d1ee      	bne.n	801c4fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	2b1e      	cmp	r3, #30
 801c524:	d008      	beq.n	801c538 <HAL_PWREx_ConfigSupply+0x7c>
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	2b2e      	cmp	r3, #46	@ 0x2e
 801c52a:	d005      	beq.n	801c538 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	2b1d      	cmp	r3, #29
 801c530:	d002      	beq.n	801c538 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	2b2d      	cmp	r3, #45	@ 0x2d
 801c536:	d114      	bne.n	801c562 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 801c538:	f7ff f886 	bl	801b648 <HAL_GetTick>
 801c53c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801c53e:	e009      	b.n	801c554 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801c540:	f7ff f882 	bl	801b648 <HAL_GetTick>
 801c544:	4602      	mov	r2, r0
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	1ad3      	subs	r3, r2, r3
 801c54a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c54e:	d901      	bls.n	801c554 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 801c550:	2301      	movs	r3, #1
 801c552:	e007      	b.n	801c564 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801c554:	4b05      	ldr	r3, [pc, #20]	@ (801c56c <HAL_PWREx_ConfigSupply+0xb0>)
 801c556:	68db      	ldr	r3, [r3, #12]
 801c558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c55c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c560:	d1ee      	bne.n	801c540 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801c562:	2300      	movs	r3, #0
}
 801c564:	4618      	mov	r0, r3
 801c566:	3710      	adds	r7, #16
 801c568:	46bd      	mov	sp, r7
 801c56a:	bd80      	pop	{r7, pc}
 801c56c:	58024800 	.word	0x58024800

0801c570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c570:	b580      	push	{r7, lr}
 801c572:	b08c      	sub	sp, #48	@ 0x30
 801c574:	af00      	add	r7, sp, #0
 801c576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d102      	bne.n	801c584 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801c57e:	2301      	movs	r3, #1
 801c580:	f000 bc48 	b.w	801ce14 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	f003 0301 	and.w	r3, r3, #1
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	f000 8088 	beq.w	801c6a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c592:	4b99      	ldr	r3, [pc, #612]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c594:	691b      	ldr	r3, [r3, #16]
 801c596:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c59a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c59c:	4b96      	ldr	r3, [pc, #600]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c5a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801c5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5a4:	2b10      	cmp	r3, #16
 801c5a6:	d007      	beq.n	801c5b8 <HAL_RCC_OscConfig+0x48>
 801c5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5aa:	2b18      	cmp	r3, #24
 801c5ac:	d111      	bne.n	801c5d2 <HAL_RCC_OscConfig+0x62>
 801c5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5b0:	f003 0303 	and.w	r3, r3, #3
 801c5b4:	2b02      	cmp	r3, #2
 801c5b6:	d10c      	bne.n	801c5d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c5b8:	4b8f      	ldr	r3, [pc, #572]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	d06d      	beq.n	801c6a0 <HAL_RCC_OscConfig+0x130>
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	685b      	ldr	r3, [r3, #4]
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	d169      	bne.n	801c6a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801c5cc:	2301      	movs	r3, #1
 801c5ce:	f000 bc21 	b.w	801ce14 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	685b      	ldr	r3, [r3, #4]
 801c5d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c5da:	d106      	bne.n	801c5ea <HAL_RCC_OscConfig+0x7a>
 801c5dc:	4b86      	ldr	r3, [pc, #536]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	4a85      	ldr	r2, [pc, #532]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c5e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c5e6:	6013      	str	r3, [r2, #0]
 801c5e8:	e02e      	b.n	801c648 <HAL_RCC_OscConfig+0xd8>
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	685b      	ldr	r3, [r3, #4]
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d10c      	bne.n	801c60c <HAL_RCC_OscConfig+0x9c>
 801c5f2:	4b81      	ldr	r3, [pc, #516]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	4a80      	ldr	r2, [pc, #512]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c5f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c5fc:	6013      	str	r3, [r2, #0]
 801c5fe:	4b7e      	ldr	r3, [pc, #504]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	4a7d      	ldr	r2, [pc, #500]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c604:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c608:	6013      	str	r3, [r2, #0]
 801c60a:	e01d      	b.n	801c648 <HAL_RCC_OscConfig+0xd8>
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	685b      	ldr	r3, [r3, #4]
 801c610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c614:	d10c      	bne.n	801c630 <HAL_RCC_OscConfig+0xc0>
 801c616:	4b78      	ldr	r3, [pc, #480]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	4a77      	ldr	r2, [pc, #476]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c61c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c620:	6013      	str	r3, [r2, #0]
 801c622:	4b75      	ldr	r3, [pc, #468]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	4a74      	ldr	r2, [pc, #464]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c62c:	6013      	str	r3, [r2, #0]
 801c62e:	e00b      	b.n	801c648 <HAL_RCC_OscConfig+0xd8>
 801c630:	4b71      	ldr	r3, [pc, #452]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	4a70      	ldr	r2, [pc, #448]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c63a:	6013      	str	r3, [r2, #0]
 801c63c:	4b6e      	ldr	r3, [pc, #440]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	4a6d      	ldr	r2, [pc, #436]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	685b      	ldr	r3, [r3, #4]
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d013      	beq.n	801c678 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c650:	f7fe fffa 	bl	801b648 <HAL_GetTick>
 801c654:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c656:	e008      	b.n	801c66a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c658:	f7fe fff6 	bl	801b648 <HAL_GetTick>
 801c65c:	4602      	mov	r2, r0
 801c65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c660:	1ad3      	subs	r3, r2, r3
 801c662:	2b64      	cmp	r3, #100	@ 0x64
 801c664:	d901      	bls.n	801c66a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c666:	2303      	movs	r3, #3
 801c668:	e3d4      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c66a:	4b63      	ldr	r3, [pc, #396]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c672:	2b00      	cmp	r3, #0
 801c674:	d0f0      	beq.n	801c658 <HAL_RCC_OscConfig+0xe8>
 801c676:	e014      	b.n	801c6a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c678:	f7fe ffe6 	bl	801b648 <HAL_GetTick>
 801c67c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c67e:	e008      	b.n	801c692 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c680:	f7fe ffe2 	bl	801b648 <HAL_GetTick>
 801c684:	4602      	mov	r2, r0
 801c686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c688:	1ad3      	subs	r3, r2, r3
 801c68a:	2b64      	cmp	r3, #100	@ 0x64
 801c68c:	d901      	bls.n	801c692 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801c68e:	2303      	movs	r3, #3
 801c690:	e3c0      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c692:	4b59      	ldr	r3, [pc, #356]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d1f0      	bne.n	801c680 <HAL_RCC_OscConfig+0x110>
 801c69e:	e000      	b.n	801c6a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c6a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	f003 0302 	and.w	r3, r3, #2
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	f000 80ca 	beq.w	801c844 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c6b0:	4b51      	ldr	r3, [pc, #324]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c6b2:	691b      	ldr	r3, [r3, #16]
 801c6b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c6b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c6ba:	4b4f      	ldr	r3, [pc, #316]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c6bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c6be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801c6c0:	6a3b      	ldr	r3, [r7, #32]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d007      	beq.n	801c6d6 <HAL_RCC_OscConfig+0x166>
 801c6c6:	6a3b      	ldr	r3, [r7, #32]
 801c6c8:	2b18      	cmp	r3, #24
 801c6ca:	d156      	bne.n	801c77a <HAL_RCC_OscConfig+0x20a>
 801c6cc:	69fb      	ldr	r3, [r7, #28]
 801c6ce:	f003 0303 	and.w	r3, r3, #3
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d151      	bne.n	801c77a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c6d6:	4b48      	ldr	r3, [pc, #288]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c6d8:	681b      	ldr	r3, [r3, #0]
 801c6da:	f003 0304 	and.w	r3, r3, #4
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d005      	beq.n	801c6ee <HAL_RCC_OscConfig+0x17e>
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	68db      	ldr	r3, [r3, #12]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	d101      	bne.n	801c6ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801c6ea:	2301      	movs	r3, #1
 801c6ec:	e392      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c6ee:	4b42      	ldr	r3, [pc, #264]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	f023 0219 	bic.w	r2, r3, #25
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	68db      	ldr	r3, [r3, #12]
 801c6fa:	493f      	ldr	r1, [pc, #252]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c6fc:	4313      	orrs	r3, r2
 801c6fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c700:	f7fe ffa2 	bl	801b648 <HAL_GetTick>
 801c704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c706:	e008      	b.n	801c71a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c708:	f7fe ff9e 	bl	801b648 <HAL_GetTick>
 801c70c:	4602      	mov	r2, r0
 801c70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c710:	1ad3      	subs	r3, r2, r3
 801c712:	2b02      	cmp	r3, #2
 801c714:	d901      	bls.n	801c71a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c716:	2303      	movs	r3, #3
 801c718:	e37c      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c71a:	4b37      	ldr	r3, [pc, #220]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c71c:	681b      	ldr	r3, [r3, #0]
 801c71e:	f003 0304 	and.w	r3, r3, #4
 801c722:	2b00      	cmp	r3, #0
 801c724:	d0f0      	beq.n	801c708 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c726:	f7fe ff9b 	bl	801b660 <HAL_GetREVID>
 801c72a:	4603      	mov	r3, r0
 801c72c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c730:	4293      	cmp	r3, r2
 801c732:	d817      	bhi.n	801c764 <HAL_RCC_OscConfig+0x1f4>
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	691b      	ldr	r3, [r3, #16]
 801c738:	2b40      	cmp	r3, #64	@ 0x40
 801c73a:	d108      	bne.n	801c74e <HAL_RCC_OscConfig+0x1de>
 801c73c:	4b2e      	ldr	r3, [pc, #184]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c73e:	685b      	ldr	r3, [r3, #4]
 801c740:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c744:	4a2c      	ldr	r2, [pc, #176]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c74a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c74c:	e07a      	b.n	801c844 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c74e:	4b2a      	ldr	r3, [pc, #168]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c750:	685b      	ldr	r3, [r3, #4]
 801c752:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	691b      	ldr	r3, [r3, #16]
 801c75a:	031b      	lsls	r3, r3, #12
 801c75c:	4926      	ldr	r1, [pc, #152]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c75e:	4313      	orrs	r3, r2
 801c760:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c762:	e06f      	b.n	801c844 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c764:	4b24      	ldr	r3, [pc, #144]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c766:	685b      	ldr	r3, [r3, #4]
 801c768:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	691b      	ldr	r3, [r3, #16]
 801c770:	061b      	lsls	r3, r3, #24
 801c772:	4921      	ldr	r1, [pc, #132]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c774:	4313      	orrs	r3, r2
 801c776:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c778:	e064      	b.n	801c844 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	68db      	ldr	r3, [r3, #12]
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d047      	beq.n	801c812 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c782:	4b1d      	ldr	r3, [pc, #116]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	f023 0219 	bic.w	r2, r3, #25
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	68db      	ldr	r3, [r3, #12]
 801c78e:	491a      	ldr	r1, [pc, #104]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c790:	4313      	orrs	r3, r2
 801c792:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c794:	f7fe ff58 	bl	801b648 <HAL_GetTick>
 801c798:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c79a:	e008      	b.n	801c7ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c79c:	f7fe ff54 	bl	801b648 <HAL_GetTick>
 801c7a0:	4602      	mov	r2, r0
 801c7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7a4:	1ad3      	subs	r3, r2, r3
 801c7a6:	2b02      	cmp	r3, #2
 801c7a8:	d901      	bls.n	801c7ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801c7aa:	2303      	movs	r3, #3
 801c7ac:	e332      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c7ae:	4b12      	ldr	r3, [pc, #72]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	f003 0304 	and.w	r3, r3, #4
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d0f0      	beq.n	801c79c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c7ba:	f7fe ff51 	bl	801b660 <HAL_GetREVID>
 801c7be:	4603      	mov	r3, r0
 801c7c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c7c4:	4293      	cmp	r3, r2
 801c7c6:	d819      	bhi.n	801c7fc <HAL_RCC_OscConfig+0x28c>
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	691b      	ldr	r3, [r3, #16]
 801c7cc:	2b40      	cmp	r3, #64	@ 0x40
 801c7ce:	d108      	bne.n	801c7e2 <HAL_RCC_OscConfig+0x272>
 801c7d0:	4b09      	ldr	r3, [pc, #36]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c7d2:	685b      	ldr	r3, [r3, #4]
 801c7d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c7d8:	4a07      	ldr	r2, [pc, #28]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c7da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c7de:	6053      	str	r3, [r2, #4]
 801c7e0:	e030      	b.n	801c844 <HAL_RCC_OscConfig+0x2d4>
 801c7e2:	4b05      	ldr	r3, [pc, #20]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c7e4:	685b      	ldr	r3, [r3, #4]
 801c7e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	691b      	ldr	r3, [r3, #16]
 801c7ee:	031b      	lsls	r3, r3, #12
 801c7f0:	4901      	ldr	r1, [pc, #4]	@ (801c7f8 <HAL_RCC_OscConfig+0x288>)
 801c7f2:	4313      	orrs	r3, r2
 801c7f4:	604b      	str	r3, [r1, #4]
 801c7f6:	e025      	b.n	801c844 <HAL_RCC_OscConfig+0x2d4>
 801c7f8:	58024400 	.word	0x58024400
 801c7fc:	4b9a      	ldr	r3, [pc, #616]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c7fe:	685b      	ldr	r3, [r3, #4]
 801c800:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	691b      	ldr	r3, [r3, #16]
 801c808:	061b      	lsls	r3, r3, #24
 801c80a:	4997      	ldr	r1, [pc, #604]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c80c:	4313      	orrs	r3, r2
 801c80e:	604b      	str	r3, [r1, #4]
 801c810:	e018      	b.n	801c844 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c812:	4b95      	ldr	r3, [pc, #596]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c814:	681b      	ldr	r3, [r3, #0]
 801c816:	4a94      	ldr	r2, [pc, #592]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c818:	f023 0301 	bic.w	r3, r3, #1
 801c81c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c81e:	f7fe ff13 	bl	801b648 <HAL_GetTick>
 801c822:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c824:	e008      	b.n	801c838 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c826:	f7fe ff0f 	bl	801b648 <HAL_GetTick>
 801c82a:	4602      	mov	r2, r0
 801c82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c82e:	1ad3      	subs	r3, r2, r3
 801c830:	2b02      	cmp	r3, #2
 801c832:	d901      	bls.n	801c838 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801c834:	2303      	movs	r3, #3
 801c836:	e2ed      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c838:	4b8b      	ldr	r3, [pc, #556]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	f003 0304 	and.w	r3, r3, #4
 801c840:	2b00      	cmp	r3, #0
 801c842:	d1f0      	bne.n	801c826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	681b      	ldr	r3, [r3, #0]
 801c848:	f003 0310 	and.w	r3, r3, #16
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	f000 80a9 	beq.w	801c9a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c852:	4b85      	ldr	r3, [pc, #532]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c854:	691b      	ldr	r3, [r3, #16]
 801c856:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c85a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c85c:	4b82      	ldr	r3, [pc, #520]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c860:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801c862:	69bb      	ldr	r3, [r7, #24]
 801c864:	2b08      	cmp	r3, #8
 801c866:	d007      	beq.n	801c878 <HAL_RCC_OscConfig+0x308>
 801c868:	69bb      	ldr	r3, [r7, #24]
 801c86a:	2b18      	cmp	r3, #24
 801c86c:	d13a      	bne.n	801c8e4 <HAL_RCC_OscConfig+0x374>
 801c86e:	697b      	ldr	r3, [r7, #20]
 801c870:	f003 0303 	and.w	r3, r3, #3
 801c874:	2b01      	cmp	r3, #1
 801c876:	d135      	bne.n	801c8e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c878:	4b7b      	ldr	r3, [pc, #492]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c880:	2b00      	cmp	r3, #0
 801c882:	d005      	beq.n	801c890 <HAL_RCC_OscConfig+0x320>
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	69db      	ldr	r3, [r3, #28]
 801c888:	2b80      	cmp	r3, #128	@ 0x80
 801c88a:	d001      	beq.n	801c890 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801c88c:	2301      	movs	r3, #1
 801c88e:	e2c1      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c890:	f7fe fee6 	bl	801b660 <HAL_GetREVID>
 801c894:	4603      	mov	r3, r0
 801c896:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c89a:	4293      	cmp	r3, r2
 801c89c:	d817      	bhi.n	801c8ce <HAL_RCC_OscConfig+0x35e>
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	6a1b      	ldr	r3, [r3, #32]
 801c8a2:	2b20      	cmp	r3, #32
 801c8a4:	d108      	bne.n	801c8b8 <HAL_RCC_OscConfig+0x348>
 801c8a6:	4b70      	ldr	r3, [pc, #448]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c8a8:	685b      	ldr	r3, [r3, #4]
 801c8aa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c8ae:	4a6e      	ldr	r2, [pc, #440]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c8b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c8b4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c8b6:	e075      	b.n	801c9a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c8b8:	4b6b      	ldr	r3, [pc, #428]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c8ba:	685b      	ldr	r3, [r3, #4]
 801c8bc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	6a1b      	ldr	r3, [r3, #32]
 801c8c4:	069b      	lsls	r3, r3, #26
 801c8c6:	4968      	ldr	r1, [pc, #416]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c8c8:	4313      	orrs	r3, r2
 801c8ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c8cc:	e06a      	b.n	801c9a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c8ce:	4b66      	ldr	r3, [pc, #408]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c8d0:	68db      	ldr	r3, [r3, #12]
 801c8d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	6a1b      	ldr	r3, [r3, #32]
 801c8da:	061b      	lsls	r3, r3, #24
 801c8dc:	4962      	ldr	r1, [pc, #392]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c8de:	4313      	orrs	r3, r2
 801c8e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c8e2:	e05f      	b.n	801c9a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	69db      	ldr	r3, [r3, #28]
 801c8e8:	2b00      	cmp	r3, #0
 801c8ea:	d042      	beq.n	801c972 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801c8ec:	4b5e      	ldr	r3, [pc, #376]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	4a5d      	ldr	r2, [pc, #372]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c8f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c8f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c8f8:	f7fe fea6 	bl	801b648 <HAL_GetTick>
 801c8fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c8fe:	e008      	b.n	801c912 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c900:	f7fe fea2 	bl	801b648 <HAL_GetTick>
 801c904:	4602      	mov	r2, r0
 801c906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c908:	1ad3      	subs	r3, r2, r3
 801c90a:	2b02      	cmp	r3, #2
 801c90c:	d901      	bls.n	801c912 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801c90e:	2303      	movs	r3, #3
 801c910:	e280      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c912:	4b55      	ldr	r3, [pc, #340]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d0f0      	beq.n	801c900 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c91e:	f7fe fe9f 	bl	801b660 <HAL_GetREVID>
 801c922:	4603      	mov	r3, r0
 801c924:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c928:	4293      	cmp	r3, r2
 801c92a:	d817      	bhi.n	801c95c <HAL_RCC_OscConfig+0x3ec>
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	6a1b      	ldr	r3, [r3, #32]
 801c930:	2b20      	cmp	r3, #32
 801c932:	d108      	bne.n	801c946 <HAL_RCC_OscConfig+0x3d6>
 801c934:	4b4c      	ldr	r3, [pc, #304]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c936:	685b      	ldr	r3, [r3, #4]
 801c938:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c93c:	4a4a      	ldr	r2, [pc, #296]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c93e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c942:	6053      	str	r3, [r2, #4]
 801c944:	e02e      	b.n	801c9a4 <HAL_RCC_OscConfig+0x434>
 801c946:	4b48      	ldr	r3, [pc, #288]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c948:	685b      	ldr	r3, [r3, #4]
 801c94a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	6a1b      	ldr	r3, [r3, #32]
 801c952:	069b      	lsls	r3, r3, #26
 801c954:	4944      	ldr	r1, [pc, #272]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c956:	4313      	orrs	r3, r2
 801c958:	604b      	str	r3, [r1, #4]
 801c95a:	e023      	b.n	801c9a4 <HAL_RCC_OscConfig+0x434>
 801c95c:	4b42      	ldr	r3, [pc, #264]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c95e:	68db      	ldr	r3, [r3, #12]
 801c960:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	6a1b      	ldr	r3, [r3, #32]
 801c968:	061b      	lsls	r3, r3, #24
 801c96a:	493f      	ldr	r1, [pc, #252]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c96c:	4313      	orrs	r3, r2
 801c96e:	60cb      	str	r3, [r1, #12]
 801c970:	e018      	b.n	801c9a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801c972:	4b3d      	ldr	r3, [pc, #244]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	4a3c      	ldr	r2, [pc, #240]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c978:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801c97c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c97e:	f7fe fe63 	bl	801b648 <HAL_GetTick>
 801c982:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c984:	e008      	b.n	801c998 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c986:	f7fe fe5f 	bl	801b648 <HAL_GetTick>
 801c98a:	4602      	mov	r2, r0
 801c98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c98e:	1ad3      	subs	r3, r2, r3
 801c990:	2b02      	cmp	r3, #2
 801c992:	d901      	bls.n	801c998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801c994:	2303      	movs	r3, #3
 801c996:	e23d      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c998:	4b33      	ldr	r3, [pc, #204]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d1f0      	bne.n	801c986 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	f003 0308 	and.w	r3, r3, #8
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d036      	beq.n	801ca1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	695b      	ldr	r3, [r3, #20]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d019      	beq.n	801c9ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c9b8:	4b2b      	ldr	r3, [pc, #172]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c9ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c9bc:	4a2a      	ldr	r2, [pc, #168]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c9be:	f043 0301 	orr.w	r3, r3, #1
 801c9c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c9c4:	f7fe fe40 	bl	801b648 <HAL_GetTick>
 801c9c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c9ca:	e008      	b.n	801c9de <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c9cc:	f7fe fe3c 	bl	801b648 <HAL_GetTick>
 801c9d0:	4602      	mov	r2, r0
 801c9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9d4:	1ad3      	subs	r3, r2, r3
 801c9d6:	2b02      	cmp	r3, #2
 801c9d8:	d901      	bls.n	801c9de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801c9da:	2303      	movs	r3, #3
 801c9dc:	e21a      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c9de:	4b22      	ldr	r3, [pc, #136]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c9e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c9e2:	f003 0302 	and.w	r3, r3, #2
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d0f0      	beq.n	801c9cc <HAL_RCC_OscConfig+0x45c>
 801c9ea:	e018      	b.n	801ca1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c9ec:	4b1e      	ldr	r3, [pc, #120]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c9ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c9f0:	4a1d      	ldr	r2, [pc, #116]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801c9f2:	f023 0301 	bic.w	r3, r3, #1
 801c9f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c9f8:	f7fe fe26 	bl	801b648 <HAL_GetTick>
 801c9fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c9fe:	e008      	b.n	801ca12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ca00:	f7fe fe22 	bl	801b648 <HAL_GetTick>
 801ca04:	4602      	mov	r2, r0
 801ca06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca08:	1ad3      	subs	r3, r2, r3
 801ca0a:	2b02      	cmp	r3, #2
 801ca0c:	d901      	bls.n	801ca12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801ca0e:	2303      	movs	r3, #3
 801ca10:	e200      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ca12:	4b15      	ldr	r3, [pc, #84]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801ca14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ca16:	f003 0302 	and.w	r3, r3, #2
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d1f0      	bne.n	801ca00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	f003 0320 	and.w	r3, r3, #32
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d039      	beq.n	801ca9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	699b      	ldr	r3, [r3, #24]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d01c      	beq.n	801ca6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801ca32:	4b0d      	ldr	r3, [pc, #52]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	4a0c      	ldr	r2, [pc, #48]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801ca38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801ca3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801ca3e:	f7fe fe03 	bl	801b648 <HAL_GetTick>
 801ca42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ca44:	e008      	b.n	801ca58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ca46:	f7fe fdff 	bl	801b648 <HAL_GetTick>
 801ca4a:	4602      	mov	r2, r0
 801ca4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca4e:	1ad3      	subs	r3, r2, r3
 801ca50:	2b02      	cmp	r3, #2
 801ca52:	d901      	bls.n	801ca58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801ca54:	2303      	movs	r3, #3
 801ca56:	e1dd      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ca58:	4b03      	ldr	r3, [pc, #12]	@ (801ca68 <HAL_RCC_OscConfig+0x4f8>)
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d0f0      	beq.n	801ca46 <HAL_RCC_OscConfig+0x4d6>
 801ca64:	e01b      	b.n	801ca9e <HAL_RCC_OscConfig+0x52e>
 801ca66:	bf00      	nop
 801ca68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801ca6c:	4b9b      	ldr	r3, [pc, #620]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	4a9a      	ldr	r2, [pc, #616]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801ca72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ca76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801ca78:	f7fe fde6 	bl	801b648 <HAL_GetTick>
 801ca7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801ca7e:	e008      	b.n	801ca92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ca80:	f7fe fde2 	bl	801b648 <HAL_GetTick>
 801ca84:	4602      	mov	r2, r0
 801ca86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca88:	1ad3      	subs	r3, r2, r3
 801ca8a:	2b02      	cmp	r3, #2
 801ca8c:	d901      	bls.n	801ca92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801ca8e:	2303      	movs	r3, #3
 801ca90:	e1c0      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801ca92:	4b92      	ldr	r3, [pc, #584]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d1f0      	bne.n	801ca80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	f003 0304 	and.w	r3, r3, #4
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	f000 8081 	beq.w	801cbae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801caac:	4b8c      	ldr	r3, [pc, #560]	@ (801cce0 <HAL_RCC_OscConfig+0x770>)
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	4a8b      	ldr	r2, [pc, #556]	@ (801cce0 <HAL_RCC_OscConfig+0x770>)
 801cab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801cab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801cab8:	f7fe fdc6 	bl	801b648 <HAL_GetTick>
 801cabc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cabe:	e008      	b.n	801cad2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cac0:	f7fe fdc2 	bl	801b648 <HAL_GetTick>
 801cac4:	4602      	mov	r2, r0
 801cac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cac8:	1ad3      	subs	r3, r2, r3
 801caca:	2b64      	cmp	r3, #100	@ 0x64
 801cacc:	d901      	bls.n	801cad2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801cace:	2303      	movs	r3, #3
 801cad0:	e1a0      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cad2:	4b83      	ldr	r3, [pc, #524]	@ (801cce0 <HAL_RCC_OscConfig+0x770>)
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d0f0      	beq.n	801cac0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	689b      	ldr	r3, [r3, #8]
 801cae2:	2b01      	cmp	r3, #1
 801cae4:	d106      	bne.n	801caf4 <HAL_RCC_OscConfig+0x584>
 801cae6:	4b7d      	ldr	r3, [pc, #500]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801caea:	4a7c      	ldr	r2, [pc, #496]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801caec:	f043 0301 	orr.w	r3, r3, #1
 801caf0:	6713      	str	r3, [r2, #112]	@ 0x70
 801caf2:	e02d      	b.n	801cb50 <HAL_RCC_OscConfig+0x5e0>
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	689b      	ldr	r3, [r3, #8]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d10c      	bne.n	801cb16 <HAL_RCC_OscConfig+0x5a6>
 801cafc:	4b77      	ldr	r3, [pc, #476]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cafe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cb00:	4a76      	ldr	r2, [pc, #472]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cb02:	f023 0301 	bic.w	r3, r3, #1
 801cb06:	6713      	str	r3, [r2, #112]	@ 0x70
 801cb08:	4b74      	ldr	r3, [pc, #464]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cb0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cb0c:	4a73      	ldr	r2, [pc, #460]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cb0e:	f023 0304 	bic.w	r3, r3, #4
 801cb12:	6713      	str	r3, [r2, #112]	@ 0x70
 801cb14:	e01c      	b.n	801cb50 <HAL_RCC_OscConfig+0x5e0>
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	689b      	ldr	r3, [r3, #8]
 801cb1a:	2b05      	cmp	r3, #5
 801cb1c:	d10c      	bne.n	801cb38 <HAL_RCC_OscConfig+0x5c8>
 801cb1e:	4b6f      	ldr	r3, [pc, #444]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cb20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cb22:	4a6e      	ldr	r2, [pc, #440]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cb24:	f043 0304 	orr.w	r3, r3, #4
 801cb28:	6713      	str	r3, [r2, #112]	@ 0x70
 801cb2a:	4b6c      	ldr	r3, [pc, #432]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cb2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cb2e:	4a6b      	ldr	r2, [pc, #428]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cb30:	f043 0301 	orr.w	r3, r3, #1
 801cb34:	6713      	str	r3, [r2, #112]	@ 0x70
 801cb36:	e00b      	b.n	801cb50 <HAL_RCC_OscConfig+0x5e0>
 801cb38:	4b68      	ldr	r3, [pc, #416]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cb3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cb3c:	4a67      	ldr	r2, [pc, #412]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cb3e:	f023 0301 	bic.w	r3, r3, #1
 801cb42:	6713      	str	r3, [r2, #112]	@ 0x70
 801cb44:	4b65      	ldr	r3, [pc, #404]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cb46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cb48:	4a64      	ldr	r2, [pc, #400]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cb4a:	f023 0304 	bic.w	r3, r3, #4
 801cb4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	689b      	ldr	r3, [r3, #8]
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d015      	beq.n	801cb84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cb58:	f7fe fd76 	bl	801b648 <HAL_GetTick>
 801cb5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801cb5e:	e00a      	b.n	801cb76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cb60:	f7fe fd72 	bl	801b648 <HAL_GetTick>
 801cb64:	4602      	mov	r2, r0
 801cb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb68:	1ad3      	subs	r3, r2, r3
 801cb6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801cb6e:	4293      	cmp	r3, r2
 801cb70:	d901      	bls.n	801cb76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801cb72:	2303      	movs	r3, #3
 801cb74:	e14e      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801cb76:	4b59      	ldr	r3, [pc, #356]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cb78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cb7a:	f003 0302 	and.w	r3, r3, #2
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	d0ee      	beq.n	801cb60 <HAL_RCC_OscConfig+0x5f0>
 801cb82:	e014      	b.n	801cbae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cb84:	f7fe fd60 	bl	801b648 <HAL_GetTick>
 801cb88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801cb8a:	e00a      	b.n	801cba2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cb8c:	f7fe fd5c 	bl	801b648 <HAL_GetTick>
 801cb90:	4602      	mov	r2, r0
 801cb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb94:	1ad3      	subs	r3, r2, r3
 801cb96:	f241 3288 	movw	r2, #5000	@ 0x1388
 801cb9a:	4293      	cmp	r3, r2
 801cb9c:	d901      	bls.n	801cba2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801cb9e:	2303      	movs	r3, #3
 801cba0:	e138      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801cba2:	4b4e      	ldr	r3, [pc, #312]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cba6:	f003 0302 	and.w	r3, r3, #2
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d1ee      	bne.n	801cb8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	f000 812d 	beq.w	801ce12 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801cbb8:	4b48      	ldr	r3, [pc, #288]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cbba:	691b      	ldr	r3, [r3, #16]
 801cbbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801cbc0:	2b18      	cmp	r3, #24
 801cbc2:	f000 80bd 	beq.w	801cd40 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cbca:	2b02      	cmp	r3, #2
 801cbcc:	f040 809e 	bne.w	801cd0c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801cbd0:	4b42      	ldr	r3, [pc, #264]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	4a41      	ldr	r2, [pc, #260]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cbd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801cbda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cbdc:	f7fe fd34 	bl	801b648 <HAL_GetTick>
 801cbe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cbe2:	e008      	b.n	801cbf6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cbe4:	f7fe fd30 	bl	801b648 <HAL_GetTick>
 801cbe8:	4602      	mov	r2, r0
 801cbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbec:	1ad3      	subs	r3, r2, r3
 801cbee:	2b02      	cmp	r3, #2
 801cbf0:	d901      	bls.n	801cbf6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801cbf2:	2303      	movs	r3, #3
 801cbf4:	e10e      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cbf6:	4b39      	ldr	r3, [pc, #228]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d1f0      	bne.n	801cbe4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801cc02:	4b36      	ldr	r3, [pc, #216]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801cc06:	4b37      	ldr	r3, [pc, #220]	@ (801cce4 <HAL_RCC_OscConfig+0x774>)
 801cc08:	4013      	ands	r3, r2
 801cc0a:	687a      	ldr	r2, [r7, #4]
 801cc0c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801cc0e:	687a      	ldr	r2, [r7, #4]
 801cc10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801cc12:	0112      	lsls	r2, r2, #4
 801cc14:	430a      	orrs	r2, r1
 801cc16:	4931      	ldr	r1, [pc, #196]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc18:	4313      	orrs	r3, r2
 801cc1a:	628b      	str	r3, [r1, #40]	@ 0x28
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cc20:	3b01      	subs	r3, #1
 801cc22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cc2a:	3b01      	subs	r3, #1
 801cc2c:	025b      	lsls	r3, r3, #9
 801cc2e:	b29b      	uxth	r3, r3
 801cc30:	431a      	orrs	r2, r3
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cc36:	3b01      	subs	r3, #1
 801cc38:	041b      	lsls	r3, r3, #16
 801cc3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801cc3e:	431a      	orrs	r2, r3
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cc44:	3b01      	subs	r3, #1
 801cc46:	061b      	lsls	r3, r3, #24
 801cc48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801cc4c:	4923      	ldr	r1, [pc, #140]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc4e:	4313      	orrs	r3, r2
 801cc50:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801cc52:	4b22      	ldr	r3, [pc, #136]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc56:	4a21      	ldr	r2, [pc, #132]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc58:	f023 0301 	bic.w	r3, r3, #1
 801cc5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801cc5e:	4b1f      	ldr	r3, [pc, #124]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cc62:	4b21      	ldr	r3, [pc, #132]	@ (801cce8 <HAL_RCC_OscConfig+0x778>)
 801cc64:	4013      	ands	r3, r2
 801cc66:	687a      	ldr	r2, [r7, #4]
 801cc68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801cc6a:	00d2      	lsls	r2, r2, #3
 801cc6c:	491b      	ldr	r1, [pc, #108]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc6e:	4313      	orrs	r3, r2
 801cc70:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801cc72:	4b1a      	ldr	r3, [pc, #104]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc76:	f023 020c 	bic.w	r2, r3, #12
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cc7e:	4917      	ldr	r1, [pc, #92]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc80:	4313      	orrs	r3, r2
 801cc82:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801cc84:	4b15      	ldr	r3, [pc, #84]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc88:	f023 0202 	bic.w	r2, r3, #2
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cc90:	4912      	ldr	r1, [pc, #72]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc92:	4313      	orrs	r3, r2
 801cc94:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801cc96:	4b11      	ldr	r3, [pc, #68]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc9a:	4a10      	ldr	r2, [pc, #64]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cc9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cca2:	4b0e      	ldr	r3, [pc, #56]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cca6:	4a0d      	ldr	r2, [pc, #52]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ccac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801ccae:	4b0b      	ldr	r3, [pc, #44]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801ccb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ccb2:	4a0a      	ldr	r2, [pc, #40]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801ccb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801ccb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801ccba:	4b08      	ldr	r3, [pc, #32]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801ccbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ccbe:	4a07      	ldr	r2, [pc, #28]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801ccc0:	f043 0301 	orr.w	r3, r3, #1
 801ccc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801ccc6:	4b05      	ldr	r3, [pc, #20]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	4a04      	ldr	r2, [pc, #16]	@ (801ccdc <HAL_RCC_OscConfig+0x76c>)
 801cccc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801ccd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ccd2:	f7fe fcb9 	bl	801b648 <HAL_GetTick>
 801ccd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ccd8:	e011      	b.n	801ccfe <HAL_RCC_OscConfig+0x78e>
 801ccda:	bf00      	nop
 801ccdc:	58024400 	.word	0x58024400
 801cce0:	58024800 	.word	0x58024800
 801cce4:	fffffc0c 	.word	0xfffffc0c
 801cce8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ccec:	f7fe fcac 	bl	801b648 <HAL_GetTick>
 801ccf0:	4602      	mov	r2, r0
 801ccf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccf4:	1ad3      	subs	r3, r2, r3
 801ccf6:	2b02      	cmp	r3, #2
 801ccf8:	d901      	bls.n	801ccfe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801ccfa:	2303      	movs	r3, #3
 801ccfc:	e08a      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ccfe:	4b47      	ldr	r3, [pc, #284]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d0f0      	beq.n	801ccec <HAL_RCC_OscConfig+0x77c>
 801cd0a:	e082      	b.n	801ce12 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801cd0c:	4b43      	ldr	r3, [pc, #268]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801cd0e:	681b      	ldr	r3, [r3, #0]
 801cd10:	4a42      	ldr	r2, [pc, #264]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801cd12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801cd16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cd18:	f7fe fc96 	bl	801b648 <HAL_GetTick>
 801cd1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cd1e:	e008      	b.n	801cd32 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cd20:	f7fe fc92 	bl	801b648 <HAL_GetTick>
 801cd24:	4602      	mov	r2, r0
 801cd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd28:	1ad3      	subs	r3, r2, r3
 801cd2a:	2b02      	cmp	r3, #2
 801cd2c:	d901      	bls.n	801cd32 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801cd2e:	2303      	movs	r3, #3
 801cd30:	e070      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cd32:	4b3a      	ldr	r3, [pc, #232]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d1f0      	bne.n	801cd20 <HAL_RCC_OscConfig+0x7b0>
 801cd3e:	e068      	b.n	801ce12 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801cd40:	4b36      	ldr	r3, [pc, #216]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801cd42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cd44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801cd46:	4b35      	ldr	r3, [pc, #212]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801cd48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cd4a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cd50:	2b01      	cmp	r3, #1
 801cd52:	d031      	beq.n	801cdb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801cd54:	693b      	ldr	r3, [r7, #16]
 801cd56:	f003 0203 	and.w	r2, r3, #3
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801cd5e:	429a      	cmp	r2, r3
 801cd60:	d12a      	bne.n	801cdb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801cd62:	693b      	ldr	r3, [r7, #16]
 801cd64:	091b      	lsrs	r3, r3, #4
 801cd66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801cd6e:	429a      	cmp	r2, r3
 801cd70:	d122      	bne.n	801cdb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cd7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801cd7e:	429a      	cmp	r2, r3
 801cd80:	d11a      	bne.n	801cdb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801cd82:	68fb      	ldr	r3, [r7, #12]
 801cd84:	0a5b      	lsrs	r3, r3, #9
 801cd86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cd8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801cd90:	429a      	cmp	r2, r3
 801cd92:	d111      	bne.n	801cdb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801cd94:	68fb      	ldr	r3, [r7, #12]
 801cd96:	0c1b      	lsrs	r3, r3, #16
 801cd98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cda0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801cda2:	429a      	cmp	r2, r3
 801cda4:	d108      	bne.n	801cdb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801cda6:	68fb      	ldr	r3, [r7, #12]
 801cda8:	0e1b      	lsrs	r3, r3, #24
 801cdaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cdb2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801cdb4:	429a      	cmp	r2, r3
 801cdb6:	d001      	beq.n	801cdbc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801cdb8:	2301      	movs	r3, #1
 801cdba:	e02b      	b.n	801ce14 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801cdbc:	4b17      	ldr	r3, [pc, #92]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801cdbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cdc0:	08db      	lsrs	r3, r3, #3
 801cdc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cdc6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cdcc:	693a      	ldr	r2, [r7, #16]
 801cdce:	429a      	cmp	r2, r3
 801cdd0:	d01f      	beq.n	801ce12 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801cdd2:	4b12      	ldr	r3, [pc, #72]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801cdd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cdd6:	4a11      	ldr	r2, [pc, #68]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801cdd8:	f023 0301 	bic.w	r3, r3, #1
 801cddc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801cdde:	f7fe fc33 	bl	801b648 <HAL_GetTick>
 801cde2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801cde4:	bf00      	nop
 801cde6:	f7fe fc2f 	bl	801b648 <HAL_GetTick>
 801cdea:	4602      	mov	r2, r0
 801cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdee:	4293      	cmp	r3, r2
 801cdf0:	d0f9      	beq.n	801cde6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801cdf2:	4b0a      	ldr	r3, [pc, #40]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801cdf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cdf6:	4b0a      	ldr	r3, [pc, #40]	@ (801ce20 <HAL_RCC_OscConfig+0x8b0>)
 801cdf8:	4013      	ands	r3, r2
 801cdfa:	687a      	ldr	r2, [r7, #4]
 801cdfc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801cdfe:	00d2      	lsls	r2, r2, #3
 801ce00:	4906      	ldr	r1, [pc, #24]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801ce02:	4313      	orrs	r3, r2
 801ce04:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801ce06:	4b05      	ldr	r3, [pc, #20]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801ce08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce0a:	4a04      	ldr	r2, [pc, #16]	@ (801ce1c <HAL_RCC_OscConfig+0x8ac>)
 801ce0c:	f043 0301 	orr.w	r3, r3, #1
 801ce10:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801ce12:	2300      	movs	r3, #0
}
 801ce14:	4618      	mov	r0, r3
 801ce16:	3730      	adds	r7, #48	@ 0x30
 801ce18:	46bd      	mov	sp, r7
 801ce1a:	bd80      	pop	{r7, pc}
 801ce1c:	58024400 	.word	0x58024400
 801ce20:	ffff0007 	.word	0xffff0007

0801ce24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ce24:	b580      	push	{r7, lr}
 801ce26:	b086      	sub	sp, #24
 801ce28:	af00      	add	r7, sp, #0
 801ce2a:	6078      	str	r0, [r7, #4]
 801ce2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d101      	bne.n	801ce38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ce34:	2301      	movs	r3, #1
 801ce36:	e19c      	b.n	801d172 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801ce38:	4b8a      	ldr	r3, [pc, #552]	@ (801d064 <HAL_RCC_ClockConfig+0x240>)
 801ce3a:	681b      	ldr	r3, [r3, #0]
 801ce3c:	f003 030f 	and.w	r3, r3, #15
 801ce40:	683a      	ldr	r2, [r7, #0]
 801ce42:	429a      	cmp	r2, r3
 801ce44:	d910      	bls.n	801ce68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ce46:	4b87      	ldr	r3, [pc, #540]	@ (801d064 <HAL_RCC_ClockConfig+0x240>)
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	f023 020f 	bic.w	r2, r3, #15
 801ce4e:	4985      	ldr	r1, [pc, #532]	@ (801d064 <HAL_RCC_ClockConfig+0x240>)
 801ce50:	683b      	ldr	r3, [r7, #0]
 801ce52:	4313      	orrs	r3, r2
 801ce54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ce56:	4b83      	ldr	r3, [pc, #524]	@ (801d064 <HAL_RCC_ClockConfig+0x240>)
 801ce58:	681b      	ldr	r3, [r3, #0]
 801ce5a:	f003 030f 	and.w	r3, r3, #15
 801ce5e:	683a      	ldr	r2, [r7, #0]
 801ce60:	429a      	cmp	r2, r3
 801ce62:	d001      	beq.n	801ce68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801ce64:	2301      	movs	r3, #1
 801ce66:	e184      	b.n	801d172 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	f003 0304 	and.w	r3, r3, #4
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d010      	beq.n	801ce96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	691a      	ldr	r2, [r3, #16]
 801ce78:	4b7b      	ldr	r3, [pc, #492]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801ce7a:	699b      	ldr	r3, [r3, #24]
 801ce7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ce80:	429a      	cmp	r2, r3
 801ce82:	d908      	bls.n	801ce96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801ce84:	4b78      	ldr	r3, [pc, #480]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801ce86:	699b      	ldr	r3, [r3, #24]
 801ce88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	691b      	ldr	r3, [r3, #16]
 801ce90:	4975      	ldr	r1, [pc, #468]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801ce92:	4313      	orrs	r3, r2
 801ce94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	f003 0308 	and.w	r3, r3, #8
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d010      	beq.n	801cec4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	695a      	ldr	r2, [r3, #20]
 801cea6:	4b70      	ldr	r3, [pc, #448]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cea8:	69db      	ldr	r3, [r3, #28]
 801ceaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ceae:	429a      	cmp	r2, r3
 801ceb0:	d908      	bls.n	801cec4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801ceb2:	4b6d      	ldr	r3, [pc, #436]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801ceb4:	69db      	ldr	r3, [r3, #28]
 801ceb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	695b      	ldr	r3, [r3, #20]
 801cebe:	496a      	ldr	r1, [pc, #424]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cec0:	4313      	orrs	r3, r2
 801cec2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	f003 0310 	and.w	r3, r3, #16
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d010      	beq.n	801cef2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	699a      	ldr	r2, [r3, #24]
 801ced4:	4b64      	ldr	r3, [pc, #400]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801ced6:	69db      	ldr	r3, [r3, #28]
 801ced8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801cedc:	429a      	cmp	r2, r3
 801cede:	d908      	bls.n	801cef2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801cee0:	4b61      	ldr	r3, [pc, #388]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cee2:	69db      	ldr	r3, [r3, #28]
 801cee4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	699b      	ldr	r3, [r3, #24]
 801ceec:	495e      	ldr	r1, [pc, #376]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801ceee:	4313      	orrs	r3, r2
 801cef0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	f003 0320 	and.w	r3, r3, #32
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d010      	beq.n	801cf20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	69da      	ldr	r2, [r3, #28]
 801cf02:	4b59      	ldr	r3, [pc, #356]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cf04:	6a1b      	ldr	r3, [r3, #32]
 801cf06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cf0a:	429a      	cmp	r2, r3
 801cf0c:	d908      	bls.n	801cf20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801cf0e:	4b56      	ldr	r3, [pc, #344]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cf10:	6a1b      	ldr	r3, [r3, #32]
 801cf12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	69db      	ldr	r3, [r3, #28]
 801cf1a:	4953      	ldr	r1, [pc, #332]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cf1c:	4313      	orrs	r3, r2
 801cf1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	681b      	ldr	r3, [r3, #0]
 801cf24:	f003 0302 	and.w	r3, r3, #2
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d010      	beq.n	801cf4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	68da      	ldr	r2, [r3, #12]
 801cf30:	4b4d      	ldr	r3, [pc, #308]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cf32:	699b      	ldr	r3, [r3, #24]
 801cf34:	f003 030f 	and.w	r3, r3, #15
 801cf38:	429a      	cmp	r2, r3
 801cf3a:	d908      	bls.n	801cf4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801cf3c:	4b4a      	ldr	r3, [pc, #296]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cf3e:	699b      	ldr	r3, [r3, #24]
 801cf40:	f023 020f 	bic.w	r2, r3, #15
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	68db      	ldr	r3, [r3, #12]
 801cf48:	4947      	ldr	r1, [pc, #284]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cf4a:	4313      	orrs	r3, r2
 801cf4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	f003 0301 	and.w	r3, r3, #1
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	d055      	beq.n	801d006 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801cf5a:	4b43      	ldr	r3, [pc, #268]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cf5c:	699b      	ldr	r3, [r3, #24]
 801cf5e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	689b      	ldr	r3, [r3, #8]
 801cf66:	4940      	ldr	r1, [pc, #256]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cf68:	4313      	orrs	r3, r2
 801cf6a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	685b      	ldr	r3, [r3, #4]
 801cf70:	2b02      	cmp	r3, #2
 801cf72:	d107      	bne.n	801cf84 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801cf74:	4b3c      	ldr	r3, [pc, #240]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d121      	bne.n	801cfc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cf80:	2301      	movs	r3, #1
 801cf82:	e0f6      	b.n	801d172 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	685b      	ldr	r3, [r3, #4]
 801cf88:	2b03      	cmp	r3, #3
 801cf8a:	d107      	bne.n	801cf9c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801cf8c:	4b36      	ldr	r3, [pc, #216]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cf8e:	681b      	ldr	r3, [r3, #0]
 801cf90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d115      	bne.n	801cfc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cf98:	2301      	movs	r3, #1
 801cf9a:	e0ea      	b.n	801d172 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	685b      	ldr	r3, [r3, #4]
 801cfa0:	2b01      	cmp	r3, #1
 801cfa2:	d107      	bne.n	801cfb4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801cfa4:	4b30      	ldr	r3, [pc, #192]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cfa6:	681b      	ldr	r3, [r3, #0]
 801cfa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d109      	bne.n	801cfc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cfb0:	2301      	movs	r3, #1
 801cfb2:	e0de      	b.n	801d172 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801cfb4:	4b2c      	ldr	r3, [pc, #176]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cfb6:	681b      	ldr	r3, [r3, #0]
 801cfb8:	f003 0304 	and.w	r3, r3, #4
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d101      	bne.n	801cfc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cfc0:	2301      	movs	r3, #1
 801cfc2:	e0d6      	b.n	801d172 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801cfc4:	4b28      	ldr	r3, [pc, #160]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cfc6:	691b      	ldr	r3, [r3, #16]
 801cfc8:	f023 0207 	bic.w	r2, r3, #7
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	685b      	ldr	r3, [r3, #4]
 801cfd0:	4925      	ldr	r1, [pc, #148]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cfd2:	4313      	orrs	r3, r2
 801cfd4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cfd6:	f7fe fb37 	bl	801b648 <HAL_GetTick>
 801cfda:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cfdc:	e00a      	b.n	801cff4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801cfde:	f7fe fb33 	bl	801b648 <HAL_GetTick>
 801cfe2:	4602      	mov	r2, r0
 801cfe4:	697b      	ldr	r3, [r7, #20]
 801cfe6:	1ad3      	subs	r3, r2, r3
 801cfe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 801cfec:	4293      	cmp	r3, r2
 801cfee:	d901      	bls.n	801cff4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801cff0:	2303      	movs	r3, #3
 801cff2:	e0be      	b.n	801d172 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cff4:	4b1c      	ldr	r3, [pc, #112]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801cff6:	691b      	ldr	r3, [r3, #16]
 801cff8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	685b      	ldr	r3, [r3, #4]
 801d000:	00db      	lsls	r3, r3, #3
 801d002:	429a      	cmp	r2, r3
 801d004:	d1eb      	bne.n	801cfde <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	f003 0302 	and.w	r3, r3, #2
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d010      	beq.n	801d034 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	68da      	ldr	r2, [r3, #12]
 801d016:	4b14      	ldr	r3, [pc, #80]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801d018:	699b      	ldr	r3, [r3, #24]
 801d01a:	f003 030f 	and.w	r3, r3, #15
 801d01e:	429a      	cmp	r2, r3
 801d020:	d208      	bcs.n	801d034 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d022:	4b11      	ldr	r3, [pc, #68]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801d024:	699b      	ldr	r3, [r3, #24]
 801d026:	f023 020f 	bic.w	r2, r3, #15
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	68db      	ldr	r3, [r3, #12]
 801d02e:	490e      	ldr	r1, [pc, #56]	@ (801d068 <HAL_RCC_ClockConfig+0x244>)
 801d030:	4313      	orrs	r3, r2
 801d032:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d034:	4b0b      	ldr	r3, [pc, #44]	@ (801d064 <HAL_RCC_ClockConfig+0x240>)
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	f003 030f 	and.w	r3, r3, #15
 801d03c:	683a      	ldr	r2, [r7, #0]
 801d03e:	429a      	cmp	r2, r3
 801d040:	d214      	bcs.n	801d06c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d042:	4b08      	ldr	r3, [pc, #32]	@ (801d064 <HAL_RCC_ClockConfig+0x240>)
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	f023 020f 	bic.w	r2, r3, #15
 801d04a:	4906      	ldr	r1, [pc, #24]	@ (801d064 <HAL_RCC_ClockConfig+0x240>)
 801d04c:	683b      	ldr	r3, [r7, #0]
 801d04e:	4313      	orrs	r3, r2
 801d050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d052:	4b04      	ldr	r3, [pc, #16]	@ (801d064 <HAL_RCC_ClockConfig+0x240>)
 801d054:	681b      	ldr	r3, [r3, #0]
 801d056:	f003 030f 	and.w	r3, r3, #15
 801d05a:	683a      	ldr	r2, [r7, #0]
 801d05c:	429a      	cmp	r2, r3
 801d05e:	d005      	beq.n	801d06c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801d060:	2301      	movs	r3, #1
 801d062:	e086      	b.n	801d172 <HAL_RCC_ClockConfig+0x34e>
 801d064:	52002000 	.word	0x52002000
 801d068:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	f003 0304 	and.w	r3, r3, #4
 801d074:	2b00      	cmp	r3, #0
 801d076:	d010      	beq.n	801d09a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	691a      	ldr	r2, [r3, #16]
 801d07c:	4b3f      	ldr	r3, [pc, #252]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d07e:	699b      	ldr	r3, [r3, #24]
 801d080:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d084:	429a      	cmp	r2, r3
 801d086:	d208      	bcs.n	801d09a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801d088:	4b3c      	ldr	r3, [pc, #240]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d08a:	699b      	ldr	r3, [r3, #24]
 801d08c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	691b      	ldr	r3, [r3, #16]
 801d094:	4939      	ldr	r1, [pc, #228]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d096:	4313      	orrs	r3, r2
 801d098:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	f003 0308 	and.w	r3, r3, #8
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d010      	beq.n	801d0c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	695a      	ldr	r2, [r3, #20]
 801d0aa:	4b34      	ldr	r3, [pc, #208]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d0ac:	69db      	ldr	r3, [r3, #28]
 801d0ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d0b2:	429a      	cmp	r2, r3
 801d0b4:	d208      	bcs.n	801d0c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801d0b6:	4b31      	ldr	r3, [pc, #196]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d0b8:	69db      	ldr	r3, [r3, #28]
 801d0ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	695b      	ldr	r3, [r3, #20]
 801d0c2:	492e      	ldr	r1, [pc, #184]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d0c4:	4313      	orrs	r3, r2
 801d0c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	f003 0310 	and.w	r3, r3, #16
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d010      	beq.n	801d0f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	699a      	ldr	r2, [r3, #24]
 801d0d8:	4b28      	ldr	r3, [pc, #160]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d0da:	69db      	ldr	r3, [r3, #28]
 801d0dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801d0e0:	429a      	cmp	r2, r3
 801d0e2:	d208      	bcs.n	801d0f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801d0e4:	4b25      	ldr	r3, [pc, #148]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d0e6:	69db      	ldr	r3, [r3, #28]
 801d0e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	699b      	ldr	r3, [r3, #24]
 801d0f0:	4922      	ldr	r1, [pc, #136]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d0f2:	4313      	orrs	r3, r2
 801d0f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	f003 0320 	and.w	r3, r3, #32
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d010      	beq.n	801d124 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	69da      	ldr	r2, [r3, #28]
 801d106:	4b1d      	ldr	r3, [pc, #116]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d108:	6a1b      	ldr	r3, [r3, #32]
 801d10a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d10e:	429a      	cmp	r2, r3
 801d110:	d208      	bcs.n	801d124 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801d112:	4b1a      	ldr	r3, [pc, #104]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d114:	6a1b      	ldr	r3, [r3, #32]
 801d116:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	69db      	ldr	r3, [r3, #28]
 801d11e:	4917      	ldr	r1, [pc, #92]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d120:	4313      	orrs	r3, r2
 801d122:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801d124:	f000 f834 	bl	801d190 <HAL_RCC_GetSysClockFreq>
 801d128:	4602      	mov	r2, r0
 801d12a:	4b14      	ldr	r3, [pc, #80]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d12c:	699b      	ldr	r3, [r3, #24]
 801d12e:	0a1b      	lsrs	r3, r3, #8
 801d130:	f003 030f 	and.w	r3, r3, #15
 801d134:	4912      	ldr	r1, [pc, #72]	@ (801d180 <HAL_RCC_ClockConfig+0x35c>)
 801d136:	5ccb      	ldrb	r3, [r1, r3]
 801d138:	f003 031f 	and.w	r3, r3, #31
 801d13c:	fa22 f303 	lsr.w	r3, r2, r3
 801d140:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801d142:	4b0e      	ldr	r3, [pc, #56]	@ (801d17c <HAL_RCC_ClockConfig+0x358>)
 801d144:	699b      	ldr	r3, [r3, #24]
 801d146:	f003 030f 	and.w	r3, r3, #15
 801d14a:	4a0d      	ldr	r2, [pc, #52]	@ (801d180 <HAL_RCC_ClockConfig+0x35c>)
 801d14c:	5cd3      	ldrb	r3, [r2, r3]
 801d14e:	f003 031f 	and.w	r3, r3, #31
 801d152:	693a      	ldr	r2, [r7, #16]
 801d154:	fa22 f303 	lsr.w	r3, r2, r3
 801d158:	4a0a      	ldr	r2, [pc, #40]	@ (801d184 <HAL_RCC_ClockConfig+0x360>)
 801d15a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801d15c:	4a0a      	ldr	r2, [pc, #40]	@ (801d188 <HAL_RCC_ClockConfig+0x364>)
 801d15e:	693b      	ldr	r3, [r7, #16]
 801d160:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801d162:	4b0a      	ldr	r3, [pc, #40]	@ (801d18c <HAL_RCC_ClockConfig+0x368>)
 801d164:	681b      	ldr	r3, [r3, #0]
 801d166:	4618      	mov	r0, r3
 801d168:	f7fe fa24 	bl	801b5b4 <HAL_InitTick>
 801d16c:	4603      	mov	r3, r0
 801d16e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801d170:	7bfb      	ldrb	r3, [r7, #15]
}
 801d172:	4618      	mov	r0, r3
 801d174:	3718      	adds	r7, #24
 801d176:	46bd      	mov	sp, r7
 801d178:	bd80      	pop	{r7, pc}
 801d17a:	bf00      	nop
 801d17c:	58024400 	.word	0x58024400
 801d180:	08028c64 	.word	0x08028c64
 801d184:	24000004 	.word	0x24000004
 801d188:	24000000 	.word	0x24000000
 801d18c:	2400079c 	.word	0x2400079c

0801d190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d190:	b480      	push	{r7}
 801d192:	b089      	sub	sp, #36	@ 0x24
 801d194:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801d196:	4bb3      	ldr	r3, [pc, #716]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d198:	691b      	ldr	r3, [r3, #16]
 801d19a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d19e:	2b18      	cmp	r3, #24
 801d1a0:	f200 8155 	bhi.w	801d44e <HAL_RCC_GetSysClockFreq+0x2be>
 801d1a4:	a201      	add	r2, pc, #4	@ (adr r2, 801d1ac <HAL_RCC_GetSysClockFreq+0x1c>)
 801d1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d1aa:	bf00      	nop
 801d1ac:	0801d211 	.word	0x0801d211
 801d1b0:	0801d44f 	.word	0x0801d44f
 801d1b4:	0801d44f 	.word	0x0801d44f
 801d1b8:	0801d44f 	.word	0x0801d44f
 801d1bc:	0801d44f 	.word	0x0801d44f
 801d1c0:	0801d44f 	.word	0x0801d44f
 801d1c4:	0801d44f 	.word	0x0801d44f
 801d1c8:	0801d44f 	.word	0x0801d44f
 801d1cc:	0801d237 	.word	0x0801d237
 801d1d0:	0801d44f 	.word	0x0801d44f
 801d1d4:	0801d44f 	.word	0x0801d44f
 801d1d8:	0801d44f 	.word	0x0801d44f
 801d1dc:	0801d44f 	.word	0x0801d44f
 801d1e0:	0801d44f 	.word	0x0801d44f
 801d1e4:	0801d44f 	.word	0x0801d44f
 801d1e8:	0801d44f 	.word	0x0801d44f
 801d1ec:	0801d23d 	.word	0x0801d23d
 801d1f0:	0801d44f 	.word	0x0801d44f
 801d1f4:	0801d44f 	.word	0x0801d44f
 801d1f8:	0801d44f 	.word	0x0801d44f
 801d1fc:	0801d44f 	.word	0x0801d44f
 801d200:	0801d44f 	.word	0x0801d44f
 801d204:	0801d44f 	.word	0x0801d44f
 801d208:	0801d44f 	.word	0x0801d44f
 801d20c:	0801d243 	.word	0x0801d243
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d210:	4b94      	ldr	r3, [pc, #592]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	f003 0320 	and.w	r3, r3, #32
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d009      	beq.n	801d230 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d21c:	4b91      	ldr	r3, [pc, #580]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	08db      	lsrs	r3, r3, #3
 801d222:	f003 0303 	and.w	r3, r3, #3
 801d226:	4a90      	ldr	r2, [pc, #576]	@ (801d468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d228:	fa22 f303 	lsr.w	r3, r2, r3
 801d22c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801d22e:	e111      	b.n	801d454 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801d230:	4b8d      	ldr	r3, [pc, #564]	@ (801d468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d232:	61bb      	str	r3, [r7, #24]
      break;
 801d234:	e10e      	b.n	801d454 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801d236:	4b8d      	ldr	r3, [pc, #564]	@ (801d46c <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d238:	61bb      	str	r3, [r7, #24]
      break;
 801d23a:	e10b      	b.n	801d454 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801d23c:	4b8c      	ldr	r3, [pc, #560]	@ (801d470 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801d23e:	61bb      	str	r3, [r7, #24]
      break;
 801d240:	e108      	b.n	801d454 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d242:	4b88      	ldr	r3, [pc, #544]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d246:	f003 0303 	and.w	r3, r3, #3
 801d24a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801d24c:	4b85      	ldr	r3, [pc, #532]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d24e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d250:	091b      	lsrs	r3, r3, #4
 801d252:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d256:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801d258:	4b82      	ldr	r3, [pc, #520]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d25c:	f003 0301 	and.w	r3, r3, #1
 801d260:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801d262:	4b80      	ldr	r3, [pc, #512]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d266:	08db      	lsrs	r3, r3, #3
 801d268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d26c:	68fa      	ldr	r2, [r7, #12]
 801d26e:	fb02 f303 	mul.w	r3, r2, r3
 801d272:	ee07 3a90 	vmov	s15, r3
 801d276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d27a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801d27e:	693b      	ldr	r3, [r7, #16]
 801d280:	2b00      	cmp	r3, #0
 801d282:	f000 80e1 	beq.w	801d448 <HAL_RCC_GetSysClockFreq+0x2b8>
 801d286:	697b      	ldr	r3, [r7, #20]
 801d288:	2b02      	cmp	r3, #2
 801d28a:	f000 8083 	beq.w	801d394 <HAL_RCC_GetSysClockFreq+0x204>
 801d28e:	697b      	ldr	r3, [r7, #20]
 801d290:	2b02      	cmp	r3, #2
 801d292:	f200 80a1 	bhi.w	801d3d8 <HAL_RCC_GetSysClockFreq+0x248>
 801d296:	697b      	ldr	r3, [r7, #20]
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d003      	beq.n	801d2a4 <HAL_RCC_GetSysClockFreq+0x114>
 801d29c:	697b      	ldr	r3, [r7, #20]
 801d29e:	2b01      	cmp	r3, #1
 801d2a0:	d056      	beq.n	801d350 <HAL_RCC_GetSysClockFreq+0x1c0>
 801d2a2:	e099      	b.n	801d3d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d2a4:	4b6f      	ldr	r3, [pc, #444]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	f003 0320 	and.w	r3, r3, #32
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d02d      	beq.n	801d30c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d2b0:	4b6c      	ldr	r3, [pc, #432]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	08db      	lsrs	r3, r3, #3
 801d2b6:	f003 0303 	and.w	r3, r3, #3
 801d2ba:	4a6b      	ldr	r2, [pc, #428]	@ (801d468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d2bc:	fa22 f303 	lsr.w	r3, r2, r3
 801d2c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	ee07 3a90 	vmov	s15, r3
 801d2c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d2cc:	693b      	ldr	r3, [r7, #16]
 801d2ce:	ee07 3a90 	vmov	s15, r3
 801d2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d2da:	4b62      	ldr	r3, [pc, #392]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d2dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d2e2:	ee07 3a90 	vmov	s15, r3
 801d2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d2ea:	ed97 6a02 	vldr	s12, [r7, #8]
 801d2ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801d474 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d2fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d302:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d306:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801d30a:	e087      	b.n	801d41c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d30c:	693b      	ldr	r3, [r7, #16]
 801d30e:	ee07 3a90 	vmov	s15, r3
 801d312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d316:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801d478 <HAL_RCC_GetSysClockFreq+0x2e8>
 801d31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d31e:	4b51      	ldr	r3, [pc, #324]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d326:	ee07 3a90 	vmov	s15, r3
 801d32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d32e:	ed97 6a02 	vldr	s12, [r7, #8]
 801d332:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801d474 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d33e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d346:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d34a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d34e:	e065      	b.n	801d41c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d350:	693b      	ldr	r3, [r7, #16]
 801d352:	ee07 3a90 	vmov	s15, r3
 801d356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d35a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801d47c <HAL_RCC_GetSysClockFreq+0x2ec>
 801d35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d362:	4b40      	ldr	r3, [pc, #256]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d36a:	ee07 3a90 	vmov	s15, r3
 801d36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d372:	ed97 6a02 	vldr	s12, [r7, #8]
 801d376:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801d474 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d38e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d392:	e043      	b.n	801d41c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d394:	693b      	ldr	r3, [r7, #16]
 801d396:	ee07 3a90 	vmov	s15, r3
 801d39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d39e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801d480 <HAL_RCC_GetSysClockFreq+0x2f0>
 801d3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d3a6:	4b2f      	ldr	r3, [pc, #188]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d3a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d3ae:	ee07 3a90 	vmov	s15, r3
 801d3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d3b6:	ed97 6a02 	vldr	s12, [r7, #8]
 801d3ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801d474 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d3c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d3d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d3d6:	e021      	b.n	801d41c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d3d8:	693b      	ldr	r3, [r7, #16]
 801d3da:	ee07 3a90 	vmov	s15, r3
 801d3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d3e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801d47c <HAL_RCC_GetSysClockFreq+0x2ec>
 801d3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d3ea:	4b1e      	ldr	r3, [pc, #120]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d3ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d3f2:	ee07 3a90 	vmov	s15, r3
 801d3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d3fa:	ed97 6a02 	vldr	s12, [r7, #8]
 801d3fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801d474 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d40a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d412:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d41a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801d41c:	4b11      	ldr	r3, [pc, #68]	@ (801d464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d41e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d420:	0a5b      	lsrs	r3, r3, #9
 801d422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d426:	3301      	adds	r3, #1
 801d428:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801d42a:	683b      	ldr	r3, [r7, #0]
 801d42c:	ee07 3a90 	vmov	s15, r3
 801d430:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801d434:	edd7 6a07 	vldr	s13, [r7, #28]
 801d438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d43c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d440:	ee17 3a90 	vmov	r3, s15
 801d444:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801d446:	e005      	b.n	801d454 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801d448:	2300      	movs	r3, #0
 801d44a:	61bb      	str	r3, [r7, #24]
      break;
 801d44c:	e002      	b.n	801d454 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801d44e:	4b07      	ldr	r3, [pc, #28]	@ (801d46c <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d450:	61bb      	str	r3, [r7, #24]
      break;
 801d452:	bf00      	nop
  }

  return sysclockfreq;
 801d454:	69bb      	ldr	r3, [r7, #24]
}
 801d456:	4618      	mov	r0, r3
 801d458:	3724      	adds	r7, #36	@ 0x24
 801d45a:	46bd      	mov	sp, r7
 801d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d460:	4770      	bx	lr
 801d462:	bf00      	nop
 801d464:	58024400 	.word	0x58024400
 801d468:	03d09000 	.word	0x03d09000
 801d46c:	003d0900 	.word	0x003d0900
 801d470:	007a1200 	.word	0x007a1200
 801d474:	46000000 	.word	0x46000000
 801d478:	4c742400 	.word	0x4c742400
 801d47c:	4a742400 	.word	0x4a742400
 801d480:	4af42400 	.word	0x4af42400

0801d484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d484:	b580      	push	{r7, lr}
 801d486:	b082      	sub	sp, #8
 801d488:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801d48a:	f7ff fe81 	bl	801d190 <HAL_RCC_GetSysClockFreq>
 801d48e:	4602      	mov	r2, r0
 801d490:	4b10      	ldr	r3, [pc, #64]	@ (801d4d4 <HAL_RCC_GetHCLKFreq+0x50>)
 801d492:	699b      	ldr	r3, [r3, #24]
 801d494:	0a1b      	lsrs	r3, r3, #8
 801d496:	f003 030f 	and.w	r3, r3, #15
 801d49a:	490f      	ldr	r1, [pc, #60]	@ (801d4d8 <HAL_RCC_GetHCLKFreq+0x54>)
 801d49c:	5ccb      	ldrb	r3, [r1, r3]
 801d49e:	f003 031f 	and.w	r3, r3, #31
 801d4a2:	fa22 f303 	lsr.w	r3, r2, r3
 801d4a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801d4a8:	4b0a      	ldr	r3, [pc, #40]	@ (801d4d4 <HAL_RCC_GetHCLKFreq+0x50>)
 801d4aa:	699b      	ldr	r3, [r3, #24]
 801d4ac:	f003 030f 	and.w	r3, r3, #15
 801d4b0:	4a09      	ldr	r2, [pc, #36]	@ (801d4d8 <HAL_RCC_GetHCLKFreq+0x54>)
 801d4b2:	5cd3      	ldrb	r3, [r2, r3]
 801d4b4:	f003 031f 	and.w	r3, r3, #31
 801d4b8:	687a      	ldr	r2, [r7, #4]
 801d4ba:	fa22 f303 	lsr.w	r3, r2, r3
 801d4be:	4a07      	ldr	r2, [pc, #28]	@ (801d4dc <HAL_RCC_GetHCLKFreq+0x58>)
 801d4c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801d4c2:	4a07      	ldr	r2, [pc, #28]	@ (801d4e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801d4c8:	4b04      	ldr	r3, [pc, #16]	@ (801d4dc <HAL_RCC_GetHCLKFreq+0x58>)
 801d4ca:	681b      	ldr	r3, [r3, #0]
}
 801d4cc:	4618      	mov	r0, r3
 801d4ce:	3708      	adds	r7, #8
 801d4d0:	46bd      	mov	sp, r7
 801d4d2:	bd80      	pop	{r7, pc}
 801d4d4:	58024400 	.word	0x58024400
 801d4d8:	08028c64 	.word	0x08028c64
 801d4dc:	24000004 	.word	0x24000004
 801d4e0:	24000000 	.word	0x24000000

0801d4e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d4e4:	b580      	push	{r7, lr}
 801d4e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801d4e8:	f7ff ffcc 	bl	801d484 <HAL_RCC_GetHCLKFreq>
 801d4ec:	4602      	mov	r2, r0
 801d4ee:	4b06      	ldr	r3, [pc, #24]	@ (801d508 <HAL_RCC_GetPCLK1Freq+0x24>)
 801d4f0:	69db      	ldr	r3, [r3, #28]
 801d4f2:	091b      	lsrs	r3, r3, #4
 801d4f4:	f003 0307 	and.w	r3, r3, #7
 801d4f8:	4904      	ldr	r1, [pc, #16]	@ (801d50c <HAL_RCC_GetPCLK1Freq+0x28>)
 801d4fa:	5ccb      	ldrb	r3, [r1, r3]
 801d4fc:	f003 031f 	and.w	r3, r3, #31
 801d500:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801d504:	4618      	mov	r0, r3
 801d506:	bd80      	pop	{r7, pc}
 801d508:	58024400 	.word	0x58024400
 801d50c:	08028c64 	.word	0x08028c64

0801d510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d510:	b580      	push	{r7, lr}
 801d512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801d514:	f7ff ffb6 	bl	801d484 <HAL_RCC_GetHCLKFreq>
 801d518:	4602      	mov	r2, r0
 801d51a:	4b06      	ldr	r3, [pc, #24]	@ (801d534 <HAL_RCC_GetPCLK2Freq+0x24>)
 801d51c:	69db      	ldr	r3, [r3, #28]
 801d51e:	0a1b      	lsrs	r3, r3, #8
 801d520:	f003 0307 	and.w	r3, r3, #7
 801d524:	4904      	ldr	r1, [pc, #16]	@ (801d538 <HAL_RCC_GetPCLK2Freq+0x28>)
 801d526:	5ccb      	ldrb	r3, [r1, r3]
 801d528:	f003 031f 	and.w	r3, r3, #31
 801d52c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801d530:	4618      	mov	r0, r3
 801d532:	bd80      	pop	{r7, pc}
 801d534:	58024400 	.word	0x58024400
 801d538:	08028c64 	.word	0x08028c64

0801d53c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d53c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d540:	b0ca      	sub	sp, #296	@ 0x128
 801d542:	af00      	add	r7, sp, #0
 801d544:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d548:	2300      	movs	r3, #0
 801d54a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d54e:	2300      	movs	r3, #0
 801d550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d55c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801d560:	2500      	movs	r5, #0
 801d562:	ea54 0305 	orrs.w	r3, r4, r5
 801d566:	d049      	beq.n	801d5fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801d568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d56c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d56e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d572:	d02f      	beq.n	801d5d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801d574:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d578:	d828      	bhi.n	801d5cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d57a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d57e:	d01a      	beq.n	801d5b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801d580:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d584:	d822      	bhi.n	801d5cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d586:	2b00      	cmp	r3, #0
 801d588:	d003      	beq.n	801d592 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801d58a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d58e:	d007      	beq.n	801d5a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801d590:	e01c      	b.n	801d5cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d592:	4bb8      	ldr	r3, [pc, #736]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d596:	4ab7      	ldr	r2, [pc, #732]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d59c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d59e:	e01a      	b.n	801d5d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5a4:	3308      	adds	r3, #8
 801d5a6:	2102      	movs	r1, #2
 801d5a8:	4618      	mov	r0, r3
 801d5aa:	f001 fc8f 	bl	801eecc <RCCEx_PLL2_Config>
 801d5ae:	4603      	mov	r3, r0
 801d5b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d5b4:	e00f      	b.n	801d5d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5ba:	3328      	adds	r3, #40	@ 0x28
 801d5bc:	2102      	movs	r1, #2
 801d5be:	4618      	mov	r0, r3
 801d5c0:	f001 fd36 	bl	801f030 <RCCEx_PLL3_Config>
 801d5c4:	4603      	mov	r3, r0
 801d5c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d5ca:	e004      	b.n	801d5d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d5cc:	2301      	movs	r3, #1
 801d5ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d5d2:	e000      	b.n	801d5d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801d5d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d5d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d10a      	bne.n	801d5f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801d5de:	4ba5      	ldr	r3, [pc, #660]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d5e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d5e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801d5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d5ec:	4aa1      	ldr	r2, [pc, #644]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d5ee:	430b      	orrs	r3, r1
 801d5f0:	6513      	str	r3, [r2, #80]	@ 0x50
 801d5f2:	e003      	b.n	801d5fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d5f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d5f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801d5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d600:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d604:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801d608:	f04f 0900 	mov.w	r9, #0
 801d60c:	ea58 0309 	orrs.w	r3, r8, r9
 801d610:	d047      	beq.n	801d6a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801d612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d618:	2b04      	cmp	r3, #4
 801d61a:	d82a      	bhi.n	801d672 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801d61c:	a201      	add	r2, pc, #4	@ (adr r2, 801d624 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801d61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d622:	bf00      	nop
 801d624:	0801d639 	.word	0x0801d639
 801d628:	0801d647 	.word	0x0801d647
 801d62c:	0801d65d 	.word	0x0801d65d
 801d630:	0801d67b 	.word	0x0801d67b
 801d634:	0801d67b 	.word	0x0801d67b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d638:	4b8e      	ldr	r3, [pc, #568]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d63c:	4a8d      	ldr	r2, [pc, #564]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d63e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d644:	e01a      	b.n	801d67c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d64a:	3308      	adds	r3, #8
 801d64c:	2100      	movs	r1, #0
 801d64e:	4618      	mov	r0, r3
 801d650:	f001 fc3c 	bl	801eecc <RCCEx_PLL2_Config>
 801d654:	4603      	mov	r3, r0
 801d656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d65a:	e00f      	b.n	801d67c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d660:	3328      	adds	r3, #40	@ 0x28
 801d662:	2100      	movs	r1, #0
 801d664:	4618      	mov	r0, r3
 801d666:	f001 fce3 	bl	801f030 <RCCEx_PLL3_Config>
 801d66a:	4603      	mov	r3, r0
 801d66c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d670:	e004      	b.n	801d67c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d672:	2301      	movs	r3, #1
 801d674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d678:	e000      	b.n	801d67c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801d67a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d67c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d680:	2b00      	cmp	r3, #0
 801d682:	d10a      	bne.n	801d69a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d684:	4b7b      	ldr	r3, [pc, #492]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d688:	f023 0107 	bic.w	r1, r3, #7
 801d68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d692:	4a78      	ldr	r2, [pc, #480]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d694:	430b      	orrs	r3, r1
 801d696:	6513      	str	r3, [r2, #80]	@ 0x50
 801d698:	e003      	b.n	801d6a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d69a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d69e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801d6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801d6ae:	f04f 0b00 	mov.w	fp, #0
 801d6b2:	ea5a 030b 	orrs.w	r3, sl, fp
 801d6b6:	d04c      	beq.n	801d752 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801d6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d6be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d6c2:	d030      	beq.n	801d726 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801d6c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d6c8:	d829      	bhi.n	801d71e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d6ca:	2bc0      	cmp	r3, #192	@ 0xc0
 801d6cc:	d02d      	beq.n	801d72a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801d6ce:	2bc0      	cmp	r3, #192	@ 0xc0
 801d6d0:	d825      	bhi.n	801d71e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d6d2:	2b80      	cmp	r3, #128	@ 0x80
 801d6d4:	d018      	beq.n	801d708 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801d6d6:	2b80      	cmp	r3, #128	@ 0x80
 801d6d8:	d821      	bhi.n	801d71e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	d002      	beq.n	801d6e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801d6de:	2b40      	cmp	r3, #64	@ 0x40
 801d6e0:	d007      	beq.n	801d6f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801d6e2:	e01c      	b.n	801d71e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d6e4:	4b63      	ldr	r3, [pc, #396]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6e8:	4a62      	ldr	r2, [pc, #392]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d6ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d6ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d6f0:	e01c      	b.n	801d72c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6f6:	3308      	adds	r3, #8
 801d6f8:	2100      	movs	r1, #0
 801d6fa:	4618      	mov	r0, r3
 801d6fc:	f001 fbe6 	bl	801eecc <RCCEx_PLL2_Config>
 801d700:	4603      	mov	r3, r0
 801d702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d706:	e011      	b.n	801d72c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d70c:	3328      	adds	r3, #40	@ 0x28
 801d70e:	2100      	movs	r1, #0
 801d710:	4618      	mov	r0, r3
 801d712:	f001 fc8d 	bl	801f030 <RCCEx_PLL3_Config>
 801d716:	4603      	mov	r3, r0
 801d718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d71c:	e006      	b.n	801d72c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d71e:	2301      	movs	r3, #1
 801d720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d724:	e002      	b.n	801d72c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d726:	bf00      	nop
 801d728:	e000      	b.n	801d72c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d72a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d72c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d730:	2b00      	cmp	r3, #0
 801d732:	d10a      	bne.n	801d74a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801d734:	4b4f      	ldr	r3, [pc, #316]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d738:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801d73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d742:	4a4c      	ldr	r2, [pc, #304]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d744:	430b      	orrs	r3, r1
 801d746:	6513      	str	r3, [r2, #80]	@ 0x50
 801d748:	e003      	b.n	801d752 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d74a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d74e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801d752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d75a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801d75e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801d762:	2300      	movs	r3, #0
 801d764:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801d768:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801d76c:	460b      	mov	r3, r1
 801d76e:	4313      	orrs	r3, r2
 801d770:	d053      	beq.n	801d81a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801d772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d776:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d77a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d77e:	d035      	beq.n	801d7ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801d780:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d784:	d82e      	bhi.n	801d7e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d786:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d78a:	d031      	beq.n	801d7f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801d78c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d790:	d828      	bhi.n	801d7e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d796:	d01a      	beq.n	801d7ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 801d798:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d79c:	d822      	bhi.n	801d7e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d003      	beq.n	801d7aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801d7a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d7a6:	d007      	beq.n	801d7b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801d7a8:	e01c      	b.n	801d7e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d7aa:	4b32      	ldr	r3, [pc, #200]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d7ae:	4a31      	ldr	r2, [pc, #196]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d7b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d7b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d7b6:	e01c      	b.n	801d7f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7bc:	3308      	adds	r3, #8
 801d7be:	2100      	movs	r1, #0
 801d7c0:	4618      	mov	r0, r3
 801d7c2:	f001 fb83 	bl	801eecc <RCCEx_PLL2_Config>
 801d7c6:	4603      	mov	r3, r0
 801d7c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d7cc:	e011      	b.n	801d7f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7d2:	3328      	adds	r3, #40	@ 0x28
 801d7d4:	2100      	movs	r1, #0
 801d7d6:	4618      	mov	r0, r3
 801d7d8:	f001 fc2a 	bl	801f030 <RCCEx_PLL3_Config>
 801d7dc:	4603      	mov	r3, r0
 801d7de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d7e2:	e006      	b.n	801d7f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d7e4:	2301      	movs	r3, #1
 801d7e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d7ea:	e002      	b.n	801d7f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d7ec:	bf00      	nop
 801d7ee:	e000      	b.n	801d7f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d7f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d7f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d10b      	bne.n	801d812 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801d7fa:	4b1e      	ldr	r3, [pc, #120]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d7fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d7fe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801d802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d806:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d80a:	4a1a      	ldr	r2, [pc, #104]	@ (801d874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d80c:	430b      	orrs	r3, r1
 801d80e:	6593      	str	r3, [r2, #88]	@ 0x58
 801d810:	e003      	b.n	801d81a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801d81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d822:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801d826:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801d82a:	2300      	movs	r3, #0
 801d82c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801d830:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801d834:	460b      	mov	r3, r1
 801d836:	4313      	orrs	r3, r2
 801d838:	d056      	beq.n	801d8e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801d83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d83e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d842:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d846:	d038      	beq.n	801d8ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801d848:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d84c:	d831      	bhi.n	801d8b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d84e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d852:	d034      	beq.n	801d8be <HAL_RCCEx_PeriphCLKConfig+0x382>
 801d854:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d858:	d82b      	bhi.n	801d8b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d85a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d85e:	d01d      	beq.n	801d89c <HAL_RCCEx_PeriphCLKConfig+0x360>
 801d860:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d864:	d825      	bhi.n	801d8b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d866:	2b00      	cmp	r3, #0
 801d868:	d006      	beq.n	801d878 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801d86a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d86e:	d00a      	beq.n	801d886 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801d870:	e01f      	b.n	801d8b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d872:	bf00      	nop
 801d874:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d878:	4ba2      	ldr	r3, [pc, #648]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d87c:	4aa1      	ldr	r2, [pc, #644]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d87e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d884:	e01c      	b.n	801d8c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d88a:	3308      	adds	r3, #8
 801d88c:	2100      	movs	r1, #0
 801d88e:	4618      	mov	r0, r3
 801d890:	f001 fb1c 	bl	801eecc <RCCEx_PLL2_Config>
 801d894:	4603      	mov	r3, r0
 801d896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d89a:	e011      	b.n	801d8c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8a0:	3328      	adds	r3, #40	@ 0x28
 801d8a2:	2100      	movs	r1, #0
 801d8a4:	4618      	mov	r0, r3
 801d8a6:	f001 fbc3 	bl	801f030 <RCCEx_PLL3_Config>
 801d8aa:	4603      	mov	r3, r0
 801d8ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d8b0:	e006      	b.n	801d8c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d8b2:	2301      	movs	r3, #1
 801d8b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d8b8:	e002      	b.n	801d8c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d8ba:	bf00      	nop
 801d8bc:	e000      	b.n	801d8c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d8be:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d8c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d10b      	bne.n	801d8e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801d8c8:	4b8e      	ldr	r3, [pc, #568]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d8ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d8cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801d8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d8d8:	4a8a      	ldr	r2, [pc, #552]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d8da:	430b      	orrs	r3, r1
 801d8dc:	6593      	str	r3, [r2, #88]	@ 0x58
 801d8de:	e003      	b.n	801d8e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d8e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801d8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801d8f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801d8f8:	2300      	movs	r3, #0
 801d8fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801d8fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801d902:	460b      	mov	r3, r1
 801d904:	4313      	orrs	r3, r2
 801d906:	d03a      	beq.n	801d97e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801d908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d90c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d90e:	2b30      	cmp	r3, #48	@ 0x30
 801d910:	d01f      	beq.n	801d952 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801d912:	2b30      	cmp	r3, #48	@ 0x30
 801d914:	d819      	bhi.n	801d94a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d916:	2b20      	cmp	r3, #32
 801d918:	d00c      	beq.n	801d934 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801d91a:	2b20      	cmp	r3, #32
 801d91c:	d815      	bhi.n	801d94a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d019      	beq.n	801d956 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801d922:	2b10      	cmp	r3, #16
 801d924:	d111      	bne.n	801d94a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d926:	4b77      	ldr	r3, [pc, #476]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d92a:	4a76      	ldr	r2, [pc, #472]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d92c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d930:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d932:	e011      	b.n	801d958 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d938:	3308      	adds	r3, #8
 801d93a:	2102      	movs	r1, #2
 801d93c:	4618      	mov	r0, r3
 801d93e:	f001 fac5 	bl	801eecc <RCCEx_PLL2_Config>
 801d942:	4603      	mov	r3, r0
 801d944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d948:	e006      	b.n	801d958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d94a:	2301      	movs	r3, #1
 801d94c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d950:	e002      	b.n	801d958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d952:	bf00      	nop
 801d954:	e000      	b.n	801d958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d956:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d10a      	bne.n	801d976 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801d960:	4b68      	ldr	r3, [pc, #416]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d964:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801d968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d96c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d96e:	4a65      	ldr	r2, [pc, #404]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d970:	430b      	orrs	r3, r1
 801d972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d974:	e003      	b.n	801d97e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d97a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801d97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d982:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d986:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801d98a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801d98e:	2300      	movs	r3, #0
 801d990:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801d994:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801d998:	460b      	mov	r3, r1
 801d99a:	4313      	orrs	r3, r2
 801d99c:	d051      	beq.n	801da42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801d99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d9a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d9a8:	d035      	beq.n	801da16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801d9aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d9ae:	d82e      	bhi.n	801da0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d9b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d9b4:	d031      	beq.n	801da1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801d9b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d9ba:	d828      	bhi.n	801da0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d9bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d9c0:	d01a      	beq.n	801d9f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801d9c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d9c6:	d822      	bhi.n	801da0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	d003      	beq.n	801d9d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801d9cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d9d0:	d007      	beq.n	801d9e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801d9d2:	e01c      	b.n	801da0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d9d4:	4b4b      	ldr	r3, [pc, #300]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9d8:	4a4a      	ldr	r2, [pc, #296]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d9da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d9de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d9e0:	e01c      	b.n	801da1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9e6:	3308      	adds	r3, #8
 801d9e8:	2100      	movs	r1, #0
 801d9ea:	4618      	mov	r0, r3
 801d9ec:	f001 fa6e 	bl	801eecc <RCCEx_PLL2_Config>
 801d9f0:	4603      	mov	r3, r0
 801d9f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d9f6:	e011      	b.n	801da1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9fc:	3328      	adds	r3, #40	@ 0x28
 801d9fe:	2100      	movs	r1, #0
 801da00:	4618      	mov	r0, r3
 801da02:	f001 fb15 	bl	801f030 <RCCEx_PLL3_Config>
 801da06:	4603      	mov	r3, r0
 801da08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801da0c:	e006      	b.n	801da1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801da0e:	2301      	movs	r3, #1
 801da10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801da14:	e002      	b.n	801da1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801da16:	bf00      	nop
 801da18:	e000      	b.n	801da1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801da1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801da1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da20:	2b00      	cmp	r3, #0
 801da22:	d10a      	bne.n	801da3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801da24:	4b37      	ldr	r3, [pc, #220]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801da26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801da28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801da2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801da32:	4a34      	ldr	r2, [pc, #208]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801da34:	430b      	orrs	r3, r1
 801da36:	6513      	str	r3, [r2, #80]	@ 0x50
 801da38:	e003      	b.n	801da42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801da3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801da42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801da4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801da52:	2300      	movs	r3, #0
 801da54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801da58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801da5c:	460b      	mov	r3, r1
 801da5e:	4313      	orrs	r3, r2
 801da60:	d056      	beq.n	801db10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801da62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801da68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801da6c:	d033      	beq.n	801dad6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801da6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801da72:	d82c      	bhi.n	801dace <HAL_RCCEx_PeriphCLKConfig+0x592>
 801da74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801da78:	d02f      	beq.n	801dada <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801da7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801da7e:	d826      	bhi.n	801dace <HAL_RCCEx_PeriphCLKConfig+0x592>
 801da80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801da84:	d02b      	beq.n	801dade <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801da86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801da8a:	d820      	bhi.n	801dace <HAL_RCCEx_PeriphCLKConfig+0x592>
 801da8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801da90:	d012      	beq.n	801dab8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801da92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801da96:	d81a      	bhi.n	801dace <HAL_RCCEx_PeriphCLKConfig+0x592>
 801da98:	2b00      	cmp	r3, #0
 801da9a:	d022      	beq.n	801dae2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801da9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801daa0:	d115      	bne.n	801dace <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801daa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daa6:	3308      	adds	r3, #8
 801daa8:	2101      	movs	r1, #1
 801daaa:	4618      	mov	r0, r3
 801daac:	f001 fa0e 	bl	801eecc <RCCEx_PLL2_Config>
 801dab0:	4603      	mov	r3, r0
 801dab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801dab6:	e015      	b.n	801dae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dabc:	3328      	adds	r3, #40	@ 0x28
 801dabe:	2101      	movs	r1, #1
 801dac0:	4618      	mov	r0, r3
 801dac2:	f001 fab5 	bl	801f030 <RCCEx_PLL3_Config>
 801dac6:	4603      	mov	r3, r0
 801dac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801dacc:	e00a      	b.n	801dae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dace:	2301      	movs	r3, #1
 801dad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dad4:	e006      	b.n	801dae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801dad6:	bf00      	nop
 801dad8:	e004      	b.n	801dae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801dada:	bf00      	nop
 801dadc:	e002      	b.n	801dae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801dade:	bf00      	nop
 801dae0:	e000      	b.n	801dae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801dae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d10d      	bne.n	801db08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801daec:	4b05      	ldr	r3, [pc, #20]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801daee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801daf0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801daf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801dafa:	4a02      	ldr	r2, [pc, #8]	@ (801db04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dafc:	430b      	orrs	r3, r1
 801dafe:	6513      	str	r3, [r2, #80]	@ 0x50
 801db00:	e006      	b.n	801db10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801db02:	bf00      	nop
 801db04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801db08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801db10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801db1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801db20:	2300      	movs	r3, #0
 801db22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801db26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801db2a:	460b      	mov	r3, r1
 801db2c:	4313      	orrs	r3, r2
 801db2e:	d055      	beq.n	801dbdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801db30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801db38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801db3c:	d033      	beq.n	801dba6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801db3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801db42:	d82c      	bhi.n	801db9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801db44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801db48:	d02f      	beq.n	801dbaa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801db4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801db4e:	d826      	bhi.n	801db9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801db50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801db54:	d02b      	beq.n	801dbae <HAL_RCCEx_PeriphCLKConfig+0x672>
 801db56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801db5a:	d820      	bhi.n	801db9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801db5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801db60:	d012      	beq.n	801db88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801db62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801db66:	d81a      	bhi.n	801db9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801db68:	2b00      	cmp	r3, #0
 801db6a:	d022      	beq.n	801dbb2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801db6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801db70:	d115      	bne.n	801db9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801db72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db76:	3308      	adds	r3, #8
 801db78:	2101      	movs	r1, #1
 801db7a:	4618      	mov	r0, r3
 801db7c:	f001 f9a6 	bl	801eecc <RCCEx_PLL2_Config>
 801db80:	4603      	mov	r3, r0
 801db82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801db86:	e015      	b.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801db88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db8c:	3328      	adds	r3, #40	@ 0x28
 801db8e:	2101      	movs	r1, #1
 801db90:	4618      	mov	r0, r3
 801db92:	f001 fa4d 	bl	801f030 <RCCEx_PLL3_Config>
 801db96:	4603      	mov	r3, r0
 801db98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801db9c:	e00a      	b.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801db9e:	2301      	movs	r3, #1
 801dba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dba4:	e006      	b.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801dba6:	bf00      	nop
 801dba8:	e004      	b.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801dbaa:	bf00      	nop
 801dbac:	e002      	b.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801dbae:	bf00      	nop
 801dbb0:	e000      	b.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801dbb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dbb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	d10b      	bne.n	801dbd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801dbbc:	4ba3      	ldr	r3, [pc, #652]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dbbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dbc0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801dbc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801dbcc:	4a9f      	ldr	r2, [pc, #636]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dbce:	430b      	orrs	r3, r1
 801dbd0:	6593      	str	r3, [r2, #88]	@ 0x58
 801dbd2:	e003      	b.n	801dbdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dbd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801dbdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbe4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801dbe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801dbec:	2300      	movs	r3, #0
 801dbee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801dbf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801dbf6:	460b      	mov	r3, r1
 801dbf8:	4313      	orrs	r3, r2
 801dbfa:	d037      	beq.n	801dc6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801dbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dc02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dc06:	d00e      	beq.n	801dc26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801dc08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dc0c:	d816      	bhi.n	801dc3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d018      	beq.n	801dc44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801dc12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801dc16:	d111      	bne.n	801dc3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dc18:	4b8c      	ldr	r3, [pc, #560]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dc1c:	4a8b      	ldr	r2, [pc, #556]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dc22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801dc24:	e00f      	b.n	801dc46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc2a:	3308      	adds	r3, #8
 801dc2c:	2101      	movs	r1, #1
 801dc2e:	4618      	mov	r0, r3
 801dc30:	f001 f94c 	bl	801eecc <RCCEx_PLL2_Config>
 801dc34:	4603      	mov	r3, r0
 801dc36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801dc3a:	e004      	b.n	801dc46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dc3c:	2301      	movs	r3, #1
 801dc3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dc42:	e000      	b.n	801dc46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801dc44:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dc46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d10a      	bne.n	801dc64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801dc4e:	4b7f      	ldr	r3, [pc, #508]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dc52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801dc56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dc5c:	4a7b      	ldr	r2, [pc, #492]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dc5e:	430b      	orrs	r3, r1
 801dc60:	6513      	str	r3, [r2, #80]	@ 0x50
 801dc62:	e003      	b.n	801dc6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dc64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801dc6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801dc78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801dc7c:	2300      	movs	r3, #0
 801dc7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801dc82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801dc86:	460b      	mov	r3, r1
 801dc88:	4313      	orrs	r3, r2
 801dc8a:	d039      	beq.n	801dd00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801dc8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801dc92:	2b03      	cmp	r3, #3
 801dc94:	d81c      	bhi.n	801dcd0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801dc96:	a201      	add	r2, pc, #4	@ (adr r2, 801dc9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801dc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc9c:	0801dcd9 	.word	0x0801dcd9
 801dca0:	0801dcad 	.word	0x0801dcad
 801dca4:	0801dcbb 	.word	0x0801dcbb
 801dca8:	0801dcd9 	.word	0x0801dcd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dcac:	4b67      	ldr	r3, [pc, #412]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dcae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dcb0:	4a66      	ldr	r2, [pc, #408]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dcb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dcb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801dcb8:	e00f      	b.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801dcba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcbe:	3308      	adds	r3, #8
 801dcc0:	2102      	movs	r1, #2
 801dcc2:	4618      	mov	r0, r3
 801dcc4:	f001 f902 	bl	801eecc <RCCEx_PLL2_Config>
 801dcc8:	4603      	mov	r3, r0
 801dcca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801dcce:	e004      	b.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801dcd0:	2301      	movs	r3, #1
 801dcd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dcd6:	e000      	b.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801dcd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dcda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d10a      	bne.n	801dcf8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801dce2:	4b5a      	ldr	r3, [pc, #360]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dce6:	f023 0103 	bic.w	r1, r3, #3
 801dcea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801dcf0:	4a56      	ldr	r2, [pc, #344]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dcf2:	430b      	orrs	r3, r1
 801dcf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801dcf6:	e003      	b.n	801dd00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dcf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dcfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801dd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801dd0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801dd10:	2300      	movs	r3, #0
 801dd12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801dd16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801dd1a:	460b      	mov	r3, r1
 801dd1c:	4313      	orrs	r3, r2
 801dd1e:	f000 809f 	beq.w	801de60 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801dd22:	4b4b      	ldr	r3, [pc, #300]	@ (801de50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801dd24:	681b      	ldr	r3, [r3, #0]
 801dd26:	4a4a      	ldr	r2, [pc, #296]	@ (801de50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801dd28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801dd2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801dd2e:	f7fd fc8b 	bl	801b648 <HAL_GetTick>
 801dd32:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801dd36:	e00b      	b.n	801dd50 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801dd38:	f7fd fc86 	bl	801b648 <HAL_GetTick>
 801dd3c:	4602      	mov	r2, r0
 801dd3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801dd42:	1ad3      	subs	r3, r2, r3
 801dd44:	2b64      	cmp	r3, #100	@ 0x64
 801dd46:	d903      	bls.n	801dd50 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801dd48:	2303      	movs	r3, #3
 801dd4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dd4e:	e005      	b.n	801dd5c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801dd50:	4b3f      	ldr	r3, [pc, #252]	@ (801de50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	d0ed      	beq.n	801dd38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801dd5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	d179      	bne.n	801de58 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801dd64:	4b39      	ldr	r3, [pc, #228]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801dd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dd70:	4053      	eors	r3, r2
 801dd72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d015      	beq.n	801dda6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801dd7a:	4b34      	ldr	r3, [pc, #208]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dd7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801dd82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801dd86:	4b31      	ldr	r3, [pc, #196]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dd8a:	4a30      	ldr	r2, [pc, #192]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801dd90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801dd92:	4b2e      	ldr	r3, [pc, #184]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dd96:	4a2d      	ldr	r2, [pc, #180]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801dd9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801dd9e:	4a2b      	ldr	r2, [pc, #172]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dda0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801dda4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801dda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ddae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ddb2:	d118      	bne.n	801dde6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ddb4:	f7fd fc48 	bl	801b648 <HAL_GetTick>
 801ddb8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ddbc:	e00d      	b.n	801ddda <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ddbe:	f7fd fc43 	bl	801b648 <HAL_GetTick>
 801ddc2:	4602      	mov	r2, r0
 801ddc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801ddc8:	1ad2      	subs	r2, r2, r3
 801ddca:	f241 3388 	movw	r3, #5000	@ 0x1388
 801ddce:	429a      	cmp	r2, r3
 801ddd0:	d903      	bls.n	801ddda <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801ddd2:	2303      	movs	r3, #3
 801ddd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801ddd8:	e005      	b.n	801dde6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ddda:	4b1c      	ldr	r3, [pc, #112]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ddde:	f003 0302 	and.w	r3, r3, #2
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	d0eb      	beq.n	801ddbe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801dde6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d129      	bne.n	801de42 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801ddee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ddf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801ddfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801ddfe:	d10e      	bne.n	801de1e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801de00:	4b12      	ldr	r3, [pc, #72]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801de02:	691b      	ldr	r3, [r3, #16]
 801de04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801de08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801de10:	091a      	lsrs	r2, r3, #4
 801de12:	4b10      	ldr	r3, [pc, #64]	@ (801de54 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801de14:	4013      	ands	r3, r2
 801de16:	4a0d      	ldr	r2, [pc, #52]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801de18:	430b      	orrs	r3, r1
 801de1a:	6113      	str	r3, [r2, #16]
 801de1c:	e005      	b.n	801de2a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801de1e:	4b0b      	ldr	r3, [pc, #44]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801de20:	691b      	ldr	r3, [r3, #16]
 801de22:	4a0a      	ldr	r2, [pc, #40]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801de24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801de28:	6113      	str	r3, [r2, #16]
 801de2a:	4b08      	ldr	r3, [pc, #32]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801de2c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801de2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801de36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801de3a:	4a04      	ldr	r2, [pc, #16]	@ (801de4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801de3c:	430b      	orrs	r3, r1
 801de3e:	6713      	str	r3, [r2, #112]	@ 0x70
 801de40:	e00e      	b.n	801de60 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801de42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801de4a:	e009      	b.n	801de60 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801de4c:	58024400 	.word	0x58024400
 801de50:	58024800 	.word	0x58024800
 801de54:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801de58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801de60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de68:	f002 0301 	and.w	r3, r2, #1
 801de6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801de70:	2300      	movs	r3, #0
 801de72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801de76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801de7a:	460b      	mov	r3, r1
 801de7c:	4313      	orrs	r3, r2
 801de7e:	f000 8089 	beq.w	801df94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801de82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801de88:	2b28      	cmp	r3, #40	@ 0x28
 801de8a:	d86b      	bhi.n	801df64 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801de8c:	a201      	add	r2, pc, #4	@ (adr r2, 801de94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801de8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801de92:	bf00      	nop
 801de94:	0801df6d 	.word	0x0801df6d
 801de98:	0801df65 	.word	0x0801df65
 801de9c:	0801df65 	.word	0x0801df65
 801dea0:	0801df65 	.word	0x0801df65
 801dea4:	0801df65 	.word	0x0801df65
 801dea8:	0801df65 	.word	0x0801df65
 801deac:	0801df65 	.word	0x0801df65
 801deb0:	0801df65 	.word	0x0801df65
 801deb4:	0801df39 	.word	0x0801df39
 801deb8:	0801df65 	.word	0x0801df65
 801debc:	0801df65 	.word	0x0801df65
 801dec0:	0801df65 	.word	0x0801df65
 801dec4:	0801df65 	.word	0x0801df65
 801dec8:	0801df65 	.word	0x0801df65
 801decc:	0801df65 	.word	0x0801df65
 801ded0:	0801df65 	.word	0x0801df65
 801ded4:	0801df4f 	.word	0x0801df4f
 801ded8:	0801df65 	.word	0x0801df65
 801dedc:	0801df65 	.word	0x0801df65
 801dee0:	0801df65 	.word	0x0801df65
 801dee4:	0801df65 	.word	0x0801df65
 801dee8:	0801df65 	.word	0x0801df65
 801deec:	0801df65 	.word	0x0801df65
 801def0:	0801df65 	.word	0x0801df65
 801def4:	0801df6d 	.word	0x0801df6d
 801def8:	0801df65 	.word	0x0801df65
 801defc:	0801df65 	.word	0x0801df65
 801df00:	0801df65 	.word	0x0801df65
 801df04:	0801df65 	.word	0x0801df65
 801df08:	0801df65 	.word	0x0801df65
 801df0c:	0801df65 	.word	0x0801df65
 801df10:	0801df65 	.word	0x0801df65
 801df14:	0801df6d 	.word	0x0801df6d
 801df18:	0801df65 	.word	0x0801df65
 801df1c:	0801df65 	.word	0x0801df65
 801df20:	0801df65 	.word	0x0801df65
 801df24:	0801df65 	.word	0x0801df65
 801df28:	0801df65 	.word	0x0801df65
 801df2c:	0801df65 	.word	0x0801df65
 801df30:	0801df65 	.word	0x0801df65
 801df34:	0801df6d 	.word	0x0801df6d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801df38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df3c:	3308      	adds	r3, #8
 801df3e:	2101      	movs	r1, #1
 801df40:	4618      	mov	r0, r3
 801df42:	f000 ffc3 	bl	801eecc <RCCEx_PLL2_Config>
 801df46:	4603      	mov	r3, r0
 801df48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801df4c:	e00f      	b.n	801df6e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801df4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df52:	3328      	adds	r3, #40	@ 0x28
 801df54:	2101      	movs	r1, #1
 801df56:	4618      	mov	r0, r3
 801df58:	f001 f86a 	bl	801f030 <RCCEx_PLL3_Config>
 801df5c:	4603      	mov	r3, r0
 801df5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801df62:	e004      	b.n	801df6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801df64:	2301      	movs	r3, #1
 801df66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801df6a:	e000      	b.n	801df6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801df6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801df6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df72:	2b00      	cmp	r3, #0
 801df74:	d10a      	bne.n	801df8c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801df76:	4bbf      	ldr	r3, [pc, #764]	@ (801e274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801df78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801df7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801df7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801df84:	4abb      	ldr	r2, [pc, #748]	@ (801e274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801df86:	430b      	orrs	r3, r1
 801df88:	6553      	str	r3, [r2, #84]	@ 0x54
 801df8a:	e003      	b.n	801df94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801df8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801df94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df9c:	f002 0302 	and.w	r3, r2, #2
 801dfa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801dfa4:	2300      	movs	r3, #0
 801dfa6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801dfaa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801dfae:	460b      	mov	r3, r1
 801dfb0:	4313      	orrs	r3, r2
 801dfb2:	d041      	beq.n	801e038 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801dfb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801dfba:	2b05      	cmp	r3, #5
 801dfbc:	d824      	bhi.n	801e008 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801dfbe:	a201      	add	r2, pc, #4	@ (adr r2, 801dfc4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801dfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dfc4:	0801e011 	.word	0x0801e011
 801dfc8:	0801dfdd 	.word	0x0801dfdd
 801dfcc:	0801dff3 	.word	0x0801dff3
 801dfd0:	0801e011 	.word	0x0801e011
 801dfd4:	0801e011 	.word	0x0801e011
 801dfd8:	0801e011 	.word	0x0801e011
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dfdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfe0:	3308      	adds	r3, #8
 801dfe2:	2101      	movs	r1, #1
 801dfe4:	4618      	mov	r0, r3
 801dfe6:	f000 ff71 	bl	801eecc <RCCEx_PLL2_Config>
 801dfea:	4603      	mov	r3, r0
 801dfec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801dff0:	e00f      	b.n	801e012 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dff6:	3328      	adds	r3, #40	@ 0x28
 801dff8:	2101      	movs	r1, #1
 801dffa:	4618      	mov	r0, r3
 801dffc:	f001 f818 	bl	801f030 <RCCEx_PLL3_Config>
 801e000:	4603      	mov	r3, r0
 801e002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801e006:	e004      	b.n	801e012 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e008:	2301      	movs	r3, #1
 801e00a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e00e:	e000      	b.n	801e012 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801e010:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e016:	2b00      	cmp	r3, #0
 801e018:	d10a      	bne.n	801e030 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801e01a:	4b96      	ldr	r3, [pc, #600]	@ (801e274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e01e:	f023 0107 	bic.w	r1, r3, #7
 801e022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e026:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e028:	4a92      	ldr	r2, [pc, #584]	@ (801e274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e02a:	430b      	orrs	r3, r1
 801e02c:	6553      	str	r3, [r2, #84]	@ 0x54
 801e02e:	e003      	b.n	801e038 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e034:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801e038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e040:	f002 0304 	and.w	r3, r2, #4
 801e044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801e048:	2300      	movs	r3, #0
 801e04a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801e04e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801e052:	460b      	mov	r3, r1
 801e054:	4313      	orrs	r3, r2
 801e056:	d044      	beq.n	801e0e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801e058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e05c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e060:	2b05      	cmp	r3, #5
 801e062:	d825      	bhi.n	801e0b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801e064:	a201      	add	r2, pc, #4	@ (adr r2, 801e06c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801e066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e06a:	bf00      	nop
 801e06c:	0801e0b9 	.word	0x0801e0b9
 801e070:	0801e085 	.word	0x0801e085
 801e074:	0801e09b 	.word	0x0801e09b
 801e078:	0801e0b9 	.word	0x0801e0b9
 801e07c:	0801e0b9 	.word	0x0801e0b9
 801e080:	0801e0b9 	.word	0x0801e0b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e088:	3308      	adds	r3, #8
 801e08a:	2101      	movs	r1, #1
 801e08c:	4618      	mov	r0, r3
 801e08e:	f000 ff1d 	bl	801eecc <RCCEx_PLL2_Config>
 801e092:	4603      	mov	r3, r0
 801e094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801e098:	e00f      	b.n	801e0ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e09e:	3328      	adds	r3, #40	@ 0x28
 801e0a0:	2101      	movs	r1, #1
 801e0a2:	4618      	mov	r0, r3
 801e0a4:	f000 ffc4 	bl	801f030 <RCCEx_PLL3_Config>
 801e0a8:	4603      	mov	r3, r0
 801e0aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801e0ae:	e004      	b.n	801e0ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e0b0:	2301      	movs	r3, #1
 801e0b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e0b6:	e000      	b.n	801e0ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801e0b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e0ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d10b      	bne.n	801e0da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801e0c2:	4b6c      	ldr	r3, [pc, #432]	@ (801e274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e0c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e0c6:	f023 0107 	bic.w	r1, r3, #7
 801e0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e0d2:	4a68      	ldr	r2, [pc, #416]	@ (801e274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e0d4:	430b      	orrs	r3, r1
 801e0d6:	6593      	str	r3, [r2, #88]	@ 0x58
 801e0d8:	e003      	b.n	801e0e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e0da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801e0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0ea:	f002 0320 	and.w	r3, r2, #32
 801e0ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801e0f2:	2300      	movs	r3, #0
 801e0f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e0f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801e0fc:	460b      	mov	r3, r1
 801e0fe:	4313      	orrs	r3, r2
 801e100:	d055      	beq.n	801e1ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801e102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e10a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e10e:	d033      	beq.n	801e178 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801e110:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e114:	d82c      	bhi.n	801e170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e11a:	d02f      	beq.n	801e17c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801e11c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e120:	d826      	bhi.n	801e170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e122:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e126:	d02b      	beq.n	801e180 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801e128:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e12c:	d820      	bhi.n	801e170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e12e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e132:	d012      	beq.n	801e15a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801e134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e138:	d81a      	bhi.n	801e170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e13a:	2b00      	cmp	r3, #0
 801e13c:	d022      	beq.n	801e184 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801e13e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e142:	d115      	bne.n	801e170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e148:	3308      	adds	r3, #8
 801e14a:	2100      	movs	r1, #0
 801e14c:	4618      	mov	r0, r3
 801e14e:	f000 febd 	bl	801eecc <RCCEx_PLL2_Config>
 801e152:	4603      	mov	r3, r0
 801e154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801e158:	e015      	b.n	801e186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e15e:	3328      	adds	r3, #40	@ 0x28
 801e160:	2102      	movs	r1, #2
 801e162:	4618      	mov	r0, r3
 801e164:	f000 ff64 	bl	801f030 <RCCEx_PLL3_Config>
 801e168:	4603      	mov	r3, r0
 801e16a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801e16e:	e00a      	b.n	801e186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e170:	2301      	movs	r3, #1
 801e172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e176:	e006      	b.n	801e186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e178:	bf00      	nop
 801e17a:	e004      	b.n	801e186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e17c:	bf00      	nop
 801e17e:	e002      	b.n	801e186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e180:	bf00      	nop
 801e182:	e000      	b.n	801e186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e184:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d10b      	bne.n	801e1a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801e18e:	4b39      	ldr	r3, [pc, #228]	@ (801e274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e192:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801e196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e19e:	4a35      	ldr	r2, [pc, #212]	@ (801e274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e1a0:	430b      	orrs	r3, r1
 801e1a2:	6553      	str	r3, [r2, #84]	@ 0x54
 801e1a4:	e003      	b.n	801e1ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801e1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801e1ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801e1be:	2300      	movs	r3, #0
 801e1c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801e1c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801e1c8:	460b      	mov	r3, r1
 801e1ca:	4313      	orrs	r3, r2
 801e1cc:	d058      	beq.n	801e280 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801e1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e1d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801e1da:	d033      	beq.n	801e244 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801e1dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801e1e0:	d82c      	bhi.n	801e23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e1e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e1e6:	d02f      	beq.n	801e248 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801e1e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e1ec:	d826      	bhi.n	801e23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e1ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e1f2:	d02b      	beq.n	801e24c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801e1f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e1f8:	d820      	bhi.n	801e23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e1fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e1fe:	d012      	beq.n	801e226 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801e200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e204:	d81a      	bhi.n	801e23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e206:	2b00      	cmp	r3, #0
 801e208:	d022      	beq.n	801e250 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801e20a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e20e:	d115      	bne.n	801e23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e214:	3308      	adds	r3, #8
 801e216:	2100      	movs	r1, #0
 801e218:	4618      	mov	r0, r3
 801e21a:	f000 fe57 	bl	801eecc <RCCEx_PLL2_Config>
 801e21e:	4603      	mov	r3, r0
 801e220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801e224:	e015      	b.n	801e252 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e22a:	3328      	adds	r3, #40	@ 0x28
 801e22c:	2102      	movs	r1, #2
 801e22e:	4618      	mov	r0, r3
 801e230:	f000 fefe 	bl	801f030 <RCCEx_PLL3_Config>
 801e234:	4603      	mov	r3, r0
 801e236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801e23a:	e00a      	b.n	801e252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e23c:	2301      	movs	r3, #1
 801e23e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e242:	e006      	b.n	801e252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e244:	bf00      	nop
 801e246:	e004      	b.n	801e252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e248:	bf00      	nop
 801e24a:	e002      	b.n	801e252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e24c:	bf00      	nop
 801e24e:	e000      	b.n	801e252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e250:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e256:	2b00      	cmp	r3, #0
 801e258:	d10e      	bne.n	801e278 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801e25a:	4b06      	ldr	r3, [pc, #24]	@ (801e274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e25c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e25e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801e262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e266:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e26a:	4a02      	ldr	r2, [pc, #8]	@ (801e274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e26c:	430b      	orrs	r3, r1
 801e26e:	6593      	str	r3, [r2, #88]	@ 0x58
 801e270:	e006      	b.n	801e280 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801e272:	bf00      	nop
 801e274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e27c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801e280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e288:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801e28c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801e290:	2300      	movs	r3, #0
 801e292:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801e296:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801e29a:	460b      	mov	r3, r1
 801e29c:	4313      	orrs	r3, r2
 801e29e:	d055      	beq.n	801e34c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801e2a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e2a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e2ac:	d033      	beq.n	801e316 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801e2ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e2b2:	d82c      	bhi.n	801e30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e2b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e2b8:	d02f      	beq.n	801e31a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801e2ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e2be:	d826      	bhi.n	801e30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e2c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e2c4:	d02b      	beq.n	801e31e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801e2c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e2ca:	d820      	bhi.n	801e30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e2cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e2d0:	d012      	beq.n	801e2f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801e2d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e2d6:	d81a      	bhi.n	801e30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	d022      	beq.n	801e322 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801e2dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e2e0:	d115      	bne.n	801e30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2e6:	3308      	adds	r3, #8
 801e2e8:	2100      	movs	r1, #0
 801e2ea:	4618      	mov	r0, r3
 801e2ec:	f000 fdee 	bl	801eecc <RCCEx_PLL2_Config>
 801e2f0:	4603      	mov	r3, r0
 801e2f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e2f6:	e015      	b.n	801e324 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2fc:	3328      	adds	r3, #40	@ 0x28
 801e2fe:	2102      	movs	r1, #2
 801e300:	4618      	mov	r0, r3
 801e302:	f000 fe95 	bl	801f030 <RCCEx_PLL3_Config>
 801e306:	4603      	mov	r3, r0
 801e308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e30c:	e00a      	b.n	801e324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e30e:	2301      	movs	r3, #1
 801e310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e314:	e006      	b.n	801e324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e316:	bf00      	nop
 801e318:	e004      	b.n	801e324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e31a:	bf00      	nop
 801e31c:	e002      	b.n	801e324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e31e:	bf00      	nop
 801e320:	e000      	b.n	801e324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e322:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d10b      	bne.n	801e344 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801e32c:	4ba1      	ldr	r3, [pc, #644]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e32e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e330:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801e334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e33c:	4a9d      	ldr	r2, [pc, #628]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e33e:	430b      	orrs	r3, r1
 801e340:	6593      	str	r3, [r2, #88]	@ 0x58
 801e342:	e003      	b.n	801e34c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801e34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e354:	f002 0308 	and.w	r3, r2, #8
 801e358:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801e35c:	2300      	movs	r3, #0
 801e35e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801e362:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801e366:	460b      	mov	r3, r1
 801e368:	4313      	orrs	r3, r2
 801e36a:	d01e      	beq.n	801e3aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801e36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e378:	d10c      	bne.n	801e394 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e37e:	3328      	adds	r3, #40	@ 0x28
 801e380:	2102      	movs	r1, #2
 801e382:	4618      	mov	r0, r3
 801e384:	f000 fe54 	bl	801f030 <RCCEx_PLL3_Config>
 801e388:	4603      	mov	r3, r0
 801e38a:	2b00      	cmp	r3, #0
 801e38c:	d002      	beq.n	801e394 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801e38e:	2301      	movs	r3, #1
 801e390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801e394:	4b87      	ldr	r3, [pc, #540]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e398:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801e39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e3a4:	4a83      	ldr	r2, [pc, #524]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e3a6:	430b      	orrs	r3, r1
 801e3a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801e3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3b2:	f002 0310 	and.w	r3, r2, #16
 801e3b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801e3ba:	2300      	movs	r3, #0
 801e3bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801e3c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801e3c4:	460b      	mov	r3, r1
 801e3c6:	4313      	orrs	r3, r2
 801e3c8:	d01e      	beq.n	801e408 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801e3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e3d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e3d6:	d10c      	bne.n	801e3f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3dc:	3328      	adds	r3, #40	@ 0x28
 801e3de:	2102      	movs	r1, #2
 801e3e0:	4618      	mov	r0, r3
 801e3e2:	f000 fe25 	bl	801f030 <RCCEx_PLL3_Config>
 801e3e6:	4603      	mov	r3, r0
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	d002      	beq.n	801e3f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801e3ec:	2301      	movs	r3, #1
 801e3ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801e3f2:	4b70      	ldr	r3, [pc, #448]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e3f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e3f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e402:	4a6c      	ldr	r2, [pc, #432]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e404:	430b      	orrs	r3, r1
 801e406:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801e408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e410:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801e414:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801e418:	2300      	movs	r3, #0
 801e41a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801e41e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801e422:	460b      	mov	r3, r1
 801e424:	4313      	orrs	r3, r2
 801e426:	d03e      	beq.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801e428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e42c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e430:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e434:	d022      	beq.n	801e47c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801e436:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e43a:	d81b      	bhi.n	801e474 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d003      	beq.n	801e448 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801e440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e444:	d00b      	beq.n	801e45e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801e446:	e015      	b.n	801e474 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e44c:	3308      	adds	r3, #8
 801e44e:	2100      	movs	r1, #0
 801e450:	4618      	mov	r0, r3
 801e452:	f000 fd3b 	bl	801eecc <RCCEx_PLL2_Config>
 801e456:	4603      	mov	r3, r0
 801e458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e45c:	e00f      	b.n	801e47e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e462:	3328      	adds	r3, #40	@ 0x28
 801e464:	2102      	movs	r1, #2
 801e466:	4618      	mov	r0, r3
 801e468:	f000 fde2 	bl	801f030 <RCCEx_PLL3_Config>
 801e46c:	4603      	mov	r3, r0
 801e46e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e472:	e004      	b.n	801e47e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e474:	2301      	movs	r3, #1
 801e476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e47a:	e000      	b.n	801e47e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801e47c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e47e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e482:	2b00      	cmp	r3, #0
 801e484:	d10b      	bne.n	801e49e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801e486:	4b4b      	ldr	r3, [pc, #300]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e48a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801e48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e492:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e496:	4a47      	ldr	r2, [pc, #284]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e498:	430b      	orrs	r3, r1
 801e49a:	6593      	str	r3, [r2, #88]	@ 0x58
 801e49c:	e003      	b.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e49e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801e4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801e4b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 801e4b4:	2300      	movs	r3, #0
 801e4b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801e4b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801e4bc:	460b      	mov	r3, r1
 801e4be:	4313      	orrs	r3, r2
 801e4c0:	d03b      	beq.n	801e53a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801e4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e4ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e4ce:	d01f      	beq.n	801e510 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801e4d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e4d4:	d818      	bhi.n	801e508 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801e4d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801e4da:	d003      	beq.n	801e4e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801e4dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e4e0:	d007      	beq.n	801e4f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801e4e2:	e011      	b.n	801e508 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e4e4:	4b33      	ldr	r3, [pc, #204]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e4e8:	4a32      	ldr	r2, [pc, #200]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e4ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e4ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801e4f0:	e00f      	b.n	801e512 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4f6:	3328      	adds	r3, #40	@ 0x28
 801e4f8:	2101      	movs	r1, #1
 801e4fa:	4618      	mov	r0, r3
 801e4fc:	f000 fd98 	bl	801f030 <RCCEx_PLL3_Config>
 801e500:	4603      	mov	r3, r0
 801e502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801e506:	e004      	b.n	801e512 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e508:	2301      	movs	r3, #1
 801e50a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e50e:	e000      	b.n	801e512 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801e510:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e516:	2b00      	cmp	r3, #0
 801e518:	d10b      	bne.n	801e532 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801e51a:	4b26      	ldr	r3, [pc, #152]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e51c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e51e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801e522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e52a:	4a22      	ldr	r2, [pc, #136]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e52c:	430b      	orrs	r3, r1
 801e52e:	6553      	str	r3, [r2, #84]	@ 0x54
 801e530:	e003      	b.n	801e53a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801e53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e542:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801e546:	673b      	str	r3, [r7, #112]	@ 0x70
 801e548:	2300      	movs	r3, #0
 801e54a:	677b      	str	r3, [r7, #116]	@ 0x74
 801e54c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801e550:	460b      	mov	r3, r1
 801e552:	4313      	orrs	r3, r2
 801e554:	d034      	beq.n	801e5c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801e556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e55a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e55c:	2b00      	cmp	r3, #0
 801e55e:	d003      	beq.n	801e568 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801e560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e564:	d007      	beq.n	801e576 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801e566:	e011      	b.n	801e58c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e568:	4b12      	ldr	r3, [pc, #72]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e56c:	4a11      	ldr	r2, [pc, #68]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e56e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e574:	e00e      	b.n	801e594 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e57a:	3308      	adds	r3, #8
 801e57c:	2102      	movs	r1, #2
 801e57e:	4618      	mov	r0, r3
 801e580:	f000 fca4 	bl	801eecc <RCCEx_PLL2_Config>
 801e584:	4603      	mov	r3, r0
 801e586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e58a:	e003      	b.n	801e594 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801e58c:	2301      	movs	r3, #1
 801e58e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e592:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e598:	2b00      	cmp	r3, #0
 801e59a:	d10d      	bne.n	801e5b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801e59c:	4b05      	ldr	r3, [pc, #20]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e59e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e5a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801e5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e5aa:	4a02      	ldr	r2, [pc, #8]	@ (801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e5ac:	430b      	orrs	r3, r1
 801e5ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e5b0:	e006      	b.n	801e5c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801e5b2:	bf00      	nop
 801e5b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e5b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e5bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801e5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801e5cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e5ce:	2300      	movs	r3, #0
 801e5d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e5d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801e5d6:	460b      	mov	r3, r1
 801e5d8:	4313      	orrs	r3, r2
 801e5da:	d00c      	beq.n	801e5f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5e0:	3328      	adds	r3, #40	@ 0x28
 801e5e2:	2102      	movs	r1, #2
 801e5e4:	4618      	mov	r0, r3
 801e5e6:	f000 fd23 	bl	801f030 <RCCEx_PLL3_Config>
 801e5ea:	4603      	mov	r3, r0
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d002      	beq.n	801e5f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801e5f0:	2301      	movs	r3, #1
 801e5f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801e5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801e602:	663b      	str	r3, [r7, #96]	@ 0x60
 801e604:	2300      	movs	r3, #0
 801e606:	667b      	str	r3, [r7, #100]	@ 0x64
 801e608:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801e60c:	460b      	mov	r3, r1
 801e60e:	4313      	orrs	r3, r2
 801e610:	d038      	beq.n	801e684 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801e612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e61a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e61e:	d018      	beq.n	801e652 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801e620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e624:	d811      	bhi.n	801e64a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e62a:	d014      	beq.n	801e656 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801e62c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e630:	d80b      	bhi.n	801e64a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e632:	2b00      	cmp	r3, #0
 801e634:	d011      	beq.n	801e65a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801e636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e63a:	d106      	bne.n	801e64a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e63c:	4bc3      	ldr	r3, [pc, #780]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e640:	4ac2      	ldr	r2, [pc, #776]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801e648:	e008      	b.n	801e65c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e64a:	2301      	movs	r3, #1
 801e64c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e650:	e004      	b.n	801e65c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e652:	bf00      	nop
 801e654:	e002      	b.n	801e65c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e656:	bf00      	nop
 801e658:	e000      	b.n	801e65c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e65a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e65c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e660:	2b00      	cmp	r3, #0
 801e662:	d10b      	bne.n	801e67c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801e664:	4bb9      	ldr	r3, [pc, #740]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e668:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e674:	4ab5      	ldr	r2, [pc, #724]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e676:	430b      	orrs	r3, r1
 801e678:	6553      	str	r3, [r2, #84]	@ 0x54
 801e67a:	e003      	b.n	801e684 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e67c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801e684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e68c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801e690:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e692:	2300      	movs	r3, #0
 801e694:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e696:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801e69a:	460b      	mov	r3, r1
 801e69c:	4313      	orrs	r3, r2
 801e69e:	d009      	beq.n	801e6b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801e6a0:	4baa      	ldr	r3, [pc, #680]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e6a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e6a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e6ae:	4aa7      	ldr	r2, [pc, #668]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e6b0:	430b      	orrs	r3, r1
 801e6b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801e6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6bc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801e6c0:	653b      	str	r3, [r7, #80]	@ 0x50
 801e6c2:	2300      	movs	r3, #0
 801e6c4:	657b      	str	r3, [r7, #84]	@ 0x54
 801e6c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801e6ca:	460b      	mov	r3, r1
 801e6cc:	4313      	orrs	r3, r2
 801e6ce:	d00a      	beq.n	801e6e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801e6d0:	4b9e      	ldr	r3, [pc, #632]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e6d2:	691b      	ldr	r3, [r3, #16]
 801e6d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801e6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801e6e0:	4a9a      	ldr	r2, [pc, #616]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e6e2:	430b      	orrs	r3, r1
 801e6e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801e6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801e6f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e6f4:	2300      	movs	r3, #0
 801e6f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e6f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801e6fc:	460b      	mov	r3, r1
 801e6fe:	4313      	orrs	r3, r2
 801e700:	d009      	beq.n	801e716 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801e702:	4b92      	ldr	r3, [pc, #584]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e706:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801e70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e70e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e710:	4a8e      	ldr	r2, [pc, #568]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e712:	430b      	orrs	r3, r1
 801e714:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801e716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e71e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801e722:	643b      	str	r3, [r7, #64]	@ 0x40
 801e724:	2300      	movs	r3, #0
 801e726:	647b      	str	r3, [r7, #68]	@ 0x44
 801e728:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801e72c:	460b      	mov	r3, r1
 801e72e:	4313      	orrs	r3, r2
 801e730:	d00e      	beq.n	801e750 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801e732:	4b86      	ldr	r3, [pc, #536]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e734:	691b      	ldr	r3, [r3, #16]
 801e736:	4a85      	ldr	r2, [pc, #532]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e738:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801e73c:	6113      	str	r3, [r2, #16]
 801e73e:	4b83      	ldr	r3, [pc, #524]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e740:	6919      	ldr	r1, [r3, #16]
 801e742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e746:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801e74a:	4a80      	ldr	r2, [pc, #512]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e74c:	430b      	orrs	r3, r1
 801e74e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801e750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e754:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e758:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801e75c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e75e:	2300      	movs	r3, #0
 801e760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e762:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801e766:	460b      	mov	r3, r1
 801e768:	4313      	orrs	r3, r2
 801e76a:	d009      	beq.n	801e780 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801e76c:	4b77      	ldr	r3, [pc, #476]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e76e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e770:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e77a:	4a74      	ldr	r2, [pc, #464]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e77c:	430b      	orrs	r3, r1
 801e77e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801e780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e784:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e788:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801e78c:	633b      	str	r3, [r7, #48]	@ 0x30
 801e78e:	2300      	movs	r3, #0
 801e790:	637b      	str	r3, [r7, #52]	@ 0x34
 801e792:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801e796:	460b      	mov	r3, r1
 801e798:	4313      	orrs	r3, r2
 801e79a:	d00a      	beq.n	801e7b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801e79c:	4b6b      	ldr	r3, [pc, #428]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e79e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e7a0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801e7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801e7ac:	4a67      	ldr	r2, [pc, #412]	@ (801e94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e7ae:	430b      	orrs	r3, r1
 801e7b0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801e7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7ba:	2100      	movs	r1, #0
 801e7bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e7be:	f003 0301 	and.w	r3, r3, #1
 801e7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e7c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801e7c8:	460b      	mov	r3, r1
 801e7ca:	4313      	orrs	r3, r2
 801e7cc:	d011      	beq.n	801e7f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7d2:	3308      	adds	r3, #8
 801e7d4:	2100      	movs	r1, #0
 801e7d6:	4618      	mov	r0, r3
 801e7d8:	f000 fb78 	bl	801eecc <RCCEx_PLL2_Config>
 801e7dc:	4603      	mov	r3, r0
 801e7de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e7e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	d003      	beq.n	801e7f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801e7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7fa:	2100      	movs	r1, #0
 801e7fc:	6239      	str	r1, [r7, #32]
 801e7fe:	f003 0302 	and.w	r3, r3, #2
 801e802:	627b      	str	r3, [r7, #36]	@ 0x24
 801e804:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801e808:	460b      	mov	r3, r1
 801e80a:	4313      	orrs	r3, r2
 801e80c:	d011      	beq.n	801e832 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e812:	3308      	adds	r3, #8
 801e814:	2101      	movs	r1, #1
 801e816:	4618      	mov	r0, r3
 801e818:	f000 fb58 	bl	801eecc <RCCEx_PLL2_Config>
 801e81c:	4603      	mov	r3, r0
 801e81e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e826:	2b00      	cmp	r3, #0
 801e828:	d003      	beq.n	801e832 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e82a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e82e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801e832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e83a:	2100      	movs	r1, #0
 801e83c:	61b9      	str	r1, [r7, #24]
 801e83e:	f003 0304 	and.w	r3, r3, #4
 801e842:	61fb      	str	r3, [r7, #28]
 801e844:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e848:	460b      	mov	r3, r1
 801e84a:	4313      	orrs	r3, r2
 801e84c:	d011      	beq.n	801e872 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e852:	3308      	adds	r3, #8
 801e854:	2102      	movs	r1, #2
 801e856:	4618      	mov	r0, r3
 801e858:	f000 fb38 	bl	801eecc <RCCEx_PLL2_Config>
 801e85c:	4603      	mov	r3, r0
 801e85e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e866:	2b00      	cmp	r3, #0
 801e868:	d003      	beq.n	801e872 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e86a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e86e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801e872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e87a:	2100      	movs	r1, #0
 801e87c:	6139      	str	r1, [r7, #16]
 801e87e:	f003 0308 	and.w	r3, r3, #8
 801e882:	617b      	str	r3, [r7, #20]
 801e884:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801e888:	460b      	mov	r3, r1
 801e88a:	4313      	orrs	r3, r2
 801e88c:	d011      	beq.n	801e8b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e892:	3328      	adds	r3, #40	@ 0x28
 801e894:	2100      	movs	r1, #0
 801e896:	4618      	mov	r0, r3
 801e898:	f000 fbca 	bl	801f030 <RCCEx_PLL3_Config>
 801e89c:	4603      	mov	r3, r0
 801e89e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801e8a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	d003      	beq.n	801e8b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e8aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e8ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801e8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8ba:	2100      	movs	r1, #0
 801e8bc:	60b9      	str	r1, [r7, #8]
 801e8be:	f003 0310 	and.w	r3, r3, #16
 801e8c2:	60fb      	str	r3, [r7, #12]
 801e8c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e8c8:	460b      	mov	r3, r1
 801e8ca:	4313      	orrs	r3, r2
 801e8cc:	d011      	beq.n	801e8f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8d2:	3328      	adds	r3, #40	@ 0x28
 801e8d4:	2101      	movs	r1, #1
 801e8d6:	4618      	mov	r0, r3
 801e8d8:	f000 fbaa 	bl	801f030 <RCCEx_PLL3_Config>
 801e8dc:	4603      	mov	r3, r0
 801e8de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e8e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	d003      	beq.n	801e8f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e8ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801e8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8fa:	2100      	movs	r1, #0
 801e8fc:	6039      	str	r1, [r7, #0]
 801e8fe:	f003 0320 	and.w	r3, r3, #32
 801e902:	607b      	str	r3, [r7, #4]
 801e904:	e9d7 1200 	ldrd	r1, r2, [r7]
 801e908:	460b      	mov	r3, r1
 801e90a:	4313      	orrs	r3, r2
 801e90c:	d011      	beq.n	801e932 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e912:	3328      	adds	r3, #40	@ 0x28
 801e914:	2102      	movs	r1, #2
 801e916:	4618      	mov	r0, r3
 801e918:	f000 fb8a 	bl	801f030 <RCCEx_PLL3_Config>
 801e91c:	4603      	mov	r3, r0
 801e91e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e926:	2b00      	cmp	r3, #0
 801e928:	d003      	beq.n	801e932 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e92a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e92e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801e932:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801e936:	2b00      	cmp	r3, #0
 801e938:	d101      	bne.n	801e93e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801e93a:	2300      	movs	r3, #0
 801e93c:	e000      	b.n	801e940 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801e93e:	2301      	movs	r3, #1
}
 801e940:	4618      	mov	r0, r3
 801e942:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801e946:	46bd      	mov	sp, r7
 801e948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e94c:	58024400 	.word	0x58024400

0801e950 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801e950:	b580      	push	{r7, lr}
 801e952:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801e954:	f7fe fd96 	bl	801d484 <HAL_RCC_GetHCLKFreq>
 801e958:	4602      	mov	r2, r0
 801e95a:	4b06      	ldr	r3, [pc, #24]	@ (801e974 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801e95c:	6a1b      	ldr	r3, [r3, #32]
 801e95e:	091b      	lsrs	r3, r3, #4
 801e960:	f003 0307 	and.w	r3, r3, #7
 801e964:	4904      	ldr	r1, [pc, #16]	@ (801e978 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801e966:	5ccb      	ldrb	r3, [r1, r3]
 801e968:	f003 031f 	and.w	r3, r3, #31
 801e96c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801e970:	4618      	mov	r0, r3
 801e972:	bd80      	pop	{r7, pc}
 801e974:	58024400 	.word	0x58024400
 801e978:	08028c64 	.word	0x08028c64

0801e97c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801e97c:	b480      	push	{r7}
 801e97e:	b089      	sub	sp, #36	@ 0x24
 801e980:	af00      	add	r7, sp, #0
 801e982:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e984:	4ba1      	ldr	r3, [pc, #644]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e988:	f003 0303 	and.w	r3, r3, #3
 801e98c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801e98e:	4b9f      	ldr	r3, [pc, #636]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e992:	0b1b      	lsrs	r3, r3, #12
 801e994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e998:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801e99a:	4b9c      	ldr	r3, [pc, #624]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e99c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e99e:	091b      	lsrs	r3, r3, #4
 801e9a0:	f003 0301 	and.w	r3, r3, #1
 801e9a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801e9a6:	4b99      	ldr	r3, [pc, #612]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e9a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e9aa:	08db      	lsrs	r3, r3, #3
 801e9ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e9b0:	693a      	ldr	r2, [r7, #16]
 801e9b2:	fb02 f303 	mul.w	r3, r2, r3
 801e9b6:	ee07 3a90 	vmov	s15, r3
 801e9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e9be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801e9c2:	697b      	ldr	r3, [r7, #20]
 801e9c4:	2b00      	cmp	r3, #0
 801e9c6:	f000 8111 	beq.w	801ebec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801e9ca:	69bb      	ldr	r3, [r7, #24]
 801e9cc:	2b02      	cmp	r3, #2
 801e9ce:	f000 8083 	beq.w	801ead8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801e9d2:	69bb      	ldr	r3, [r7, #24]
 801e9d4:	2b02      	cmp	r3, #2
 801e9d6:	f200 80a1 	bhi.w	801eb1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801e9da:	69bb      	ldr	r3, [r7, #24]
 801e9dc:	2b00      	cmp	r3, #0
 801e9de:	d003      	beq.n	801e9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801e9e0:	69bb      	ldr	r3, [r7, #24]
 801e9e2:	2b01      	cmp	r3, #1
 801e9e4:	d056      	beq.n	801ea94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801e9e6:	e099      	b.n	801eb1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e9e8:	4b88      	ldr	r3, [pc, #544]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	f003 0320 	and.w	r3, r3, #32
 801e9f0:	2b00      	cmp	r3, #0
 801e9f2:	d02d      	beq.n	801ea50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e9f4:	4b85      	ldr	r3, [pc, #532]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e9f6:	681b      	ldr	r3, [r3, #0]
 801e9f8:	08db      	lsrs	r3, r3, #3
 801e9fa:	f003 0303 	and.w	r3, r3, #3
 801e9fe:	4a84      	ldr	r2, [pc, #528]	@ (801ec10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801ea00:	fa22 f303 	lsr.w	r3, r2, r3
 801ea04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ea06:	68bb      	ldr	r3, [r7, #8]
 801ea08:	ee07 3a90 	vmov	s15, r3
 801ea0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ea10:	697b      	ldr	r3, [r7, #20]
 801ea12:	ee07 3a90 	vmov	s15, r3
 801ea16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ea1e:	4b7b      	ldr	r3, [pc, #492]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ea26:	ee07 3a90 	vmov	s15, r3
 801ea2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ea2e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ea32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801ec14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ea36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ea3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ea3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ea42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ea46:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ea4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801ea4e:	e087      	b.n	801eb60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ea50:	697b      	ldr	r3, [r7, #20]
 801ea52:	ee07 3a90 	vmov	s15, r3
 801ea56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801ec18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801ea5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ea62:	4b6a      	ldr	r3, [pc, #424]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ea6a:	ee07 3a90 	vmov	s15, r3
 801ea6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ea72:	ed97 6a03 	vldr	s12, [r7, #12]
 801ea76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801ec14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ea7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ea7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ea82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ea86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ea8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ea8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ea92:	e065      	b.n	801eb60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ea94:	697b      	ldr	r3, [r7, #20]
 801ea96:	ee07 3a90 	vmov	s15, r3
 801ea9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801ec1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801eaa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eaa6:	4b59      	ldr	r3, [pc, #356]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eaa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eaaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eaae:	ee07 3a90 	vmov	s15, r3
 801eab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eab6:	ed97 6a03 	vldr	s12, [r7, #12]
 801eaba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801ec14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801eabe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eaca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eace:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ead2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ead6:	e043      	b.n	801eb60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ead8:	697b      	ldr	r3, [r7, #20]
 801eada:	ee07 3a90 	vmov	s15, r3
 801eade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eae2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801ec20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801eae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eaea:	4b48      	ldr	r3, [pc, #288]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eaec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eaee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eaf2:	ee07 3a90 	vmov	s15, r3
 801eaf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eafa:	ed97 6a03 	vldr	s12, [r7, #12]
 801eafe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801ec14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801eb02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eb06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eb0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eb0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eb12:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eb16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801eb1a:	e021      	b.n	801eb60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801eb1c:	697b      	ldr	r3, [r7, #20]
 801eb1e:	ee07 3a90 	vmov	s15, r3
 801eb22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ec1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801eb2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eb2e:	4b37      	ldr	r3, [pc, #220]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eb36:	ee07 3a90 	vmov	s15, r3
 801eb3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eb3e:	ed97 6a03 	vldr	s12, [r7, #12]
 801eb42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801ec14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801eb46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eb4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eb4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eb52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eb56:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eb5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801eb5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801eb60:	4b2a      	ldr	r3, [pc, #168]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb64:	0a5b      	lsrs	r3, r3, #9
 801eb66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801eb6a:	ee07 3a90 	vmov	s15, r3
 801eb6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eb76:	ee37 7a87 	vadd.f32	s14, s15, s14
 801eb7a:	edd7 6a07 	vldr	s13, [r7, #28]
 801eb7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eb82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eb86:	ee17 2a90 	vmov	r2, s15
 801eb8a:	687b      	ldr	r3, [r7, #4]
 801eb8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801eb8e:	4b1f      	ldr	r3, [pc, #124]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb92:	0c1b      	lsrs	r3, r3, #16
 801eb94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801eb98:	ee07 3a90 	vmov	s15, r3
 801eb9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eba4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801eba8:	edd7 6a07 	vldr	s13, [r7, #28]
 801ebac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ebb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ebb4:	ee17 2a90 	vmov	r2, s15
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801ebbc:	4b13      	ldr	r3, [pc, #76]	@ (801ec0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ebbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ebc0:	0e1b      	lsrs	r3, r3, #24
 801ebc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ebc6:	ee07 3a90 	vmov	s15, r3
 801ebca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ebce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ebd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ebd6:	edd7 6a07 	vldr	s13, [r7, #28]
 801ebda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ebde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ebe2:	ee17 2a90 	vmov	r2, s15
 801ebe6:	687b      	ldr	r3, [r7, #4]
 801ebe8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801ebea:	e008      	b.n	801ebfe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	2200      	movs	r2, #0
 801ebf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	2200      	movs	r2, #0
 801ebf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	2200      	movs	r2, #0
 801ebfc:	609a      	str	r2, [r3, #8]
}
 801ebfe:	bf00      	nop
 801ec00:	3724      	adds	r7, #36	@ 0x24
 801ec02:	46bd      	mov	sp, r7
 801ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec08:	4770      	bx	lr
 801ec0a:	bf00      	nop
 801ec0c:	58024400 	.word	0x58024400
 801ec10:	03d09000 	.word	0x03d09000
 801ec14:	46000000 	.word	0x46000000
 801ec18:	4c742400 	.word	0x4c742400
 801ec1c:	4a742400 	.word	0x4a742400
 801ec20:	4af42400 	.word	0x4af42400

0801ec24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801ec24:	b480      	push	{r7}
 801ec26:	b089      	sub	sp, #36	@ 0x24
 801ec28:	af00      	add	r7, sp, #0
 801ec2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801ec2c:	4ba1      	ldr	r3, [pc, #644]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec30:	f003 0303 	and.w	r3, r3, #3
 801ec34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801ec36:	4b9f      	ldr	r3, [pc, #636]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec3a:	0d1b      	lsrs	r3, r3, #20
 801ec3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ec40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801ec42:	4b9c      	ldr	r3, [pc, #624]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec46:	0a1b      	lsrs	r3, r3, #8
 801ec48:	f003 0301 	and.w	r3, r3, #1
 801ec4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801ec4e:	4b99      	ldr	r3, [pc, #612]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ec52:	08db      	lsrs	r3, r3, #3
 801ec54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ec58:	693a      	ldr	r2, [r7, #16]
 801ec5a:	fb02 f303 	mul.w	r3, r2, r3
 801ec5e:	ee07 3a90 	vmov	s15, r3
 801ec62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801ec6a:	697b      	ldr	r3, [r7, #20]
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	f000 8111 	beq.w	801ee94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801ec72:	69bb      	ldr	r3, [r7, #24]
 801ec74:	2b02      	cmp	r3, #2
 801ec76:	f000 8083 	beq.w	801ed80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801ec7a:	69bb      	ldr	r3, [r7, #24]
 801ec7c:	2b02      	cmp	r3, #2
 801ec7e:	f200 80a1 	bhi.w	801edc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801ec82:	69bb      	ldr	r3, [r7, #24]
 801ec84:	2b00      	cmp	r3, #0
 801ec86:	d003      	beq.n	801ec90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801ec88:	69bb      	ldr	r3, [r7, #24]
 801ec8a:	2b01      	cmp	r3, #1
 801ec8c:	d056      	beq.n	801ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801ec8e:	e099      	b.n	801edc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ec90:	4b88      	ldr	r3, [pc, #544]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	f003 0320 	and.w	r3, r3, #32
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d02d      	beq.n	801ecf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ec9c:	4b85      	ldr	r3, [pc, #532]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec9e:	681b      	ldr	r3, [r3, #0]
 801eca0:	08db      	lsrs	r3, r3, #3
 801eca2:	f003 0303 	and.w	r3, r3, #3
 801eca6:	4a84      	ldr	r2, [pc, #528]	@ (801eeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801eca8:	fa22 f303 	lsr.w	r3, r2, r3
 801ecac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ecae:	68bb      	ldr	r3, [r7, #8]
 801ecb0:	ee07 3a90 	vmov	s15, r3
 801ecb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ecb8:	697b      	ldr	r3, [r7, #20]
 801ecba:	ee07 3a90 	vmov	s15, r3
 801ecbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ecc6:	4b7b      	ldr	r3, [pc, #492]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ecc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ecca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ecce:	ee07 3a90 	vmov	s15, r3
 801ecd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ecd6:	ed97 6a03 	vldr	s12, [r7, #12]
 801ecda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801eebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ecde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ece2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ece6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ecea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ecee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ecf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801ecf6:	e087      	b.n	801ee08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ecf8:	697b      	ldr	r3, [r7, #20]
 801ecfa:	ee07 3a90 	vmov	s15, r3
 801ecfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801eec0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801ed06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ed0a:	4b6a      	ldr	r3, [pc, #424]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ed0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ed0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ed12:	ee07 3a90 	vmov	s15, r3
 801ed16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ed1a:	ed97 6a03 	vldr	s12, [r7, #12]
 801ed1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801eebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ed22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ed26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ed2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ed2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ed32:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ed3a:	e065      	b.n	801ee08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ed3c:	697b      	ldr	r3, [r7, #20]
 801ed3e:	ee07 3a90 	vmov	s15, r3
 801ed42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801eec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ed4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ed4e:	4b59      	ldr	r3, [pc, #356]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ed50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ed52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ed56:	ee07 3a90 	vmov	s15, r3
 801ed5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ed5e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ed62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801eebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ed66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ed6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ed6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ed72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ed76:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ed7e:	e043      	b.n	801ee08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ed80:	697b      	ldr	r3, [r7, #20]
 801ed82:	ee07 3a90 	vmov	s15, r3
 801ed86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801eec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801ed8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ed92:	4b48      	ldr	r3, [pc, #288]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ed94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ed96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ed9a:	ee07 3a90 	vmov	s15, r3
 801ed9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eda2:	ed97 6a03 	vldr	s12, [r7, #12]
 801eda6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801eebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801edaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801edae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801edb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801edb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801edba:	ee67 7a27 	vmul.f32	s15, s14, s15
 801edbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801edc2:	e021      	b.n	801ee08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801edc4:	697b      	ldr	r3, [r7, #20]
 801edc6:	ee07 3a90 	vmov	s15, r3
 801edca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801edce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801eec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801edd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801edd6:	4b37      	ldr	r3, [pc, #220]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801edd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801edda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801edde:	ee07 3a90 	vmov	s15, r3
 801ede2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ede6:	ed97 6a03 	vldr	s12, [r7, #12]
 801edea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801eebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801edee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801edf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801edf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801edfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801edfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ee06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801ee08:	4b2a      	ldr	r3, [pc, #168]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ee0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee0c:	0a5b      	lsrs	r3, r3, #9
 801ee0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ee12:	ee07 3a90 	vmov	s15, r3
 801ee16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ee1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ee22:	edd7 6a07 	vldr	s13, [r7, #28]
 801ee26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ee2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ee2e:	ee17 2a90 	vmov	r2, s15
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801ee36:	4b1f      	ldr	r3, [pc, #124]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ee38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee3a:	0c1b      	lsrs	r3, r3, #16
 801ee3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ee40:	ee07 3a90 	vmov	s15, r3
 801ee44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ee4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ee50:	edd7 6a07 	vldr	s13, [r7, #28]
 801ee54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ee58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ee5c:	ee17 2a90 	vmov	r2, s15
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801ee64:	4b13      	ldr	r3, [pc, #76]	@ (801eeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ee66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee68:	0e1b      	lsrs	r3, r3, #24
 801ee6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ee6e:	ee07 3a90 	vmov	s15, r3
 801ee72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ee7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ee7e:	edd7 6a07 	vldr	s13, [r7, #28]
 801ee82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ee86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ee8a:	ee17 2a90 	vmov	r2, s15
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801ee92:	e008      	b.n	801eea6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	2200      	movs	r2, #0
 801ee98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801ee9a:	687b      	ldr	r3, [r7, #4]
 801ee9c:	2200      	movs	r2, #0
 801ee9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	2200      	movs	r2, #0
 801eea4:	609a      	str	r2, [r3, #8]
}
 801eea6:	bf00      	nop
 801eea8:	3724      	adds	r7, #36	@ 0x24
 801eeaa:	46bd      	mov	sp, r7
 801eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eeb0:	4770      	bx	lr
 801eeb2:	bf00      	nop
 801eeb4:	58024400 	.word	0x58024400
 801eeb8:	03d09000 	.word	0x03d09000
 801eebc:	46000000 	.word	0x46000000
 801eec0:	4c742400 	.word	0x4c742400
 801eec4:	4a742400 	.word	0x4a742400
 801eec8:	4af42400 	.word	0x4af42400

0801eecc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801eecc:	b580      	push	{r7, lr}
 801eece:	b084      	sub	sp, #16
 801eed0:	af00      	add	r7, sp, #0
 801eed2:	6078      	str	r0, [r7, #4]
 801eed4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801eed6:	2300      	movs	r3, #0
 801eed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801eeda:	4b53      	ldr	r3, [pc, #332]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801eedc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eede:	f003 0303 	and.w	r3, r3, #3
 801eee2:	2b03      	cmp	r3, #3
 801eee4:	d101      	bne.n	801eeea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801eee6:	2301      	movs	r3, #1
 801eee8:	e099      	b.n	801f01e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801eeea:	4b4f      	ldr	r3, [pc, #316]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	4a4e      	ldr	r2, [pc, #312]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801eef0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801eef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801eef6:	f7fc fba7 	bl	801b648 <HAL_GetTick>
 801eefa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801eefc:	e008      	b.n	801ef10 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801eefe:	f7fc fba3 	bl	801b648 <HAL_GetTick>
 801ef02:	4602      	mov	r2, r0
 801ef04:	68bb      	ldr	r3, [r7, #8]
 801ef06:	1ad3      	subs	r3, r2, r3
 801ef08:	2b02      	cmp	r3, #2
 801ef0a:	d901      	bls.n	801ef10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801ef0c:	2303      	movs	r3, #3
 801ef0e:	e086      	b.n	801f01e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801ef10:	4b45      	ldr	r3, [pc, #276]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	d1f0      	bne.n	801eefe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801ef1c:	4b42      	ldr	r3, [pc, #264]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801ef1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef20:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	681b      	ldr	r3, [r3, #0]
 801ef28:	031b      	lsls	r3, r3, #12
 801ef2a:	493f      	ldr	r1, [pc, #252]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801ef2c:	4313      	orrs	r3, r2
 801ef2e:	628b      	str	r3, [r1, #40]	@ 0x28
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	685b      	ldr	r3, [r3, #4]
 801ef34:	3b01      	subs	r3, #1
 801ef36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	689b      	ldr	r3, [r3, #8]
 801ef3e:	3b01      	subs	r3, #1
 801ef40:	025b      	lsls	r3, r3, #9
 801ef42:	b29b      	uxth	r3, r3
 801ef44:	431a      	orrs	r2, r3
 801ef46:	687b      	ldr	r3, [r7, #4]
 801ef48:	68db      	ldr	r3, [r3, #12]
 801ef4a:	3b01      	subs	r3, #1
 801ef4c:	041b      	lsls	r3, r3, #16
 801ef4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801ef52:	431a      	orrs	r2, r3
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	691b      	ldr	r3, [r3, #16]
 801ef58:	3b01      	subs	r3, #1
 801ef5a:	061b      	lsls	r3, r3, #24
 801ef5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801ef60:	4931      	ldr	r1, [pc, #196]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801ef62:	4313      	orrs	r3, r2
 801ef64:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801ef66:	4b30      	ldr	r3, [pc, #192]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801ef68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	695b      	ldr	r3, [r3, #20]
 801ef72:	492d      	ldr	r1, [pc, #180]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801ef74:	4313      	orrs	r3, r2
 801ef76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801ef78:	4b2b      	ldr	r3, [pc, #172]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801ef7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef7c:	f023 0220 	bic.w	r2, r3, #32
 801ef80:	687b      	ldr	r3, [r7, #4]
 801ef82:	699b      	ldr	r3, [r3, #24]
 801ef84:	4928      	ldr	r1, [pc, #160]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801ef86:	4313      	orrs	r3, r2
 801ef88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801ef8a:	4b27      	ldr	r3, [pc, #156]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801ef8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef8e:	4a26      	ldr	r2, [pc, #152]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801ef90:	f023 0310 	bic.w	r3, r3, #16
 801ef94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801ef96:	4b24      	ldr	r3, [pc, #144]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801ef98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ef9a:	4b24      	ldr	r3, [pc, #144]	@ (801f02c <RCCEx_PLL2_Config+0x160>)
 801ef9c:	4013      	ands	r3, r2
 801ef9e:	687a      	ldr	r2, [r7, #4]
 801efa0:	69d2      	ldr	r2, [r2, #28]
 801efa2:	00d2      	lsls	r2, r2, #3
 801efa4:	4920      	ldr	r1, [pc, #128]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801efa6:	4313      	orrs	r3, r2
 801efa8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801efaa:	4b1f      	ldr	r3, [pc, #124]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801efac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efae:	4a1e      	ldr	r2, [pc, #120]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801efb0:	f043 0310 	orr.w	r3, r3, #16
 801efb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801efb6:	683b      	ldr	r3, [r7, #0]
 801efb8:	2b00      	cmp	r3, #0
 801efba:	d106      	bne.n	801efca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801efbc:	4b1a      	ldr	r3, [pc, #104]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801efbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efc0:	4a19      	ldr	r2, [pc, #100]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801efc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801efc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801efc8:	e00f      	b.n	801efea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801efca:	683b      	ldr	r3, [r7, #0]
 801efcc:	2b01      	cmp	r3, #1
 801efce:	d106      	bne.n	801efde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801efd0:	4b15      	ldr	r3, [pc, #84]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801efd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efd4:	4a14      	ldr	r2, [pc, #80]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801efd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801efda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801efdc:	e005      	b.n	801efea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801efde:	4b12      	ldr	r3, [pc, #72]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801efe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efe2:	4a11      	ldr	r2, [pc, #68]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801efe4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801efe8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801efea:	4b0f      	ldr	r3, [pc, #60]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801efec:	681b      	ldr	r3, [r3, #0]
 801efee:	4a0e      	ldr	r2, [pc, #56]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801eff0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801eff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801eff6:	f7fc fb27 	bl	801b648 <HAL_GetTick>
 801effa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801effc:	e008      	b.n	801f010 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801effe:	f7fc fb23 	bl	801b648 <HAL_GetTick>
 801f002:	4602      	mov	r2, r0
 801f004:	68bb      	ldr	r3, [r7, #8]
 801f006:	1ad3      	subs	r3, r2, r3
 801f008:	2b02      	cmp	r3, #2
 801f00a:	d901      	bls.n	801f010 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f00c:	2303      	movs	r3, #3
 801f00e:	e006      	b.n	801f01e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f010:	4b05      	ldr	r3, [pc, #20]	@ (801f028 <RCCEx_PLL2_Config+0x15c>)
 801f012:	681b      	ldr	r3, [r3, #0]
 801f014:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f018:	2b00      	cmp	r3, #0
 801f01a:	d0f0      	beq.n	801effe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801f01c:	7bfb      	ldrb	r3, [r7, #15]
}
 801f01e:	4618      	mov	r0, r3
 801f020:	3710      	adds	r7, #16
 801f022:	46bd      	mov	sp, r7
 801f024:	bd80      	pop	{r7, pc}
 801f026:	bf00      	nop
 801f028:	58024400 	.word	0x58024400
 801f02c:	ffff0007 	.word	0xffff0007

0801f030 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801f030:	b580      	push	{r7, lr}
 801f032:	b084      	sub	sp, #16
 801f034:	af00      	add	r7, sp, #0
 801f036:	6078      	str	r0, [r7, #4]
 801f038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f03a:	2300      	movs	r3, #0
 801f03c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f03e:	4b53      	ldr	r3, [pc, #332]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f042:	f003 0303 	and.w	r3, r3, #3
 801f046:	2b03      	cmp	r3, #3
 801f048:	d101      	bne.n	801f04e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801f04a:	2301      	movs	r3, #1
 801f04c:	e099      	b.n	801f182 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801f04e:	4b4f      	ldr	r3, [pc, #316]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f050:	681b      	ldr	r3, [r3, #0]
 801f052:	4a4e      	ldr	r2, [pc, #312]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f054:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801f058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f05a:	f7fc faf5 	bl	801b648 <HAL_GetTick>
 801f05e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f060:	e008      	b.n	801f074 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f062:	f7fc faf1 	bl	801b648 <HAL_GetTick>
 801f066:	4602      	mov	r2, r0
 801f068:	68bb      	ldr	r3, [r7, #8]
 801f06a:	1ad3      	subs	r3, r2, r3
 801f06c:	2b02      	cmp	r3, #2
 801f06e:	d901      	bls.n	801f074 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f070:	2303      	movs	r3, #3
 801f072:	e086      	b.n	801f182 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f074:	4b45      	ldr	r3, [pc, #276]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f076:	681b      	ldr	r3, [r3, #0]
 801f078:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f07c:	2b00      	cmp	r3, #0
 801f07e:	d1f0      	bne.n	801f062 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801f080:	4b42      	ldr	r3, [pc, #264]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f084:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	051b      	lsls	r3, r3, #20
 801f08e:	493f      	ldr	r1, [pc, #252]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f090:	4313      	orrs	r3, r2
 801f092:	628b      	str	r3, [r1, #40]	@ 0x28
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	685b      	ldr	r3, [r3, #4]
 801f098:	3b01      	subs	r3, #1
 801f09a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	689b      	ldr	r3, [r3, #8]
 801f0a2:	3b01      	subs	r3, #1
 801f0a4:	025b      	lsls	r3, r3, #9
 801f0a6:	b29b      	uxth	r3, r3
 801f0a8:	431a      	orrs	r2, r3
 801f0aa:	687b      	ldr	r3, [r7, #4]
 801f0ac:	68db      	ldr	r3, [r3, #12]
 801f0ae:	3b01      	subs	r3, #1
 801f0b0:	041b      	lsls	r3, r3, #16
 801f0b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f0b6:	431a      	orrs	r2, r3
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	691b      	ldr	r3, [r3, #16]
 801f0bc:	3b01      	subs	r3, #1
 801f0be:	061b      	lsls	r3, r3, #24
 801f0c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f0c4:	4931      	ldr	r1, [pc, #196]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f0c6:	4313      	orrs	r3, r2
 801f0c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801f0ca:	4b30      	ldr	r3, [pc, #192]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	695b      	ldr	r3, [r3, #20]
 801f0d6:	492d      	ldr	r1, [pc, #180]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f0d8:	4313      	orrs	r3, r2
 801f0da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801f0dc:	4b2b      	ldr	r3, [pc, #172]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	699b      	ldr	r3, [r3, #24]
 801f0e8:	4928      	ldr	r1, [pc, #160]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f0ea:	4313      	orrs	r3, r2
 801f0ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801f0ee:	4b27      	ldr	r3, [pc, #156]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0f2:	4a26      	ldr	r2, [pc, #152]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f0f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801f0f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801f0fa:	4b24      	ldr	r3, [pc, #144]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f0fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801f0fe:	4b24      	ldr	r3, [pc, #144]	@ (801f190 <RCCEx_PLL3_Config+0x160>)
 801f100:	4013      	ands	r3, r2
 801f102:	687a      	ldr	r2, [r7, #4]
 801f104:	69d2      	ldr	r2, [r2, #28]
 801f106:	00d2      	lsls	r2, r2, #3
 801f108:	4920      	ldr	r1, [pc, #128]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f10a:	4313      	orrs	r3, r2
 801f10c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801f10e:	4b1f      	ldr	r3, [pc, #124]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f112:	4a1e      	ldr	r2, [pc, #120]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801f118:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f11a:	683b      	ldr	r3, [r7, #0]
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	d106      	bne.n	801f12e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801f120:	4b1a      	ldr	r3, [pc, #104]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f124:	4a19      	ldr	r2, [pc, #100]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f126:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801f12a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f12c:	e00f      	b.n	801f14e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f12e:	683b      	ldr	r3, [r7, #0]
 801f130:	2b01      	cmp	r3, #1
 801f132:	d106      	bne.n	801f142 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801f134:	4b15      	ldr	r3, [pc, #84]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f138:	4a14      	ldr	r2, [pc, #80]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f13a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801f13e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f140:	e005      	b.n	801f14e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801f142:	4b12      	ldr	r3, [pc, #72]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f146:	4a11      	ldr	r2, [pc, #68]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f148:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801f14c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801f14e:	4b0f      	ldr	r3, [pc, #60]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f150:	681b      	ldr	r3, [r3, #0]
 801f152:	4a0e      	ldr	r2, [pc, #56]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801f158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f15a:	f7fc fa75 	bl	801b648 <HAL_GetTick>
 801f15e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f160:	e008      	b.n	801f174 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f162:	f7fc fa71 	bl	801b648 <HAL_GetTick>
 801f166:	4602      	mov	r2, r0
 801f168:	68bb      	ldr	r3, [r7, #8]
 801f16a:	1ad3      	subs	r3, r2, r3
 801f16c:	2b02      	cmp	r3, #2
 801f16e:	d901      	bls.n	801f174 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f170:	2303      	movs	r3, #3
 801f172:	e006      	b.n	801f182 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f174:	4b05      	ldr	r3, [pc, #20]	@ (801f18c <RCCEx_PLL3_Config+0x15c>)
 801f176:	681b      	ldr	r3, [r3, #0]
 801f178:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	d0f0      	beq.n	801f162 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801f180:	7bfb      	ldrb	r3, [r7, #15]
}
 801f182:	4618      	mov	r0, r3
 801f184:	3710      	adds	r7, #16
 801f186:	46bd      	mov	sp, r7
 801f188:	bd80      	pop	{r7, pc}
 801f18a:	bf00      	nop
 801f18c:	58024400 	.word	0x58024400
 801f190:	ffff0007 	.word	0xffff0007

0801f194 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801f194:	b580      	push	{r7, lr}
 801f196:	b084      	sub	sp, #16
 801f198:	af00      	add	r7, sp, #0
 801f19a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	d101      	bne.n	801f1a6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801f1a2:	2301      	movs	r3, #1
 801f1a4:	e054      	b.n	801f250 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801f1a6:	687b      	ldr	r3, [r7, #4]
 801f1a8:	7a5b      	ldrb	r3, [r3, #9]
 801f1aa:	b2db      	uxtb	r3, r3
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d105      	bne.n	801f1bc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	2200      	movs	r2, #0
 801f1b4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801f1b6:	6878      	ldr	r0, [r7, #4]
 801f1b8:	f7fb ffa4 	bl	801b104 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	2202      	movs	r2, #2
 801f1c0:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	681b      	ldr	r3, [r3, #0]
 801f1c8:	f023 0120 	bic.w	r1, r3, #32
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	685a      	ldr	r2, [r3, #4]
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	681b      	ldr	r3, [r3, #0]
 801f1d4:	430a      	orrs	r2, r1
 801f1d6:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801f1d8:	687b      	ldr	r3, [r7, #4]
 801f1da:	681b      	ldr	r3, [r3, #0]
 801f1dc:	681a      	ldr	r2, [r3, #0]
 801f1de:	687b      	ldr	r3, [r7, #4]
 801f1e0:	681b      	ldr	r3, [r3, #0]
 801f1e2:	f042 0204 	orr.w	r2, r2, #4
 801f1e6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	681b      	ldr	r3, [r3, #0]
 801f1ec:	685b      	ldr	r3, [r3, #4]
 801f1ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f1f2:	2b40      	cmp	r3, #64	@ 0x40
 801f1f4:	d104      	bne.n	801f200 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	2204      	movs	r2, #4
 801f1fa:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 801f1fc:	2301      	movs	r3, #1
 801f1fe:	e027      	b.n	801f250 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 801f200:	f7fc fa22 	bl	801b648 <HAL_GetTick>
 801f204:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801f206:	e015      	b.n	801f234 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801f208:	f7fc fa1e 	bl	801b648 <HAL_GetTick>
 801f20c:	4602      	mov	r2, r0
 801f20e:	68fb      	ldr	r3, [r7, #12]
 801f210:	1ad3      	subs	r3, r2, r3
 801f212:	2b02      	cmp	r3, #2
 801f214:	d90e      	bls.n	801f234 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801f216:	687b      	ldr	r3, [r7, #4]
 801f218:	681b      	ldr	r3, [r3, #0]
 801f21a:	685b      	ldr	r3, [r3, #4]
 801f21c:	f003 0304 	and.w	r3, r3, #4
 801f220:	2b04      	cmp	r3, #4
 801f222:	d107      	bne.n	801f234 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 801f224:	687b      	ldr	r3, [r7, #4]
 801f226:	2204      	movs	r2, #4
 801f228:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801f22a:	687b      	ldr	r3, [r7, #4]
 801f22c:	2202      	movs	r2, #2
 801f22e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 801f230:	2301      	movs	r3, #1
 801f232:	e00d      	b.n	801f250 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	681b      	ldr	r3, [r3, #0]
 801f238:	685b      	ldr	r3, [r3, #4]
 801f23a:	f003 0304 	and.w	r3, r3, #4
 801f23e:	2b04      	cmp	r3, #4
 801f240:	d0e2      	beq.n	801f208 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	2201      	movs	r2, #1
 801f246:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	2200      	movs	r2, #0
 801f24c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 801f24e:	2300      	movs	r3, #0
}
 801f250:	4618      	mov	r0, r3
 801f252:	3710      	adds	r7, #16
 801f254:	46bd      	mov	sp, r7
 801f256:	bd80      	pop	{r7, pc}

0801f258 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801f258:	b580      	push	{r7, lr}
 801f25a:	b084      	sub	sp, #16
 801f25c:	af00      	add	r7, sp, #0
 801f25e:	6078      	str	r0, [r7, #4]
 801f260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f262:	2300      	movs	r3, #0
 801f264:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801f266:	687b      	ldr	r3, [r7, #4]
 801f268:	7a1b      	ldrb	r3, [r3, #8]
 801f26a:	2b01      	cmp	r3, #1
 801f26c:	d101      	bne.n	801f272 <HAL_RNG_GenerateRandomNumber+0x1a>
 801f26e:	2302      	movs	r3, #2
 801f270:	e044      	b.n	801f2fc <HAL_RNG_GenerateRandomNumber+0xa4>
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	2201      	movs	r2, #1
 801f276:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	7a5b      	ldrb	r3, [r3, #9]
 801f27c:	b2db      	uxtb	r3, r3
 801f27e:	2b01      	cmp	r3, #1
 801f280:	d133      	bne.n	801f2ea <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801f282:	687b      	ldr	r3, [r7, #4]
 801f284:	2202      	movs	r2, #2
 801f286:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 801f288:	f7fc f9de 	bl	801b648 <HAL_GetTick>
 801f28c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801f28e:	e018      	b.n	801f2c2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801f290:	f7fc f9da 	bl	801b648 <HAL_GetTick>
 801f294:	4602      	mov	r2, r0
 801f296:	68bb      	ldr	r3, [r7, #8]
 801f298:	1ad3      	subs	r3, r2, r3
 801f29a:	2b02      	cmp	r3, #2
 801f29c:	d911      	bls.n	801f2c2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801f29e:	687b      	ldr	r3, [r7, #4]
 801f2a0:	681b      	ldr	r3, [r3, #0]
 801f2a2:	685b      	ldr	r3, [r3, #4]
 801f2a4:	f003 0301 	and.w	r3, r3, #1
 801f2a8:	2b01      	cmp	r3, #1
 801f2aa:	d00a      	beq.n	801f2c2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801f2ac:	687b      	ldr	r3, [r7, #4]
 801f2ae:	2201      	movs	r2, #1
 801f2b0:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	2202      	movs	r2, #2
 801f2b6:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801f2b8:	687b      	ldr	r3, [r7, #4]
 801f2ba:	2200      	movs	r2, #0
 801f2bc:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 801f2be:	2301      	movs	r3, #1
 801f2c0:	e01c      	b.n	801f2fc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801f2c2:	687b      	ldr	r3, [r7, #4]
 801f2c4:	681b      	ldr	r3, [r3, #0]
 801f2c6:	685b      	ldr	r3, [r3, #4]
 801f2c8:	f003 0301 	and.w	r3, r3, #1
 801f2cc:	2b01      	cmp	r3, #1
 801f2ce:	d1df      	bne.n	801f290 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	681b      	ldr	r3, [r3, #0]
 801f2d4:	689a      	ldr	r2, [r3, #8]
 801f2d6:	687b      	ldr	r3, [r7, #4]
 801f2d8:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	691a      	ldr	r2, [r3, #16]
 801f2de:	683b      	ldr	r3, [r7, #0]
 801f2e0:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 801f2e2:	687b      	ldr	r3, [r7, #4]
 801f2e4:	2201      	movs	r2, #1
 801f2e6:	725a      	strb	r2, [r3, #9]
 801f2e8:	e004      	b.n	801f2f4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	2204      	movs	r2, #4
 801f2ee:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 801f2f0:	2301      	movs	r3, #1
 801f2f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801f2f4:	687b      	ldr	r3, [r7, #4]
 801f2f6:	2200      	movs	r2, #0
 801f2f8:	721a      	strb	r2, [r3, #8]

  return status;
 801f2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 801f2fc:	4618      	mov	r0, r3
 801f2fe:	3710      	adds	r7, #16
 801f300:	46bd      	mov	sp, r7
 801f302:	bd80      	pop	{r7, pc}

0801f304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f304:	b580      	push	{r7, lr}
 801f306:	b082      	sub	sp, #8
 801f308:	af00      	add	r7, sp, #0
 801f30a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f30c:	687b      	ldr	r3, [r7, #4]
 801f30e:	2b00      	cmp	r3, #0
 801f310:	d101      	bne.n	801f316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f312:	2301      	movs	r3, #1
 801f314:	e042      	b.n	801f39c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f316:	687b      	ldr	r3, [r7, #4]
 801f318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	d106      	bne.n	801f32e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	2200      	movs	r2, #0
 801f324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f328:	6878      	ldr	r0, [r7, #4]
 801f32a:	f7fb ff25 	bl	801b178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	2224      	movs	r2, #36	@ 0x24
 801f332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801f336:	687b      	ldr	r3, [r7, #4]
 801f338:	681b      	ldr	r3, [r3, #0]
 801f33a:	681a      	ldr	r2, [r3, #0]
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	681b      	ldr	r3, [r3, #0]
 801f340:	f022 0201 	bic.w	r2, r2, #1
 801f344:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d002      	beq.n	801f354 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801f34e:	6878      	ldr	r0, [r7, #4]
 801f350:	f000 fee6 	bl	8020120 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f354:	6878      	ldr	r0, [r7, #4]
 801f356:	f000 f97b 	bl	801f650 <UART_SetConfig>
 801f35a:	4603      	mov	r3, r0
 801f35c:	2b01      	cmp	r3, #1
 801f35e:	d101      	bne.n	801f364 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801f360:	2301      	movs	r3, #1
 801f362:	e01b      	b.n	801f39c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f364:	687b      	ldr	r3, [r7, #4]
 801f366:	681b      	ldr	r3, [r3, #0]
 801f368:	685a      	ldr	r2, [r3, #4]
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	681b      	ldr	r3, [r3, #0]
 801f36e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801f372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f374:	687b      	ldr	r3, [r7, #4]
 801f376:	681b      	ldr	r3, [r3, #0]
 801f378:	689a      	ldr	r2, [r3, #8]
 801f37a:	687b      	ldr	r3, [r7, #4]
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801f382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f384:	687b      	ldr	r3, [r7, #4]
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	681a      	ldr	r2, [r3, #0]
 801f38a:	687b      	ldr	r3, [r7, #4]
 801f38c:	681b      	ldr	r3, [r3, #0]
 801f38e:	f042 0201 	orr.w	r2, r2, #1
 801f392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f394:	6878      	ldr	r0, [r7, #4]
 801f396:	f000 ff65 	bl	8020264 <UART_CheckIdleState>
 801f39a:	4603      	mov	r3, r0
}
 801f39c:	4618      	mov	r0, r3
 801f39e:	3708      	adds	r7, #8
 801f3a0:	46bd      	mov	sp, r7
 801f3a2:	bd80      	pop	{r7, pc}

0801f3a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f3a4:	b580      	push	{r7, lr}
 801f3a6:	b08a      	sub	sp, #40	@ 0x28
 801f3a8:	af02      	add	r7, sp, #8
 801f3aa:	60f8      	str	r0, [r7, #12]
 801f3ac:	60b9      	str	r1, [r7, #8]
 801f3ae:	603b      	str	r3, [r7, #0]
 801f3b0:	4613      	mov	r3, r2
 801f3b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f3b4:	68fb      	ldr	r3, [r7, #12]
 801f3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f3ba:	2b20      	cmp	r3, #32
 801f3bc:	d17b      	bne.n	801f4b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801f3be:	68bb      	ldr	r3, [r7, #8]
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	d002      	beq.n	801f3ca <HAL_UART_Transmit+0x26>
 801f3c4:	88fb      	ldrh	r3, [r7, #6]
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	d101      	bne.n	801f3ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801f3ca:	2301      	movs	r3, #1
 801f3cc:	e074      	b.n	801f4b8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f3ce:	68fb      	ldr	r3, [r7, #12]
 801f3d0:	2200      	movs	r2, #0
 801f3d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f3d6:	68fb      	ldr	r3, [r7, #12]
 801f3d8:	2221      	movs	r2, #33	@ 0x21
 801f3da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f3de:	f7fc f933 	bl	801b648 <HAL_GetTick>
 801f3e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f3e4:	68fb      	ldr	r3, [r7, #12]
 801f3e6:	88fa      	ldrh	r2, [r7, #6]
 801f3e8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801f3ec:	68fb      	ldr	r3, [r7, #12]
 801f3ee:	88fa      	ldrh	r2, [r7, #6]
 801f3f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f3f4:	68fb      	ldr	r3, [r7, #12]
 801f3f6:	689b      	ldr	r3, [r3, #8]
 801f3f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f3fc:	d108      	bne.n	801f410 <HAL_UART_Transmit+0x6c>
 801f3fe:	68fb      	ldr	r3, [r7, #12]
 801f400:	691b      	ldr	r3, [r3, #16]
 801f402:	2b00      	cmp	r3, #0
 801f404:	d104      	bne.n	801f410 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801f406:	2300      	movs	r3, #0
 801f408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f40a:	68bb      	ldr	r3, [r7, #8]
 801f40c:	61bb      	str	r3, [r7, #24]
 801f40e:	e003      	b.n	801f418 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801f410:	68bb      	ldr	r3, [r7, #8]
 801f412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f414:	2300      	movs	r3, #0
 801f416:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801f418:	e030      	b.n	801f47c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f41a:	683b      	ldr	r3, [r7, #0]
 801f41c:	9300      	str	r3, [sp, #0]
 801f41e:	697b      	ldr	r3, [r7, #20]
 801f420:	2200      	movs	r2, #0
 801f422:	2180      	movs	r1, #128	@ 0x80
 801f424:	68f8      	ldr	r0, [r7, #12]
 801f426:	f000 ffc7 	bl	80203b8 <UART_WaitOnFlagUntilTimeout>
 801f42a:	4603      	mov	r3, r0
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	d005      	beq.n	801f43c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801f430:	68fb      	ldr	r3, [r7, #12]
 801f432:	2220      	movs	r2, #32
 801f434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801f438:	2303      	movs	r3, #3
 801f43a:	e03d      	b.n	801f4b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801f43c:	69fb      	ldr	r3, [r7, #28]
 801f43e:	2b00      	cmp	r3, #0
 801f440:	d10b      	bne.n	801f45a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f442:	69bb      	ldr	r3, [r7, #24]
 801f444:	881b      	ldrh	r3, [r3, #0]
 801f446:	461a      	mov	r2, r3
 801f448:	68fb      	ldr	r3, [r7, #12]
 801f44a:	681b      	ldr	r3, [r3, #0]
 801f44c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f450:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801f452:	69bb      	ldr	r3, [r7, #24]
 801f454:	3302      	adds	r3, #2
 801f456:	61bb      	str	r3, [r7, #24]
 801f458:	e007      	b.n	801f46a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f45a:	69fb      	ldr	r3, [r7, #28]
 801f45c:	781a      	ldrb	r2, [r3, #0]
 801f45e:	68fb      	ldr	r3, [r7, #12]
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801f464:	69fb      	ldr	r3, [r7, #28]
 801f466:	3301      	adds	r3, #1
 801f468:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f46a:	68fb      	ldr	r3, [r7, #12]
 801f46c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801f470:	b29b      	uxth	r3, r3
 801f472:	3b01      	subs	r3, #1
 801f474:	b29a      	uxth	r2, r3
 801f476:	68fb      	ldr	r3, [r7, #12]
 801f478:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801f47c:	68fb      	ldr	r3, [r7, #12]
 801f47e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801f482:	b29b      	uxth	r3, r3
 801f484:	2b00      	cmp	r3, #0
 801f486:	d1c8      	bne.n	801f41a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f488:	683b      	ldr	r3, [r7, #0]
 801f48a:	9300      	str	r3, [sp, #0]
 801f48c:	697b      	ldr	r3, [r7, #20]
 801f48e:	2200      	movs	r2, #0
 801f490:	2140      	movs	r1, #64	@ 0x40
 801f492:	68f8      	ldr	r0, [r7, #12]
 801f494:	f000 ff90 	bl	80203b8 <UART_WaitOnFlagUntilTimeout>
 801f498:	4603      	mov	r3, r0
 801f49a:	2b00      	cmp	r3, #0
 801f49c:	d005      	beq.n	801f4aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801f49e:	68fb      	ldr	r3, [r7, #12]
 801f4a0:	2220      	movs	r2, #32
 801f4a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801f4a6:	2303      	movs	r3, #3
 801f4a8:	e006      	b.n	801f4b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f4aa:	68fb      	ldr	r3, [r7, #12]
 801f4ac:	2220      	movs	r2, #32
 801f4ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801f4b2:	2300      	movs	r3, #0
 801f4b4:	e000      	b.n	801f4b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801f4b6:	2302      	movs	r3, #2
  }
}
 801f4b8:	4618      	mov	r0, r3
 801f4ba:	3720      	adds	r7, #32
 801f4bc:	46bd      	mov	sp, r7
 801f4be:	bd80      	pop	{r7, pc}

0801f4c0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f4c0:	b580      	push	{r7, lr}
 801f4c2:	b08a      	sub	sp, #40	@ 0x28
 801f4c4:	af02      	add	r7, sp, #8
 801f4c6:	60f8      	str	r0, [r7, #12]
 801f4c8:	60b9      	str	r1, [r7, #8]
 801f4ca:	603b      	str	r3, [r7, #0]
 801f4cc:	4613      	mov	r3, r2
 801f4ce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801f4d0:	68fb      	ldr	r3, [r7, #12]
 801f4d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801f4d6:	2b20      	cmp	r3, #32
 801f4d8:	f040 80b5 	bne.w	801f646 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 801f4dc:	68bb      	ldr	r3, [r7, #8]
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	d002      	beq.n	801f4e8 <HAL_UART_Receive+0x28>
 801f4e2:	88fb      	ldrh	r3, [r7, #6]
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	d101      	bne.n	801f4ec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801f4e8:	2301      	movs	r3, #1
 801f4ea:	e0ad      	b.n	801f648 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f4ec:	68fb      	ldr	r3, [r7, #12]
 801f4ee:	2200      	movs	r2, #0
 801f4f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801f4f4:	68fb      	ldr	r3, [r7, #12]
 801f4f6:	2222      	movs	r2, #34	@ 0x22
 801f4f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f4fc:	68fb      	ldr	r3, [r7, #12]
 801f4fe:	2200      	movs	r2, #0
 801f500:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f502:	f7fc f8a1 	bl	801b648 <HAL_GetTick>
 801f506:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801f508:	68fb      	ldr	r3, [r7, #12]
 801f50a:	88fa      	ldrh	r2, [r7, #6]
 801f50c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 801f510:	68fb      	ldr	r3, [r7, #12]
 801f512:	88fa      	ldrh	r2, [r7, #6]
 801f514:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801f518:	68fb      	ldr	r3, [r7, #12]
 801f51a:	689b      	ldr	r3, [r3, #8]
 801f51c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f520:	d10e      	bne.n	801f540 <HAL_UART_Receive+0x80>
 801f522:	68fb      	ldr	r3, [r7, #12]
 801f524:	691b      	ldr	r3, [r3, #16]
 801f526:	2b00      	cmp	r3, #0
 801f528:	d105      	bne.n	801f536 <HAL_UART_Receive+0x76>
 801f52a:	68fb      	ldr	r3, [r7, #12]
 801f52c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801f530:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801f534:	e02d      	b.n	801f592 <HAL_UART_Receive+0xd2>
 801f536:	68fb      	ldr	r3, [r7, #12]
 801f538:	22ff      	movs	r2, #255	@ 0xff
 801f53a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801f53e:	e028      	b.n	801f592 <HAL_UART_Receive+0xd2>
 801f540:	68fb      	ldr	r3, [r7, #12]
 801f542:	689b      	ldr	r3, [r3, #8]
 801f544:	2b00      	cmp	r3, #0
 801f546:	d10d      	bne.n	801f564 <HAL_UART_Receive+0xa4>
 801f548:	68fb      	ldr	r3, [r7, #12]
 801f54a:	691b      	ldr	r3, [r3, #16]
 801f54c:	2b00      	cmp	r3, #0
 801f54e:	d104      	bne.n	801f55a <HAL_UART_Receive+0x9a>
 801f550:	68fb      	ldr	r3, [r7, #12]
 801f552:	22ff      	movs	r2, #255	@ 0xff
 801f554:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801f558:	e01b      	b.n	801f592 <HAL_UART_Receive+0xd2>
 801f55a:	68fb      	ldr	r3, [r7, #12]
 801f55c:	227f      	movs	r2, #127	@ 0x7f
 801f55e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801f562:	e016      	b.n	801f592 <HAL_UART_Receive+0xd2>
 801f564:	68fb      	ldr	r3, [r7, #12]
 801f566:	689b      	ldr	r3, [r3, #8]
 801f568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f56c:	d10d      	bne.n	801f58a <HAL_UART_Receive+0xca>
 801f56e:	68fb      	ldr	r3, [r7, #12]
 801f570:	691b      	ldr	r3, [r3, #16]
 801f572:	2b00      	cmp	r3, #0
 801f574:	d104      	bne.n	801f580 <HAL_UART_Receive+0xc0>
 801f576:	68fb      	ldr	r3, [r7, #12]
 801f578:	227f      	movs	r2, #127	@ 0x7f
 801f57a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801f57e:	e008      	b.n	801f592 <HAL_UART_Receive+0xd2>
 801f580:	68fb      	ldr	r3, [r7, #12]
 801f582:	223f      	movs	r2, #63	@ 0x3f
 801f584:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801f588:	e003      	b.n	801f592 <HAL_UART_Receive+0xd2>
 801f58a:	68fb      	ldr	r3, [r7, #12]
 801f58c:	2200      	movs	r2, #0
 801f58e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 801f592:	68fb      	ldr	r3, [r7, #12]
 801f594:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801f598:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f59a:	68fb      	ldr	r3, [r7, #12]
 801f59c:	689b      	ldr	r3, [r3, #8]
 801f59e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f5a2:	d108      	bne.n	801f5b6 <HAL_UART_Receive+0xf6>
 801f5a4:	68fb      	ldr	r3, [r7, #12]
 801f5a6:	691b      	ldr	r3, [r3, #16]
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	d104      	bne.n	801f5b6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801f5ac:	2300      	movs	r3, #0
 801f5ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801f5b0:	68bb      	ldr	r3, [r7, #8]
 801f5b2:	61bb      	str	r3, [r7, #24]
 801f5b4:	e003      	b.n	801f5be <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801f5b6:	68bb      	ldr	r3, [r7, #8]
 801f5b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f5ba:	2300      	movs	r3, #0
 801f5bc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801f5be:	e036      	b.n	801f62e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801f5c0:	683b      	ldr	r3, [r7, #0]
 801f5c2:	9300      	str	r3, [sp, #0]
 801f5c4:	697b      	ldr	r3, [r7, #20]
 801f5c6:	2200      	movs	r2, #0
 801f5c8:	2120      	movs	r1, #32
 801f5ca:	68f8      	ldr	r0, [r7, #12]
 801f5cc:	f000 fef4 	bl	80203b8 <UART_WaitOnFlagUntilTimeout>
 801f5d0:	4603      	mov	r3, r0
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d005      	beq.n	801f5e2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801f5d6:	68fb      	ldr	r3, [r7, #12]
 801f5d8:	2220      	movs	r2, #32
 801f5da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 801f5de:	2303      	movs	r3, #3
 801f5e0:	e032      	b.n	801f648 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801f5e2:	69fb      	ldr	r3, [r7, #28]
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d10c      	bne.n	801f602 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801f5e8:	68fb      	ldr	r3, [r7, #12]
 801f5ea:	681b      	ldr	r3, [r3, #0]
 801f5ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f5ee:	b29a      	uxth	r2, r3
 801f5f0:	8a7b      	ldrh	r3, [r7, #18]
 801f5f2:	4013      	ands	r3, r2
 801f5f4:	b29a      	uxth	r2, r3
 801f5f6:	69bb      	ldr	r3, [r7, #24]
 801f5f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801f5fa:	69bb      	ldr	r3, [r7, #24]
 801f5fc:	3302      	adds	r3, #2
 801f5fe:	61bb      	str	r3, [r7, #24]
 801f600:	e00c      	b.n	801f61c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801f602:	68fb      	ldr	r3, [r7, #12]
 801f604:	681b      	ldr	r3, [r3, #0]
 801f606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f608:	b2da      	uxtb	r2, r3
 801f60a:	8a7b      	ldrh	r3, [r7, #18]
 801f60c:	b2db      	uxtb	r3, r3
 801f60e:	4013      	ands	r3, r2
 801f610:	b2da      	uxtb	r2, r3
 801f612:	69fb      	ldr	r3, [r7, #28]
 801f614:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801f616:	69fb      	ldr	r3, [r7, #28]
 801f618:	3301      	adds	r3, #1
 801f61a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 801f61c:	68fb      	ldr	r3, [r7, #12]
 801f61e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801f622:	b29b      	uxth	r3, r3
 801f624:	3b01      	subs	r3, #1
 801f626:	b29a      	uxth	r2, r3
 801f628:	68fb      	ldr	r3, [r7, #12]
 801f62a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 801f62e:	68fb      	ldr	r3, [r7, #12]
 801f630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801f634:	b29b      	uxth	r3, r3
 801f636:	2b00      	cmp	r3, #0
 801f638:	d1c2      	bne.n	801f5c0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801f63a:	68fb      	ldr	r3, [r7, #12]
 801f63c:	2220      	movs	r2, #32
 801f63e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 801f642:	2300      	movs	r3, #0
 801f644:	e000      	b.n	801f648 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801f646:	2302      	movs	r3, #2
  }
}
 801f648:	4618      	mov	r0, r3
 801f64a:	3720      	adds	r7, #32
 801f64c:	46bd      	mov	sp, r7
 801f64e:	bd80      	pop	{r7, pc}

0801f650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f654:	b092      	sub	sp, #72	@ 0x48
 801f656:	af00      	add	r7, sp, #0
 801f658:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f65a:	2300      	movs	r3, #0
 801f65c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f660:	697b      	ldr	r3, [r7, #20]
 801f662:	689a      	ldr	r2, [r3, #8]
 801f664:	697b      	ldr	r3, [r7, #20]
 801f666:	691b      	ldr	r3, [r3, #16]
 801f668:	431a      	orrs	r2, r3
 801f66a:	697b      	ldr	r3, [r7, #20]
 801f66c:	695b      	ldr	r3, [r3, #20]
 801f66e:	431a      	orrs	r2, r3
 801f670:	697b      	ldr	r3, [r7, #20]
 801f672:	69db      	ldr	r3, [r3, #28]
 801f674:	4313      	orrs	r3, r2
 801f676:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f678:	697b      	ldr	r3, [r7, #20]
 801f67a:	681b      	ldr	r3, [r3, #0]
 801f67c:	681a      	ldr	r2, [r3, #0]
 801f67e:	4bbe      	ldr	r3, [pc, #760]	@ (801f978 <UART_SetConfig+0x328>)
 801f680:	4013      	ands	r3, r2
 801f682:	697a      	ldr	r2, [r7, #20]
 801f684:	6812      	ldr	r2, [r2, #0]
 801f686:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801f688:	430b      	orrs	r3, r1
 801f68a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f68c:	697b      	ldr	r3, [r7, #20]
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	685b      	ldr	r3, [r3, #4]
 801f692:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801f696:	697b      	ldr	r3, [r7, #20]
 801f698:	68da      	ldr	r2, [r3, #12]
 801f69a:	697b      	ldr	r3, [r7, #20]
 801f69c:	681b      	ldr	r3, [r3, #0]
 801f69e:	430a      	orrs	r2, r1
 801f6a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f6a2:	697b      	ldr	r3, [r7, #20]
 801f6a4:	699b      	ldr	r3, [r3, #24]
 801f6a6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f6a8:	697b      	ldr	r3, [r7, #20]
 801f6aa:	681b      	ldr	r3, [r3, #0]
 801f6ac:	4ab3      	ldr	r2, [pc, #716]	@ (801f97c <UART_SetConfig+0x32c>)
 801f6ae:	4293      	cmp	r3, r2
 801f6b0:	d004      	beq.n	801f6bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f6b2:	697b      	ldr	r3, [r7, #20]
 801f6b4:	6a1b      	ldr	r3, [r3, #32]
 801f6b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f6b8:	4313      	orrs	r3, r2
 801f6ba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f6bc:	697b      	ldr	r3, [r7, #20]
 801f6be:	681b      	ldr	r3, [r3, #0]
 801f6c0:	689a      	ldr	r2, [r3, #8]
 801f6c2:	4baf      	ldr	r3, [pc, #700]	@ (801f980 <UART_SetConfig+0x330>)
 801f6c4:	4013      	ands	r3, r2
 801f6c6:	697a      	ldr	r2, [r7, #20]
 801f6c8:	6812      	ldr	r2, [r2, #0]
 801f6ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801f6cc:	430b      	orrs	r3, r1
 801f6ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f6d0:	697b      	ldr	r3, [r7, #20]
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f6d6:	f023 010f 	bic.w	r1, r3, #15
 801f6da:	697b      	ldr	r3, [r7, #20]
 801f6dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f6de:	697b      	ldr	r3, [r7, #20]
 801f6e0:	681b      	ldr	r3, [r3, #0]
 801f6e2:	430a      	orrs	r2, r1
 801f6e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f6e6:	697b      	ldr	r3, [r7, #20]
 801f6e8:	681b      	ldr	r3, [r3, #0]
 801f6ea:	4aa6      	ldr	r2, [pc, #664]	@ (801f984 <UART_SetConfig+0x334>)
 801f6ec:	4293      	cmp	r3, r2
 801f6ee:	d177      	bne.n	801f7e0 <UART_SetConfig+0x190>
 801f6f0:	4ba5      	ldr	r3, [pc, #660]	@ (801f988 <UART_SetConfig+0x338>)
 801f6f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f6f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f6f8:	2b28      	cmp	r3, #40	@ 0x28
 801f6fa:	d86d      	bhi.n	801f7d8 <UART_SetConfig+0x188>
 801f6fc:	a201      	add	r2, pc, #4	@ (adr r2, 801f704 <UART_SetConfig+0xb4>)
 801f6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f702:	bf00      	nop
 801f704:	0801f7a9 	.word	0x0801f7a9
 801f708:	0801f7d9 	.word	0x0801f7d9
 801f70c:	0801f7d9 	.word	0x0801f7d9
 801f710:	0801f7d9 	.word	0x0801f7d9
 801f714:	0801f7d9 	.word	0x0801f7d9
 801f718:	0801f7d9 	.word	0x0801f7d9
 801f71c:	0801f7d9 	.word	0x0801f7d9
 801f720:	0801f7d9 	.word	0x0801f7d9
 801f724:	0801f7b1 	.word	0x0801f7b1
 801f728:	0801f7d9 	.word	0x0801f7d9
 801f72c:	0801f7d9 	.word	0x0801f7d9
 801f730:	0801f7d9 	.word	0x0801f7d9
 801f734:	0801f7d9 	.word	0x0801f7d9
 801f738:	0801f7d9 	.word	0x0801f7d9
 801f73c:	0801f7d9 	.word	0x0801f7d9
 801f740:	0801f7d9 	.word	0x0801f7d9
 801f744:	0801f7b9 	.word	0x0801f7b9
 801f748:	0801f7d9 	.word	0x0801f7d9
 801f74c:	0801f7d9 	.word	0x0801f7d9
 801f750:	0801f7d9 	.word	0x0801f7d9
 801f754:	0801f7d9 	.word	0x0801f7d9
 801f758:	0801f7d9 	.word	0x0801f7d9
 801f75c:	0801f7d9 	.word	0x0801f7d9
 801f760:	0801f7d9 	.word	0x0801f7d9
 801f764:	0801f7c1 	.word	0x0801f7c1
 801f768:	0801f7d9 	.word	0x0801f7d9
 801f76c:	0801f7d9 	.word	0x0801f7d9
 801f770:	0801f7d9 	.word	0x0801f7d9
 801f774:	0801f7d9 	.word	0x0801f7d9
 801f778:	0801f7d9 	.word	0x0801f7d9
 801f77c:	0801f7d9 	.word	0x0801f7d9
 801f780:	0801f7d9 	.word	0x0801f7d9
 801f784:	0801f7c9 	.word	0x0801f7c9
 801f788:	0801f7d9 	.word	0x0801f7d9
 801f78c:	0801f7d9 	.word	0x0801f7d9
 801f790:	0801f7d9 	.word	0x0801f7d9
 801f794:	0801f7d9 	.word	0x0801f7d9
 801f798:	0801f7d9 	.word	0x0801f7d9
 801f79c:	0801f7d9 	.word	0x0801f7d9
 801f7a0:	0801f7d9 	.word	0x0801f7d9
 801f7a4:	0801f7d1 	.word	0x0801f7d1
 801f7a8:	2301      	movs	r3, #1
 801f7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f7ae:	e222      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f7b0:	2304      	movs	r3, #4
 801f7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f7b6:	e21e      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f7b8:	2308      	movs	r3, #8
 801f7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f7be:	e21a      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f7c0:	2310      	movs	r3, #16
 801f7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f7c6:	e216      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f7c8:	2320      	movs	r3, #32
 801f7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f7ce:	e212      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f7d0:	2340      	movs	r3, #64	@ 0x40
 801f7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f7d6:	e20e      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f7d8:	2380      	movs	r3, #128	@ 0x80
 801f7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f7de:	e20a      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f7e0:	697b      	ldr	r3, [r7, #20]
 801f7e2:	681b      	ldr	r3, [r3, #0]
 801f7e4:	4a69      	ldr	r2, [pc, #420]	@ (801f98c <UART_SetConfig+0x33c>)
 801f7e6:	4293      	cmp	r3, r2
 801f7e8:	d130      	bne.n	801f84c <UART_SetConfig+0x1fc>
 801f7ea:	4b67      	ldr	r3, [pc, #412]	@ (801f988 <UART_SetConfig+0x338>)
 801f7ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f7ee:	f003 0307 	and.w	r3, r3, #7
 801f7f2:	2b05      	cmp	r3, #5
 801f7f4:	d826      	bhi.n	801f844 <UART_SetConfig+0x1f4>
 801f7f6:	a201      	add	r2, pc, #4	@ (adr r2, 801f7fc <UART_SetConfig+0x1ac>)
 801f7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f7fc:	0801f815 	.word	0x0801f815
 801f800:	0801f81d 	.word	0x0801f81d
 801f804:	0801f825 	.word	0x0801f825
 801f808:	0801f82d 	.word	0x0801f82d
 801f80c:	0801f835 	.word	0x0801f835
 801f810:	0801f83d 	.word	0x0801f83d
 801f814:	2300      	movs	r3, #0
 801f816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f81a:	e1ec      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f81c:	2304      	movs	r3, #4
 801f81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f822:	e1e8      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f824:	2308      	movs	r3, #8
 801f826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f82a:	e1e4      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f82c:	2310      	movs	r3, #16
 801f82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f832:	e1e0      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f834:	2320      	movs	r3, #32
 801f836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f83a:	e1dc      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f83c:	2340      	movs	r3, #64	@ 0x40
 801f83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f842:	e1d8      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f844:	2380      	movs	r3, #128	@ 0x80
 801f846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f84a:	e1d4      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f84c:	697b      	ldr	r3, [r7, #20]
 801f84e:	681b      	ldr	r3, [r3, #0]
 801f850:	4a4f      	ldr	r2, [pc, #316]	@ (801f990 <UART_SetConfig+0x340>)
 801f852:	4293      	cmp	r3, r2
 801f854:	d130      	bne.n	801f8b8 <UART_SetConfig+0x268>
 801f856:	4b4c      	ldr	r3, [pc, #304]	@ (801f988 <UART_SetConfig+0x338>)
 801f858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f85a:	f003 0307 	and.w	r3, r3, #7
 801f85e:	2b05      	cmp	r3, #5
 801f860:	d826      	bhi.n	801f8b0 <UART_SetConfig+0x260>
 801f862:	a201      	add	r2, pc, #4	@ (adr r2, 801f868 <UART_SetConfig+0x218>)
 801f864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f868:	0801f881 	.word	0x0801f881
 801f86c:	0801f889 	.word	0x0801f889
 801f870:	0801f891 	.word	0x0801f891
 801f874:	0801f899 	.word	0x0801f899
 801f878:	0801f8a1 	.word	0x0801f8a1
 801f87c:	0801f8a9 	.word	0x0801f8a9
 801f880:	2300      	movs	r3, #0
 801f882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f886:	e1b6      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f888:	2304      	movs	r3, #4
 801f88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f88e:	e1b2      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f890:	2308      	movs	r3, #8
 801f892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f896:	e1ae      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f898:	2310      	movs	r3, #16
 801f89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f89e:	e1aa      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f8a0:	2320      	movs	r3, #32
 801f8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f8a6:	e1a6      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f8a8:	2340      	movs	r3, #64	@ 0x40
 801f8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f8ae:	e1a2      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f8b0:	2380      	movs	r3, #128	@ 0x80
 801f8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f8b6:	e19e      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f8b8:	697b      	ldr	r3, [r7, #20]
 801f8ba:	681b      	ldr	r3, [r3, #0]
 801f8bc:	4a35      	ldr	r2, [pc, #212]	@ (801f994 <UART_SetConfig+0x344>)
 801f8be:	4293      	cmp	r3, r2
 801f8c0:	d130      	bne.n	801f924 <UART_SetConfig+0x2d4>
 801f8c2:	4b31      	ldr	r3, [pc, #196]	@ (801f988 <UART_SetConfig+0x338>)
 801f8c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f8c6:	f003 0307 	and.w	r3, r3, #7
 801f8ca:	2b05      	cmp	r3, #5
 801f8cc:	d826      	bhi.n	801f91c <UART_SetConfig+0x2cc>
 801f8ce:	a201      	add	r2, pc, #4	@ (adr r2, 801f8d4 <UART_SetConfig+0x284>)
 801f8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f8d4:	0801f8ed 	.word	0x0801f8ed
 801f8d8:	0801f8f5 	.word	0x0801f8f5
 801f8dc:	0801f8fd 	.word	0x0801f8fd
 801f8e0:	0801f905 	.word	0x0801f905
 801f8e4:	0801f90d 	.word	0x0801f90d
 801f8e8:	0801f915 	.word	0x0801f915
 801f8ec:	2300      	movs	r3, #0
 801f8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f8f2:	e180      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f8f4:	2304      	movs	r3, #4
 801f8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f8fa:	e17c      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f8fc:	2308      	movs	r3, #8
 801f8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f902:	e178      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f904:	2310      	movs	r3, #16
 801f906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f90a:	e174      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f90c:	2320      	movs	r3, #32
 801f90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f912:	e170      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f914:	2340      	movs	r3, #64	@ 0x40
 801f916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f91a:	e16c      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f91c:	2380      	movs	r3, #128	@ 0x80
 801f91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f922:	e168      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f924:	697b      	ldr	r3, [r7, #20]
 801f926:	681b      	ldr	r3, [r3, #0]
 801f928:	4a1b      	ldr	r2, [pc, #108]	@ (801f998 <UART_SetConfig+0x348>)
 801f92a:	4293      	cmp	r3, r2
 801f92c:	d142      	bne.n	801f9b4 <UART_SetConfig+0x364>
 801f92e:	4b16      	ldr	r3, [pc, #88]	@ (801f988 <UART_SetConfig+0x338>)
 801f930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f932:	f003 0307 	and.w	r3, r3, #7
 801f936:	2b05      	cmp	r3, #5
 801f938:	d838      	bhi.n	801f9ac <UART_SetConfig+0x35c>
 801f93a:	a201      	add	r2, pc, #4	@ (adr r2, 801f940 <UART_SetConfig+0x2f0>)
 801f93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f940:	0801f959 	.word	0x0801f959
 801f944:	0801f961 	.word	0x0801f961
 801f948:	0801f969 	.word	0x0801f969
 801f94c:	0801f971 	.word	0x0801f971
 801f950:	0801f99d 	.word	0x0801f99d
 801f954:	0801f9a5 	.word	0x0801f9a5
 801f958:	2300      	movs	r3, #0
 801f95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f95e:	e14a      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f960:	2304      	movs	r3, #4
 801f962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f966:	e146      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f968:	2308      	movs	r3, #8
 801f96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f96e:	e142      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f970:	2310      	movs	r3, #16
 801f972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f976:	e13e      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f978:	cfff69f3 	.word	0xcfff69f3
 801f97c:	58000c00 	.word	0x58000c00
 801f980:	11fff4ff 	.word	0x11fff4ff
 801f984:	40011000 	.word	0x40011000
 801f988:	58024400 	.word	0x58024400
 801f98c:	40004400 	.word	0x40004400
 801f990:	40004800 	.word	0x40004800
 801f994:	40004c00 	.word	0x40004c00
 801f998:	40005000 	.word	0x40005000
 801f99c:	2320      	movs	r3, #32
 801f99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f9a2:	e128      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f9a4:	2340      	movs	r3, #64	@ 0x40
 801f9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f9aa:	e124      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f9ac:	2380      	movs	r3, #128	@ 0x80
 801f9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f9b2:	e120      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801f9b4:	697b      	ldr	r3, [r7, #20]
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	4acb      	ldr	r2, [pc, #812]	@ (801fce8 <UART_SetConfig+0x698>)
 801f9ba:	4293      	cmp	r3, r2
 801f9bc:	d176      	bne.n	801faac <UART_SetConfig+0x45c>
 801f9be:	4bcb      	ldr	r3, [pc, #812]	@ (801fcec <UART_SetConfig+0x69c>)
 801f9c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f9c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f9c6:	2b28      	cmp	r3, #40	@ 0x28
 801f9c8:	d86c      	bhi.n	801faa4 <UART_SetConfig+0x454>
 801f9ca:	a201      	add	r2, pc, #4	@ (adr r2, 801f9d0 <UART_SetConfig+0x380>)
 801f9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f9d0:	0801fa75 	.word	0x0801fa75
 801f9d4:	0801faa5 	.word	0x0801faa5
 801f9d8:	0801faa5 	.word	0x0801faa5
 801f9dc:	0801faa5 	.word	0x0801faa5
 801f9e0:	0801faa5 	.word	0x0801faa5
 801f9e4:	0801faa5 	.word	0x0801faa5
 801f9e8:	0801faa5 	.word	0x0801faa5
 801f9ec:	0801faa5 	.word	0x0801faa5
 801f9f0:	0801fa7d 	.word	0x0801fa7d
 801f9f4:	0801faa5 	.word	0x0801faa5
 801f9f8:	0801faa5 	.word	0x0801faa5
 801f9fc:	0801faa5 	.word	0x0801faa5
 801fa00:	0801faa5 	.word	0x0801faa5
 801fa04:	0801faa5 	.word	0x0801faa5
 801fa08:	0801faa5 	.word	0x0801faa5
 801fa0c:	0801faa5 	.word	0x0801faa5
 801fa10:	0801fa85 	.word	0x0801fa85
 801fa14:	0801faa5 	.word	0x0801faa5
 801fa18:	0801faa5 	.word	0x0801faa5
 801fa1c:	0801faa5 	.word	0x0801faa5
 801fa20:	0801faa5 	.word	0x0801faa5
 801fa24:	0801faa5 	.word	0x0801faa5
 801fa28:	0801faa5 	.word	0x0801faa5
 801fa2c:	0801faa5 	.word	0x0801faa5
 801fa30:	0801fa8d 	.word	0x0801fa8d
 801fa34:	0801faa5 	.word	0x0801faa5
 801fa38:	0801faa5 	.word	0x0801faa5
 801fa3c:	0801faa5 	.word	0x0801faa5
 801fa40:	0801faa5 	.word	0x0801faa5
 801fa44:	0801faa5 	.word	0x0801faa5
 801fa48:	0801faa5 	.word	0x0801faa5
 801fa4c:	0801faa5 	.word	0x0801faa5
 801fa50:	0801fa95 	.word	0x0801fa95
 801fa54:	0801faa5 	.word	0x0801faa5
 801fa58:	0801faa5 	.word	0x0801faa5
 801fa5c:	0801faa5 	.word	0x0801faa5
 801fa60:	0801faa5 	.word	0x0801faa5
 801fa64:	0801faa5 	.word	0x0801faa5
 801fa68:	0801faa5 	.word	0x0801faa5
 801fa6c:	0801faa5 	.word	0x0801faa5
 801fa70:	0801fa9d 	.word	0x0801fa9d
 801fa74:	2301      	movs	r3, #1
 801fa76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fa7a:	e0bc      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fa7c:	2304      	movs	r3, #4
 801fa7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fa82:	e0b8      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fa84:	2308      	movs	r3, #8
 801fa86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fa8a:	e0b4      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fa8c:	2310      	movs	r3, #16
 801fa8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fa92:	e0b0      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fa94:	2320      	movs	r3, #32
 801fa96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fa9a:	e0ac      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fa9c:	2340      	movs	r3, #64	@ 0x40
 801fa9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801faa2:	e0a8      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801faa4:	2380      	movs	r3, #128	@ 0x80
 801faa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801faaa:	e0a4      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801faac:	697b      	ldr	r3, [r7, #20]
 801faae:	681b      	ldr	r3, [r3, #0]
 801fab0:	4a8f      	ldr	r2, [pc, #572]	@ (801fcf0 <UART_SetConfig+0x6a0>)
 801fab2:	4293      	cmp	r3, r2
 801fab4:	d130      	bne.n	801fb18 <UART_SetConfig+0x4c8>
 801fab6:	4b8d      	ldr	r3, [pc, #564]	@ (801fcec <UART_SetConfig+0x69c>)
 801fab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801faba:	f003 0307 	and.w	r3, r3, #7
 801fabe:	2b05      	cmp	r3, #5
 801fac0:	d826      	bhi.n	801fb10 <UART_SetConfig+0x4c0>
 801fac2:	a201      	add	r2, pc, #4	@ (adr r2, 801fac8 <UART_SetConfig+0x478>)
 801fac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fac8:	0801fae1 	.word	0x0801fae1
 801facc:	0801fae9 	.word	0x0801fae9
 801fad0:	0801faf1 	.word	0x0801faf1
 801fad4:	0801faf9 	.word	0x0801faf9
 801fad8:	0801fb01 	.word	0x0801fb01
 801fadc:	0801fb09 	.word	0x0801fb09
 801fae0:	2300      	movs	r3, #0
 801fae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fae6:	e086      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fae8:	2304      	movs	r3, #4
 801faea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801faee:	e082      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801faf0:	2308      	movs	r3, #8
 801faf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801faf6:	e07e      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801faf8:	2310      	movs	r3, #16
 801fafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fafe:	e07a      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fb00:	2320      	movs	r3, #32
 801fb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb06:	e076      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fb08:	2340      	movs	r3, #64	@ 0x40
 801fb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb0e:	e072      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fb10:	2380      	movs	r3, #128	@ 0x80
 801fb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb16:	e06e      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fb18:	697b      	ldr	r3, [r7, #20]
 801fb1a:	681b      	ldr	r3, [r3, #0]
 801fb1c:	4a75      	ldr	r2, [pc, #468]	@ (801fcf4 <UART_SetConfig+0x6a4>)
 801fb1e:	4293      	cmp	r3, r2
 801fb20:	d130      	bne.n	801fb84 <UART_SetConfig+0x534>
 801fb22:	4b72      	ldr	r3, [pc, #456]	@ (801fcec <UART_SetConfig+0x69c>)
 801fb24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fb26:	f003 0307 	and.w	r3, r3, #7
 801fb2a:	2b05      	cmp	r3, #5
 801fb2c:	d826      	bhi.n	801fb7c <UART_SetConfig+0x52c>
 801fb2e:	a201      	add	r2, pc, #4	@ (adr r2, 801fb34 <UART_SetConfig+0x4e4>)
 801fb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb34:	0801fb4d 	.word	0x0801fb4d
 801fb38:	0801fb55 	.word	0x0801fb55
 801fb3c:	0801fb5d 	.word	0x0801fb5d
 801fb40:	0801fb65 	.word	0x0801fb65
 801fb44:	0801fb6d 	.word	0x0801fb6d
 801fb48:	0801fb75 	.word	0x0801fb75
 801fb4c:	2300      	movs	r3, #0
 801fb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb52:	e050      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fb54:	2304      	movs	r3, #4
 801fb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb5a:	e04c      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fb5c:	2308      	movs	r3, #8
 801fb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb62:	e048      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fb64:	2310      	movs	r3, #16
 801fb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb6a:	e044      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fb6c:	2320      	movs	r3, #32
 801fb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb72:	e040      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fb74:	2340      	movs	r3, #64	@ 0x40
 801fb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb7a:	e03c      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fb7c:	2380      	movs	r3, #128	@ 0x80
 801fb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb82:	e038      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fb84:	697b      	ldr	r3, [r7, #20]
 801fb86:	681b      	ldr	r3, [r3, #0]
 801fb88:	4a5b      	ldr	r2, [pc, #364]	@ (801fcf8 <UART_SetConfig+0x6a8>)
 801fb8a:	4293      	cmp	r3, r2
 801fb8c:	d130      	bne.n	801fbf0 <UART_SetConfig+0x5a0>
 801fb8e:	4b57      	ldr	r3, [pc, #348]	@ (801fcec <UART_SetConfig+0x69c>)
 801fb90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fb92:	f003 0307 	and.w	r3, r3, #7
 801fb96:	2b05      	cmp	r3, #5
 801fb98:	d826      	bhi.n	801fbe8 <UART_SetConfig+0x598>
 801fb9a:	a201      	add	r2, pc, #4	@ (adr r2, 801fba0 <UART_SetConfig+0x550>)
 801fb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fba0:	0801fbb9 	.word	0x0801fbb9
 801fba4:	0801fbc1 	.word	0x0801fbc1
 801fba8:	0801fbc9 	.word	0x0801fbc9
 801fbac:	0801fbd1 	.word	0x0801fbd1
 801fbb0:	0801fbd9 	.word	0x0801fbd9
 801fbb4:	0801fbe1 	.word	0x0801fbe1
 801fbb8:	2302      	movs	r3, #2
 801fbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbbe:	e01a      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fbc0:	2304      	movs	r3, #4
 801fbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbc6:	e016      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fbc8:	2308      	movs	r3, #8
 801fbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbce:	e012      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fbd0:	2310      	movs	r3, #16
 801fbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbd6:	e00e      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fbd8:	2320      	movs	r3, #32
 801fbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbde:	e00a      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fbe0:	2340      	movs	r3, #64	@ 0x40
 801fbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbe6:	e006      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fbe8:	2380      	movs	r3, #128	@ 0x80
 801fbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbee:	e002      	b.n	801fbf6 <UART_SetConfig+0x5a6>
 801fbf0:	2380      	movs	r3, #128	@ 0x80
 801fbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801fbf6:	697b      	ldr	r3, [r7, #20]
 801fbf8:	681b      	ldr	r3, [r3, #0]
 801fbfa:	4a3f      	ldr	r2, [pc, #252]	@ (801fcf8 <UART_SetConfig+0x6a8>)
 801fbfc:	4293      	cmp	r3, r2
 801fbfe:	f040 80f8 	bne.w	801fdf2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801fc02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801fc06:	2b20      	cmp	r3, #32
 801fc08:	dc46      	bgt.n	801fc98 <UART_SetConfig+0x648>
 801fc0a:	2b02      	cmp	r3, #2
 801fc0c:	f2c0 8082 	blt.w	801fd14 <UART_SetConfig+0x6c4>
 801fc10:	3b02      	subs	r3, #2
 801fc12:	2b1e      	cmp	r3, #30
 801fc14:	d87e      	bhi.n	801fd14 <UART_SetConfig+0x6c4>
 801fc16:	a201      	add	r2, pc, #4	@ (adr r2, 801fc1c <UART_SetConfig+0x5cc>)
 801fc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fc1c:	0801fc9f 	.word	0x0801fc9f
 801fc20:	0801fd15 	.word	0x0801fd15
 801fc24:	0801fca7 	.word	0x0801fca7
 801fc28:	0801fd15 	.word	0x0801fd15
 801fc2c:	0801fd15 	.word	0x0801fd15
 801fc30:	0801fd15 	.word	0x0801fd15
 801fc34:	0801fcb7 	.word	0x0801fcb7
 801fc38:	0801fd15 	.word	0x0801fd15
 801fc3c:	0801fd15 	.word	0x0801fd15
 801fc40:	0801fd15 	.word	0x0801fd15
 801fc44:	0801fd15 	.word	0x0801fd15
 801fc48:	0801fd15 	.word	0x0801fd15
 801fc4c:	0801fd15 	.word	0x0801fd15
 801fc50:	0801fd15 	.word	0x0801fd15
 801fc54:	0801fcc7 	.word	0x0801fcc7
 801fc58:	0801fd15 	.word	0x0801fd15
 801fc5c:	0801fd15 	.word	0x0801fd15
 801fc60:	0801fd15 	.word	0x0801fd15
 801fc64:	0801fd15 	.word	0x0801fd15
 801fc68:	0801fd15 	.word	0x0801fd15
 801fc6c:	0801fd15 	.word	0x0801fd15
 801fc70:	0801fd15 	.word	0x0801fd15
 801fc74:	0801fd15 	.word	0x0801fd15
 801fc78:	0801fd15 	.word	0x0801fd15
 801fc7c:	0801fd15 	.word	0x0801fd15
 801fc80:	0801fd15 	.word	0x0801fd15
 801fc84:	0801fd15 	.word	0x0801fd15
 801fc88:	0801fd15 	.word	0x0801fd15
 801fc8c:	0801fd15 	.word	0x0801fd15
 801fc90:	0801fd15 	.word	0x0801fd15
 801fc94:	0801fd07 	.word	0x0801fd07
 801fc98:	2b40      	cmp	r3, #64	@ 0x40
 801fc9a:	d037      	beq.n	801fd0c <UART_SetConfig+0x6bc>
 801fc9c:	e03a      	b.n	801fd14 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801fc9e:	f7fe fe57 	bl	801e950 <HAL_RCCEx_GetD3PCLK1Freq>
 801fca2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801fca4:	e03c      	b.n	801fd20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801fca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801fcaa:	4618      	mov	r0, r3
 801fcac:	f7fe fe66 	bl	801e97c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801fcb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fcb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fcb4:	e034      	b.n	801fd20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801fcb6:	f107 0318 	add.w	r3, r7, #24
 801fcba:	4618      	mov	r0, r3
 801fcbc:	f7fe ffb2 	bl	801ec24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801fcc0:	69fb      	ldr	r3, [r7, #28]
 801fcc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fcc4:	e02c      	b.n	801fd20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801fcc6:	4b09      	ldr	r3, [pc, #36]	@ (801fcec <UART_SetConfig+0x69c>)
 801fcc8:	681b      	ldr	r3, [r3, #0]
 801fcca:	f003 0320 	and.w	r3, r3, #32
 801fcce:	2b00      	cmp	r3, #0
 801fcd0:	d016      	beq.n	801fd00 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801fcd2:	4b06      	ldr	r3, [pc, #24]	@ (801fcec <UART_SetConfig+0x69c>)
 801fcd4:	681b      	ldr	r3, [r3, #0]
 801fcd6:	08db      	lsrs	r3, r3, #3
 801fcd8:	f003 0303 	and.w	r3, r3, #3
 801fcdc:	4a07      	ldr	r2, [pc, #28]	@ (801fcfc <UART_SetConfig+0x6ac>)
 801fcde:	fa22 f303 	lsr.w	r3, r2, r3
 801fce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801fce4:	e01c      	b.n	801fd20 <UART_SetConfig+0x6d0>
 801fce6:	bf00      	nop
 801fce8:	40011400 	.word	0x40011400
 801fcec:	58024400 	.word	0x58024400
 801fcf0:	40007800 	.word	0x40007800
 801fcf4:	40007c00 	.word	0x40007c00
 801fcf8:	58000c00 	.word	0x58000c00
 801fcfc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801fd00:	4b9d      	ldr	r3, [pc, #628]	@ (801ff78 <UART_SetConfig+0x928>)
 801fd02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fd04:	e00c      	b.n	801fd20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801fd06:	4b9d      	ldr	r3, [pc, #628]	@ (801ff7c <UART_SetConfig+0x92c>)
 801fd08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fd0a:	e009      	b.n	801fd20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fd0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801fd10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fd12:	e005      	b.n	801fd20 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801fd14:	2300      	movs	r3, #0
 801fd16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801fd18:	2301      	movs	r3, #1
 801fd1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801fd1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801fd20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	f000 81de 	beq.w	80200e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801fd28:	697b      	ldr	r3, [r7, #20]
 801fd2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fd2c:	4a94      	ldr	r2, [pc, #592]	@ (801ff80 <UART_SetConfig+0x930>)
 801fd2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fd32:	461a      	mov	r2, r3
 801fd34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fd36:	fbb3 f3f2 	udiv	r3, r3, r2
 801fd3a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801fd3c:	697b      	ldr	r3, [r7, #20]
 801fd3e:	685a      	ldr	r2, [r3, #4]
 801fd40:	4613      	mov	r3, r2
 801fd42:	005b      	lsls	r3, r3, #1
 801fd44:	4413      	add	r3, r2
 801fd46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801fd48:	429a      	cmp	r2, r3
 801fd4a:	d305      	bcc.n	801fd58 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801fd4c:	697b      	ldr	r3, [r7, #20]
 801fd4e:	685b      	ldr	r3, [r3, #4]
 801fd50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801fd52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801fd54:	429a      	cmp	r2, r3
 801fd56:	d903      	bls.n	801fd60 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801fd58:	2301      	movs	r3, #1
 801fd5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801fd5e:	e1c1      	b.n	80200e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fd60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fd62:	2200      	movs	r2, #0
 801fd64:	60bb      	str	r3, [r7, #8]
 801fd66:	60fa      	str	r2, [r7, #12]
 801fd68:	697b      	ldr	r3, [r7, #20]
 801fd6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fd6c:	4a84      	ldr	r2, [pc, #528]	@ (801ff80 <UART_SetConfig+0x930>)
 801fd6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fd72:	b29b      	uxth	r3, r3
 801fd74:	2200      	movs	r2, #0
 801fd76:	603b      	str	r3, [r7, #0]
 801fd78:	607a      	str	r2, [r7, #4]
 801fd7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fd7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801fd82:	f7e0 fd21 	bl	80007c8 <__aeabi_uldivmod>
 801fd86:	4602      	mov	r2, r0
 801fd88:	460b      	mov	r3, r1
 801fd8a:	4610      	mov	r0, r2
 801fd8c:	4619      	mov	r1, r3
 801fd8e:	f04f 0200 	mov.w	r2, #0
 801fd92:	f04f 0300 	mov.w	r3, #0
 801fd96:	020b      	lsls	r3, r1, #8
 801fd98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801fd9c:	0202      	lsls	r2, r0, #8
 801fd9e:	6979      	ldr	r1, [r7, #20]
 801fda0:	6849      	ldr	r1, [r1, #4]
 801fda2:	0849      	lsrs	r1, r1, #1
 801fda4:	2000      	movs	r0, #0
 801fda6:	460c      	mov	r4, r1
 801fda8:	4605      	mov	r5, r0
 801fdaa:	eb12 0804 	adds.w	r8, r2, r4
 801fdae:	eb43 0905 	adc.w	r9, r3, r5
 801fdb2:	697b      	ldr	r3, [r7, #20]
 801fdb4:	685b      	ldr	r3, [r3, #4]
 801fdb6:	2200      	movs	r2, #0
 801fdb8:	469a      	mov	sl, r3
 801fdba:	4693      	mov	fp, r2
 801fdbc:	4652      	mov	r2, sl
 801fdbe:	465b      	mov	r3, fp
 801fdc0:	4640      	mov	r0, r8
 801fdc2:	4649      	mov	r1, r9
 801fdc4:	f7e0 fd00 	bl	80007c8 <__aeabi_uldivmod>
 801fdc8:	4602      	mov	r2, r0
 801fdca:	460b      	mov	r3, r1
 801fdcc:	4613      	mov	r3, r2
 801fdce:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801fdd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fdd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801fdd6:	d308      	bcc.n	801fdea <UART_SetConfig+0x79a>
 801fdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fdda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801fdde:	d204      	bcs.n	801fdea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801fde0:	697b      	ldr	r3, [r7, #20]
 801fde2:	681b      	ldr	r3, [r3, #0]
 801fde4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801fde6:	60da      	str	r2, [r3, #12]
 801fde8:	e17c      	b.n	80200e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801fdea:	2301      	movs	r3, #1
 801fdec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801fdf0:	e178      	b.n	80200e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801fdf2:	697b      	ldr	r3, [r7, #20]
 801fdf4:	69db      	ldr	r3, [r3, #28]
 801fdf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801fdfa:	f040 80c5 	bne.w	801ff88 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801fdfe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801fe02:	2b20      	cmp	r3, #32
 801fe04:	dc48      	bgt.n	801fe98 <UART_SetConfig+0x848>
 801fe06:	2b00      	cmp	r3, #0
 801fe08:	db7b      	blt.n	801ff02 <UART_SetConfig+0x8b2>
 801fe0a:	2b20      	cmp	r3, #32
 801fe0c:	d879      	bhi.n	801ff02 <UART_SetConfig+0x8b2>
 801fe0e:	a201      	add	r2, pc, #4	@ (adr r2, 801fe14 <UART_SetConfig+0x7c4>)
 801fe10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe14:	0801fe9f 	.word	0x0801fe9f
 801fe18:	0801fea7 	.word	0x0801fea7
 801fe1c:	0801ff03 	.word	0x0801ff03
 801fe20:	0801ff03 	.word	0x0801ff03
 801fe24:	0801feaf 	.word	0x0801feaf
 801fe28:	0801ff03 	.word	0x0801ff03
 801fe2c:	0801ff03 	.word	0x0801ff03
 801fe30:	0801ff03 	.word	0x0801ff03
 801fe34:	0801febf 	.word	0x0801febf
 801fe38:	0801ff03 	.word	0x0801ff03
 801fe3c:	0801ff03 	.word	0x0801ff03
 801fe40:	0801ff03 	.word	0x0801ff03
 801fe44:	0801ff03 	.word	0x0801ff03
 801fe48:	0801ff03 	.word	0x0801ff03
 801fe4c:	0801ff03 	.word	0x0801ff03
 801fe50:	0801ff03 	.word	0x0801ff03
 801fe54:	0801fecf 	.word	0x0801fecf
 801fe58:	0801ff03 	.word	0x0801ff03
 801fe5c:	0801ff03 	.word	0x0801ff03
 801fe60:	0801ff03 	.word	0x0801ff03
 801fe64:	0801ff03 	.word	0x0801ff03
 801fe68:	0801ff03 	.word	0x0801ff03
 801fe6c:	0801ff03 	.word	0x0801ff03
 801fe70:	0801ff03 	.word	0x0801ff03
 801fe74:	0801ff03 	.word	0x0801ff03
 801fe78:	0801ff03 	.word	0x0801ff03
 801fe7c:	0801ff03 	.word	0x0801ff03
 801fe80:	0801ff03 	.word	0x0801ff03
 801fe84:	0801ff03 	.word	0x0801ff03
 801fe88:	0801ff03 	.word	0x0801ff03
 801fe8c:	0801ff03 	.word	0x0801ff03
 801fe90:	0801ff03 	.word	0x0801ff03
 801fe94:	0801fef5 	.word	0x0801fef5
 801fe98:	2b40      	cmp	r3, #64	@ 0x40
 801fe9a:	d02e      	beq.n	801fefa <UART_SetConfig+0x8aa>
 801fe9c:	e031      	b.n	801ff02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fe9e:	f7fd fb21 	bl	801d4e4 <HAL_RCC_GetPCLK1Freq>
 801fea2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801fea4:	e033      	b.n	801ff0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fea6:	f7fd fb33 	bl	801d510 <HAL_RCC_GetPCLK2Freq>
 801feaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801feac:	e02f      	b.n	801ff0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801feae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801feb2:	4618      	mov	r0, r3
 801feb4:	f7fe fd62 	bl	801e97c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801feb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801feba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801febc:	e027      	b.n	801ff0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801febe:	f107 0318 	add.w	r3, r7, #24
 801fec2:	4618      	mov	r0, r3
 801fec4:	f7fe feae 	bl	801ec24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801fec8:	69fb      	ldr	r3, [r7, #28]
 801feca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fecc:	e01f      	b.n	801ff0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801fece:	4b2d      	ldr	r3, [pc, #180]	@ (801ff84 <UART_SetConfig+0x934>)
 801fed0:	681b      	ldr	r3, [r3, #0]
 801fed2:	f003 0320 	and.w	r3, r3, #32
 801fed6:	2b00      	cmp	r3, #0
 801fed8:	d009      	beq.n	801feee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801feda:	4b2a      	ldr	r3, [pc, #168]	@ (801ff84 <UART_SetConfig+0x934>)
 801fedc:	681b      	ldr	r3, [r3, #0]
 801fede:	08db      	lsrs	r3, r3, #3
 801fee0:	f003 0303 	and.w	r3, r3, #3
 801fee4:	4a24      	ldr	r2, [pc, #144]	@ (801ff78 <UART_SetConfig+0x928>)
 801fee6:	fa22 f303 	lsr.w	r3, r2, r3
 801feea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801feec:	e00f      	b.n	801ff0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801feee:	4b22      	ldr	r3, [pc, #136]	@ (801ff78 <UART_SetConfig+0x928>)
 801fef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fef2:	e00c      	b.n	801ff0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801fef4:	4b21      	ldr	r3, [pc, #132]	@ (801ff7c <UART_SetConfig+0x92c>)
 801fef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fef8:	e009      	b.n	801ff0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fefa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801fefe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ff00:	e005      	b.n	801ff0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801ff02:	2300      	movs	r3, #0
 801ff04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801ff06:	2301      	movs	r3, #1
 801ff08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801ff0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801ff0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	f000 80e7 	beq.w	80200e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ff16:	697b      	ldr	r3, [r7, #20]
 801ff18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ff1a:	4a19      	ldr	r2, [pc, #100]	@ (801ff80 <UART_SetConfig+0x930>)
 801ff1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ff20:	461a      	mov	r2, r3
 801ff22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ff24:	fbb3 f3f2 	udiv	r3, r3, r2
 801ff28:	005a      	lsls	r2, r3, #1
 801ff2a:	697b      	ldr	r3, [r7, #20]
 801ff2c:	685b      	ldr	r3, [r3, #4]
 801ff2e:	085b      	lsrs	r3, r3, #1
 801ff30:	441a      	add	r2, r3
 801ff32:	697b      	ldr	r3, [r7, #20]
 801ff34:	685b      	ldr	r3, [r3, #4]
 801ff36:	fbb2 f3f3 	udiv	r3, r2, r3
 801ff3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ff3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ff3e:	2b0f      	cmp	r3, #15
 801ff40:	d916      	bls.n	801ff70 <UART_SetConfig+0x920>
 801ff42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ff44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ff48:	d212      	bcs.n	801ff70 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801ff4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ff4c:	b29b      	uxth	r3, r3
 801ff4e:	f023 030f 	bic.w	r3, r3, #15
 801ff52:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801ff54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ff56:	085b      	lsrs	r3, r3, #1
 801ff58:	b29b      	uxth	r3, r3
 801ff5a:	f003 0307 	and.w	r3, r3, #7
 801ff5e:	b29a      	uxth	r2, r3
 801ff60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801ff62:	4313      	orrs	r3, r2
 801ff64:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801ff66:	697b      	ldr	r3, [r7, #20]
 801ff68:	681b      	ldr	r3, [r3, #0]
 801ff6a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801ff6c:	60da      	str	r2, [r3, #12]
 801ff6e:	e0b9      	b.n	80200e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801ff70:	2301      	movs	r3, #1
 801ff72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801ff76:	e0b5      	b.n	80200e4 <UART_SetConfig+0xa94>
 801ff78:	03d09000 	.word	0x03d09000
 801ff7c:	003d0900 	.word	0x003d0900
 801ff80:	08035274 	.word	0x08035274
 801ff84:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801ff88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801ff8c:	2b20      	cmp	r3, #32
 801ff8e:	dc49      	bgt.n	8020024 <UART_SetConfig+0x9d4>
 801ff90:	2b00      	cmp	r3, #0
 801ff92:	db7c      	blt.n	802008e <UART_SetConfig+0xa3e>
 801ff94:	2b20      	cmp	r3, #32
 801ff96:	d87a      	bhi.n	802008e <UART_SetConfig+0xa3e>
 801ff98:	a201      	add	r2, pc, #4	@ (adr r2, 801ffa0 <UART_SetConfig+0x950>)
 801ff9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ff9e:	bf00      	nop
 801ffa0:	0802002b 	.word	0x0802002b
 801ffa4:	08020033 	.word	0x08020033
 801ffa8:	0802008f 	.word	0x0802008f
 801ffac:	0802008f 	.word	0x0802008f
 801ffb0:	0802003b 	.word	0x0802003b
 801ffb4:	0802008f 	.word	0x0802008f
 801ffb8:	0802008f 	.word	0x0802008f
 801ffbc:	0802008f 	.word	0x0802008f
 801ffc0:	0802004b 	.word	0x0802004b
 801ffc4:	0802008f 	.word	0x0802008f
 801ffc8:	0802008f 	.word	0x0802008f
 801ffcc:	0802008f 	.word	0x0802008f
 801ffd0:	0802008f 	.word	0x0802008f
 801ffd4:	0802008f 	.word	0x0802008f
 801ffd8:	0802008f 	.word	0x0802008f
 801ffdc:	0802008f 	.word	0x0802008f
 801ffe0:	0802005b 	.word	0x0802005b
 801ffe4:	0802008f 	.word	0x0802008f
 801ffe8:	0802008f 	.word	0x0802008f
 801ffec:	0802008f 	.word	0x0802008f
 801fff0:	0802008f 	.word	0x0802008f
 801fff4:	0802008f 	.word	0x0802008f
 801fff8:	0802008f 	.word	0x0802008f
 801fffc:	0802008f 	.word	0x0802008f
 8020000:	0802008f 	.word	0x0802008f
 8020004:	0802008f 	.word	0x0802008f
 8020008:	0802008f 	.word	0x0802008f
 802000c:	0802008f 	.word	0x0802008f
 8020010:	0802008f 	.word	0x0802008f
 8020014:	0802008f 	.word	0x0802008f
 8020018:	0802008f 	.word	0x0802008f
 802001c:	0802008f 	.word	0x0802008f
 8020020:	08020081 	.word	0x08020081
 8020024:	2b40      	cmp	r3, #64	@ 0x40
 8020026:	d02e      	beq.n	8020086 <UART_SetConfig+0xa36>
 8020028:	e031      	b.n	802008e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802002a:	f7fd fa5b 	bl	801d4e4 <HAL_RCC_GetPCLK1Freq>
 802002e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020030:	e033      	b.n	802009a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020032:	f7fd fa6d 	bl	801d510 <HAL_RCC_GetPCLK2Freq>
 8020036:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020038:	e02f      	b.n	802009a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802003a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802003e:	4618      	mov	r0, r3
 8020040:	f7fe fc9c 	bl	801e97c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020048:	e027      	b.n	802009a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802004a:	f107 0318 	add.w	r3, r7, #24
 802004e:	4618      	mov	r0, r3
 8020050:	f7fe fde8 	bl	801ec24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020054:	69fb      	ldr	r3, [r7, #28]
 8020056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020058:	e01f      	b.n	802009a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802005a:	4b2d      	ldr	r3, [pc, #180]	@ (8020110 <UART_SetConfig+0xac0>)
 802005c:	681b      	ldr	r3, [r3, #0]
 802005e:	f003 0320 	and.w	r3, r3, #32
 8020062:	2b00      	cmp	r3, #0
 8020064:	d009      	beq.n	802007a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020066:	4b2a      	ldr	r3, [pc, #168]	@ (8020110 <UART_SetConfig+0xac0>)
 8020068:	681b      	ldr	r3, [r3, #0]
 802006a:	08db      	lsrs	r3, r3, #3
 802006c:	f003 0303 	and.w	r3, r3, #3
 8020070:	4a28      	ldr	r2, [pc, #160]	@ (8020114 <UART_SetConfig+0xac4>)
 8020072:	fa22 f303 	lsr.w	r3, r2, r3
 8020076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020078:	e00f      	b.n	802009a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 802007a:	4b26      	ldr	r3, [pc, #152]	@ (8020114 <UART_SetConfig+0xac4>)
 802007c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802007e:	e00c      	b.n	802009a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020080:	4b25      	ldr	r3, [pc, #148]	@ (8020118 <UART_SetConfig+0xac8>)
 8020082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020084:	e009      	b.n	802009a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802008a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802008c:	e005      	b.n	802009a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 802008e:	2300      	movs	r3, #0
 8020090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020092:	2301      	movs	r3, #1
 8020094:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020098:	bf00      	nop
    }

    if (pclk != 0U)
 802009a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802009c:	2b00      	cmp	r3, #0
 802009e:	d021      	beq.n	80200e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80200a0:	697b      	ldr	r3, [r7, #20]
 80200a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80200a4:	4a1d      	ldr	r2, [pc, #116]	@ (802011c <UART_SetConfig+0xacc>)
 80200a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80200aa:	461a      	mov	r2, r3
 80200ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80200ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80200b2:	697b      	ldr	r3, [r7, #20]
 80200b4:	685b      	ldr	r3, [r3, #4]
 80200b6:	085b      	lsrs	r3, r3, #1
 80200b8:	441a      	add	r2, r3
 80200ba:	697b      	ldr	r3, [r7, #20]
 80200bc:	685b      	ldr	r3, [r3, #4]
 80200be:	fbb2 f3f3 	udiv	r3, r2, r3
 80200c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80200c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80200c6:	2b0f      	cmp	r3, #15
 80200c8:	d909      	bls.n	80200de <UART_SetConfig+0xa8e>
 80200ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80200cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80200d0:	d205      	bcs.n	80200de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80200d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80200d4:	b29a      	uxth	r2, r3
 80200d6:	697b      	ldr	r3, [r7, #20]
 80200d8:	681b      	ldr	r3, [r3, #0]
 80200da:	60da      	str	r2, [r3, #12]
 80200dc:	e002      	b.n	80200e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80200de:	2301      	movs	r3, #1
 80200e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80200e4:	697b      	ldr	r3, [r7, #20]
 80200e6:	2201      	movs	r2, #1
 80200e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80200ec:	697b      	ldr	r3, [r7, #20]
 80200ee:	2201      	movs	r2, #1
 80200f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80200f4:	697b      	ldr	r3, [r7, #20]
 80200f6:	2200      	movs	r2, #0
 80200f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80200fa:	697b      	ldr	r3, [r7, #20]
 80200fc:	2200      	movs	r2, #0
 80200fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8020100:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8020104:	4618      	mov	r0, r3
 8020106:	3748      	adds	r7, #72	@ 0x48
 8020108:	46bd      	mov	sp, r7
 802010a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802010e:	bf00      	nop
 8020110:	58024400 	.word	0x58024400
 8020114:	03d09000 	.word	0x03d09000
 8020118:	003d0900 	.word	0x003d0900
 802011c:	08035274 	.word	0x08035274

08020120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8020120:	b480      	push	{r7}
 8020122:	b083      	sub	sp, #12
 8020124:	af00      	add	r7, sp, #0
 8020126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8020128:	687b      	ldr	r3, [r7, #4]
 802012a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802012c:	f003 0308 	and.w	r3, r3, #8
 8020130:	2b00      	cmp	r3, #0
 8020132:	d00a      	beq.n	802014a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	681b      	ldr	r3, [r3, #0]
 8020138:	685b      	ldr	r3, [r3, #4]
 802013a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 802013e:	687b      	ldr	r3, [r7, #4]
 8020140:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	681b      	ldr	r3, [r3, #0]
 8020146:	430a      	orrs	r2, r1
 8020148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802014e:	f003 0301 	and.w	r3, r3, #1
 8020152:	2b00      	cmp	r3, #0
 8020154:	d00a      	beq.n	802016c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8020156:	687b      	ldr	r3, [r7, #4]
 8020158:	681b      	ldr	r3, [r3, #0]
 802015a:	685b      	ldr	r3, [r3, #4]
 802015c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020164:	687b      	ldr	r3, [r7, #4]
 8020166:	681b      	ldr	r3, [r3, #0]
 8020168:	430a      	orrs	r2, r1
 802016a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 802016c:	687b      	ldr	r3, [r7, #4]
 802016e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020170:	f003 0302 	and.w	r3, r3, #2
 8020174:	2b00      	cmp	r3, #0
 8020176:	d00a      	beq.n	802018e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	681b      	ldr	r3, [r3, #0]
 802017c:	685b      	ldr	r3, [r3, #4]
 802017e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8020182:	687b      	ldr	r3, [r7, #4]
 8020184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8020186:	687b      	ldr	r3, [r7, #4]
 8020188:	681b      	ldr	r3, [r3, #0]
 802018a:	430a      	orrs	r2, r1
 802018c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 802018e:	687b      	ldr	r3, [r7, #4]
 8020190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020192:	f003 0304 	and.w	r3, r3, #4
 8020196:	2b00      	cmp	r3, #0
 8020198:	d00a      	beq.n	80201b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 802019a:	687b      	ldr	r3, [r7, #4]
 802019c:	681b      	ldr	r3, [r3, #0]
 802019e:	685b      	ldr	r3, [r3, #4]
 80201a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80201a4:	687b      	ldr	r3, [r7, #4]
 80201a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	681b      	ldr	r3, [r3, #0]
 80201ac:	430a      	orrs	r2, r1
 80201ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80201b0:	687b      	ldr	r3, [r7, #4]
 80201b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80201b4:	f003 0310 	and.w	r3, r3, #16
 80201b8:	2b00      	cmp	r3, #0
 80201ba:	d00a      	beq.n	80201d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80201bc:	687b      	ldr	r3, [r7, #4]
 80201be:	681b      	ldr	r3, [r3, #0]
 80201c0:	689b      	ldr	r3, [r3, #8]
 80201c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80201ca:	687b      	ldr	r3, [r7, #4]
 80201cc:	681b      	ldr	r3, [r3, #0]
 80201ce:	430a      	orrs	r2, r1
 80201d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80201d2:	687b      	ldr	r3, [r7, #4]
 80201d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80201d6:	f003 0320 	and.w	r3, r3, #32
 80201da:	2b00      	cmp	r3, #0
 80201dc:	d00a      	beq.n	80201f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80201de:	687b      	ldr	r3, [r7, #4]
 80201e0:	681b      	ldr	r3, [r3, #0]
 80201e2:	689b      	ldr	r3, [r3, #8]
 80201e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80201e8:	687b      	ldr	r3, [r7, #4]
 80201ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	681b      	ldr	r3, [r3, #0]
 80201f0:	430a      	orrs	r2, r1
 80201f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80201f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80201fc:	2b00      	cmp	r3, #0
 80201fe:	d01a      	beq.n	8020236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8020200:	687b      	ldr	r3, [r7, #4]
 8020202:	681b      	ldr	r3, [r3, #0]
 8020204:	685b      	ldr	r3, [r3, #4]
 8020206:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 802020e:	687b      	ldr	r3, [r7, #4]
 8020210:	681b      	ldr	r3, [r3, #0]
 8020212:	430a      	orrs	r2, r1
 8020214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8020216:	687b      	ldr	r3, [r7, #4]
 8020218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802021a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802021e:	d10a      	bne.n	8020236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8020220:	687b      	ldr	r3, [r7, #4]
 8020222:	681b      	ldr	r3, [r3, #0]
 8020224:	685b      	ldr	r3, [r3, #4]
 8020226:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 802022e:	687b      	ldr	r3, [r7, #4]
 8020230:	681b      	ldr	r3, [r3, #0]
 8020232:	430a      	orrs	r2, r1
 8020234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802023a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802023e:	2b00      	cmp	r3, #0
 8020240:	d00a      	beq.n	8020258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8020242:	687b      	ldr	r3, [r7, #4]
 8020244:	681b      	ldr	r3, [r3, #0]
 8020246:	685b      	ldr	r3, [r3, #4]
 8020248:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 802024c:	687b      	ldr	r3, [r7, #4]
 802024e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	681b      	ldr	r3, [r3, #0]
 8020254:	430a      	orrs	r2, r1
 8020256:	605a      	str	r2, [r3, #4]
  }
}
 8020258:	bf00      	nop
 802025a:	370c      	adds	r7, #12
 802025c:	46bd      	mov	sp, r7
 802025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020262:	4770      	bx	lr

08020264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8020264:	b580      	push	{r7, lr}
 8020266:	b098      	sub	sp, #96	@ 0x60
 8020268:	af02      	add	r7, sp, #8
 802026a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802026c:	687b      	ldr	r3, [r7, #4]
 802026e:	2200      	movs	r2, #0
 8020270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8020274:	f7fb f9e8 	bl	801b648 <HAL_GetTick>
 8020278:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	681b      	ldr	r3, [r3, #0]
 802027e:	681b      	ldr	r3, [r3, #0]
 8020280:	f003 0308 	and.w	r3, r3, #8
 8020284:	2b08      	cmp	r3, #8
 8020286:	d12f      	bne.n	80202e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020288:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 802028c:	9300      	str	r3, [sp, #0]
 802028e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020290:	2200      	movs	r2, #0
 8020292:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8020296:	6878      	ldr	r0, [r7, #4]
 8020298:	f000 f88e 	bl	80203b8 <UART_WaitOnFlagUntilTimeout>
 802029c:	4603      	mov	r3, r0
 802029e:	2b00      	cmp	r3, #0
 80202a0:	d022      	beq.n	80202e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80202a2:	687b      	ldr	r3, [r7, #4]
 80202a4:	681b      	ldr	r3, [r3, #0]
 80202a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80202a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80202aa:	e853 3f00 	ldrex	r3, [r3]
 80202ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80202b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80202b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80202b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	681b      	ldr	r3, [r3, #0]
 80202bc:	461a      	mov	r2, r3
 80202be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80202c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80202c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80202c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80202c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80202c8:	e841 2300 	strex	r3, r2, [r1]
 80202cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80202ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80202d0:	2b00      	cmp	r3, #0
 80202d2:	d1e6      	bne.n	80202a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	2220      	movs	r2, #32
 80202d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80202dc:	687b      	ldr	r3, [r7, #4]
 80202de:	2200      	movs	r2, #0
 80202e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80202e4:	2303      	movs	r3, #3
 80202e6:	e063      	b.n	80203b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80202e8:	687b      	ldr	r3, [r7, #4]
 80202ea:	681b      	ldr	r3, [r3, #0]
 80202ec:	681b      	ldr	r3, [r3, #0]
 80202ee:	f003 0304 	and.w	r3, r3, #4
 80202f2:	2b04      	cmp	r3, #4
 80202f4:	d149      	bne.n	802038a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80202f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80202fa:	9300      	str	r3, [sp, #0]
 80202fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80202fe:	2200      	movs	r2, #0
 8020300:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8020304:	6878      	ldr	r0, [r7, #4]
 8020306:	f000 f857 	bl	80203b8 <UART_WaitOnFlagUntilTimeout>
 802030a:	4603      	mov	r3, r0
 802030c:	2b00      	cmp	r3, #0
 802030e:	d03c      	beq.n	802038a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	681b      	ldr	r3, [r3, #0]
 8020314:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020318:	e853 3f00 	ldrex	r3, [r3]
 802031c:	623b      	str	r3, [r7, #32]
   return(result);
 802031e:	6a3b      	ldr	r3, [r7, #32]
 8020320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8020324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	681b      	ldr	r3, [r3, #0]
 802032a:	461a      	mov	r2, r3
 802032c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802032e:	633b      	str	r3, [r7, #48]	@ 0x30
 8020330:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8020334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020336:	e841 2300 	strex	r3, r2, [r1]
 802033a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 802033c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802033e:	2b00      	cmp	r3, #0
 8020340:	d1e6      	bne.n	8020310 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020342:	687b      	ldr	r3, [r7, #4]
 8020344:	681b      	ldr	r3, [r3, #0]
 8020346:	3308      	adds	r3, #8
 8020348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802034a:	693b      	ldr	r3, [r7, #16]
 802034c:	e853 3f00 	ldrex	r3, [r3]
 8020350:	60fb      	str	r3, [r7, #12]
   return(result);
 8020352:	68fb      	ldr	r3, [r7, #12]
 8020354:	f023 0301 	bic.w	r3, r3, #1
 8020358:	64bb      	str	r3, [r7, #72]	@ 0x48
 802035a:	687b      	ldr	r3, [r7, #4]
 802035c:	681b      	ldr	r3, [r3, #0]
 802035e:	3308      	adds	r3, #8
 8020360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020362:	61fa      	str	r2, [r7, #28]
 8020364:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020366:	69b9      	ldr	r1, [r7, #24]
 8020368:	69fa      	ldr	r2, [r7, #28]
 802036a:	e841 2300 	strex	r3, r2, [r1]
 802036e:	617b      	str	r3, [r7, #20]
   return(result);
 8020370:	697b      	ldr	r3, [r7, #20]
 8020372:	2b00      	cmp	r3, #0
 8020374:	d1e5      	bne.n	8020342 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8020376:	687b      	ldr	r3, [r7, #4]
 8020378:	2220      	movs	r2, #32
 802037a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 802037e:	687b      	ldr	r3, [r7, #4]
 8020380:	2200      	movs	r2, #0
 8020382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8020386:	2303      	movs	r3, #3
 8020388:	e012      	b.n	80203b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802038a:	687b      	ldr	r3, [r7, #4]
 802038c:	2220      	movs	r2, #32
 802038e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	2220      	movs	r2, #32
 8020396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802039a:	687b      	ldr	r3, [r7, #4]
 802039c:	2200      	movs	r2, #0
 802039e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80203a0:	687b      	ldr	r3, [r7, #4]
 80203a2:	2200      	movs	r2, #0
 80203a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	2200      	movs	r2, #0
 80203aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80203ae:	2300      	movs	r3, #0
}
 80203b0:	4618      	mov	r0, r3
 80203b2:	3758      	adds	r7, #88	@ 0x58
 80203b4:	46bd      	mov	sp, r7
 80203b6:	bd80      	pop	{r7, pc}

080203b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80203b8:	b580      	push	{r7, lr}
 80203ba:	b084      	sub	sp, #16
 80203bc:	af00      	add	r7, sp, #0
 80203be:	60f8      	str	r0, [r7, #12]
 80203c0:	60b9      	str	r1, [r7, #8]
 80203c2:	603b      	str	r3, [r7, #0]
 80203c4:	4613      	mov	r3, r2
 80203c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80203c8:	e04f      	b.n	802046a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80203ca:	69bb      	ldr	r3, [r7, #24]
 80203cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80203d0:	d04b      	beq.n	802046a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80203d2:	f7fb f939 	bl	801b648 <HAL_GetTick>
 80203d6:	4602      	mov	r2, r0
 80203d8:	683b      	ldr	r3, [r7, #0]
 80203da:	1ad3      	subs	r3, r2, r3
 80203dc:	69ba      	ldr	r2, [r7, #24]
 80203de:	429a      	cmp	r2, r3
 80203e0:	d302      	bcc.n	80203e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80203e2:	69bb      	ldr	r3, [r7, #24]
 80203e4:	2b00      	cmp	r3, #0
 80203e6:	d101      	bne.n	80203ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80203e8:	2303      	movs	r3, #3
 80203ea:	e04e      	b.n	802048a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80203ec:	68fb      	ldr	r3, [r7, #12]
 80203ee:	681b      	ldr	r3, [r3, #0]
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	f003 0304 	and.w	r3, r3, #4
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	d037      	beq.n	802046a <UART_WaitOnFlagUntilTimeout+0xb2>
 80203fa:	68bb      	ldr	r3, [r7, #8]
 80203fc:	2b80      	cmp	r3, #128	@ 0x80
 80203fe:	d034      	beq.n	802046a <UART_WaitOnFlagUntilTimeout+0xb2>
 8020400:	68bb      	ldr	r3, [r7, #8]
 8020402:	2b40      	cmp	r3, #64	@ 0x40
 8020404:	d031      	beq.n	802046a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8020406:	68fb      	ldr	r3, [r7, #12]
 8020408:	681b      	ldr	r3, [r3, #0]
 802040a:	69db      	ldr	r3, [r3, #28]
 802040c:	f003 0308 	and.w	r3, r3, #8
 8020410:	2b08      	cmp	r3, #8
 8020412:	d110      	bne.n	8020436 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8020414:	68fb      	ldr	r3, [r7, #12]
 8020416:	681b      	ldr	r3, [r3, #0]
 8020418:	2208      	movs	r2, #8
 802041a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 802041c:	68f8      	ldr	r0, [r7, #12]
 802041e:	f000 f839 	bl	8020494 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8020422:	68fb      	ldr	r3, [r7, #12]
 8020424:	2208      	movs	r2, #8
 8020426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802042a:	68fb      	ldr	r3, [r7, #12]
 802042c:	2200      	movs	r2, #0
 802042e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8020432:	2301      	movs	r3, #1
 8020434:	e029      	b.n	802048a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8020436:	68fb      	ldr	r3, [r7, #12]
 8020438:	681b      	ldr	r3, [r3, #0]
 802043a:	69db      	ldr	r3, [r3, #28]
 802043c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8020440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8020444:	d111      	bne.n	802046a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8020446:	68fb      	ldr	r3, [r7, #12]
 8020448:	681b      	ldr	r3, [r3, #0]
 802044a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 802044e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8020450:	68f8      	ldr	r0, [r7, #12]
 8020452:	f000 f81f 	bl	8020494 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8020456:	68fb      	ldr	r3, [r7, #12]
 8020458:	2220      	movs	r2, #32
 802045a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802045e:	68fb      	ldr	r3, [r7, #12]
 8020460:	2200      	movs	r2, #0
 8020462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8020466:	2303      	movs	r3, #3
 8020468:	e00f      	b.n	802048a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802046a:	68fb      	ldr	r3, [r7, #12]
 802046c:	681b      	ldr	r3, [r3, #0]
 802046e:	69da      	ldr	r2, [r3, #28]
 8020470:	68bb      	ldr	r3, [r7, #8]
 8020472:	4013      	ands	r3, r2
 8020474:	68ba      	ldr	r2, [r7, #8]
 8020476:	429a      	cmp	r2, r3
 8020478:	bf0c      	ite	eq
 802047a:	2301      	moveq	r3, #1
 802047c:	2300      	movne	r3, #0
 802047e:	b2db      	uxtb	r3, r3
 8020480:	461a      	mov	r2, r3
 8020482:	79fb      	ldrb	r3, [r7, #7]
 8020484:	429a      	cmp	r2, r3
 8020486:	d0a0      	beq.n	80203ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8020488:	2300      	movs	r3, #0
}
 802048a:	4618      	mov	r0, r3
 802048c:	3710      	adds	r7, #16
 802048e:	46bd      	mov	sp, r7
 8020490:	bd80      	pop	{r7, pc}
	...

08020494 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8020494:	b480      	push	{r7}
 8020496:	b095      	sub	sp, #84	@ 0x54
 8020498:	af00      	add	r7, sp, #0
 802049a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	681b      	ldr	r3, [r3, #0]
 80204a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80204a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80204a4:	e853 3f00 	ldrex	r3, [r3]
 80204a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80204aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80204ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80204b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80204b2:	687b      	ldr	r3, [r7, #4]
 80204b4:	681b      	ldr	r3, [r3, #0]
 80204b6:	461a      	mov	r2, r3
 80204b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80204ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80204bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80204be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80204c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80204c2:	e841 2300 	strex	r3, r2, [r1]
 80204c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80204c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	d1e6      	bne.n	802049c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80204ce:	687b      	ldr	r3, [r7, #4]
 80204d0:	681b      	ldr	r3, [r3, #0]
 80204d2:	3308      	adds	r3, #8
 80204d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80204d6:	6a3b      	ldr	r3, [r7, #32]
 80204d8:	e853 3f00 	ldrex	r3, [r3]
 80204dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80204de:	69fa      	ldr	r2, [r7, #28]
 80204e0:	4b1e      	ldr	r3, [pc, #120]	@ (802055c <UART_EndRxTransfer+0xc8>)
 80204e2:	4013      	ands	r3, r2
 80204e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80204e6:	687b      	ldr	r3, [r7, #4]
 80204e8:	681b      	ldr	r3, [r3, #0]
 80204ea:	3308      	adds	r3, #8
 80204ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80204ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80204f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80204f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80204f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80204f6:	e841 2300 	strex	r3, r2, [r1]
 80204fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80204fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80204fe:	2b00      	cmp	r3, #0
 8020500:	d1e5      	bne.n	80204ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020506:	2b01      	cmp	r3, #1
 8020508:	d118      	bne.n	802053c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802050a:	687b      	ldr	r3, [r7, #4]
 802050c:	681b      	ldr	r3, [r3, #0]
 802050e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020510:	68fb      	ldr	r3, [r7, #12]
 8020512:	e853 3f00 	ldrex	r3, [r3]
 8020516:	60bb      	str	r3, [r7, #8]
   return(result);
 8020518:	68bb      	ldr	r3, [r7, #8]
 802051a:	f023 0310 	bic.w	r3, r3, #16
 802051e:	647b      	str	r3, [r7, #68]	@ 0x44
 8020520:	687b      	ldr	r3, [r7, #4]
 8020522:	681b      	ldr	r3, [r3, #0]
 8020524:	461a      	mov	r2, r3
 8020526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020528:	61bb      	str	r3, [r7, #24]
 802052a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802052c:	6979      	ldr	r1, [r7, #20]
 802052e:	69ba      	ldr	r2, [r7, #24]
 8020530:	e841 2300 	strex	r3, r2, [r1]
 8020534:	613b      	str	r3, [r7, #16]
   return(result);
 8020536:	693b      	ldr	r3, [r7, #16]
 8020538:	2b00      	cmp	r3, #0
 802053a:	d1e6      	bne.n	802050a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802053c:	687b      	ldr	r3, [r7, #4]
 802053e:	2220      	movs	r2, #32
 8020540:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	2200      	movs	r2, #0
 8020548:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	2200      	movs	r2, #0
 802054e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8020550:	bf00      	nop
 8020552:	3754      	adds	r7, #84	@ 0x54
 8020554:	46bd      	mov	sp, r7
 8020556:	f85d 7b04 	ldr.w	r7, [sp], #4
 802055a:	4770      	bx	lr
 802055c:	effffffe 	.word	0xeffffffe

08020560 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8020560:	b580      	push	{r7, lr}
 8020562:	b086      	sub	sp, #24
 8020564:	af00      	add	r7, sp, #0
 8020566:	60f8      	str	r0, [r7, #12]
 8020568:	60b9      	str	r1, [r7, #8]
 802056a:	607a      	str	r2, [r7, #4]
 802056c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 802056e:	68fb      	ldr	r3, [r7, #12]
 8020570:	2b00      	cmp	r3, #0
 8020572:	d101      	bne.n	8020578 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8020574:	2301      	movs	r3, #1
 8020576:	e056      	b.n	8020626 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8020578:	68fb      	ldr	r3, [r7, #12]
 802057a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802057e:	2b00      	cmp	r3, #0
 8020580:	d106      	bne.n	8020590 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8020582:	68fb      	ldr	r3, [r7, #12]
 8020584:	2200      	movs	r2, #0
 8020586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 802058a:	68f8      	ldr	r0, [r7, #12]
 802058c:	f7fa fdf4 	bl	801b178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8020590:	68fb      	ldr	r3, [r7, #12]
 8020592:	2224      	movs	r2, #36	@ 0x24
 8020594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8020598:	68fb      	ldr	r3, [r7, #12]
 802059a:	681b      	ldr	r3, [r3, #0]
 802059c:	681a      	ldr	r2, [r3, #0]
 802059e:	68fb      	ldr	r3, [r7, #12]
 80205a0:	681b      	ldr	r3, [r3, #0]
 80205a2:	f022 0201 	bic.w	r2, r2, #1
 80205a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80205a8:	68fb      	ldr	r3, [r7, #12]
 80205aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80205ac:	2b00      	cmp	r3, #0
 80205ae:	d002      	beq.n	80205b6 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80205b0:	68f8      	ldr	r0, [r7, #12]
 80205b2:	f7ff fdb5 	bl	8020120 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80205b6:	68f8      	ldr	r0, [r7, #12]
 80205b8:	f7ff f84a 	bl	801f650 <UART_SetConfig>
 80205bc:	4603      	mov	r3, r0
 80205be:	2b01      	cmp	r3, #1
 80205c0:	d101      	bne.n	80205c6 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 80205c2:	2301      	movs	r3, #1
 80205c4:	e02f      	b.n	8020626 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80205c6:	68fb      	ldr	r3, [r7, #12]
 80205c8:	681b      	ldr	r3, [r3, #0]
 80205ca:	689a      	ldr	r2, [r3, #8]
 80205cc:	68fb      	ldr	r3, [r7, #12]
 80205ce:	681b      	ldr	r3, [r3, #0]
 80205d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80205d4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80205d6:	68fb      	ldr	r3, [r7, #12]
 80205d8:	681b      	ldr	r3, [r3, #0]
 80205da:	689b      	ldr	r3, [r3, #8]
 80205dc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80205e0:	68fb      	ldr	r3, [r7, #12]
 80205e2:	681b      	ldr	r3, [r3, #0]
 80205e4:	68ba      	ldr	r2, [r7, #8]
 80205e6:	430a      	orrs	r2, r1
 80205e8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80205ea:	687b      	ldr	r3, [r7, #4]
 80205ec:	055b      	lsls	r3, r3, #21
 80205ee:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80205f0:	683b      	ldr	r3, [r7, #0]
 80205f2:	041b      	lsls	r3, r3, #16
 80205f4:	697a      	ldr	r2, [r7, #20]
 80205f6:	4313      	orrs	r3, r2
 80205f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80205fa:	68fb      	ldr	r3, [r7, #12]
 80205fc:	681b      	ldr	r3, [r3, #0]
 80205fe:	681a      	ldr	r2, [r3, #0]
 8020600:	4b0b      	ldr	r3, [pc, #44]	@ (8020630 <HAL_RS485Ex_Init+0xd0>)
 8020602:	4013      	ands	r3, r2
 8020604:	68fa      	ldr	r2, [r7, #12]
 8020606:	6812      	ldr	r2, [r2, #0]
 8020608:	6979      	ldr	r1, [r7, #20]
 802060a:	430b      	orrs	r3, r1
 802060c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 802060e:	68fb      	ldr	r3, [r7, #12]
 8020610:	681b      	ldr	r3, [r3, #0]
 8020612:	681a      	ldr	r2, [r3, #0]
 8020614:	68fb      	ldr	r3, [r7, #12]
 8020616:	681b      	ldr	r3, [r3, #0]
 8020618:	f042 0201 	orr.w	r2, r2, #1
 802061c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 802061e:	68f8      	ldr	r0, [r7, #12]
 8020620:	f7ff fe20 	bl	8020264 <UART_CheckIdleState>
 8020624:	4603      	mov	r3, r0
}
 8020626:	4618      	mov	r0, r3
 8020628:	3718      	adds	r7, #24
 802062a:	46bd      	mov	sp, r7
 802062c:	bd80      	pop	{r7, pc}
 802062e:	bf00      	nop
 8020630:	fc00ffff 	.word	0xfc00ffff

08020634 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8020634:	b480      	push	{r7}
 8020636:	b085      	sub	sp, #20
 8020638:	af00      	add	r7, sp, #0
 802063a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802063c:	687b      	ldr	r3, [r7, #4]
 802063e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8020642:	2b01      	cmp	r3, #1
 8020644:	d101      	bne.n	802064a <HAL_UARTEx_DisableFifoMode+0x16>
 8020646:	2302      	movs	r3, #2
 8020648:	e027      	b.n	802069a <HAL_UARTEx_DisableFifoMode+0x66>
 802064a:	687b      	ldr	r3, [r7, #4]
 802064c:	2201      	movs	r2, #1
 802064e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8020652:	687b      	ldr	r3, [r7, #4]
 8020654:	2224      	movs	r2, #36	@ 0x24
 8020656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802065a:	687b      	ldr	r3, [r7, #4]
 802065c:	681b      	ldr	r3, [r3, #0]
 802065e:	681b      	ldr	r3, [r3, #0]
 8020660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020662:	687b      	ldr	r3, [r7, #4]
 8020664:	681b      	ldr	r3, [r3, #0]
 8020666:	681a      	ldr	r2, [r3, #0]
 8020668:	687b      	ldr	r3, [r7, #4]
 802066a:	681b      	ldr	r3, [r3, #0]
 802066c:	f022 0201 	bic.w	r2, r2, #1
 8020670:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8020672:	68fb      	ldr	r3, [r7, #12]
 8020674:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8020678:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802067a:	687b      	ldr	r3, [r7, #4]
 802067c:	2200      	movs	r2, #0
 802067e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020680:	687b      	ldr	r3, [r7, #4]
 8020682:	681b      	ldr	r3, [r3, #0]
 8020684:	68fa      	ldr	r2, [r7, #12]
 8020686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020688:	687b      	ldr	r3, [r7, #4]
 802068a:	2220      	movs	r2, #32
 802068c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	2200      	movs	r2, #0
 8020694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8020698:	2300      	movs	r3, #0
}
 802069a:	4618      	mov	r0, r3
 802069c:	3714      	adds	r7, #20
 802069e:	46bd      	mov	sp, r7
 80206a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206a4:	4770      	bx	lr

080206a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80206a6:	b580      	push	{r7, lr}
 80206a8:	b084      	sub	sp, #16
 80206aa:	af00      	add	r7, sp, #0
 80206ac:	6078      	str	r0, [r7, #4]
 80206ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80206b0:	687b      	ldr	r3, [r7, #4]
 80206b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80206b6:	2b01      	cmp	r3, #1
 80206b8:	d101      	bne.n	80206be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80206ba:	2302      	movs	r3, #2
 80206bc:	e02d      	b.n	802071a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80206be:	687b      	ldr	r3, [r7, #4]
 80206c0:	2201      	movs	r2, #1
 80206c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80206c6:	687b      	ldr	r3, [r7, #4]
 80206c8:	2224      	movs	r2, #36	@ 0x24
 80206ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80206ce:	687b      	ldr	r3, [r7, #4]
 80206d0:	681b      	ldr	r3, [r3, #0]
 80206d2:	681b      	ldr	r3, [r3, #0]
 80206d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80206d6:	687b      	ldr	r3, [r7, #4]
 80206d8:	681b      	ldr	r3, [r3, #0]
 80206da:	681a      	ldr	r2, [r3, #0]
 80206dc:	687b      	ldr	r3, [r7, #4]
 80206de:	681b      	ldr	r3, [r3, #0]
 80206e0:	f022 0201 	bic.w	r2, r2, #1
 80206e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80206e6:	687b      	ldr	r3, [r7, #4]
 80206e8:	681b      	ldr	r3, [r3, #0]
 80206ea:	689b      	ldr	r3, [r3, #8]
 80206ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80206f0:	687b      	ldr	r3, [r7, #4]
 80206f2:	681b      	ldr	r3, [r3, #0]
 80206f4:	683a      	ldr	r2, [r7, #0]
 80206f6:	430a      	orrs	r2, r1
 80206f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80206fa:	6878      	ldr	r0, [r7, #4]
 80206fc:	f000 f850 	bl	80207a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020700:	687b      	ldr	r3, [r7, #4]
 8020702:	681b      	ldr	r3, [r3, #0]
 8020704:	68fa      	ldr	r2, [r7, #12]
 8020706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020708:	687b      	ldr	r3, [r7, #4]
 802070a:	2220      	movs	r2, #32
 802070c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020710:	687b      	ldr	r3, [r7, #4]
 8020712:	2200      	movs	r2, #0
 8020714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8020718:	2300      	movs	r3, #0
}
 802071a:	4618      	mov	r0, r3
 802071c:	3710      	adds	r7, #16
 802071e:	46bd      	mov	sp, r7
 8020720:	bd80      	pop	{r7, pc}

08020722 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020722:	b580      	push	{r7, lr}
 8020724:	b084      	sub	sp, #16
 8020726:	af00      	add	r7, sp, #0
 8020728:	6078      	str	r0, [r7, #4]
 802072a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8020732:	2b01      	cmp	r3, #1
 8020734:	d101      	bne.n	802073a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8020736:	2302      	movs	r3, #2
 8020738:	e02d      	b.n	8020796 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802073a:	687b      	ldr	r3, [r7, #4]
 802073c:	2201      	movs	r2, #1
 802073e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8020742:	687b      	ldr	r3, [r7, #4]
 8020744:	2224      	movs	r2, #36	@ 0x24
 8020746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802074a:	687b      	ldr	r3, [r7, #4]
 802074c:	681b      	ldr	r3, [r3, #0]
 802074e:	681b      	ldr	r3, [r3, #0]
 8020750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	681a      	ldr	r2, [r3, #0]
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	681b      	ldr	r3, [r3, #0]
 802075c:	f022 0201 	bic.w	r2, r2, #1
 8020760:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	681b      	ldr	r3, [r3, #0]
 8020766:	689b      	ldr	r3, [r3, #8]
 8020768:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	681b      	ldr	r3, [r3, #0]
 8020770:	683a      	ldr	r2, [r7, #0]
 8020772:	430a      	orrs	r2, r1
 8020774:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020776:	6878      	ldr	r0, [r7, #4]
 8020778:	f000 f812 	bl	80207a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802077c:	687b      	ldr	r3, [r7, #4]
 802077e:	681b      	ldr	r3, [r3, #0]
 8020780:	68fa      	ldr	r2, [r7, #12]
 8020782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020784:	687b      	ldr	r3, [r7, #4]
 8020786:	2220      	movs	r2, #32
 8020788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802078c:	687b      	ldr	r3, [r7, #4]
 802078e:	2200      	movs	r2, #0
 8020790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8020794:	2300      	movs	r3, #0
}
 8020796:	4618      	mov	r0, r3
 8020798:	3710      	adds	r7, #16
 802079a:	46bd      	mov	sp, r7
 802079c:	bd80      	pop	{r7, pc}
	...

080207a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80207a0:	b480      	push	{r7}
 80207a2:	b085      	sub	sp, #20
 80207a4:	af00      	add	r7, sp, #0
 80207a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80207a8:	687b      	ldr	r3, [r7, #4]
 80207aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80207ac:	2b00      	cmp	r3, #0
 80207ae:	d108      	bne.n	80207c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80207b0:	687b      	ldr	r3, [r7, #4]
 80207b2:	2201      	movs	r2, #1
 80207b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80207b8:	687b      	ldr	r3, [r7, #4]
 80207ba:	2201      	movs	r2, #1
 80207bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80207c0:	e031      	b.n	8020826 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80207c2:	2310      	movs	r3, #16
 80207c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80207c6:	2310      	movs	r3, #16
 80207c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80207ca:	687b      	ldr	r3, [r7, #4]
 80207cc:	681b      	ldr	r3, [r3, #0]
 80207ce:	689b      	ldr	r3, [r3, #8]
 80207d0:	0e5b      	lsrs	r3, r3, #25
 80207d2:	b2db      	uxtb	r3, r3
 80207d4:	f003 0307 	and.w	r3, r3, #7
 80207d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80207da:	687b      	ldr	r3, [r7, #4]
 80207dc:	681b      	ldr	r3, [r3, #0]
 80207de:	689b      	ldr	r3, [r3, #8]
 80207e0:	0f5b      	lsrs	r3, r3, #29
 80207e2:	b2db      	uxtb	r3, r3
 80207e4:	f003 0307 	and.w	r3, r3, #7
 80207e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80207ea:	7bbb      	ldrb	r3, [r7, #14]
 80207ec:	7b3a      	ldrb	r2, [r7, #12]
 80207ee:	4911      	ldr	r1, [pc, #68]	@ (8020834 <UARTEx_SetNbDataToProcess+0x94>)
 80207f0:	5c8a      	ldrb	r2, [r1, r2]
 80207f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80207f6:	7b3a      	ldrb	r2, [r7, #12]
 80207f8:	490f      	ldr	r1, [pc, #60]	@ (8020838 <UARTEx_SetNbDataToProcess+0x98>)
 80207fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80207fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8020800:	b29a      	uxth	r2, r3
 8020802:	687b      	ldr	r3, [r7, #4]
 8020804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020808:	7bfb      	ldrb	r3, [r7, #15]
 802080a:	7b7a      	ldrb	r2, [r7, #13]
 802080c:	4909      	ldr	r1, [pc, #36]	@ (8020834 <UARTEx_SetNbDataToProcess+0x94>)
 802080e:	5c8a      	ldrb	r2, [r1, r2]
 8020810:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8020814:	7b7a      	ldrb	r2, [r7, #13]
 8020816:	4908      	ldr	r1, [pc, #32]	@ (8020838 <UARTEx_SetNbDataToProcess+0x98>)
 8020818:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802081a:	fb93 f3f2 	sdiv	r3, r3, r2
 802081e:	b29a      	uxth	r2, r3
 8020820:	687b      	ldr	r3, [r7, #4]
 8020822:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8020826:	bf00      	nop
 8020828:	3714      	adds	r7, #20
 802082a:	46bd      	mov	sp, r7
 802082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020830:	4770      	bx	lr
 8020832:	bf00      	nop
 8020834:	0803528c 	.word	0x0803528c
 8020838:	08035294 	.word	0x08035294

0802083c <__assert_func>:
 802083c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802083e:	4614      	mov	r4, r2
 8020840:	461a      	mov	r2, r3
 8020842:	4b09      	ldr	r3, [pc, #36]	@ (8020868 <__assert_func+0x2c>)
 8020844:	681b      	ldr	r3, [r3, #0]
 8020846:	4605      	mov	r5, r0
 8020848:	68d8      	ldr	r0, [r3, #12]
 802084a:	b954      	cbnz	r4, 8020862 <__assert_func+0x26>
 802084c:	4b07      	ldr	r3, [pc, #28]	@ (802086c <__assert_func+0x30>)
 802084e:	461c      	mov	r4, r3
 8020850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020854:	9100      	str	r1, [sp, #0]
 8020856:	462b      	mov	r3, r5
 8020858:	4905      	ldr	r1, [pc, #20]	@ (8020870 <__assert_func+0x34>)
 802085a:	f001 f8c5 	bl	80219e8 <fiprintf>
 802085e:	f001 fbcb 	bl	8021ff8 <abort>
 8020862:	4b04      	ldr	r3, [pc, #16]	@ (8020874 <__assert_func+0x38>)
 8020864:	e7f4      	b.n	8020850 <__assert_func+0x14>
 8020866:	bf00      	nop
 8020868:	240007b0 	.word	0x240007b0
 802086c:	080352d7 	.word	0x080352d7
 8020870:	080352a9 	.word	0x080352a9
 8020874:	0803529c 	.word	0x0803529c

08020878 <atoi>:
 8020878:	220a      	movs	r2, #10
 802087a:	2100      	movs	r1, #0
 802087c:	f000 b9c2 	b.w	8020c04 <strtol>

08020880 <calloc>:
 8020880:	4b02      	ldr	r3, [pc, #8]	@ (802088c <calloc+0xc>)
 8020882:	460a      	mov	r2, r1
 8020884:	4601      	mov	r1, r0
 8020886:	6818      	ldr	r0, [r3, #0]
 8020888:	f000 b802 	b.w	8020890 <_calloc_r>
 802088c:	240007b0 	.word	0x240007b0

08020890 <_calloc_r>:
 8020890:	b570      	push	{r4, r5, r6, lr}
 8020892:	fba1 5402 	umull	r5, r4, r1, r2
 8020896:	b93c      	cbnz	r4, 80208a8 <_calloc_r+0x18>
 8020898:	4629      	mov	r1, r5
 802089a:	f000 f83f 	bl	802091c <_malloc_r>
 802089e:	4606      	mov	r6, r0
 80208a0:	b928      	cbnz	r0, 80208ae <_calloc_r+0x1e>
 80208a2:	2600      	movs	r6, #0
 80208a4:	4630      	mov	r0, r6
 80208a6:	bd70      	pop	{r4, r5, r6, pc}
 80208a8:	220c      	movs	r2, #12
 80208aa:	6002      	str	r2, [r0, #0]
 80208ac:	e7f9      	b.n	80208a2 <_calloc_r+0x12>
 80208ae:	462a      	mov	r2, r5
 80208b0:	4621      	mov	r1, r4
 80208b2:	f001 fa97 	bl	8021de4 <memset>
 80208b6:	e7f5      	b.n	80208a4 <_calloc_r+0x14>

080208b8 <malloc>:
 80208b8:	4b02      	ldr	r3, [pc, #8]	@ (80208c4 <malloc+0xc>)
 80208ba:	4601      	mov	r1, r0
 80208bc:	6818      	ldr	r0, [r3, #0]
 80208be:	f000 b82d 	b.w	802091c <_malloc_r>
 80208c2:	bf00      	nop
 80208c4:	240007b0 	.word	0x240007b0

080208c8 <free>:
 80208c8:	4b02      	ldr	r3, [pc, #8]	@ (80208d4 <free+0xc>)
 80208ca:	4601      	mov	r1, r0
 80208cc:	6818      	ldr	r0, [r3, #0]
 80208ce:	f002 b979 	b.w	8022bc4 <_free_r>
 80208d2:	bf00      	nop
 80208d4:	240007b0 	.word	0x240007b0

080208d8 <sbrk_aligned>:
 80208d8:	b570      	push	{r4, r5, r6, lr}
 80208da:	4e0f      	ldr	r6, [pc, #60]	@ (8020918 <sbrk_aligned+0x40>)
 80208dc:	460c      	mov	r4, r1
 80208de:	6831      	ldr	r1, [r6, #0]
 80208e0:	4605      	mov	r5, r0
 80208e2:	b911      	cbnz	r1, 80208ea <sbrk_aligned+0x12>
 80208e4:	f001 fb1c 	bl	8021f20 <_sbrk_r>
 80208e8:	6030      	str	r0, [r6, #0]
 80208ea:	4621      	mov	r1, r4
 80208ec:	4628      	mov	r0, r5
 80208ee:	f001 fb17 	bl	8021f20 <_sbrk_r>
 80208f2:	1c43      	adds	r3, r0, #1
 80208f4:	d103      	bne.n	80208fe <sbrk_aligned+0x26>
 80208f6:	f04f 34ff 	mov.w	r4, #4294967295
 80208fa:	4620      	mov	r0, r4
 80208fc:	bd70      	pop	{r4, r5, r6, pc}
 80208fe:	1cc4      	adds	r4, r0, #3
 8020900:	f024 0403 	bic.w	r4, r4, #3
 8020904:	42a0      	cmp	r0, r4
 8020906:	d0f8      	beq.n	80208fa <sbrk_aligned+0x22>
 8020908:	1a21      	subs	r1, r4, r0
 802090a:	4628      	mov	r0, r5
 802090c:	f001 fb08 	bl	8021f20 <_sbrk_r>
 8020910:	3001      	adds	r0, #1
 8020912:	d1f2      	bne.n	80208fa <sbrk_aligned+0x22>
 8020914:	e7ef      	b.n	80208f6 <sbrk_aligned+0x1e>
 8020916:	bf00      	nop
 8020918:	24003f88 	.word	0x24003f88

0802091c <_malloc_r>:
 802091c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020920:	1ccd      	adds	r5, r1, #3
 8020922:	f025 0503 	bic.w	r5, r5, #3
 8020926:	3508      	adds	r5, #8
 8020928:	2d0c      	cmp	r5, #12
 802092a:	bf38      	it	cc
 802092c:	250c      	movcc	r5, #12
 802092e:	2d00      	cmp	r5, #0
 8020930:	4606      	mov	r6, r0
 8020932:	db01      	blt.n	8020938 <_malloc_r+0x1c>
 8020934:	42a9      	cmp	r1, r5
 8020936:	d904      	bls.n	8020942 <_malloc_r+0x26>
 8020938:	230c      	movs	r3, #12
 802093a:	6033      	str	r3, [r6, #0]
 802093c:	2000      	movs	r0, #0
 802093e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8020a18 <_malloc_r+0xfc>
 8020946:	f000 f869 	bl	8020a1c <__malloc_lock>
 802094a:	f8d8 3000 	ldr.w	r3, [r8]
 802094e:	461c      	mov	r4, r3
 8020950:	bb44      	cbnz	r4, 80209a4 <_malloc_r+0x88>
 8020952:	4629      	mov	r1, r5
 8020954:	4630      	mov	r0, r6
 8020956:	f7ff ffbf 	bl	80208d8 <sbrk_aligned>
 802095a:	1c43      	adds	r3, r0, #1
 802095c:	4604      	mov	r4, r0
 802095e:	d158      	bne.n	8020a12 <_malloc_r+0xf6>
 8020960:	f8d8 4000 	ldr.w	r4, [r8]
 8020964:	4627      	mov	r7, r4
 8020966:	2f00      	cmp	r7, #0
 8020968:	d143      	bne.n	80209f2 <_malloc_r+0xd6>
 802096a:	2c00      	cmp	r4, #0
 802096c:	d04b      	beq.n	8020a06 <_malloc_r+0xea>
 802096e:	6823      	ldr	r3, [r4, #0]
 8020970:	4639      	mov	r1, r7
 8020972:	4630      	mov	r0, r6
 8020974:	eb04 0903 	add.w	r9, r4, r3
 8020978:	f001 fad2 	bl	8021f20 <_sbrk_r>
 802097c:	4581      	cmp	r9, r0
 802097e:	d142      	bne.n	8020a06 <_malloc_r+0xea>
 8020980:	6821      	ldr	r1, [r4, #0]
 8020982:	1a6d      	subs	r5, r5, r1
 8020984:	4629      	mov	r1, r5
 8020986:	4630      	mov	r0, r6
 8020988:	f7ff ffa6 	bl	80208d8 <sbrk_aligned>
 802098c:	3001      	adds	r0, #1
 802098e:	d03a      	beq.n	8020a06 <_malloc_r+0xea>
 8020990:	6823      	ldr	r3, [r4, #0]
 8020992:	442b      	add	r3, r5
 8020994:	6023      	str	r3, [r4, #0]
 8020996:	f8d8 3000 	ldr.w	r3, [r8]
 802099a:	685a      	ldr	r2, [r3, #4]
 802099c:	bb62      	cbnz	r2, 80209f8 <_malloc_r+0xdc>
 802099e:	f8c8 7000 	str.w	r7, [r8]
 80209a2:	e00f      	b.n	80209c4 <_malloc_r+0xa8>
 80209a4:	6822      	ldr	r2, [r4, #0]
 80209a6:	1b52      	subs	r2, r2, r5
 80209a8:	d420      	bmi.n	80209ec <_malloc_r+0xd0>
 80209aa:	2a0b      	cmp	r2, #11
 80209ac:	d917      	bls.n	80209de <_malloc_r+0xc2>
 80209ae:	1961      	adds	r1, r4, r5
 80209b0:	42a3      	cmp	r3, r4
 80209b2:	6025      	str	r5, [r4, #0]
 80209b4:	bf18      	it	ne
 80209b6:	6059      	strne	r1, [r3, #4]
 80209b8:	6863      	ldr	r3, [r4, #4]
 80209ba:	bf08      	it	eq
 80209bc:	f8c8 1000 	streq.w	r1, [r8]
 80209c0:	5162      	str	r2, [r4, r5]
 80209c2:	604b      	str	r3, [r1, #4]
 80209c4:	4630      	mov	r0, r6
 80209c6:	f000 f82f 	bl	8020a28 <__malloc_unlock>
 80209ca:	f104 000b 	add.w	r0, r4, #11
 80209ce:	1d23      	adds	r3, r4, #4
 80209d0:	f020 0007 	bic.w	r0, r0, #7
 80209d4:	1ac2      	subs	r2, r0, r3
 80209d6:	bf1c      	itt	ne
 80209d8:	1a1b      	subne	r3, r3, r0
 80209da:	50a3      	strne	r3, [r4, r2]
 80209dc:	e7af      	b.n	802093e <_malloc_r+0x22>
 80209de:	6862      	ldr	r2, [r4, #4]
 80209e0:	42a3      	cmp	r3, r4
 80209e2:	bf0c      	ite	eq
 80209e4:	f8c8 2000 	streq.w	r2, [r8]
 80209e8:	605a      	strne	r2, [r3, #4]
 80209ea:	e7eb      	b.n	80209c4 <_malloc_r+0xa8>
 80209ec:	4623      	mov	r3, r4
 80209ee:	6864      	ldr	r4, [r4, #4]
 80209f0:	e7ae      	b.n	8020950 <_malloc_r+0x34>
 80209f2:	463c      	mov	r4, r7
 80209f4:	687f      	ldr	r7, [r7, #4]
 80209f6:	e7b6      	b.n	8020966 <_malloc_r+0x4a>
 80209f8:	461a      	mov	r2, r3
 80209fa:	685b      	ldr	r3, [r3, #4]
 80209fc:	42a3      	cmp	r3, r4
 80209fe:	d1fb      	bne.n	80209f8 <_malloc_r+0xdc>
 8020a00:	2300      	movs	r3, #0
 8020a02:	6053      	str	r3, [r2, #4]
 8020a04:	e7de      	b.n	80209c4 <_malloc_r+0xa8>
 8020a06:	230c      	movs	r3, #12
 8020a08:	6033      	str	r3, [r6, #0]
 8020a0a:	4630      	mov	r0, r6
 8020a0c:	f000 f80c 	bl	8020a28 <__malloc_unlock>
 8020a10:	e794      	b.n	802093c <_malloc_r+0x20>
 8020a12:	6005      	str	r5, [r0, #0]
 8020a14:	e7d6      	b.n	80209c4 <_malloc_r+0xa8>
 8020a16:	bf00      	nop
 8020a18:	24003f8c 	.word	0x24003f8c

08020a1c <__malloc_lock>:
 8020a1c:	4801      	ldr	r0, [pc, #4]	@ (8020a24 <__malloc_lock+0x8>)
 8020a1e:	f001 bacc 	b.w	8021fba <__retarget_lock_acquire_recursive>
 8020a22:	bf00      	nop
 8020a24:	240040d0 	.word	0x240040d0

08020a28 <__malloc_unlock>:
 8020a28:	4801      	ldr	r0, [pc, #4]	@ (8020a30 <__malloc_unlock+0x8>)
 8020a2a:	f001 bac7 	b.w	8021fbc <__retarget_lock_release_recursive>
 8020a2e:	bf00      	nop
 8020a30:	240040d0 	.word	0x240040d0

08020a34 <srand>:
 8020a34:	b538      	push	{r3, r4, r5, lr}
 8020a36:	4b10      	ldr	r3, [pc, #64]	@ (8020a78 <srand+0x44>)
 8020a38:	681d      	ldr	r5, [r3, #0]
 8020a3a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8020a3c:	4604      	mov	r4, r0
 8020a3e:	b9b3      	cbnz	r3, 8020a6e <srand+0x3a>
 8020a40:	2018      	movs	r0, #24
 8020a42:	f7ff ff39 	bl	80208b8 <malloc>
 8020a46:	4602      	mov	r2, r0
 8020a48:	6328      	str	r0, [r5, #48]	@ 0x30
 8020a4a:	b920      	cbnz	r0, 8020a56 <srand+0x22>
 8020a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8020a7c <srand+0x48>)
 8020a4e:	480c      	ldr	r0, [pc, #48]	@ (8020a80 <srand+0x4c>)
 8020a50:	2146      	movs	r1, #70	@ 0x46
 8020a52:	f7ff fef3 	bl	802083c <__assert_func>
 8020a56:	490b      	ldr	r1, [pc, #44]	@ (8020a84 <srand+0x50>)
 8020a58:	4b0b      	ldr	r3, [pc, #44]	@ (8020a88 <srand+0x54>)
 8020a5a:	e9c0 1300 	strd	r1, r3, [r0]
 8020a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8020a8c <srand+0x58>)
 8020a60:	6083      	str	r3, [r0, #8]
 8020a62:	230b      	movs	r3, #11
 8020a64:	8183      	strh	r3, [r0, #12]
 8020a66:	2100      	movs	r1, #0
 8020a68:	2001      	movs	r0, #1
 8020a6a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020a6e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8020a70:	2200      	movs	r2, #0
 8020a72:	611c      	str	r4, [r3, #16]
 8020a74:	615a      	str	r2, [r3, #20]
 8020a76:	bd38      	pop	{r3, r4, r5, pc}
 8020a78:	240007b0 	.word	0x240007b0
 8020a7c:	080352d8 	.word	0x080352d8
 8020a80:	080352ef 	.word	0x080352ef
 8020a84:	abcd330e 	.word	0xabcd330e
 8020a88:	e66d1234 	.word	0xe66d1234
 8020a8c:	0005deec 	.word	0x0005deec

08020a90 <rand>:
 8020a90:	4b16      	ldr	r3, [pc, #88]	@ (8020aec <rand+0x5c>)
 8020a92:	b510      	push	{r4, lr}
 8020a94:	681c      	ldr	r4, [r3, #0]
 8020a96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020a98:	b9b3      	cbnz	r3, 8020ac8 <rand+0x38>
 8020a9a:	2018      	movs	r0, #24
 8020a9c:	f7ff ff0c 	bl	80208b8 <malloc>
 8020aa0:	4602      	mov	r2, r0
 8020aa2:	6320      	str	r0, [r4, #48]	@ 0x30
 8020aa4:	b920      	cbnz	r0, 8020ab0 <rand+0x20>
 8020aa6:	4b12      	ldr	r3, [pc, #72]	@ (8020af0 <rand+0x60>)
 8020aa8:	4812      	ldr	r0, [pc, #72]	@ (8020af4 <rand+0x64>)
 8020aaa:	2152      	movs	r1, #82	@ 0x52
 8020aac:	f7ff fec6 	bl	802083c <__assert_func>
 8020ab0:	4911      	ldr	r1, [pc, #68]	@ (8020af8 <rand+0x68>)
 8020ab2:	4b12      	ldr	r3, [pc, #72]	@ (8020afc <rand+0x6c>)
 8020ab4:	e9c0 1300 	strd	r1, r3, [r0]
 8020ab8:	4b11      	ldr	r3, [pc, #68]	@ (8020b00 <rand+0x70>)
 8020aba:	6083      	str	r3, [r0, #8]
 8020abc:	230b      	movs	r3, #11
 8020abe:	8183      	strh	r3, [r0, #12]
 8020ac0:	2100      	movs	r1, #0
 8020ac2:	2001      	movs	r0, #1
 8020ac4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020ac8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8020aca:	480e      	ldr	r0, [pc, #56]	@ (8020b04 <rand+0x74>)
 8020acc:	690b      	ldr	r3, [r1, #16]
 8020ace:	694c      	ldr	r4, [r1, #20]
 8020ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8020b08 <rand+0x78>)
 8020ad2:	4358      	muls	r0, r3
 8020ad4:	fb02 0004 	mla	r0, r2, r4, r0
 8020ad8:	fba3 3202 	umull	r3, r2, r3, r2
 8020adc:	3301      	adds	r3, #1
 8020ade:	eb40 0002 	adc.w	r0, r0, r2
 8020ae2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8020ae6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8020aea:	bd10      	pop	{r4, pc}
 8020aec:	240007b0 	.word	0x240007b0
 8020af0:	080352d8 	.word	0x080352d8
 8020af4:	080352ef 	.word	0x080352ef
 8020af8:	abcd330e 	.word	0xabcd330e
 8020afc:	e66d1234 	.word	0xe66d1234
 8020b00:	0005deec 	.word	0x0005deec
 8020b04:	5851f42d 	.word	0x5851f42d
 8020b08:	4c957f2d 	.word	0x4c957f2d

08020b0c <_strtol_l.constprop.0>:
 8020b0c:	2b24      	cmp	r3, #36	@ 0x24
 8020b0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b12:	4686      	mov	lr, r0
 8020b14:	4690      	mov	r8, r2
 8020b16:	d801      	bhi.n	8020b1c <_strtol_l.constprop.0+0x10>
 8020b18:	2b01      	cmp	r3, #1
 8020b1a:	d106      	bne.n	8020b2a <_strtol_l.constprop.0+0x1e>
 8020b1c:	f001 fa22 	bl	8021f64 <__errno>
 8020b20:	2316      	movs	r3, #22
 8020b22:	6003      	str	r3, [r0, #0]
 8020b24:	2000      	movs	r0, #0
 8020b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b2a:	4834      	ldr	r0, [pc, #208]	@ (8020bfc <_strtol_l.constprop.0+0xf0>)
 8020b2c:	460d      	mov	r5, r1
 8020b2e:	462a      	mov	r2, r5
 8020b30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020b34:	5d06      	ldrb	r6, [r0, r4]
 8020b36:	f016 0608 	ands.w	r6, r6, #8
 8020b3a:	d1f8      	bne.n	8020b2e <_strtol_l.constprop.0+0x22>
 8020b3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8020b3e:	d12d      	bne.n	8020b9c <_strtol_l.constprop.0+0x90>
 8020b40:	782c      	ldrb	r4, [r5, #0]
 8020b42:	2601      	movs	r6, #1
 8020b44:	1c95      	adds	r5, r2, #2
 8020b46:	f033 0210 	bics.w	r2, r3, #16
 8020b4a:	d109      	bne.n	8020b60 <_strtol_l.constprop.0+0x54>
 8020b4c:	2c30      	cmp	r4, #48	@ 0x30
 8020b4e:	d12a      	bne.n	8020ba6 <_strtol_l.constprop.0+0x9a>
 8020b50:	782a      	ldrb	r2, [r5, #0]
 8020b52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8020b56:	2a58      	cmp	r2, #88	@ 0x58
 8020b58:	d125      	bne.n	8020ba6 <_strtol_l.constprop.0+0x9a>
 8020b5a:	786c      	ldrb	r4, [r5, #1]
 8020b5c:	2310      	movs	r3, #16
 8020b5e:	3502      	adds	r5, #2
 8020b60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8020b64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020b68:	2200      	movs	r2, #0
 8020b6a:	fbbc f9f3 	udiv	r9, ip, r3
 8020b6e:	4610      	mov	r0, r2
 8020b70:	fb03 ca19 	mls	sl, r3, r9, ip
 8020b74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8020b78:	2f09      	cmp	r7, #9
 8020b7a:	d81b      	bhi.n	8020bb4 <_strtol_l.constprop.0+0xa8>
 8020b7c:	463c      	mov	r4, r7
 8020b7e:	42a3      	cmp	r3, r4
 8020b80:	dd27      	ble.n	8020bd2 <_strtol_l.constprop.0+0xc6>
 8020b82:	1c57      	adds	r7, r2, #1
 8020b84:	d007      	beq.n	8020b96 <_strtol_l.constprop.0+0x8a>
 8020b86:	4581      	cmp	r9, r0
 8020b88:	d320      	bcc.n	8020bcc <_strtol_l.constprop.0+0xc0>
 8020b8a:	d101      	bne.n	8020b90 <_strtol_l.constprop.0+0x84>
 8020b8c:	45a2      	cmp	sl, r4
 8020b8e:	db1d      	blt.n	8020bcc <_strtol_l.constprop.0+0xc0>
 8020b90:	fb00 4003 	mla	r0, r0, r3, r4
 8020b94:	2201      	movs	r2, #1
 8020b96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020b9a:	e7eb      	b.n	8020b74 <_strtol_l.constprop.0+0x68>
 8020b9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8020b9e:	bf04      	itt	eq
 8020ba0:	782c      	ldrbeq	r4, [r5, #0]
 8020ba2:	1c95      	addeq	r5, r2, #2
 8020ba4:	e7cf      	b.n	8020b46 <_strtol_l.constprop.0+0x3a>
 8020ba6:	2b00      	cmp	r3, #0
 8020ba8:	d1da      	bne.n	8020b60 <_strtol_l.constprop.0+0x54>
 8020baa:	2c30      	cmp	r4, #48	@ 0x30
 8020bac:	bf0c      	ite	eq
 8020bae:	2308      	moveq	r3, #8
 8020bb0:	230a      	movne	r3, #10
 8020bb2:	e7d5      	b.n	8020b60 <_strtol_l.constprop.0+0x54>
 8020bb4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8020bb8:	2f19      	cmp	r7, #25
 8020bba:	d801      	bhi.n	8020bc0 <_strtol_l.constprop.0+0xb4>
 8020bbc:	3c37      	subs	r4, #55	@ 0x37
 8020bbe:	e7de      	b.n	8020b7e <_strtol_l.constprop.0+0x72>
 8020bc0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8020bc4:	2f19      	cmp	r7, #25
 8020bc6:	d804      	bhi.n	8020bd2 <_strtol_l.constprop.0+0xc6>
 8020bc8:	3c57      	subs	r4, #87	@ 0x57
 8020bca:	e7d8      	b.n	8020b7e <_strtol_l.constprop.0+0x72>
 8020bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8020bd0:	e7e1      	b.n	8020b96 <_strtol_l.constprop.0+0x8a>
 8020bd2:	1c53      	adds	r3, r2, #1
 8020bd4:	d108      	bne.n	8020be8 <_strtol_l.constprop.0+0xdc>
 8020bd6:	2322      	movs	r3, #34	@ 0x22
 8020bd8:	f8ce 3000 	str.w	r3, [lr]
 8020bdc:	4660      	mov	r0, ip
 8020bde:	f1b8 0f00 	cmp.w	r8, #0
 8020be2:	d0a0      	beq.n	8020b26 <_strtol_l.constprop.0+0x1a>
 8020be4:	1e69      	subs	r1, r5, #1
 8020be6:	e006      	b.n	8020bf6 <_strtol_l.constprop.0+0xea>
 8020be8:	b106      	cbz	r6, 8020bec <_strtol_l.constprop.0+0xe0>
 8020bea:	4240      	negs	r0, r0
 8020bec:	f1b8 0f00 	cmp.w	r8, #0
 8020bf0:	d099      	beq.n	8020b26 <_strtol_l.constprop.0+0x1a>
 8020bf2:	2a00      	cmp	r2, #0
 8020bf4:	d1f6      	bne.n	8020be4 <_strtol_l.constprop.0+0xd8>
 8020bf6:	f8c8 1000 	str.w	r1, [r8]
 8020bfa:	e794      	b.n	8020b26 <_strtol_l.constprop.0+0x1a>
 8020bfc:	08035348 	.word	0x08035348

08020c00 <_strtol_r>:
 8020c00:	f7ff bf84 	b.w	8020b0c <_strtol_l.constprop.0>

08020c04 <strtol>:
 8020c04:	4613      	mov	r3, r2
 8020c06:	460a      	mov	r2, r1
 8020c08:	4601      	mov	r1, r0
 8020c0a:	4802      	ldr	r0, [pc, #8]	@ (8020c14 <strtol+0x10>)
 8020c0c:	6800      	ldr	r0, [r0, #0]
 8020c0e:	f7ff bf7d 	b.w	8020b0c <_strtol_l.constprop.0>
 8020c12:	bf00      	nop
 8020c14:	240007b0 	.word	0x240007b0

08020c18 <__cvt>:
 8020c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c1a:	ed2d 8b02 	vpush	{d8}
 8020c1e:	eeb0 8b40 	vmov.f64	d8, d0
 8020c22:	b085      	sub	sp, #20
 8020c24:	4617      	mov	r7, r2
 8020c26:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8020c28:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020c2a:	ee18 2a90 	vmov	r2, s17
 8020c2e:	f025 0520 	bic.w	r5, r5, #32
 8020c32:	2a00      	cmp	r2, #0
 8020c34:	bfb6      	itet	lt
 8020c36:	222d      	movlt	r2, #45	@ 0x2d
 8020c38:	2200      	movge	r2, #0
 8020c3a:	eeb1 8b40 	vneglt.f64	d8, d0
 8020c3e:	2d46      	cmp	r5, #70	@ 0x46
 8020c40:	460c      	mov	r4, r1
 8020c42:	701a      	strb	r2, [r3, #0]
 8020c44:	d004      	beq.n	8020c50 <__cvt+0x38>
 8020c46:	2d45      	cmp	r5, #69	@ 0x45
 8020c48:	d100      	bne.n	8020c4c <__cvt+0x34>
 8020c4a:	3401      	adds	r4, #1
 8020c4c:	2102      	movs	r1, #2
 8020c4e:	e000      	b.n	8020c52 <__cvt+0x3a>
 8020c50:	2103      	movs	r1, #3
 8020c52:	ab03      	add	r3, sp, #12
 8020c54:	9301      	str	r3, [sp, #4]
 8020c56:	ab02      	add	r3, sp, #8
 8020c58:	9300      	str	r3, [sp, #0]
 8020c5a:	4622      	mov	r2, r4
 8020c5c:	4633      	mov	r3, r6
 8020c5e:	eeb0 0b48 	vmov.f64	d0, d8
 8020c62:	f001 fa59 	bl	8022118 <_dtoa_r>
 8020c66:	2d47      	cmp	r5, #71	@ 0x47
 8020c68:	d114      	bne.n	8020c94 <__cvt+0x7c>
 8020c6a:	07fb      	lsls	r3, r7, #31
 8020c6c:	d50a      	bpl.n	8020c84 <__cvt+0x6c>
 8020c6e:	1902      	adds	r2, r0, r4
 8020c70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c78:	bf08      	it	eq
 8020c7a:	9203      	streq	r2, [sp, #12]
 8020c7c:	2130      	movs	r1, #48	@ 0x30
 8020c7e:	9b03      	ldr	r3, [sp, #12]
 8020c80:	4293      	cmp	r3, r2
 8020c82:	d319      	bcc.n	8020cb8 <__cvt+0xa0>
 8020c84:	9b03      	ldr	r3, [sp, #12]
 8020c86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020c88:	1a1b      	subs	r3, r3, r0
 8020c8a:	6013      	str	r3, [r2, #0]
 8020c8c:	b005      	add	sp, #20
 8020c8e:	ecbd 8b02 	vpop	{d8}
 8020c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020c94:	2d46      	cmp	r5, #70	@ 0x46
 8020c96:	eb00 0204 	add.w	r2, r0, r4
 8020c9a:	d1e9      	bne.n	8020c70 <__cvt+0x58>
 8020c9c:	7803      	ldrb	r3, [r0, #0]
 8020c9e:	2b30      	cmp	r3, #48	@ 0x30
 8020ca0:	d107      	bne.n	8020cb2 <__cvt+0x9a>
 8020ca2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020caa:	bf1c      	itt	ne
 8020cac:	f1c4 0401 	rsbne	r4, r4, #1
 8020cb0:	6034      	strne	r4, [r6, #0]
 8020cb2:	6833      	ldr	r3, [r6, #0]
 8020cb4:	441a      	add	r2, r3
 8020cb6:	e7db      	b.n	8020c70 <__cvt+0x58>
 8020cb8:	1c5c      	adds	r4, r3, #1
 8020cba:	9403      	str	r4, [sp, #12]
 8020cbc:	7019      	strb	r1, [r3, #0]
 8020cbe:	e7de      	b.n	8020c7e <__cvt+0x66>

08020cc0 <__exponent>:
 8020cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020cc2:	2900      	cmp	r1, #0
 8020cc4:	bfba      	itte	lt
 8020cc6:	4249      	neglt	r1, r1
 8020cc8:	232d      	movlt	r3, #45	@ 0x2d
 8020cca:	232b      	movge	r3, #43	@ 0x2b
 8020ccc:	2909      	cmp	r1, #9
 8020cce:	7002      	strb	r2, [r0, #0]
 8020cd0:	7043      	strb	r3, [r0, #1]
 8020cd2:	dd29      	ble.n	8020d28 <__exponent+0x68>
 8020cd4:	f10d 0307 	add.w	r3, sp, #7
 8020cd8:	461d      	mov	r5, r3
 8020cda:	270a      	movs	r7, #10
 8020cdc:	461a      	mov	r2, r3
 8020cde:	fbb1 f6f7 	udiv	r6, r1, r7
 8020ce2:	fb07 1416 	mls	r4, r7, r6, r1
 8020ce6:	3430      	adds	r4, #48	@ 0x30
 8020ce8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8020cec:	460c      	mov	r4, r1
 8020cee:	2c63      	cmp	r4, #99	@ 0x63
 8020cf0:	f103 33ff 	add.w	r3, r3, #4294967295
 8020cf4:	4631      	mov	r1, r6
 8020cf6:	dcf1      	bgt.n	8020cdc <__exponent+0x1c>
 8020cf8:	3130      	adds	r1, #48	@ 0x30
 8020cfa:	1e94      	subs	r4, r2, #2
 8020cfc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8020d00:	1c41      	adds	r1, r0, #1
 8020d02:	4623      	mov	r3, r4
 8020d04:	42ab      	cmp	r3, r5
 8020d06:	d30a      	bcc.n	8020d1e <__exponent+0x5e>
 8020d08:	f10d 0309 	add.w	r3, sp, #9
 8020d0c:	1a9b      	subs	r3, r3, r2
 8020d0e:	42ac      	cmp	r4, r5
 8020d10:	bf88      	it	hi
 8020d12:	2300      	movhi	r3, #0
 8020d14:	3302      	adds	r3, #2
 8020d16:	4403      	add	r3, r0
 8020d18:	1a18      	subs	r0, r3, r0
 8020d1a:	b003      	add	sp, #12
 8020d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d1e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8020d22:	f801 6f01 	strb.w	r6, [r1, #1]!
 8020d26:	e7ed      	b.n	8020d04 <__exponent+0x44>
 8020d28:	2330      	movs	r3, #48	@ 0x30
 8020d2a:	3130      	adds	r1, #48	@ 0x30
 8020d2c:	7083      	strb	r3, [r0, #2]
 8020d2e:	70c1      	strb	r1, [r0, #3]
 8020d30:	1d03      	adds	r3, r0, #4
 8020d32:	e7f1      	b.n	8020d18 <__exponent+0x58>
 8020d34:	0000      	movs	r0, r0
	...

08020d38 <_printf_float>:
 8020d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d3c:	b08d      	sub	sp, #52	@ 0x34
 8020d3e:	460c      	mov	r4, r1
 8020d40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8020d44:	4616      	mov	r6, r2
 8020d46:	461f      	mov	r7, r3
 8020d48:	4605      	mov	r5, r0
 8020d4a:	f001 f8b1 	bl	8021eb0 <_localeconv_r>
 8020d4e:	f8d0 b000 	ldr.w	fp, [r0]
 8020d52:	4658      	mov	r0, fp
 8020d54:	f7df fb24 	bl	80003a0 <strlen>
 8020d58:	2300      	movs	r3, #0
 8020d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8020d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8020d60:	f894 9018 	ldrb.w	r9, [r4, #24]
 8020d64:	6822      	ldr	r2, [r4, #0]
 8020d66:	9005      	str	r0, [sp, #20]
 8020d68:	3307      	adds	r3, #7
 8020d6a:	f023 0307 	bic.w	r3, r3, #7
 8020d6e:	f103 0108 	add.w	r1, r3, #8
 8020d72:	f8c8 1000 	str.w	r1, [r8]
 8020d76:	ed93 0b00 	vldr	d0, [r3]
 8020d7a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8020fd8 <_printf_float+0x2a0>
 8020d7e:	eeb0 7bc0 	vabs.f64	d7, d0
 8020d82:	eeb4 7b46 	vcmp.f64	d7, d6
 8020d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d8a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8020d8e:	dd24      	ble.n	8020dda <_printf_float+0xa2>
 8020d90:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8020d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d98:	d502      	bpl.n	8020da0 <_printf_float+0x68>
 8020d9a:	232d      	movs	r3, #45	@ 0x2d
 8020d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020da0:	498f      	ldr	r1, [pc, #572]	@ (8020fe0 <_printf_float+0x2a8>)
 8020da2:	4b90      	ldr	r3, [pc, #576]	@ (8020fe4 <_printf_float+0x2ac>)
 8020da4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8020da8:	bf94      	ite	ls
 8020daa:	4688      	movls	r8, r1
 8020dac:	4698      	movhi	r8, r3
 8020dae:	f022 0204 	bic.w	r2, r2, #4
 8020db2:	2303      	movs	r3, #3
 8020db4:	6123      	str	r3, [r4, #16]
 8020db6:	6022      	str	r2, [r4, #0]
 8020db8:	f04f 0a00 	mov.w	sl, #0
 8020dbc:	9700      	str	r7, [sp, #0]
 8020dbe:	4633      	mov	r3, r6
 8020dc0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8020dc2:	4621      	mov	r1, r4
 8020dc4:	4628      	mov	r0, r5
 8020dc6:	f000 f9d1 	bl	802116c <_printf_common>
 8020dca:	3001      	adds	r0, #1
 8020dcc:	f040 8089 	bne.w	8020ee2 <_printf_float+0x1aa>
 8020dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8020dd4:	b00d      	add	sp, #52	@ 0x34
 8020dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dda:	eeb4 0b40 	vcmp.f64	d0, d0
 8020dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020de2:	d709      	bvc.n	8020df8 <_printf_float+0xc0>
 8020de4:	ee10 3a90 	vmov	r3, s1
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	bfbc      	itt	lt
 8020dec:	232d      	movlt	r3, #45	@ 0x2d
 8020dee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8020df2:	497d      	ldr	r1, [pc, #500]	@ (8020fe8 <_printf_float+0x2b0>)
 8020df4:	4b7d      	ldr	r3, [pc, #500]	@ (8020fec <_printf_float+0x2b4>)
 8020df6:	e7d5      	b.n	8020da4 <_printf_float+0x6c>
 8020df8:	6863      	ldr	r3, [r4, #4]
 8020dfa:	1c59      	adds	r1, r3, #1
 8020dfc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8020e00:	d139      	bne.n	8020e76 <_printf_float+0x13e>
 8020e02:	2306      	movs	r3, #6
 8020e04:	6063      	str	r3, [r4, #4]
 8020e06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8020e0a:	2300      	movs	r3, #0
 8020e0c:	6022      	str	r2, [r4, #0]
 8020e0e:	9303      	str	r3, [sp, #12]
 8020e10:	ab0a      	add	r3, sp, #40	@ 0x28
 8020e12:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8020e16:	ab09      	add	r3, sp, #36	@ 0x24
 8020e18:	9300      	str	r3, [sp, #0]
 8020e1a:	6861      	ldr	r1, [r4, #4]
 8020e1c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8020e20:	4628      	mov	r0, r5
 8020e22:	f7ff fef9 	bl	8020c18 <__cvt>
 8020e26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8020e2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020e2c:	4680      	mov	r8, r0
 8020e2e:	d129      	bne.n	8020e84 <_printf_float+0x14c>
 8020e30:	1cc8      	adds	r0, r1, #3
 8020e32:	db02      	blt.n	8020e3a <_printf_float+0x102>
 8020e34:	6863      	ldr	r3, [r4, #4]
 8020e36:	4299      	cmp	r1, r3
 8020e38:	dd41      	ble.n	8020ebe <_printf_float+0x186>
 8020e3a:	f1a9 0902 	sub.w	r9, r9, #2
 8020e3e:	fa5f f989 	uxtb.w	r9, r9
 8020e42:	3901      	subs	r1, #1
 8020e44:	464a      	mov	r2, r9
 8020e46:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8020e4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8020e4c:	f7ff ff38 	bl	8020cc0 <__exponent>
 8020e50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020e52:	1813      	adds	r3, r2, r0
 8020e54:	2a01      	cmp	r2, #1
 8020e56:	4682      	mov	sl, r0
 8020e58:	6123      	str	r3, [r4, #16]
 8020e5a:	dc02      	bgt.n	8020e62 <_printf_float+0x12a>
 8020e5c:	6822      	ldr	r2, [r4, #0]
 8020e5e:	07d2      	lsls	r2, r2, #31
 8020e60:	d501      	bpl.n	8020e66 <_printf_float+0x12e>
 8020e62:	3301      	adds	r3, #1
 8020e64:	6123      	str	r3, [r4, #16]
 8020e66:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d0a6      	beq.n	8020dbc <_printf_float+0x84>
 8020e6e:	232d      	movs	r3, #45	@ 0x2d
 8020e70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020e74:	e7a2      	b.n	8020dbc <_printf_float+0x84>
 8020e76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8020e7a:	d1c4      	bne.n	8020e06 <_printf_float+0xce>
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	d1c2      	bne.n	8020e06 <_printf_float+0xce>
 8020e80:	2301      	movs	r3, #1
 8020e82:	e7bf      	b.n	8020e04 <_printf_float+0xcc>
 8020e84:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8020e88:	d9db      	bls.n	8020e42 <_printf_float+0x10a>
 8020e8a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8020e8e:	d118      	bne.n	8020ec2 <_printf_float+0x18a>
 8020e90:	2900      	cmp	r1, #0
 8020e92:	6863      	ldr	r3, [r4, #4]
 8020e94:	dd0b      	ble.n	8020eae <_printf_float+0x176>
 8020e96:	6121      	str	r1, [r4, #16]
 8020e98:	b913      	cbnz	r3, 8020ea0 <_printf_float+0x168>
 8020e9a:	6822      	ldr	r2, [r4, #0]
 8020e9c:	07d0      	lsls	r0, r2, #31
 8020e9e:	d502      	bpl.n	8020ea6 <_printf_float+0x16e>
 8020ea0:	3301      	adds	r3, #1
 8020ea2:	440b      	add	r3, r1
 8020ea4:	6123      	str	r3, [r4, #16]
 8020ea6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8020ea8:	f04f 0a00 	mov.w	sl, #0
 8020eac:	e7db      	b.n	8020e66 <_printf_float+0x12e>
 8020eae:	b913      	cbnz	r3, 8020eb6 <_printf_float+0x17e>
 8020eb0:	6822      	ldr	r2, [r4, #0]
 8020eb2:	07d2      	lsls	r2, r2, #31
 8020eb4:	d501      	bpl.n	8020eba <_printf_float+0x182>
 8020eb6:	3302      	adds	r3, #2
 8020eb8:	e7f4      	b.n	8020ea4 <_printf_float+0x16c>
 8020eba:	2301      	movs	r3, #1
 8020ebc:	e7f2      	b.n	8020ea4 <_printf_float+0x16c>
 8020ebe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8020ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020ec4:	4299      	cmp	r1, r3
 8020ec6:	db05      	blt.n	8020ed4 <_printf_float+0x19c>
 8020ec8:	6823      	ldr	r3, [r4, #0]
 8020eca:	6121      	str	r1, [r4, #16]
 8020ecc:	07d8      	lsls	r0, r3, #31
 8020ece:	d5ea      	bpl.n	8020ea6 <_printf_float+0x16e>
 8020ed0:	1c4b      	adds	r3, r1, #1
 8020ed2:	e7e7      	b.n	8020ea4 <_printf_float+0x16c>
 8020ed4:	2900      	cmp	r1, #0
 8020ed6:	bfd4      	ite	le
 8020ed8:	f1c1 0202 	rsble	r2, r1, #2
 8020edc:	2201      	movgt	r2, #1
 8020ede:	4413      	add	r3, r2
 8020ee0:	e7e0      	b.n	8020ea4 <_printf_float+0x16c>
 8020ee2:	6823      	ldr	r3, [r4, #0]
 8020ee4:	055a      	lsls	r2, r3, #21
 8020ee6:	d407      	bmi.n	8020ef8 <_printf_float+0x1c0>
 8020ee8:	6923      	ldr	r3, [r4, #16]
 8020eea:	4642      	mov	r2, r8
 8020eec:	4631      	mov	r1, r6
 8020eee:	4628      	mov	r0, r5
 8020ef0:	47b8      	blx	r7
 8020ef2:	3001      	adds	r0, #1
 8020ef4:	d12a      	bne.n	8020f4c <_printf_float+0x214>
 8020ef6:	e76b      	b.n	8020dd0 <_printf_float+0x98>
 8020ef8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8020efc:	f240 80e0 	bls.w	80210c0 <_printf_float+0x388>
 8020f00:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8020f04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f0c:	d133      	bne.n	8020f76 <_printf_float+0x23e>
 8020f0e:	4a38      	ldr	r2, [pc, #224]	@ (8020ff0 <_printf_float+0x2b8>)
 8020f10:	2301      	movs	r3, #1
 8020f12:	4631      	mov	r1, r6
 8020f14:	4628      	mov	r0, r5
 8020f16:	47b8      	blx	r7
 8020f18:	3001      	adds	r0, #1
 8020f1a:	f43f af59 	beq.w	8020dd0 <_printf_float+0x98>
 8020f1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8020f22:	4543      	cmp	r3, r8
 8020f24:	db02      	blt.n	8020f2c <_printf_float+0x1f4>
 8020f26:	6823      	ldr	r3, [r4, #0]
 8020f28:	07d8      	lsls	r0, r3, #31
 8020f2a:	d50f      	bpl.n	8020f4c <_printf_float+0x214>
 8020f2c:	9b05      	ldr	r3, [sp, #20]
 8020f2e:	465a      	mov	r2, fp
 8020f30:	4631      	mov	r1, r6
 8020f32:	4628      	mov	r0, r5
 8020f34:	47b8      	blx	r7
 8020f36:	3001      	adds	r0, #1
 8020f38:	f43f af4a 	beq.w	8020dd0 <_printf_float+0x98>
 8020f3c:	f04f 0900 	mov.w	r9, #0
 8020f40:	f108 38ff 	add.w	r8, r8, #4294967295
 8020f44:	f104 0a1a 	add.w	sl, r4, #26
 8020f48:	45c8      	cmp	r8, r9
 8020f4a:	dc09      	bgt.n	8020f60 <_printf_float+0x228>
 8020f4c:	6823      	ldr	r3, [r4, #0]
 8020f4e:	079b      	lsls	r3, r3, #30
 8020f50:	f100 8107 	bmi.w	8021162 <_printf_float+0x42a>
 8020f54:	68e0      	ldr	r0, [r4, #12]
 8020f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020f58:	4298      	cmp	r0, r3
 8020f5a:	bfb8      	it	lt
 8020f5c:	4618      	movlt	r0, r3
 8020f5e:	e739      	b.n	8020dd4 <_printf_float+0x9c>
 8020f60:	2301      	movs	r3, #1
 8020f62:	4652      	mov	r2, sl
 8020f64:	4631      	mov	r1, r6
 8020f66:	4628      	mov	r0, r5
 8020f68:	47b8      	blx	r7
 8020f6a:	3001      	adds	r0, #1
 8020f6c:	f43f af30 	beq.w	8020dd0 <_printf_float+0x98>
 8020f70:	f109 0901 	add.w	r9, r9, #1
 8020f74:	e7e8      	b.n	8020f48 <_printf_float+0x210>
 8020f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f78:	2b00      	cmp	r3, #0
 8020f7a:	dc3b      	bgt.n	8020ff4 <_printf_float+0x2bc>
 8020f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8020ff0 <_printf_float+0x2b8>)
 8020f7e:	2301      	movs	r3, #1
 8020f80:	4631      	mov	r1, r6
 8020f82:	4628      	mov	r0, r5
 8020f84:	47b8      	blx	r7
 8020f86:	3001      	adds	r0, #1
 8020f88:	f43f af22 	beq.w	8020dd0 <_printf_float+0x98>
 8020f8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8020f90:	ea59 0303 	orrs.w	r3, r9, r3
 8020f94:	d102      	bne.n	8020f9c <_printf_float+0x264>
 8020f96:	6823      	ldr	r3, [r4, #0]
 8020f98:	07d9      	lsls	r1, r3, #31
 8020f9a:	d5d7      	bpl.n	8020f4c <_printf_float+0x214>
 8020f9c:	9b05      	ldr	r3, [sp, #20]
 8020f9e:	465a      	mov	r2, fp
 8020fa0:	4631      	mov	r1, r6
 8020fa2:	4628      	mov	r0, r5
 8020fa4:	47b8      	blx	r7
 8020fa6:	3001      	adds	r0, #1
 8020fa8:	f43f af12 	beq.w	8020dd0 <_printf_float+0x98>
 8020fac:	f04f 0a00 	mov.w	sl, #0
 8020fb0:	f104 0b1a 	add.w	fp, r4, #26
 8020fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fb6:	425b      	negs	r3, r3
 8020fb8:	4553      	cmp	r3, sl
 8020fba:	dc01      	bgt.n	8020fc0 <_printf_float+0x288>
 8020fbc:	464b      	mov	r3, r9
 8020fbe:	e794      	b.n	8020eea <_printf_float+0x1b2>
 8020fc0:	2301      	movs	r3, #1
 8020fc2:	465a      	mov	r2, fp
 8020fc4:	4631      	mov	r1, r6
 8020fc6:	4628      	mov	r0, r5
 8020fc8:	47b8      	blx	r7
 8020fca:	3001      	adds	r0, #1
 8020fcc:	f43f af00 	beq.w	8020dd0 <_printf_float+0x98>
 8020fd0:	f10a 0a01 	add.w	sl, sl, #1
 8020fd4:	e7ee      	b.n	8020fb4 <_printf_float+0x27c>
 8020fd6:	bf00      	nop
 8020fd8:	ffffffff 	.word	0xffffffff
 8020fdc:	7fefffff 	.word	0x7fefffff
 8020fe0:	08035448 	.word	0x08035448
 8020fe4:	0803544c 	.word	0x0803544c
 8020fe8:	08035450 	.word	0x08035450
 8020fec:	08035454 	.word	0x08035454
 8020ff0:	08035458 	.word	0x08035458
 8020ff4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8020ff6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8020ffa:	4553      	cmp	r3, sl
 8020ffc:	bfa8      	it	ge
 8020ffe:	4653      	movge	r3, sl
 8021000:	2b00      	cmp	r3, #0
 8021002:	4699      	mov	r9, r3
 8021004:	dc37      	bgt.n	8021076 <_printf_float+0x33e>
 8021006:	2300      	movs	r3, #0
 8021008:	9307      	str	r3, [sp, #28]
 802100a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802100e:	f104 021a 	add.w	r2, r4, #26
 8021012:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021014:	9907      	ldr	r1, [sp, #28]
 8021016:	9306      	str	r3, [sp, #24]
 8021018:	eba3 0309 	sub.w	r3, r3, r9
 802101c:	428b      	cmp	r3, r1
 802101e:	dc31      	bgt.n	8021084 <_printf_float+0x34c>
 8021020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021022:	459a      	cmp	sl, r3
 8021024:	dc3b      	bgt.n	802109e <_printf_float+0x366>
 8021026:	6823      	ldr	r3, [r4, #0]
 8021028:	07da      	lsls	r2, r3, #31
 802102a:	d438      	bmi.n	802109e <_printf_float+0x366>
 802102c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802102e:	ebaa 0903 	sub.w	r9, sl, r3
 8021032:	9b06      	ldr	r3, [sp, #24]
 8021034:	ebaa 0303 	sub.w	r3, sl, r3
 8021038:	4599      	cmp	r9, r3
 802103a:	bfa8      	it	ge
 802103c:	4699      	movge	r9, r3
 802103e:	f1b9 0f00 	cmp.w	r9, #0
 8021042:	dc34      	bgt.n	80210ae <_printf_float+0x376>
 8021044:	f04f 0800 	mov.w	r8, #0
 8021048:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802104c:	f104 0b1a 	add.w	fp, r4, #26
 8021050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021052:	ebaa 0303 	sub.w	r3, sl, r3
 8021056:	eba3 0309 	sub.w	r3, r3, r9
 802105a:	4543      	cmp	r3, r8
 802105c:	f77f af76 	ble.w	8020f4c <_printf_float+0x214>
 8021060:	2301      	movs	r3, #1
 8021062:	465a      	mov	r2, fp
 8021064:	4631      	mov	r1, r6
 8021066:	4628      	mov	r0, r5
 8021068:	47b8      	blx	r7
 802106a:	3001      	adds	r0, #1
 802106c:	f43f aeb0 	beq.w	8020dd0 <_printf_float+0x98>
 8021070:	f108 0801 	add.w	r8, r8, #1
 8021074:	e7ec      	b.n	8021050 <_printf_float+0x318>
 8021076:	4642      	mov	r2, r8
 8021078:	4631      	mov	r1, r6
 802107a:	4628      	mov	r0, r5
 802107c:	47b8      	blx	r7
 802107e:	3001      	adds	r0, #1
 8021080:	d1c1      	bne.n	8021006 <_printf_float+0x2ce>
 8021082:	e6a5      	b.n	8020dd0 <_printf_float+0x98>
 8021084:	2301      	movs	r3, #1
 8021086:	4631      	mov	r1, r6
 8021088:	4628      	mov	r0, r5
 802108a:	9206      	str	r2, [sp, #24]
 802108c:	47b8      	blx	r7
 802108e:	3001      	adds	r0, #1
 8021090:	f43f ae9e 	beq.w	8020dd0 <_printf_float+0x98>
 8021094:	9b07      	ldr	r3, [sp, #28]
 8021096:	9a06      	ldr	r2, [sp, #24]
 8021098:	3301      	adds	r3, #1
 802109a:	9307      	str	r3, [sp, #28]
 802109c:	e7b9      	b.n	8021012 <_printf_float+0x2da>
 802109e:	9b05      	ldr	r3, [sp, #20]
 80210a0:	465a      	mov	r2, fp
 80210a2:	4631      	mov	r1, r6
 80210a4:	4628      	mov	r0, r5
 80210a6:	47b8      	blx	r7
 80210a8:	3001      	adds	r0, #1
 80210aa:	d1bf      	bne.n	802102c <_printf_float+0x2f4>
 80210ac:	e690      	b.n	8020dd0 <_printf_float+0x98>
 80210ae:	9a06      	ldr	r2, [sp, #24]
 80210b0:	464b      	mov	r3, r9
 80210b2:	4442      	add	r2, r8
 80210b4:	4631      	mov	r1, r6
 80210b6:	4628      	mov	r0, r5
 80210b8:	47b8      	blx	r7
 80210ba:	3001      	adds	r0, #1
 80210bc:	d1c2      	bne.n	8021044 <_printf_float+0x30c>
 80210be:	e687      	b.n	8020dd0 <_printf_float+0x98>
 80210c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80210c4:	f1b9 0f01 	cmp.w	r9, #1
 80210c8:	dc01      	bgt.n	80210ce <_printf_float+0x396>
 80210ca:	07db      	lsls	r3, r3, #31
 80210cc:	d536      	bpl.n	802113c <_printf_float+0x404>
 80210ce:	2301      	movs	r3, #1
 80210d0:	4642      	mov	r2, r8
 80210d2:	4631      	mov	r1, r6
 80210d4:	4628      	mov	r0, r5
 80210d6:	47b8      	blx	r7
 80210d8:	3001      	adds	r0, #1
 80210da:	f43f ae79 	beq.w	8020dd0 <_printf_float+0x98>
 80210de:	9b05      	ldr	r3, [sp, #20]
 80210e0:	465a      	mov	r2, fp
 80210e2:	4631      	mov	r1, r6
 80210e4:	4628      	mov	r0, r5
 80210e6:	47b8      	blx	r7
 80210e8:	3001      	adds	r0, #1
 80210ea:	f43f ae71 	beq.w	8020dd0 <_printf_float+0x98>
 80210ee:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80210f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80210f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80210fe:	d018      	beq.n	8021132 <_printf_float+0x3fa>
 8021100:	464b      	mov	r3, r9
 8021102:	f108 0201 	add.w	r2, r8, #1
 8021106:	4631      	mov	r1, r6
 8021108:	4628      	mov	r0, r5
 802110a:	47b8      	blx	r7
 802110c:	3001      	adds	r0, #1
 802110e:	d10c      	bne.n	802112a <_printf_float+0x3f2>
 8021110:	e65e      	b.n	8020dd0 <_printf_float+0x98>
 8021112:	2301      	movs	r3, #1
 8021114:	465a      	mov	r2, fp
 8021116:	4631      	mov	r1, r6
 8021118:	4628      	mov	r0, r5
 802111a:	47b8      	blx	r7
 802111c:	3001      	adds	r0, #1
 802111e:	f43f ae57 	beq.w	8020dd0 <_printf_float+0x98>
 8021122:	f108 0801 	add.w	r8, r8, #1
 8021126:	45c8      	cmp	r8, r9
 8021128:	dbf3      	blt.n	8021112 <_printf_float+0x3da>
 802112a:	4653      	mov	r3, sl
 802112c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8021130:	e6dc      	b.n	8020eec <_printf_float+0x1b4>
 8021132:	f04f 0800 	mov.w	r8, #0
 8021136:	f104 0b1a 	add.w	fp, r4, #26
 802113a:	e7f4      	b.n	8021126 <_printf_float+0x3ee>
 802113c:	2301      	movs	r3, #1
 802113e:	4642      	mov	r2, r8
 8021140:	e7e1      	b.n	8021106 <_printf_float+0x3ce>
 8021142:	2301      	movs	r3, #1
 8021144:	464a      	mov	r2, r9
 8021146:	4631      	mov	r1, r6
 8021148:	4628      	mov	r0, r5
 802114a:	47b8      	blx	r7
 802114c:	3001      	adds	r0, #1
 802114e:	f43f ae3f 	beq.w	8020dd0 <_printf_float+0x98>
 8021152:	f108 0801 	add.w	r8, r8, #1
 8021156:	68e3      	ldr	r3, [r4, #12]
 8021158:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802115a:	1a5b      	subs	r3, r3, r1
 802115c:	4543      	cmp	r3, r8
 802115e:	dcf0      	bgt.n	8021142 <_printf_float+0x40a>
 8021160:	e6f8      	b.n	8020f54 <_printf_float+0x21c>
 8021162:	f04f 0800 	mov.w	r8, #0
 8021166:	f104 0919 	add.w	r9, r4, #25
 802116a:	e7f4      	b.n	8021156 <_printf_float+0x41e>

0802116c <_printf_common>:
 802116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021170:	4616      	mov	r6, r2
 8021172:	4698      	mov	r8, r3
 8021174:	688a      	ldr	r2, [r1, #8]
 8021176:	690b      	ldr	r3, [r1, #16]
 8021178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802117c:	4293      	cmp	r3, r2
 802117e:	bfb8      	it	lt
 8021180:	4613      	movlt	r3, r2
 8021182:	6033      	str	r3, [r6, #0]
 8021184:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8021188:	4607      	mov	r7, r0
 802118a:	460c      	mov	r4, r1
 802118c:	b10a      	cbz	r2, 8021192 <_printf_common+0x26>
 802118e:	3301      	adds	r3, #1
 8021190:	6033      	str	r3, [r6, #0]
 8021192:	6823      	ldr	r3, [r4, #0]
 8021194:	0699      	lsls	r1, r3, #26
 8021196:	bf42      	ittt	mi
 8021198:	6833      	ldrmi	r3, [r6, #0]
 802119a:	3302      	addmi	r3, #2
 802119c:	6033      	strmi	r3, [r6, #0]
 802119e:	6825      	ldr	r5, [r4, #0]
 80211a0:	f015 0506 	ands.w	r5, r5, #6
 80211a4:	d106      	bne.n	80211b4 <_printf_common+0x48>
 80211a6:	f104 0a19 	add.w	sl, r4, #25
 80211aa:	68e3      	ldr	r3, [r4, #12]
 80211ac:	6832      	ldr	r2, [r6, #0]
 80211ae:	1a9b      	subs	r3, r3, r2
 80211b0:	42ab      	cmp	r3, r5
 80211b2:	dc26      	bgt.n	8021202 <_printf_common+0x96>
 80211b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80211b8:	6822      	ldr	r2, [r4, #0]
 80211ba:	3b00      	subs	r3, #0
 80211bc:	bf18      	it	ne
 80211be:	2301      	movne	r3, #1
 80211c0:	0692      	lsls	r2, r2, #26
 80211c2:	d42b      	bmi.n	802121c <_printf_common+0xb0>
 80211c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80211c8:	4641      	mov	r1, r8
 80211ca:	4638      	mov	r0, r7
 80211cc:	47c8      	blx	r9
 80211ce:	3001      	adds	r0, #1
 80211d0:	d01e      	beq.n	8021210 <_printf_common+0xa4>
 80211d2:	6823      	ldr	r3, [r4, #0]
 80211d4:	6922      	ldr	r2, [r4, #16]
 80211d6:	f003 0306 	and.w	r3, r3, #6
 80211da:	2b04      	cmp	r3, #4
 80211dc:	bf02      	ittt	eq
 80211de:	68e5      	ldreq	r5, [r4, #12]
 80211e0:	6833      	ldreq	r3, [r6, #0]
 80211e2:	1aed      	subeq	r5, r5, r3
 80211e4:	68a3      	ldr	r3, [r4, #8]
 80211e6:	bf0c      	ite	eq
 80211e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80211ec:	2500      	movne	r5, #0
 80211ee:	4293      	cmp	r3, r2
 80211f0:	bfc4      	itt	gt
 80211f2:	1a9b      	subgt	r3, r3, r2
 80211f4:	18ed      	addgt	r5, r5, r3
 80211f6:	2600      	movs	r6, #0
 80211f8:	341a      	adds	r4, #26
 80211fa:	42b5      	cmp	r5, r6
 80211fc:	d11a      	bne.n	8021234 <_printf_common+0xc8>
 80211fe:	2000      	movs	r0, #0
 8021200:	e008      	b.n	8021214 <_printf_common+0xa8>
 8021202:	2301      	movs	r3, #1
 8021204:	4652      	mov	r2, sl
 8021206:	4641      	mov	r1, r8
 8021208:	4638      	mov	r0, r7
 802120a:	47c8      	blx	r9
 802120c:	3001      	adds	r0, #1
 802120e:	d103      	bne.n	8021218 <_printf_common+0xac>
 8021210:	f04f 30ff 	mov.w	r0, #4294967295
 8021214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021218:	3501      	adds	r5, #1
 802121a:	e7c6      	b.n	80211aa <_printf_common+0x3e>
 802121c:	18e1      	adds	r1, r4, r3
 802121e:	1c5a      	adds	r2, r3, #1
 8021220:	2030      	movs	r0, #48	@ 0x30
 8021222:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021226:	4422      	add	r2, r4
 8021228:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802122c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021230:	3302      	adds	r3, #2
 8021232:	e7c7      	b.n	80211c4 <_printf_common+0x58>
 8021234:	2301      	movs	r3, #1
 8021236:	4622      	mov	r2, r4
 8021238:	4641      	mov	r1, r8
 802123a:	4638      	mov	r0, r7
 802123c:	47c8      	blx	r9
 802123e:	3001      	adds	r0, #1
 8021240:	d0e6      	beq.n	8021210 <_printf_common+0xa4>
 8021242:	3601      	adds	r6, #1
 8021244:	e7d9      	b.n	80211fa <_printf_common+0x8e>
	...

08021248 <_printf_i>:
 8021248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802124c:	7e0f      	ldrb	r7, [r1, #24]
 802124e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021250:	2f78      	cmp	r7, #120	@ 0x78
 8021252:	4691      	mov	r9, r2
 8021254:	4680      	mov	r8, r0
 8021256:	460c      	mov	r4, r1
 8021258:	469a      	mov	sl, r3
 802125a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802125e:	d807      	bhi.n	8021270 <_printf_i+0x28>
 8021260:	2f62      	cmp	r7, #98	@ 0x62
 8021262:	d80a      	bhi.n	802127a <_printf_i+0x32>
 8021264:	2f00      	cmp	r7, #0
 8021266:	f000 80d2 	beq.w	802140e <_printf_i+0x1c6>
 802126a:	2f58      	cmp	r7, #88	@ 0x58
 802126c:	f000 80b9 	beq.w	80213e2 <_printf_i+0x19a>
 8021270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021278:	e03a      	b.n	80212f0 <_printf_i+0xa8>
 802127a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802127e:	2b15      	cmp	r3, #21
 8021280:	d8f6      	bhi.n	8021270 <_printf_i+0x28>
 8021282:	a101      	add	r1, pc, #4	@ (adr r1, 8021288 <_printf_i+0x40>)
 8021284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021288:	080212e1 	.word	0x080212e1
 802128c:	080212f5 	.word	0x080212f5
 8021290:	08021271 	.word	0x08021271
 8021294:	08021271 	.word	0x08021271
 8021298:	08021271 	.word	0x08021271
 802129c:	08021271 	.word	0x08021271
 80212a0:	080212f5 	.word	0x080212f5
 80212a4:	08021271 	.word	0x08021271
 80212a8:	08021271 	.word	0x08021271
 80212ac:	08021271 	.word	0x08021271
 80212b0:	08021271 	.word	0x08021271
 80212b4:	080213f5 	.word	0x080213f5
 80212b8:	0802131f 	.word	0x0802131f
 80212bc:	080213af 	.word	0x080213af
 80212c0:	08021271 	.word	0x08021271
 80212c4:	08021271 	.word	0x08021271
 80212c8:	08021417 	.word	0x08021417
 80212cc:	08021271 	.word	0x08021271
 80212d0:	0802131f 	.word	0x0802131f
 80212d4:	08021271 	.word	0x08021271
 80212d8:	08021271 	.word	0x08021271
 80212dc:	080213b7 	.word	0x080213b7
 80212e0:	6833      	ldr	r3, [r6, #0]
 80212e2:	1d1a      	adds	r2, r3, #4
 80212e4:	681b      	ldr	r3, [r3, #0]
 80212e6:	6032      	str	r2, [r6, #0]
 80212e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80212ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80212f0:	2301      	movs	r3, #1
 80212f2:	e09d      	b.n	8021430 <_printf_i+0x1e8>
 80212f4:	6833      	ldr	r3, [r6, #0]
 80212f6:	6820      	ldr	r0, [r4, #0]
 80212f8:	1d19      	adds	r1, r3, #4
 80212fa:	6031      	str	r1, [r6, #0]
 80212fc:	0606      	lsls	r6, r0, #24
 80212fe:	d501      	bpl.n	8021304 <_printf_i+0xbc>
 8021300:	681d      	ldr	r5, [r3, #0]
 8021302:	e003      	b.n	802130c <_printf_i+0xc4>
 8021304:	0645      	lsls	r5, r0, #25
 8021306:	d5fb      	bpl.n	8021300 <_printf_i+0xb8>
 8021308:	f9b3 5000 	ldrsh.w	r5, [r3]
 802130c:	2d00      	cmp	r5, #0
 802130e:	da03      	bge.n	8021318 <_printf_i+0xd0>
 8021310:	232d      	movs	r3, #45	@ 0x2d
 8021312:	426d      	negs	r5, r5
 8021314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021318:	4859      	ldr	r0, [pc, #356]	@ (8021480 <_printf_i+0x238>)
 802131a:	230a      	movs	r3, #10
 802131c:	e011      	b.n	8021342 <_printf_i+0xfa>
 802131e:	6821      	ldr	r1, [r4, #0]
 8021320:	6833      	ldr	r3, [r6, #0]
 8021322:	0608      	lsls	r0, r1, #24
 8021324:	f853 5b04 	ldr.w	r5, [r3], #4
 8021328:	d402      	bmi.n	8021330 <_printf_i+0xe8>
 802132a:	0649      	lsls	r1, r1, #25
 802132c:	bf48      	it	mi
 802132e:	b2ad      	uxthmi	r5, r5
 8021330:	2f6f      	cmp	r7, #111	@ 0x6f
 8021332:	4853      	ldr	r0, [pc, #332]	@ (8021480 <_printf_i+0x238>)
 8021334:	6033      	str	r3, [r6, #0]
 8021336:	bf14      	ite	ne
 8021338:	230a      	movne	r3, #10
 802133a:	2308      	moveq	r3, #8
 802133c:	2100      	movs	r1, #0
 802133e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021342:	6866      	ldr	r6, [r4, #4]
 8021344:	60a6      	str	r6, [r4, #8]
 8021346:	2e00      	cmp	r6, #0
 8021348:	bfa2      	ittt	ge
 802134a:	6821      	ldrge	r1, [r4, #0]
 802134c:	f021 0104 	bicge.w	r1, r1, #4
 8021350:	6021      	strge	r1, [r4, #0]
 8021352:	b90d      	cbnz	r5, 8021358 <_printf_i+0x110>
 8021354:	2e00      	cmp	r6, #0
 8021356:	d04b      	beq.n	80213f0 <_printf_i+0x1a8>
 8021358:	4616      	mov	r6, r2
 802135a:	fbb5 f1f3 	udiv	r1, r5, r3
 802135e:	fb03 5711 	mls	r7, r3, r1, r5
 8021362:	5dc7      	ldrb	r7, [r0, r7]
 8021364:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021368:	462f      	mov	r7, r5
 802136a:	42bb      	cmp	r3, r7
 802136c:	460d      	mov	r5, r1
 802136e:	d9f4      	bls.n	802135a <_printf_i+0x112>
 8021370:	2b08      	cmp	r3, #8
 8021372:	d10b      	bne.n	802138c <_printf_i+0x144>
 8021374:	6823      	ldr	r3, [r4, #0]
 8021376:	07df      	lsls	r7, r3, #31
 8021378:	d508      	bpl.n	802138c <_printf_i+0x144>
 802137a:	6923      	ldr	r3, [r4, #16]
 802137c:	6861      	ldr	r1, [r4, #4]
 802137e:	4299      	cmp	r1, r3
 8021380:	bfde      	ittt	le
 8021382:	2330      	movle	r3, #48	@ 0x30
 8021384:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021388:	f106 36ff 	addle.w	r6, r6, #4294967295
 802138c:	1b92      	subs	r2, r2, r6
 802138e:	6122      	str	r2, [r4, #16]
 8021390:	f8cd a000 	str.w	sl, [sp]
 8021394:	464b      	mov	r3, r9
 8021396:	aa03      	add	r2, sp, #12
 8021398:	4621      	mov	r1, r4
 802139a:	4640      	mov	r0, r8
 802139c:	f7ff fee6 	bl	802116c <_printf_common>
 80213a0:	3001      	adds	r0, #1
 80213a2:	d14a      	bne.n	802143a <_printf_i+0x1f2>
 80213a4:	f04f 30ff 	mov.w	r0, #4294967295
 80213a8:	b004      	add	sp, #16
 80213aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80213ae:	6823      	ldr	r3, [r4, #0]
 80213b0:	f043 0320 	orr.w	r3, r3, #32
 80213b4:	6023      	str	r3, [r4, #0]
 80213b6:	4833      	ldr	r0, [pc, #204]	@ (8021484 <_printf_i+0x23c>)
 80213b8:	2778      	movs	r7, #120	@ 0x78
 80213ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80213be:	6823      	ldr	r3, [r4, #0]
 80213c0:	6831      	ldr	r1, [r6, #0]
 80213c2:	061f      	lsls	r7, r3, #24
 80213c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80213c8:	d402      	bmi.n	80213d0 <_printf_i+0x188>
 80213ca:	065f      	lsls	r7, r3, #25
 80213cc:	bf48      	it	mi
 80213ce:	b2ad      	uxthmi	r5, r5
 80213d0:	6031      	str	r1, [r6, #0]
 80213d2:	07d9      	lsls	r1, r3, #31
 80213d4:	bf44      	itt	mi
 80213d6:	f043 0320 	orrmi.w	r3, r3, #32
 80213da:	6023      	strmi	r3, [r4, #0]
 80213dc:	b11d      	cbz	r5, 80213e6 <_printf_i+0x19e>
 80213de:	2310      	movs	r3, #16
 80213e0:	e7ac      	b.n	802133c <_printf_i+0xf4>
 80213e2:	4827      	ldr	r0, [pc, #156]	@ (8021480 <_printf_i+0x238>)
 80213e4:	e7e9      	b.n	80213ba <_printf_i+0x172>
 80213e6:	6823      	ldr	r3, [r4, #0]
 80213e8:	f023 0320 	bic.w	r3, r3, #32
 80213ec:	6023      	str	r3, [r4, #0]
 80213ee:	e7f6      	b.n	80213de <_printf_i+0x196>
 80213f0:	4616      	mov	r6, r2
 80213f2:	e7bd      	b.n	8021370 <_printf_i+0x128>
 80213f4:	6833      	ldr	r3, [r6, #0]
 80213f6:	6825      	ldr	r5, [r4, #0]
 80213f8:	6961      	ldr	r1, [r4, #20]
 80213fa:	1d18      	adds	r0, r3, #4
 80213fc:	6030      	str	r0, [r6, #0]
 80213fe:	062e      	lsls	r6, r5, #24
 8021400:	681b      	ldr	r3, [r3, #0]
 8021402:	d501      	bpl.n	8021408 <_printf_i+0x1c0>
 8021404:	6019      	str	r1, [r3, #0]
 8021406:	e002      	b.n	802140e <_printf_i+0x1c6>
 8021408:	0668      	lsls	r0, r5, #25
 802140a:	d5fb      	bpl.n	8021404 <_printf_i+0x1bc>
 802140c:	8019      	strh	r1, [r3, #0]
 802140e:	2300      	movs	r3, #0
 8021410:	6123      	str	r3, [r4, #16]
 8021412:	4616      	mov	r6, r2
 8021414:	e7bc      	b.n	8021390 <_printf_i+0x148>
 8021416:	6833      	ldr	r3, [r6, #0]
 8021418:	1d1a      	adds	r2, r3, #4
 802141a:	6032      	str	r2, [r6, #0]
 802141c:	681e      	ldr	r6, [r3, #0]
 802141e:	6862      	ldr	r2, [r4, #4]
 8021420:	2100      	movs	r1, #0
 8021422:	4630      	mov	r0, r6
 8021424:	f7de ff6c 	bl	8000300 <memchr>
 8021428:	b108      	cbz	r0, 802142e <_printf_i+0x1e6>
 802142a:	1b80      	subs	r0, r0, r6
 802142c:	6060      	str	r0, [r4, #4]
 802142e:	6863      	ldr	r3, [r4, #4]
 8021430:	6123      	str	r3, [r4, #16]
 8021432:	2300      	movs	r3, #0
 8021434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021438:	e7aa      	b.n	8021390 <_printf_i+0x148>
 802143a:	6923      	ldr	r3, [r4, #16]
 802143c:	4632      	mov	r2, r6
 802143e:	4649      	mov	r1, r9
 8021440:	4640      	mov	r0, r8
 8021442:	47d0      	blx	sl
 8021444:	3001      	adds	r0, #1
 8021446:	d0ad      	beq.n	80213a4 <_printf_i+0x15c>
 8021448:	6823      	ldr	r3, [r4, #0]
 802144a:	079b      	lsls	r3, r3, #30
 802144c:	d413      	bmi.n	8021476 <_printf_i+0x22e>
 802144e:	68e0      	ldr	r0, [r4, #12]
 8021450:	9b03      	ldr	r3, [sp, #12]
 8021452:	4298      	cmp	r0, r3
 8021454:	bfb8      	it	lt
 8021456:	4618      	movlt	r0, r3
 8021458:	e7a6      	b.n	80213a8 <_printf_i+0x160>
 802145a:	2301      	movs	r3, #1
 802145c:	4632      	mov	r2, r6
 802145e:	4649      	mov	r1, r9
 8021460:	4640      	mov	r0, r8
 8021462:	47d0      	blx	sl
 8021464:	3001      	adds	r0, #1
 8021466:	d09d      	beq.n	80213a4 <_printf_i+0x15c>
 8021468:	3501      	adds	r5, #1
 802146a:	68e3      	ldr	r3, [r4, #12]
 802146c:	9903      	ldr	r1, [sp, #12]
 802146e:	1a5b      	subs	r3, r3, r1
 8021470:	42ab      	cmp	r3, r5
 8021472:	dcf2      	bgt.n	802145a <_printf_i+0x212>
 8021474:	e7eb      	b.n	802144e <_printf_i+0x206>
 8021476:	2500      	movs	r5, #0
 8021478:	f104 0619 	add.w	r6, r4, #25
 802147c:	e7f5      	b.n	802146a <_printf_i+0x222>
 802147e:	bf00      	nop
 8021480:	0803545a 	.word	0x0803545a
 8021484:	0803546b 	.word	0x0803546b

08021488 <_scanf_float>:
 8021488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802148c:	b087      	sub	sp, #28
 802148e:	4617      	mov	r7, r2
 8021490:	9303      	str	r3, [sp, #12]
 8021492:	688b      	ldr	r3, [r1, #8]
 8021494:	1e5a      	subs	r2, r3, #1
 8021496:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 802149a:	bf81      	itttt	hi
 802149c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80214a0:	eb03 0b05 	addhi.w	fp, r3, r5
 80214a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80214a8:	608b      	strhi	r3, [r1, #8]
 80214aa:	680b      	ldr	r3, [r1, #0]
 80214ac:	460a      	mov	r2, r1
 80214ae:	f04f 0500 	mov.w	r5, #0
 80214b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80214b6:	f842 3b1c 	str.w	r3, [r2], #28
 80214ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80214be:	4680      	mov	r8, r0
 80214c0:	460c      	mov	r4, r1
 80214c2:	bf98      	it	ls
 80214c4:	f04f 0b00 	movls.w	fp, #0
 80214c8:	9201      	str	r2, [sp, #4]
 80214ca:	4616      	mov	r6, r2
 80214cc:	46aa      	mov	sl, r5
 80214ce:	46a9      	mov	r9, r5
 80214d0:	9502      	str	r5, [sp, #8]
 80214d2:	68a2      	ldr	r2, [r4, #8]
 80214d4:	b152      	cbz	r2, 80214ec <_scanf_float+0x64>
 80214d6:	683b      	ldr	r3, [r7, #0]
 80214d8:	781b      	ldrb	r3, [r3, #0]
 80214da:	2b4e      	cmp	r3, #78	@ 0x4e
 80214dc:	d864      	bhi.n	80215a8 <_scanf_float+0x120>
 80214de:	2b40      	cmp	r3, #64	@ 0x40
 80214e0:	d83c      	bhi.n	802155c <_scanf_float+0xd4>
 80214e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80214e6:	b2c8      	uxtb	r0, r1
 80214e8:	280e      	cmp	r0, #14
 80214ea:	d93a      	bls.n	8021562 <_scanf_float+0xda>
 80214ec:	f1b9 0f00 	cmp.w	r9, #0
 80214f0:	d003      	beq.n	80214fa <_scanf_float+0x72>
 80214f2:	6823      	ldr	r3, [r4, #0]
 80214f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80214f8:	6023      	str	r3, [r4, #0]
 80214fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80214fe:	f1ba 0f01 	cmp.w	sl, #1
 8021502:	f200 8117 	bhi.w	8021734 <_scanf_float+0x2ac>
 8021506:	9b01      	ldr	r3, [sp, #4]
 8021508:	429e      	cmp	r6, r3
 802150a:	f200 8108 	bhi.w	802171e <_scanf_float+0x296>
 802150e:	2001      	movs	r0, #1
 8021510:	b007      	add	sp, #28
 8021512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021516:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 802151a:	2a0d      	cmp	r2, #13
 802151c:	d8e6      	bhi.n	80214ec <_scanf_float+0x64>
 802151e:	a101      	add	r1, pc, #4	@ (adr r1, 8021524 <_scanf_float+0x9c>)
 8021520:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8021524:	0802166b 	.word	0x0802166b
 8021528:	080214ed 	.word	0x080214ed
 802152c:	080214ed 	.word	0x080214ed
 8021530:	080214ed 	.word	0x080214ed
 8021534:	080216cb 	.word	0x080216cb
 8021538:	080216a3 	.word	0x080216a3
 802153c:	080214ed 	.word	0x080214ed
 8021540:	080214ed 	.word	0x080214ed
 8021544:	08021679 	.word	0x08021679
 8021548:	080214ed 	.word	0x080214ed
 802154c:	080214ed 	.word	0x080214ed
 8021550:	080214ed 	.word	0x080214ed
 8021554:	080214ed 	.word	0x080214ed
 8021558:	08021631 	.word	0x08021631
 802155c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8021560:	e7db      	b.n	802151a <_scanf_float+0x92>
 8021562:	290e      	cmp	r1, #14
 8021564:	d8c2      	bhi.n	80214ec <_scanf_float+0x64>
 8021566:	a001      	add	r0, pc, #4	@ (adr r0, 802156c <_scanf_float+0xe4>)
 8021568:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802156c:	08021621 	.word	0x08021621
 8021570:	080214ed 	.word	0x080214ed
 8021574:	08021621 	.word	0x08021621
 8021578:	080216b7 	.word	0x080216b7
 802157c:	080214ed 	.word	0x080214ed
 8021580:	080215c9 	.word	0x080215c9
 8021584:	08021607 	.word	0x08021607
 8021588:	08021607 	.word	0x08021607
 802158c:	08021607 	.word	0x08021607
 8021590:	08021607 	.word	0x08021607
 8021594:	08021607 	.word	0x08021607
 8021598:	08021607 	.word	0x08021607
 802159c:	08021607 	.word	0x08021607
 80215a0:	08021607 	.word	0x08021607
 80215a4:	08021607 	.word	0x08021607
 80215a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80215aa:	d809      	bhi.n	80215c0 <_scanf_float+0x138>
 80215ac:	2b60      	cmp	r3, #96	@ 0x60
 80215ae:	d8b2      	bhi.n	8021516 <_scanf_float+0x8e>
 80215b0:	2b54      	cmp	r3, #84	@ 0x54
 80215b2:	d07b      	beq.n	80216ac <_scanf_float+0x224>
 80215b4:	2b59      	cmp	r3, #89	@ 0x59
 80215b6:	d199      	bne.n	80214ec <_scanf_float+0x64>
 80215b8:	2d07      	cmp	r5, #7
 80215ba:	d197      	bne.n	80214ec <_scanf_float+0x64>
 80215bc:	2508      	movs	r5, #8
 80215be:	e02c      	b.n	802161a <_scanf_float+0x192>
 80215c0:	2b74      	cmp	r3, #116	@ 0x74
 80215c2:	d073      	beq.n	80216ac <_scanf_float+0x224>
 80215c4:	2b79      	cmp	r3, #121	@ 0x79
 80215c6:	e7f6      	b.n	80215b6 <_scanf_float+0x12e>
 80215c8:	6821      	ldr	r1, [r4, #0]
 80215ca:	05c8      	lsls	r0, r1, #23
 80215cc:	d51b      	bpl.n	8021606 <_scanf_float+0x17e>
 80215ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80215d2:	6021      	str	r1, [r4, #0]
 80215d4:	f109 0901 	add.w	r9, r9, #1
 80215d8:	f1bb 0f00 	cmp.w	fp, #0
 80215dc:	d003      	beq.n	80215e6 <_scanf_float+0x15e>
 80215de:	3201      	adds	r2, #1
 80215e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80215e4:	60a2      	str	r2, [r4, #8]
 80215e6:	68a3      	ldr	r3, [r4, #8]
 80215e8:	3b01      	subs	r3, #1
 80215ea:	60a3      	str	r3, [r4, #8]
 80215ec:	6923      	ldr	r3, [r4, #16]
 80215ee:	3301      	adds	r3, #1
 80215f0:	6123      	str	r3, [r4, #16]
 80215f2:	687b      	ldr	r3, [r7, #4]
 80215f4:	3b01      	subs	r3, #1
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	607b      	str	r3, [r7, #4]
 80215fa:	f340 8087 	ble.w	802170c <_scanf_float+0x284>
 80215fe:	683b      	ldr	r3, [r7, #0]
 8021600:	3301      	adds	r3, #1
 8021602:	603b      	str	r3, [r7, #0]
 8021604:	e765      	b.n	80214d2 <_scanf_float+0x4a>
 8021606:	eb1a 0105 	adds.w	r1, sl, r5
 802160a:	f47f af6f 	bne.w	80214ec <_scanf_float+0x64>
 802160e:	6822      	ldr	r2, [r4, #0]
 8021610:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8021614:	6022      	str	r2, [r4, #0]
 8021616:	460d      	mov	r5, r1
 8021618:	468a      	mov	sl, r1
 802161a:	f806 3b01 	strb.w	r3, [r6], #1
 802161e:	e7e2      	b.n	80215e6 <_scanf_float+0x15e>
 8021620:	6822      	ldr	r2, [r4, #0]
 8021622:	0610      	lsls	r0, r2, #24
 8021624:	f57f af62 	bpl.w	80214ec <_scanf_float+0x64>
 8021628:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802162c:	6022      	str	r2, [r4, #0]
 802162e:	e7f4      	b.n	802161a <_scanf_float+0x192>
 8021630:	f1ba 0f00 	cmp.w	sl, #0
 8021634:	d10e      	bne.n	8021654 <_scanf_float+0x1cc>
 8021636:	f1b9 0f00 	cmp.w	r9, #0
 802163a:	d10e      	bne.n	802165a <_scanf_float+0x1d2>
 802163c:	6822      	ldr	r2, [r4, #0]
 802163e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8021642:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8021646:	d108      	bne.n	802165a <_scanf_float+0x1d2>
 8021648:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 802164c:	6022      	str	r2, [r4, #0]
 802164e:	f04f 0a01 	mov.w	sl, #1
 8021652:	e7e2      	b.n	802161a <_scanf_float+0x192>
 8021654:	f1ba 0f02 	cmp.w	sl, #2
 8021658:	d055      	beq.n	8021706 <_scanf_float+0x27e>
 802165a:	2d01      	cmp	r5, #1
 802165c:	d002      	beq.n	8021664 <_scanf_float+0x1dc>
 802165e:	2d04      	cmp	r5, #4
 8021660:	f47f af44 	bne.w	80214ec <_scanf_float+0x64>
 8021664:	3501      	adds	r5, #1
 8021666:	b2ed      	uxtb	r5, r5
 8021668:	e7d7      	b.n	802161a <_scanf_float+0x192>
 802166a:	f1ba 0f01 	cmp.w	sl, #1
 802166e:	f47f af3d 	bne.w	80214ec <_scanf_float+0x64>
 8021672:	f04f 0a02 	mov.w	sl, #2
 8021676:	e7d0      	b.n	802161a <_scanf_float+0x192>
 8021678:	b97d      	cbnz	r5, 802169a <_scanf_float+0x212>
 802167a:	f1b9 0f00 	cmp.w	r9, #0
 802167e:	f47f af38 	bne.w	80214f2 <_scanf_float+0x6a>
 8021682:	6822      	ldr	r2, [r4, #0]
 8021684:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8021688:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 802168c:	f040 8101 	bne.w	8021892 <_scanf_float+0x40a>
 8021690:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8021694:	6022      	str	r2, [r4, #0]
 8021696:	2501      	movs	r5, #1
 8021698:	e7bf      	b.n	802161a <_scanf_float+0x192>
 802169a:	2d03      	cmp	r5, #3
 802169c:	d0e2      	beq.n	8021664 <_scanf_float+0x1dc>
 802169e:	2d05      	cmp	r5, #5
 80216a0:	e7de      	b.n	8021660 <_scanf_float+0x1d8>
 80216a2:	2d02      	cmp	r5, #2
 80216a4:	f47f af22 	bne.w	80214ec <_scanf_float+0x64>
 80216a8:	2503      	movs	r5, #3
 80216aa:	e7b6      	b.n	802161a <_scanf_float+0x192>
 80216ac:	2d06      	cmp	r5, #6
 80216ae:	f47f af1d 	bne.w	80214ec <_scanf_float+0x64>
 80216b2:	2507      	movs	r5, #7
 80216b4:	e7b1      	b.n	802161a <_scanf_float+0x192>
 80216b6:	6822      	ldr	r2, [r4, #0]
 80216b8:	0591      	lsls	r1, r2, #22
 80216ba:	f57f af17 	bpl.w	80214ec <_scanf_float+0x64>
 80216be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80216c2:	6022      	str	r2, [r4, #0]
 80216c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80216c8:	e7a7      	b.n	802161a <_scanf_float+0x192>
 80216ca:	6822      	ldr	r2, [r4, #0]
 80216cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80216d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80216d4:	d006      	beq.n	80216e4 <_scanf_float+0x25c>
 80216d6:	0550      	lsls	r0, r2, #21
 80216d8:	f57f af08 	bpl.w	80214ec <_scanf_float+0x64>
 80216dc:	f1b9 0f00 	cmp.w	r9, #0
 80216e0:	f000 80d7 	beq.w	8021892 <_scanf_float+0x40a>
 80216e4:	0591      	lsls	r1, r2, #22
 80216e6:	bf58      	it	pl
 80216e8:	9902      	ldrpl	r1, [sp, #8]
 80216ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80216ee:	bf58      	it	pl
 80216f0:	eba9 0101 	subpl.w	r1, r9, r1
 80216f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80216f8:	bf58      	it	pl
 80216fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80216fe:	6022      	str	r2, [r4, #0]
 8021700:	f04f 0900 	mov.w	r9, #0
 8021704:	e789      	b.n	802161a <_scanf_float+0x192>
 8021706:	f04f 0a03 	mov.w	sl, #3
 802170a:	e786      	b.n	802161a <_scanf_float+0x192>
 802170c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8021710:	4639      	mov	r1, r7
 8021712:	4640      	mov	r0, r8
 8021714:	4798      	blx	r3
 8021716:	2800      	cmp	r0, #0
 8021718:	f43f aedb 	beq.w	80214d2 <_scanf_float+0x4a>
 802171c:	e6e6      	b.n	80214ec <_scanf_float+0x64>
 802171e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8021722:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8021726:	463a      	mov	r2, r7
 8021728:	4640      	mov	r0, r8
 802172a:	4798      	blx	r3
 802172c:	6923      	ldr	r3, [r4, #16]
 802172e:	3b01      	subs	r3, #1
 8021730:	6123      	str	r3, [r4, #16]
 8021732:	e6e8      	b.n	8021506 <_scanf_float+0x7e>
 8021734:	1e6b      	subs	r3, r5, #1
 8021736:	2b06      	cmp	r3, #6
 8021738:	d824      	bhi.n	8021784 <_scanf_float+0x2fc>
 802173a:	2d02      	cmp	r5, #2
 802173c:	d836      	bhi.n	80217ac <_scanf_float+0x324>
 802173e:	9b01      	ldr	r3, [sp, #4]
 8021740:	429e      	cmp	r6, r3
 8021742:	f67f aee4 	bls.w	802150e <_scanf_float+0x86>
 8021746:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802174a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802174e:	463a      	mov	r2, r7
 8021750:	4640      	mov	r0, r8
 8021752:	4798      	blx	r3
 8021754:	6923      	ldr	r3, [r4, #16]
 8021756:	3b01      	subs	r3, #1
 8021758:	6123      	str	r3, [r4, #16]
 802175a:	e7f0      	b.n	802173e <_scanf_float+0x2b6>
 802175c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8021760:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8021764:	463a      	mov	r2, r7
 8021766:	4640      	mov	r0, r8
 8021768:	4798      	blx	r3
 802176a:	6923      	ldr	r3, [r4, #16]
 802176c:	3b01      	subs	r3, #1
 802176e:	6123      	str	r3, [r4, #16]
 8021770:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021774:	fa5f fa8a 	uxtb.w	sl, sl
 8021778:	f1ba 0f02 	cmp.w	sl, #2
 802177c:	d1ee      	bne.n	802175c <_scanf_float+0x2d4>
 802177e:	3d03      	subs	r5, #3
 8021780:	b2ed      	uxtb	r5, r5
 8021782:	1b76      	subs	r6, r6, r5
 8021784:	6823      	ldr	r3, [r4, #0]
 8021786:	05da      	lsls	r2, r3, #23
 8021788:	d530      	bpl.n	80217ec <_scanf_float+0x364>
 802178a:	055b      	lsls	r3, r3, #21
 802178c:	d511      	bpl.n	80217b2 <_scanf_float+0x32a>
 802178e:	9b01      	ldr	r3, [sp, #4]
 8021790:	429e      	cmp	r6, r3
 8021792:	f67f aebc 	bls.w	802150e <_scanf_float+0x86>
 8021796:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802179a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802179e:	463a      	mov	r2, r7
 80217a0:	4640      	mov	r0, r8
 80217a2:	4798      	blx	r3
 80217a4:	6923      	ldr	r3, [r4, #16]
 80217a6:	3b01      	subs	r3, #1
 80217a8:	6123      	str	r3, [r4, #16]
 80217aa:	e7f0      	b.n	802178e <_scanf_float+0x306>
 80217ac:	46aa      	mov	sl, r5
 80217ae:	46b3      	mov	fp, r6
 80217b0:	e7de      	b.n	8021770 <_scanf_float+0x2e8>
 80217b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80217b6:	6923      	ldr	r3, [r4, #16]
 80217b8:	2965      	cmp	r1, #101	@ 0x65
 80217ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80217be:	f106 35ff 	add.w	r5, r6, #4294967295
 80217c2:	6123      	str	r3, [r4, #16]
 80217c4:	d00c      	beq.n	80217e0 <_scanf_float+0x358>
 80217c6:	2945      	cmp	r1, #69	@ 0x45
 80217c8:	d00a      	beq.n	80217e0 <_scanf_float+0x358>
 80217ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80217ce:	463a      	mov	r2, r7
 80217d0:	4640      	mov	r0, r8
 80217d2:	4798      	blx	r3
 80217d4:	6923      	ldr	r3, [r4, #16]
 80217d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80217da:	3b01      	subs	r3, #1
 80217dc:	1eb5      	subs	r5, r6, #2
 80217de:	6123      	str	r3, [r4, #16]
 80217e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80217e4:	463a      	mov	r2, r7
 80217e6:	4640      	mov	r0, r8
 80217e8:	4798      	blx	r3
 80217ea:	462e      	mov	r6, r5
 80217ec:	6822      	ldr	r2, [r4, #0]
 80217ee:	f012 0210 	ands.w	r2, r2, #16
 80217f2:	d001      	beq.n	80217f8 <_scanf_float+0x370>
 80217f4:	2000      	movs	r0, #0
 80217f6:	e68b      	b.n	8021510 <_scanf_float+0x88>
 80217f8:	7032      	strb	r2, [r6, #0]
 80217fa:	6823      	ldr	r3, [r4, #0]
 80217fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8021800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021804:	d11a      	bne.n	802183c <_scanf_float+0x3b4>
 8021806:	9b02      	ldr	r3, [sp, #8]
 8021808:	454b      	cmp	r3, r9
 802180a:	eba3 0209 	sub.w	r2, r3, r9
 802180e:	d121      	bne.n	8021854 <_scanf_float+0x3cc>
 8021810:	9901      	ldr	r1, [sp, #4]
 8021812:	2200      	movs	r2, #0
 8021814:	4640      	mov	r0, r8
 8021816:	f002 fc81 	bl	802411c <_strtod_r>
 802181a:	9b03      	ldr	r3, [sp, #12]
 802181c:	6821      	ldr	r1, [r4, #0]
 802181e:	681b      	ldr	r3, [r3, #0]
 8021820:	f011 0f02 	tst.w	r1, #2
 8021824:	f103 0204 	add.w	r2, r3, #4
 8021828:	d01f      	beq.n	802186a <_scanf_float+0x3e2>
 802182a:	9903      	ldr	r1, [sp, #12]
 802182c:	600a      	str	r2, [r1, #0]
 802182e:	681b      	ldr	r3, [r3, #0]
 8021830:	ed83 0b00 	vstr	d0, [r3]
 8021834:	68e3      	ldr	r3, [r4, #12]
 8021836:	3301      	adds	r3, #1
 8021838:	60e3      	str	r3, [r4, #12]
 802183a:	e7db      	b.n	80217f4 <_scanf_float+0x36c>
 802183c:	9b04      	ldr	r3, [sp, #16]
 802183e:	2b00      	cmp	r3, #0
 8021840:	d0e6      	beq.n	8021810 <_scanf_float+0x388>
 8021842:	9905      	ldr	r1, [sp, #20]
 8021844:	230a      	movs	r3, #10
 8021846:	3101      	adds	r1, #1
 8021848:	4640      	mov	r0, r8
 802184a:	f7ff f9d9 	bl	8020c00 <_strtol_r>
 802184e:	9b04      	ldr	r3, [sp, #16]
 8021850:	9e05      	ldr	r6, [sp, #20]
 8021852:	1ac2      	subs	r2, r0, r3
 8021854:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8021858:	429e      	cmp	r6, r3
 802185a:	bf28      	it	cs
 802185c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8021860:	490d      	ldr	r1, [pc, #52]	@ (8021898 <_scanf_float+0x410>)
 8021862:	4630      	mov	r0, r6
 8021864:	f000 f99c 	bl	8021ba0 <siprintf>
 8021868:	e7d2      	b.n	8021810 <_scanf_float+0x388>
 802186a:	f011 0f04 	tst.w	r1, #4
 802186e:	9903      	ldr	r1, [sp, #12]
 8021870:	600a      	str	r2, [r1, #0]
 8021872:	d1dc      	bne.n	802182e <_scanf_float+0x3a6>
 8021874:	eeb4 0b40 	vcmp.f64	d0, d0
 8021878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802187c:	681d      	ldr	r5, [r3, #0]
 802187e:	d705      	bvc.n	802188c <_scanf_float+0x404>
 8021880:	4806      	ldr	r0, [pc, #24]	@ (802189c <_scanf_float+0x414>)
 8021882:	f000 fbb3 	bl	8021fec <nanf>
 8021886:	ed85 0a00 	vstr	s0, [r5]
 802188a:	e7d3      	b.n	8021834 <_scanf_float+0x3ac>
 802188c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021890:	e7f9      	b.n	8021886 <_scanf_float+0x3fe>
 8021892:	f04f 0900 	mov.w	r9, #0
 8021896:	e630      	b.n	80214fa <_scanf_float+0x72>
 8021898:	0803547c 	.word	0x0803547c
 802189c:	080352d7 	.word	0x080352d7

080218a0 <std>:
 80218a0:	2300      	movs	r3, #0
 80218a2:	b510      	push	{r4, lr}
 80218a4:	4604      	mov	r4, r0
 80218a6:	e9c0 3300 	strd	r3, r3, [r0]
 80218aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80218ae:	6083      	str	r3, [r0, #8]
 80218b0:	8181      	strh	r1, [r0, #12]
 80218b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80218b4:	81c2      	strh	r2, [r0, #14]
 80218b6:	6183      	str	r3, [r0, #24]
 80218b8:	4619      	mov	r1, r3
 80218ba:	2208      	movs	r2, #8
 80218bc:	305c      	adds	r0, #92	@ 0x5c
 80218be:	f000 fa91 	bl	8021de4 <memset>
 80218c2:	4b0d      	ldr	r3, [pc, #52]	@ (80218f8 <std+0x58>)
 80218c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80218c6:	4b0d      	ldr	r3, [pc, #52]	@ (80218fc <std+0x5c>)
 80218c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80218ca:	4b0d      	ldr	r3, [pc, #52]	@ (8021900 <std+0x60>)
 80218cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80218ce:	4b0d      	ldr	r3, [pc, #52]	@ (8021904 <std+0x64>)
 80218d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80218d2:	4b0d      	ldr	r3, [pc, #52]	@ (8021908 <std+0x68>)
 80218d4:	6224      	str	r4, [r4, #32]
 80218d6:	429c      	cmp	r4, r3
 80218d8:	d006      	beq.n	80218e8 <std+0x48>
 80218da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80218de:	4294      	cmp	r4, r2
 80218e0:	d002      	beq.n	80218e8 <std+0x48>
 80218e2:	33d0      	adds	r3, #208	@ 0xd0
 80218e4:	429c      	cmp	r4, r3
 80218e6:	d105      	bne.n	80218f4 <std+0x54>
 80218e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80218ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80218f0:	f000 bb62 	b.w	8021fb8 <__retarget_lock_init_recursive>
 80218f4:	bd10      	pop	{r4, pc}
 80218f6:	bf00      	nop
 80218f8:	08021be1 	.word	0x08021be1
 80218fc:	08021c03 	.word	0x08021c03
 8021900:	08021c3b 	.word	0x08021c3b
 8021904:	08021c5f 	.word	0x08021c5f
 8021908:	24003f90 	.word	0x24003f90

0802190c <stdio_exit_handler>:
 802190c:	4a02      	ldr	r2, [pc, #8]	@ (8021918 <stdio_exit_handler+0xc>)
 802190e:	4903      	ldr	r1, [pc, #12]	@ (802191c <stdio_exit_handler+0x10>)
 8021910:	4803      	ldr	r0, [pc, #12]	@ (8021920 <stdio_exit_handler+0x14>)
 8021912:	f000 b87b 	b.w	8021a0c <_fwalk_sglue>
 8021916:	bf00      	nop
 8021918:	240007a4 	.word	0x240007a4
 802191c:	08024765 	.word	0x08024765
 8021920:	240007b4 	.word	0x240007b4

08021924 <cleanup_stdio>:
 8021924:	6841      	ldr	r1, [r0, #4]
 8021926:	4b0c      	ldr	r3, [pc, #48]	@ (8021958 <cleanup_stdio+0x34>)
 8021928:	4299      	cmp	r1, r3
 802192a:	b510      	push	{r4, lr}
 802192c:	4604      	mov	r4, r0
 802192e:	d001      	beq.n	8021934 <cleanup_stdio+0x10>
 8021930:	f002 ff18 	bl	8024764 <_fflush_r>
 8021934:	68a1      	ldr	r1, [r4, #8]
 8021936:	4b09      	ldr	r3, [pc, #36]	@ (802195c <cleanup_stdio+0x38>)
 8021938:	4299      	cmp	r1, r3
 802193a:	d002      	beq.n	8021942 <cleanup_stdio+0x1e>
 802193c:	4620      	mov	r0, r4
 802193e:	f002 ff11 	bl	8024764 <_fflush_r>
 8021942:	68e1      	ldr	r1, [r4, #12]
 8021944:	4b06      	ldr	r3, [pc, #24]	@ (8021960 <cleanup_stdio+0x3c>)
 8021946:	4299      	cmp	r1, r3
 8021948:	d004      	beq.n	8021954 <cleanup_stdio+0x30>
 802194a:	4620      	mov	r0, r4
 802194c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021950:	f002 bf08 	b.w	8024764 <_fflush_r>
 8021954:	bd10      	pop	{r4, pc}
 8021956:	bf00      	nop
 8021958:	24003f90 	.word	0x24003f90
 802195c:	24003ff8 	.word	0x24003ff8
 8021960:	24004060 	.word	0x24004060

08021964 <global_stdio_init.part.0>:
 8021964:	b510      	push	{r4, lr}
 8021966:	4b0b      	ldr	r3, [pc, #44]	@ (8021994 <global_stdio_init.part.0+0x30>)
 8021968:	4c0b      	ldr	r4, [pc, #44]	@ (8021998 <global_stdio_init.part.0+0x34>)
 802196a:	4a0c      	ldr	r2, [pc, #48]	@ (802199c <global_stdio_init.part.0+0x38>)
 802196c:	601a      	str	r2, [r3, #0]
 802196e:	4620      	mov	r0, r4
 8021970:	2200      	movs	r2, #0
 8021972:	2104      	movs	r1, #4
 8021974:	f7ff ff94 	bl	80218a0 <std>
 8021978:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802197c:	2201      	movs	r2, #1
 802197e:	2109      	movs	r1, #9
 8021980:	f7ff ff8e 	bl	80218a0 <std>
 8021984:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021988:	2202      	movs	r2, #2
 802198a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802198e:	2112      	movs	r1, #18
 8021990:	f7ff bf86 	b.w	80218a0 <std>
 8021994:	240040c8 	.word	0x240040c8
 8021998:	24003f90 	.word	0x24003f90
 802199c:	0802190d 	.word	0x0802190d

080219a0 <__sfp_lock_acquire>:
 80219a0:	4801      	ldr	r0, [pc, #4]	@ (80219a8 <__sfp_lock_acquire+0x8>)
 80219a2:	f000 bb0a 	b.w	8021fba <__retarget_lock_acquire_recursive>
 80219a6:	bf00      	nop
 80219a8:	240040d1 	.word	0x240040d1

080219ac <__sfp_lock_release>:
 80219ac:	4801      	ldr	r0, [pc, #4]	@ (80219b4 <__sfp_lock_release+0x8>)
 80219ae:	f000 bb05 	b.w	8021fbc <__retarget_lock_release_recursive>
 80219b2:	bf00      	nop
 80219b4:	240040d1 	.word	0x240040d1

080219b8 <__sinit>:
 80219b8:	b510      	push	{r4, lr}
 80219ba:	4604      	mov	r4, r0
 80219bc:	f7ff fff0 	bl	80219a0 <__sfp_lock_acquire>
 80219c0:	6a23      	ldr	r3, [r4, #32]
 80219c2:	b11b      	cbz	r3, 80219cc <__sinit+0x14>
 80219c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80219c8:	f7ff bff0 	b.w	80219ac <__sfp_lock_release>
 80219cc:	4b04      	ldr	r3, [pc, #16]	@ (80219e0 <__sinit+0x28>)
 80219ce:	6223      	str	r3, [r4, #32]
 80219d0:	4b04      	ldr	r3, [pc, #16]	@ (80219e4 <__sinit+0x2c>)
 80219d2:	681b      	ldr	r3, [r3, #0]
 80219d4:	2b00      	cmp	r3, #0
 80219d6:	d1f5      	bne.n	80219c4 <__sinit+0xc>
 80219d8:	f7ff ffc4 	bl	8021964 <global_stdio_init.part.0>
 80219dc:	e7f2      	b.n	80219c4 <__sinit+0xc>
 80219de:	bf00      	nop
 80219e0:	08021925 	.word	0x08021925
 80219e4:	240040c8 	.word	0x240040c8

080219e8 <fiprintf>:
 80219e8:	b40e      	push	{r1, r2, r3}
 80219ea:	b503      	push	{r0, r1, lr}
 80219ec:	4601      	mov	r1, r0
 80219ee:	ab03      	add	r3, sp, #12
 80219f0:	4805      	ldr	r0, [pc, #20]	@ (8021a08 <fiprintf+0x20>)
 80219f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80219f6:	6800      	ldr	r0, [r0, #0]
 80219f8:	9301      	str	r3, [sp, #4]
 80219fa:	f002 fd17 	bl	802442c <_vfiprintf_r>
 80219fe:	b002      	add	sp, #8
 8021a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8021a04:	b003      	add	sp, #12
 8021a06:	4770      	bx	lr
 8021a08:	240007b0 	.word	0x240007b0

08021a0c <_fwalk_sglue>:
 8021a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a10:	4607      	mov	r7, r0
 8021a12:	4688      	mov	r8, r1
 8021a14:	4614      	mov	r4, r2
 8021a16:	2600      	movs	r6, #0
 8021a18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021a1c:	f1b9 0901 	subs.w	r9, r9, #1
 8021a20:	d505      	bpl.n	8021a2e <_fwalk_sglue+0x22>
 8021a22:	6824      	ldr	r4, [r4, #0]
 8021a24:	2c00      	cmp	r4, #0
 8021a26:	d1f7      	bne.n	8021a18 <_fwalk_sglue+0xc>
 8021a28:	4630      	mov	r0, r6
 8021a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021a2e:	89ab      	ldrh	r3, [r5, #12]
 8021a30:	2b01      	cmp	r3, #1
 8021a32:	d907      	bls.n	8021a44 <_fwalk_sglue+0x38>
 8021a34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021a38:	3301      	adds	r3, #1
 8021a3a:	d003      	beq.n	8021a44 <_fwalk_sglue+0x38>
 8021a3c:	4629      	mov	r1, r5
 8021a3e:	4638      	mov	r0, r7
 8021a40:	47c0      	blx	r8
 8021a42:	4306      	orrs	r6, r0
 8021a44:	3568      	adds	r5, #104	@ 0x68
 8021a46:	e7e9      	b.n	8021a1c <_fwalk_sglue+0x10>

08021a48 <iprintf>:
 8021a48:	b40f      	push	{r0, r1, r2, r3}
 8021a4a:	b507      	push	{r0, r1, r2, lr}
 8021a4c:	4906      	ldr	r1, [pc, #24]	@ (8021a68 <iprintf+0x20>)
 8021a4e:	ab04      	add	r3, sp, #16
 8021a50:	6808      	ldr	r0, [r1, #0]
 8021a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8021a56:	6881      	ldr	r1, [r0, #8]
 8021a58:	9301      	str	r3, [sp, #4]
 8021a5a:	f002 fce7 	bl	802442c <_vfiprintf_r>
 8021a5e:	b003      	add	sp, #12
 8021a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8021a64:	b004      	add	sp, #16
 8021a66:	4770      	bx	lr
 8021a68:	240007b0 	.word	0x240007b0

08021a6c <putchar>:
 8021a6c:	4b02      	ldr	r3, [pc, #8]	@ (8021a78 <putchar+0xc>)
 8021a6e:	4601      	mov	r1, r0
 8021a70:	6818      	ldr	r0, [r3, #0]
 8021a72:	6882      	ldr	r2, [r0, #8]
 8021a74:	f002 bf00 	b.w	8024878 <_putc_r>
 8021a78:	240007b0 	.word	0x240007b0

08021a7c <_puts_r>:
 8021a7c:	6a03      	ldr	r3, [r0, #32]
 8021a7e:	b570      	push	{r4, r5, r6, lr}
 8021a80:	6884      	ldr	r4, [r0, #8]
 8021a82:	4605      	mov	r5, r0
 8021a84:	460e      	mov	r6, r1
 8021a86:	b90b      	cbnz	r3, 8021a8c <_puts_r+0x10>
 8021a88:	f7ff ff96 	bl	80219b8 <__sinit>
 8021a8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021a8e:	07db      	lsls	r3, r3, #31
 8021a90:	d405      	bmi.n	8021a9e <_puts_r+0x22>
 8021a92:	89a3      	ldrh	r3, [r4, #12]
 8021a94:	0598      	lsls	r0, r3, #22
 8021a96:	d402      	bmi.n	8021a9e <_puts_r+0x22>
 8021a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021a9a:	f000 fa8e 	bl	8021fba <__retarget_lock_acquire_recursive>
 8021a9e:	89a3      	ldrh	r3, [r4, #12]
 8021aa0:	0719      	lsls	r1, r3, #28
 8021aa2:	d502      	bpl.n	8021aaa <_puts_r+0x2e>
 8021aa4:	6923      	ldr	r3, [r4, #16]
 8021aa6:	2b00      	cmp	r3, #0
 8021aa8:	d135      	bne.n	8021b16 <_puts_r+0x9a>
 8021aaa:	4621      	mov	r1, r4
 8021aac:	4628      	mov	r0, r5
 8021aae:	f000 f919 	bl	8021ce4 <__swsetup_r>
 8021ab2:	b380      	cbz	r0, 8021b16 <_puts_r+0x9a>
 8021ab4:	f04f 35ff 	mov.w	r5, #4294967295
 8021ab8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021aba:	07da      	lsls	r2, r3, #31
 8021abc:	d405      	bmi.n	8021aca <_puts_r+0x4e>
 8021abe:	89a3      	ldrh	r3, [r4, #12]
 8021ac0:	059b      	lsls	r3, r3, #22
 8021ac2:	d402      	bmi.n	8021aca <_puts_r+0x4e>
 8021ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021ac6:	f000 fa79 	bl	8021fbc <__retarget_lock_release_recursive>
 8021aca:	4628      	mov	r0, r5
 8021acc:	bd70      	pop	{r4, r5, r6, pc}
 8021ace:	2b00      	cmp	r3, #0
 8021ad0:	da04      	bge.n	8021adc <_puts_r+0x60>
 8021ad2:	69a2      	ldr	r2, [r4, #24]
 8021ad4:	429a      	cmp	r2, r3
 8021ad6:	dc17      	bgt.n	8021b08 <_puts_r+0x8c>
 8021ad8:	290a      	cmp	r1, #10
 8021ada:	d015      	beq.n	8021b08 <_puts_r+0x8c>
 8021adc:	6823      	ldr	r3, [r4, #0]
 8021ade:	1c5a      	adds	r2, r3, #1
 8021ae0:	6022      	str	r2, [r4, #0]
 8021ae2:	7019      	strb	r1, [r3, #0]
 8021ae4:	68a3      	ldr	r3, [r4, #8]
 8021ae6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021aea:	3b01      	subs	r3, #1
 8021aec:	60a3      	str	r3, [r4, #8]
 8021aee:	2900      	cmp	r1, #0
 8021af0:	d1ed      	bne.n	8021ace <_puts_r+0x52>
 8021af2:	2b00      	cmp	r3, #0
 8021af4:	da11      	bge.n	8021b1a <_puts_r+0x9e>
 8021af6:	4622      	mov	r2, r4
 8021af8:	210a      	movs	r1, #10
 8021afa:	4628      	mov	r0, r5
 8021afc:	f000 f8b3 	bl	8021c66 <__swbuf_r>
 8021b00:	3001      	adds	r0, #1
 8021b02:	d0d7      	beq.n	8021ab4 <_puts_r+0x38>
 8021b04:	250a      	movs	r5, #10
 8021b06:	e7d7      	b.n	8021ab8 <_puts_r+0x3c>
 8021b08:	4622      	mov	r2, r4
 8021b0a:	4628      	mov	r0, r5
 8021b0c:	f000 f8ab 	bl	8021c66 <__swbuf_r>
 8021b10:	3001      	adds	r0, #1
 8021b12:	d1e7      	bne.n	8021ae4 <_puts_r+0x68>
 8021b14:	e7ce      	b.n	8021ab4 <_puts_r+0x38>
 8021b16:	3e01      	subs	r6, #1
 8021b18:	e7e4      	b.n	8021ae4 <_puts_r+0x68>
 8021b1a:	6823      	ldr	r3, [r4, #0]
 8021b1c:	1c5a      	adds	r2, r3, #1
 8021b1e:	6022      	str	r2, [r4, #0]
 8021b20:	220a      	movs	r2, #10
 8021b22:	701a      	strb	r2, [r3, #0]
 8021b24:	e7ee      	b.n	8021b04 <_puts_r+0x88>
	...

08021b28 <puts>:
 8021b28:	4b02      	ldr	r3, [pc, #8]	@ (8021b34 <puts+0xc>)
 8021b2a:	4601      	mov	r1, r0
 8021b2c:	6818      	ldr	r0, [r3, #0]
 8021b2e:	f7ff bfa5 	b.w	8021a7c <_puts_r>
 8021b32:	bf00      	nop
 8021b34:	240007b0 	.word	0x240007b0

08021b38 <sniprintf>:
 8021b38:	b40c      	push	{r2, r3}
 8021b3a:	b530      	push	{r4, r5, lr}
 8021b3c:	4b17      	ldr	r3, [pc, #92]	@ (8021b9c <sniprintf+0x64>)
 8021b3e:	1e0c      	subs	r4, r1, #0
 8021b40:	681d      	ldr	r5, [r3, #0]
 8021b42:	b09d      	sub	sp, #116	@ 0x74
 8021b44:	da08      	bge.n	8021b58 <sniprintf+0x20>
 8021b46:	238b      	movs	r3, #139	@ 0x8b
 8021b48:	602b      	str	r3, [r5, #0]
 8021b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8021b4e:	b01d      	add	sp, #116	@ 0x74
 8021b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021b54:	b002      	add	sp, #8
 8021b56:	4770      	bx	lr
 8021b58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8021b5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021b60:	bf14      	ite	ne
 8021b62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8021b66:	4623      	moveq	r3, r4
 8021b68:	9304      	str	r3, [sp, #16]
 8021b6a:	9307      	str	r3, [sp, #28]
 8021b6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021b70:	9002      	str	r0, [sp, #8]
 8021b72:	9006      	str	r0, [sp, #24]
 8021b74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021b78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8021b7a:	ab21      	add	r3, sp, #132	@ 0x84
 8021b7c:	a902      	add	r1, sp, #8
 8021b7e:	4628      	mov	r0, r5
 8021b80:	9301      	str	r3, [sp, #4]
 8021b82:	f002 fb2d 	bl	80241e0 <_svfiprintf_r>
 8021b86:	1c43      	adds	r3, r0, #1
 8021b88:	bfbc      	itt	lt
 8021b8a:	238b      	movlt	r3, #139	@ 0x8b
 8021b8c:	602b      	strlt	r3, [r5, #0]
 8021b8e:	2c00      	cmp	r4, #0
 8021b90:	d0dd      	beq.n	8021b4e <sniprintf+0x16>
 8021b92:	9b02      	ldr	r3, [sp, #8]
 8021b94:	2200      	movs	r2, #0
 8021b96:	701a      	strb	r2, [r3, #0]
 8021b98:	e7d9      	b.n	8021b4e <sniprintf+0x16>
 8021b9a:	bf00      	nop
 8021b9c:	240007b0 	.word	0x240007b0

08021ba0 <siprintf>:
 8021ba0:	b40e      	push	{r1, r2, r3}
 8021ba2:	b500      	push	{lr}
 8021ba4:	b09c      	sub	sp, #112	@ 0x70
 8021ba6:	ab1d      	add	r3, sp, #116	@ 0x74
 8021ba8:	9002      	str	r0, [sp, #8]
 8021baa:	9006      	str	r0, [sp, #24]
 8021bac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8021bb0:	4809      	ldr	r0, [pc, #36]	@ (8021bd8 <siprintf+0x38>)
 8021bb2:	9107      	str	r1, [sp, #28]
 8021bb4:	9104      	str	r1, [sp, #16]
 8021bb6:	4909      	ldr	r1, [pc, #36]	@ (8021bdc <siprintf+0x3c>)
 8021bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8021bbc:	9105      	str	r1, [sp, #20]
 8021bbe:	6800      	ldr	r0, [r0, #0]
 8021bc0:	9301      	str	r3, [sp, #4]
 8021bc2:	a902      	add	r1, sp, #8
 8021bc4:	f002 fb0c 	bl	80241e0 <_svfiprintf_r>
 8021bc8:	9b02      	ldr	r3, [sp, #8]
 8021bca:	2200      	movs	r2, #0
 8021bcc:	701a      	strb	r2, [r3, #0]
 8021bce:	b01c      	add	sp, #112	@ 0x70
 8021bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8021bd4:	b003      	add	sp, #12
 8021bd6:	4770      	bx	lr
 8021bd8:	240007b0 	.word	0x240007b0
 8021bdc:	ffff0208 	.word	0xffff0208

08021be0 <__sread>:
 8021be0:	b510      	push	{r4, lr}
 8021be2:	460c      	mov	r4, r1
 8021be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021be8:	f000 f988 	bl	8021efc <_read_r>
 8021bec:	2800      	cmp	r0, #0
 8021bee:	bfab      	itete	ge
 8021bf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8021bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8021bf4:	181b      	addge	r3, r3, r0
 8021bf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021bfa:	bfac      	ite	ge
 8021bfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021bfe:	81a3      	strhlt	r3, [r4, #12]
 8021c00:	bd10      	pop	{r4, pc}

08021c02 <__swrite>:
 8021c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c06:	461f      	mov	r7, r3
 8021c08:	898b      	ldrh	r3, [r1, #12]
 8021c0a:	05db      	lsls	r3, r3, #23
 8021c0c:	4605      	mov	r5, r0
 8021c0e:	460c      	mov	r4, r1
 8021c10:	4616      	mov	r6, r2
 8021c12:	d505      	bpl.n	8021c20 <__swrite+0x1e>
 8021c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c18:	2302      	movs	r3, #2
 8021c1a:	2200      	movs	r2, #0
 8021c1c:	f000 f95c 	bl	8021ed8 <_lseek_r>
 8021c20:	89a3      	ldrh	r3, [r4, #12]
 8021c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021c26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021c2a:	81a3      	strh	r3, [r4, #12]
 8021c2c:	4632      	mov	r2, r6
 8021c2e:	463b      	mov	r3, r7
 8021c30:	4628      	mov	r0, r5
 8021c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021c36:	f000 b983 	b.w	8021f40 <_write_r>

08021c3a <__sseek>:
 8021c3a:	b510      	push	{r4, lr}
 8021c3c:	460c      	mov	r4, r1
 8021c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c42:	f000 f949 	bl	8021ed8 <_lseek_r>
 8021c46:	1c43      	adds	r3, r0, #1
 8021c48:	89a3      	ldrh	r3, [r4, #12]
 8021c4a:	bf15      	itete	ne
 8021c4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8021c4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8021c52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8021c56:	81a3      	strheq	r3, [r4, #12]
 8021c58:	bf18      	it	ne
 8021c5a:	81a3      	strhne	r3, [r4, #12]
 8021c5c:	bd10      	pop	{r4, pc}

08021c5e <__sclose>:
 8021c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c62:	f000 b929 	b.w	8021eb8 <_close_r>

08021c66 <__swbuf_r>:
 8021c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c68:	460e      	mov	r6, r1
 8021c6a:	4614      	mov	r4, r2
 8021c6c:	4605      	mov	r5, r0
 8021c6e:	b118      	cbz	r0, 8021c78 <__swbuf_r+0x12>
 8021c70:	6a03      	ldr	r3, [r0, #32]
 8021c72:	b90b      	cbnz	r3, 8021c78 <__swbuf_r+0x12>
 8021c74:	f7ff fea0 	bl	80219b8 <__sinit>
 8021c78:	69a3      	ldr	r3, [r4, #24]
 8021c7a:	60a3      	str	r3, [r4, #8]
 8021c7c:	89a3      	ldrh	r3, [r4, #12]
 8021c7e:	071a      	lsls	r2, r3, #28
 8021c80:	d501      	bpl.n	8021c86 <__swbuf_r+0x20>
 8021c82:	6923      	ldr	r3, [r4, #16]
 8021c84:	b943      	cbnz	r3, 8021c98 <__swbuf_r+0x32>
 8021c86:	4621      	mov	r1, r4
 8021c88:	4628      	mov	r0, r5
 8021c8a:	f000 f82b 	bl	8021ce4 <__swsetup_r>
 8021c8e:	b118      	cbz	r0, 8021c98 <__swbuf_r+0x32>
 8021c90:	f04f 37ff 	mov.w	r7, #4294967295
 8021c94:	4638      	mov	r0, r7
 8021c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c98:	6823      	ldr	r3, [r4, #0]
 8021c9a:	6922      	ldr	r2, [r4, #16]
 8021c9c:	1a98      	subs	r0, r3, r2
 8021c9e:	6963      	ldr	r3, [r4, #20]
 8021ca0:	b2f6      	uxtb	r6, r6
 8021ca2:	4283      	cmp	r3, r0
 8021ca4:	4637      	mov	r7, r6
 8021ca6:	dc05      	bgt.n	8021cb4 <__swbuf_r+0x4e>
 8021ca8:	4621      	mov	r1, r4
 8021caa:	4628      	mov	r0, r5
 8021cac:	f002 fd5a 	bl	8024764 <_fflush_r>
 8021cb0:	2800      	cmp	r0, #0
 8021cb2:	d1ed      	bne.n	8021c90 <__swbuf_r+0x2a>
 8021cb4:	68a3      	ldr	r3, [r4, #8]
 8021cb6:	3b01      	subs	r3, #1
 8021cb8:	60a3      	str	r3, [r4, #8]
 8021cba:	6823      	ldr	r3, [r4, #0]
 8021cbc:	1c5a      	adds	r2, r3, #1
 8021cbe:	6022      	str	r2, [r4, #0]
 8021cc0:	701e      	strb	r6, [r3, #0]
 8021cc2:	6962      	ldr	r2, [r4, #20]
 8021cc4:	1c43      	adds	r3, r0, #1
 8021cc6:	429a      	cmp	r2, r3
 8021cc8:	d004      	beq.n	8021cd4 <__swbuf_r+0x6e>
 8021cca:	89a3      	ldrh	r3, [r4, #12]
 8021ccc:	07db      	lsls	r3, r3, #31
 8021cce:	d5e1      	bpl.n	8021c94 <__swbuf_r+0x2e>
 8021cd0:	2e0a      	cmp	r6, #10
 8021cd2:	d1df      	bne.n	8021c94 <__swbuf_r+0x2e>
 8021cd4:	4621      	mov	r1, r4
 8021cd6:	4628      	mov	r0, r5
 8021cd8:	f002 fd44 	bl	8024764 <_fflush_r>
 8021cdc:	2800      	cmp	r0, #0
 8021cde:	d0d9      	beq.n	8021c94 <__swbuf_r+0x2e>
 8021ce0:	e7d6      	b.n	8021c90 <__swbuf_r+0x2a>
	...

08021ce4 <__swsetup_r>:
 8021ce4:	b538      	push	{r3, r4, r5, lr}
 8021ce6:	4b29      	ldr	r3, [pc, #164]	@ (8021d8c <__swsetup_r+0xa8>)
 8021ce8:	4605      	mov	r5, r0
 8021cea:	6818      	ldr	r0, [r3, #0]
 8021cec:	460c      	mov	r4, r1
 8021cee:	b118      	cbz	r0, 8021cf8 <__swsetup_r+0x14>
 8021cf0:	6a03      	ldr	r3, [r0, #32]
 8021cf2:	b90b      	cbnz	r3, 8021cf8 <__swsetup_r+0x14>
 8021cf4:	f7ff fe60 	bl	80219b8 <__sinit>
 8021cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021cfc:	0719      	lsls	r1, r3, #28
 8021cfe:	d422      	bmi.n	8021d46 <__swsetup_r+0x62>
 8021d00:	06da      	lsls	r2, r3, #27
 8021d02:	d407      	bmi.n	8021d14 <__swsetup_r+0x30>
 8021d04:	2209      	movs	r2, #9
 8021d06:	602a      	str	r2, [r5, #0]
 8021d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021d0c:	81a3      	strh	r3, [r4, #12]
 8021d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8021d12:	e033      	b.n	8021d7c <__swsetup_r+0x98>
 8021d14:	0758      	lsls	r0, r3, #29
 8021d16:	d512      	bpl.n	8021d3e <__swsetup_r+0x5a>
 8021d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021d1a:	b141      	cbz	r1, 8021d2e <__swsetup_r+0x4a>
 8021d1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021d20:	4299      	cmp	r1, r3
 8021d22:	d002      	beq.n	8021d2a <__swsetup_r+0x46>
 8021d24:	4628      	mov	r0, r5
 8021d26:	f000 ff4d 	bl	8022bc4 <_free_r>
 8021d2a:	2300      	movs	r3, #0
 8021d2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8021d2e:	89a3      	ldrh	r3, [r4, #12]
 8021d30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021d34:	81a3      	strh	r3, [r4, #12]
 8021d36:	2300      	movs	r3, #0
 8021d38:	6063      	str	r3, [r4, #4]
 8021d3a:	6923      	ldr	r3, [r4, #16]
 8021d3c:	6023      	str	r3, [r4, #0]
 8021d3e:	89a3      	ldrh	r3, [r4, #12]
 8021d40:	f043 0308 	orr.w	r3, r3, #8
 8021d44:	81a3      	strh	r3, [r4, #12]
 8021d46:	6923      	ldr	r3, [r4, #16]
 8021d48:	b94b      	cbnz	r3, 8021d5e <__swsetup_r+0x7a>
 8021d4a:	89a3      	ldrh	r3, [r4, #12]
 8021d4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021d54:	d003      	beq.n	8021d5e <__swsetup_r+0x7a>
 8021d56:	4621      	mov	r1, r4
 8021d58:	4628      	mov	r0, r5
 8021d5a:	f002 fd51 	bl	8024800 <__smakebuf_r>
 8021d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d62:	f013 0201 	ands.w	r2, r3, #1
 8021d66:	d00a      	beq.n	8021d7e <__swsetup_r+0x9a>
 8021d68:	2200      	movs	r2, #0
 8021d6a:	60a2      	str	r2, [r4, #8]
 8021d6c:	6962      	ldr	r2, [r4, #20]
 8021d6e:	4252      	negs	r2, r2
 8021d70:	61a2      	str	r2, [r4, #24]
 8021d72:	6922      	ldr	r2, [r4, #16]
 8021d74:	b942      	cbnz	r2, 8021d88 <__swsetup_r+0xa4>
 8021d76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021d7a:	d1c5      	bne.n	8021d08 <__swsetup_r+0x24>
 8021d7c:	bd38      	pop	{r3, r4, r5, pc}
 8021d7e:	0799      	lsls	r1, r3, #30
 8021d80:	bf58      	it	pl
 8021d82:	6962      	ldrpl	r2, [r4, #20]
 8021d84:	60a2      	str	r2, [r4, #8]
 8021d86:	e7f4      	b.n	8021d72 <__swsetup_r+0x8e>
 8021d88:	2000      	movs	r0, #0
 8021d8a:	e7f7      	b.n	8021d7c <__swsetup_r+0x98>
 8021d8c:	240007b0 	.word	0x240007b0

08021d90 <memcmp>:
 8021d90:	b510      	push	{r4, lr}
 8021d92:	3901      	subs	r1, #1
 8021d94:	4402      	add	r2, r0
 8021d96:	4290      	cmp	r0, r2
 8021d98:	d101      	bne.n	8021d9e <memcmp+0xe>
 8021d9a:	2000      	movs	r0, #0
 8021d9c:	e005      	b.n	8021daa <memcmp+0x1a>
 8021d9e:	7803      	ldrb	r3, [r0, #0]
 8021da0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021da4:	42a3      	cmp	r3, r4
 8021da6:	d001      	beq.n	8021dac <memcmp+0x1c>
 8021da8:	1b18      	subs	r0, r3, r4
 8021daa:	bd10      	pop	{r4, pc}
 8021dac:	3001      	adds	r0, #1
 8021dae:	e7f2      	b.n	8021d96 <memcmp+0x6>

08021db0 <memmove>:
 8021db0:	4288      	cmp	r0, r1
 8021db2:	b510      	push	{r4, lr}
 8021db4:	eb01 0402 	add.w	r4, r1, r2
 8021db8:	d902      	bls.n	8021dc0 <memmove+0x10>
 8021dba:	4284      	cmp	r4, r0
 8021dbc:	4623      	mov	r3, r4
 8021dbe:	d807      	bhi.n	8021dd0 <memmove+0x20>
 8021dc0:	1e43      	subs	r3, r0, #1
 8021dc2:	42a1      	cmp	r1, r4
 8021dc4:	d008      	beq.n	8021dd8 <memmove+0x28>
 8021dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021dce:	e7f8      	b.n	8021dc2 <memmove+0x12>
 8021dd0:	4402      	add	r2, r0
 8021dd2:	4601      	mov	r1, r0
 8021dd4:	428a      	cmp	r2, r1
 8021dd6:	d100      	bne.n	8021dda <memmove+0x2a>
 8021dd8:	bd10      	pop	{r4, pc}
 8021dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021de2:	e7f7      	b.n	8021dd4 <memmove+0x24>

08021de4 <memset>:
 8021de4:	4402      	add	r2, r0
 8021de6:	4603      	mov	r3, r0
 8021de8:	4293      	cmp	r3, r2
 8021dea:	d100      	bne.n	8021dee <memset+0xa>
 8021dec:	4770      	bx	lr
 8021dee:	f803 1b01 	strb.w	r1, [r3], #1
 8021df2:	e7f9      	b.n	8021de8 <memset+0x4>

08021df4 <strchr>:
 8021df4:	b2c9      	uxtb	r1, r1
 8021df6:	4603      	mov	r3, r0
 8021df8:	4618      	mov	r0, r3
 8021dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021dfe:	b112      	cbz	r2, 8021e06 <strchr+0x12>
 8021e00:	428a      	cmp	r2, r1
 8021e02:	d1f9      	bne.n	8021df8 <strchr+0x4>
 8021e04:	4770      	bx	lr
 8021e06:	2900      	cmp	r1, #0
 8021e08:	bf18      	it	ne
 8021e0a:	2000      	movne	r0, #0
 8021e0c:	4770      	bx	lr

08021e0e <strncmp>:
 8021e0e:	b510      	push	{r4, lr}
 8021e10:	b16a      	cbz	r2, 8021e2e <strncmp+0x20>
 8021e12:	3901      	subs	r1, #1
 8021e14:	1884      	adds	r4, r0, r2
 8021e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021e1a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021e1e:	429a      	cmp	r2, r3
 8021e20:	d103      	bne.n	8021e2a <strncmp+0x1c>
 8021e22:	42a0      	cmp	r0, r4
 8021e24:	d001      	beq.n	8021e2a <strncmp+0x1c>
 8021e26:	2a00      	cmp	r2, #0
 8021e28:	d1f5      	bne.n	8021e16 <strncmp+0x8>
 8021e2a:	1ad0      	subs	r0, r2, r3
 8021e2c:	bd10      	pop	{r4, pc}
 8021e2e:	4610      	mov	r0, r2
 8021e30:	e7fc      	b.n	8021e2c <strncmp+0x1e>

08021e32 <strncpy>:
 8021e32:	b510      	push	{r4, lr}
 8021e34:	3901      	subs	r1, #1
 8021e36:	4603      	mov	r3, r0
 8021e38:	b132      	cbz	r2, 8021e48 <strncpy+0x16>
 8021e3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021e3e:	f803 4b01 	strb.w	r4, [r3], #1
 8021e42:	3a01      	subs	r2, #1
 8021e44:	2c00      	cmp	r4, #0
 8021e46:	d1f7      	bne.n	8021e38 <strncpy+0x6>
 8021e48:	441a      	add	r2, r3
 8021e4a:	2100      	movs	r1, #0
 8021e4c:	4293      	cmp	r3, r2
 8021e4e:	d100      	bne.n	8021e52 <strncpy+0x20>
 8021e50:	bd10      	pop	{r4, pc}
 8021e52:	f803 1b01 	strb.w	r1, [r3], #1
 8021e56:	e7f9      	b.n	8021e4c <strncpy+0x1a>

08021e58 <strrchr>:
 8021e58:	b538      	push	{r3, r4, r5, lr}
 8021e5a:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8021e5e:	4603      	mov	r3, r0
 8021e60:	d10e      	bne.n	8021e80 <strrchr+0x28>
 8021e62:	4621      	mov	r1, r4
 8021e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021e68:	f7ff bfc4 	b.w	8021df4 <strchr>
 8021e6c:	1c43      	adds	r3, r0, #1
 8021e6e:	4605      	mov	r5, r0
 8021e70:	4621      	mov	r1, r4
 8021e72:	4618      	mov	r0, r3
 8021e74:	f7ff ffbe 	bl	8021df4 <strchr>
 8021e78:	2800      	cmp	r0, #0
 8021e7a:	d1f7      	bne.n	8021e6c <strrchr+0x14>
 8021e7c:	4628      	mov	r0, r5
 8021e7e:	bd38      	pop	{r3, r4, r5, pc}
 8021e80:	2500      	movs	r5, #0
 8021e82:	e7f5      	b.n	8021e70 <strrchr+0x18>

08021e84 <strstr>:
 8021e84:	780a      	ldrb	r2, [r1, #0]
 8021e86:	b570      	push	{r4, r5, r6, lr}
 8021e88:	b96a      	cbnz	r2, 8021ea6 <strstr+0x22>
 8021e8a:	bd70      	pop	{r4, r5, r6, pc}
 8021e8c:	429a      	cmp	r2, r3
 8021e8e:	d109      	bne.n	8021ea4 <strstr+0x20>
 8021e90:	460c      	mov	r4, r1
 8021e92:	4605      	mov	r5, r0
 8021e94:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8021e98:	2b00      	cmp	r3, #0
 8021e9a:	d0f6      	beq.n	8021e8a <strstr+0x6>
 8021e9c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8021ea0:	429e      	cmp	r6, r3
 8021ea2:	d0f7      	beq.n	8021e94 <strstr+0x10>
 8021ea4:	3001      	adds	r0, #1
 8021ea6:	7803      	ldrb	r3, [r0, #0]
 8021ea8:	2b00      	cmp	r3, #0
 8021eaa:	d1ef      	bne.n	8021e8c <strstr+0x8>
 8021eac:	4618      	mov	r0, r3
 8021eae:	e7ec      	b.n	8021e8a <strstr+0x6>

08021eb0 <_localeconv_r>:
 8021eb0:	4800      	ldr	r0, [pc, #0]	@ (8021eb4 <_localeconv_r+0x4>)
 8021eb2:	4770      	bx	lr
 8021eb4:	240008f0 	.word	0x240008f0

08021eb8 <_close_r>:
 8021eb8:	b538      	push	{r3, r4, r5, lr}
 8021eba:	4d06      	ldr	r5, [pc, #24]	@ (8021ed4 <_close_r+0x1c>)
 8021ebc:	2300      	movs	r3, #0
 8021ebe:	4604      	mov	r4, r0
 8021ec0:	4608      	mov	r0, r1
 8021ec2:	602b      	str	r3, [r5, #0]
 8021ec4:	f7f9 faa5 	bl	801b412 <_close>
 8021ec8:	1c43      	adds	r3, r0, #1
 8021eca:	d102      	bne.n	8021ed2 <_close_r+0x1a>
 8021ecc:	682b      	ldr	r3, [r5, #0]
 8021ece:	b103      	cbz	r3, 8021ed2 <_close_r+0x1a>
 8021ed0:	6023      	str	r3, [r4, #0]
 8021ed2:	bd38      	pop	{r3, r4, r5, pc}
 8021ed4:	240040cc 	.word	0x240040cc

08021ed8 <_lseek_r>:
 8021ed8:	b538      	push	{r3, r4, r5, lr}
 8021eda:	4d07      	ldr	r5, [pc, #28]	@ (8021ef8 <_lseek_r+0x20>)
 8021edc:	4604      	mov	r4, r0
 8021ede:	4608      	mov	r0, r1
 8021ee0:	4611      	mov	r1, r2
 8021ee2:	2200      	movs	r2, #0
 8021ee4:	602a      	str	r2, [r5, #0]
 8021ee6:	461a      	mov	r2, r3
 8021ee8:	f7f9 faba 	bl	801b460 <_lseek>
 8021eec:	1c43      	adds	r3, r0, #1
 8021eee:	d102      	bne.n	8021ef6 <_lseek_r+0x1e>
 8021ef0:	682b      	ldr	r3, [r5, #0]
 8021ef2:	b103      	cbz	r3, 8021ef6 <_lseek_r+0x1e>
 8021ef4:	6023      	str	r3, [r4, #0]
 8021ef6:	bd38      	pop	{r3, r4, r5, pc}
 8021ef8:	240040cc 	.word	0x240040cc

08021efc <_read_r>:
 8021efc:	b538      	push	{r3, r4, r5, lr}
 8021efe:	4d07      	ldr	r5, [pc, #28]	@ (8021f1c <_read_r+0x20>)
 8021f00:	4604      	mov	r4, r0
 8021f02:	4608      	mov	r0, r1
 8021f04:	4611      	mov	r1, r2
 8021f06:	2200      	movs	r2, #0
 8021f08:	602a      	str	r2, [r5, #0]
 8021f0a:	461a      	mov	r2, r3
 8021f0c:	f7f9 fa64 	bl	801b3d8 <_read>
 8021f10:	1c43      	adds	r3, r0, #1
 8021f12:	d102      	bne.n	8021f1a <_read_r+0x1e>
 8021f14:	682b      	ldr	r3, [r5, #0]
 8021f16:	b103      	cbz	r3, 8021f1a <_read_r+0x1e>
 8021f18:	6023      	str	r3, [r4, #0]
 8021f1a:	bd38      	pop	{r3, r4, r5, pc}
 8021f1c:	240040cc 	.word	0x240040cc

08021f20 <_sbrk_r>:
 8021f20:	b538      	push	{r3, r4, r5, lr}
 8021f22:	4d06      	ldr	r5, [pc, #24]	@ (8021f3c <_sbrk_r+0x1c>)
 8021f24:	2300      	movs	r3, #0
 8021f26:	4604      	mov	r4, r0
 8021f28:	4608      	mov	r0, r1
 8021f2a:	602b      	str	r3, [r5, #0]
 8021f2c:	f7f9 faa6 	bl	801b47c <_sbrk>
 8021f30:	1c43      	adds	r3, r0, #1
 8021f32:	d102      	bne.n	8021f3a <_sbrk_r+0x1a>
 8021f34:	682b      	ldr	r3, [r5, #0]
 8021f36:	b103      	cbz	r3, 8021f3a <_sbrk_r+0x1a>
 8021f38:	6023      	str	r3, [r4, #0]
 8021f3a:	bd38      	pop	{r3, r4, r5, pc}
 8021f3c:	240040cc 	.word	0x240040cc

08021f40 <_write_r>:
 8021f40:	b538      	push	{r3, r4, r5, lr}
 8021f42:	4d07      	ldr	r5, [pc, #28]	@ (8021f60 <_write_r+0x20>)
 8021f44:	4604      	mov	r4, r0
 8021f46:	4608      	mov	r0, r1
 8021f48:	4611      	mov	r1, r2
 8021f4a:	2200      	movs	r2, #0
 8021f4c:	602a      	str	r2, [r5, #0]
 8021f4e:	461a      	mov	r2, r3
 8021f50:	f7df f824 	bl	8000f9c <_write>
 8021f54:	1c43      	adds	r3, r0, #1
 8021f56:	d102      	bne.n	8021f5e <_write_r+0x1e>
 8021f58:	682b      	ldr	r3, [r5, #0]
 8021f5a:	b103      	cbz	r3, 8021f5e <_write_r+0x1e>
 8021f5c:	6023      	str	r3, [r4, #0]
 8021f5e:	bd38      	pop	{r3, r4, r5, pc}
 8021f60:	240040cc 	.word	0x240040cc

08021f64 <__errno>:
 8021f64:	4b01      	ldr	r3, [pc, #4]	@ (8021f6c <__errno+0x8>)
 8021f66:	6818      	ldr	r0, [r3, #0]
 8021f68:	4770      	bx	lr
 8021f6a:	bf00      	nop
 8021f6c:	240007b0 	.word	0x240007b0

08021f70 <__libc_init_array>:
 8021f70:	b570      	push	{r4, r5, r6, lr}
 8021f72:	4d0d      	ldr	r5, [pc, #52]	@ (8021fa8 <__libc_init_array+0x38>)
 8021f74:	4c0d      	ldr	r4, [pc, #52]	@ (8021fac <__libc_init_array+0x3c>)
 8021f76:	1b64      	subs	r4, r4, r5
 8021f78:	10a4      	asrs	r4, r4, #2
 8021f7a:	2600      	movs	r6, #0
 8021f7c:	42a6      	cmp	r6, r4
 8021f7e:	d109      	bne.n	8021f94 <__libc_init_array+0x24>
 8021f80:	4d0b      	ldr	r5, [pc, #44]	@ (8021fb0 <__libc_init_array+0x40>)
 8021f82:	4c0c      	ldr	r4, [pc, #48]	@ (8021fb4 <__libc_init_array+0x44>)
 8021f84:	f003 f8aa 	bl	80250dc <_init>
 8021f88:	1b64      	subs	r4, r4, r5
 8021f8a:	10a4      	asrs	r4, r4, #2
 8021f8c:	2600      	movs	r6, #0
 8021f8e:	42a6      	cmp	r6, r4
 8021f90:	d105      	bne.n	8021f9e <__libc_init_array+0x2e>
 8021f92:	bd70      	pop	{r4, r5, r6, pc}
 8021f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8021f98:	4798      	blx	r3
 8021f9a:	3601      	adds	r6, #1
 8021f9c:	e7ee      	b.n	8021f7c <__libc_init_array+0xc>
 8021f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021fa2:	4798      	blx	r3
 8021fa4:	3601      	adds	r6, #1
 8021fa6:	e7f2      	b.n	8021f8e <__libc_init_array+0x1e>
 8021fa8:	0803572c 	.word	0x0803572c
 8021fac:	0803572c 	.word	0x0803572c
 8021fb0:	0803572c 	.word	0x0803572c
 8021fb4:	08035730 	.word	0x08035730

08021fb8 <__retarget_lock_init_recursive>:
 8021fb8:	4770      	bx	lr

08021fba <__retarget_lock_acquire_recursive>:
 8021fba:	4770      	bx	lr

08021fbc <__retarget_lock_release_recursive>:
 8021fbc:	4770      	bx	lr

08021fbe <strcpy>:
 8021fbe:	4603      	mov	r3, r0
 8021fc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021fc4:	f803 2b01 	strb.w	r2, [r3], #1
 8021fc8:	2a00      	cmp	r2, #0
 8021fca:	d1f9      	bne.n	8021fc0 <strcpy+0x2>
 8021fcc:	4770      	bx	lr

08021fce <memcpy>:
 8021fce:	440a      	add	r2, r1
 8021fd0:	4291      	cmp	r1, r2
 8021fd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8021fd6:	d100      	bne.n	8021fda <memcpy+0xc>
 8021fd8:	4770      	bx	lr
 8021fda:	b510      	push	{r4, lr}
 8021fdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021fe4:	4291      	cmp	r1, r2
 8021fe6:	d1f9      	bne.n	8021fdc <memcpy+0xe>
 8021fe8:	bd10      	pop	{r4, pc}
	...

08021fec <nanf>:
 8021fec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8021ff4 <nanf+0x8>
 8021ff0:	4770      	bx	lr
 8021ff2:	bf00      	nop
 8021ff4:	7fc00000 	.word	0x7fc00000

08021ff8 <abort>:
 8021ff8:	b508      	push	{r3, lr}
 8021ffa:	2006      	movs	r0, #6
 8021ffc:	f002 fc98 	bl	8024930 <raise>
 8022000:	2001      	movs	r0, #1
 8022002:	f7f9 f9de 	bl	801b3c2 <_exit>

08022006 <quorem>:
 8022006:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802200a:	6903      	ldr	r3, [r0, #16]
 802200c:	690c      	ldr	r4, [r1, #16]
 802200e:	42a3      	cmp	r3, r4
 8022010:	4607      	mov	r7, r0
 8022012:	db7e      	blt.n	8022112 <quorem+0x10c>
 8022014:	3c01      	subs	r4, #1
 8022016:	f101 0814 	add.w	r8, r1, #20
 802201a:	00a3      	lsls	r3, r4, #2
 802201c:	f100 0514 	add.w	r5, r0, #20
 8022020:	9300      	str	r3, [sp, #0]
 8022022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022026:	9301      	str	r3, [sp, #4]
 8022028:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802202c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022030:	3301      	adds	r3, #1
 8022032:	429a      	cmp	r2, r3
 8022034:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8022038:	fbb2 f6f3 	udiv	r6, r2, r3
 802203c:	d32e      	bcc.n	802209c <quorem+0x96>
 802203e:	f04f 0a00 	mov.w	sl, #0
 8022042:	46c4      	mov	ip, r8
 8022044:	46ae      	mov	lr, r5
 8022046:	46d3      	mov	fp, sl
 8022048:	f85c 3b04 	ldr.w	r3, [ip], #4
 802204c:	b298      	uxth	r0, r3
 802204e:	fb06 a000 	mla	r0, r6, r0, sl
 8022052:	0c02      	lsrs	r2, r0, #16
 8022054:	0c1b      	lsrs	r3, r3, #16
 8022056:	fb06 2303 	mla	r3, r6, r3, r2
 802205a:	f8de 2000 	ldr.w	r2, [lr]
 802205e:	b280      	uxth	r0, r0
 8022060:	b292      	uxth	r2, r2
 8022062:	1a12      	subs	r2, r2, r0
 8022064:	445a      	add	r2, fp
 8022066:	f8de 0000 	ldr.w	r0, [lr]
 802206a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802206e:	b29b      	uxth	r3, r3
 8022070:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8022074:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8022078:	b292      	uxth	r2, r2
 802207a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802207e:	45e1      	cmp	r9, ip
 8022080:	f84e 2b04 	str.w	r2, [lr], #4
 8022084:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8022088:	d2de      	bcs.n	8022048 <quorem+0x42>
 802208a:	9b00      	ldr	r3, [sp, #0]
 802208c:	58eb      	ldr	r3, [r5, r3]
 802208e:	b92b      	cbnz	r3, 802209c <quorem+0x96>
 8022090:	9b01      	ldr	r3, [sp, #4]
 8022092:	3b04      	subs	r3, #4
 8022094:	429d      	cmp	r5, r3
 8022096:	461a      	mov	r2, r3
 8022098:	d32f      	bcc.n	80220fa <quorem+0xf4>
 802209a:	613c      	str	r4, [r7, #16]
 802209c:	4638      	mov	r0, r7
 802209e:	f001 f89f 	bl	80231e0 <__mcmp>
 80220a2:	2800      	cmp	r0, #0
 80220a4:	db25      	blt.n	80220f2 <quorem+0xec>
 80220a6:	4629      	mov	r1, r5
 80220a8:	2000      	movs	r0, #0
 80220aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80220ae:	f8d1 c000 	ldr.w	ip, [r1]
 80220b2:	fa1f fe82 	uxth.w	lr, r2
 80220b6:	fa1f f38c 	uxth.w	r3, ip
 80220ba:	eba3 030e 	sub.w	r3, r3, lr
 80220be:	4403      	add	r3, r0
 80220c0:	0c12      	lsrs	r2, r2, #16
 80220c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80220c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80220ca:	b29b      	uxth	r3, r3
 80220cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80220d0:	45c1      	cmp	r9, r8
 80220d2:	f841 3b04 	str.w	r3, [r1], #4
 80220d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80220da:	d2e6      	bcs.n	80220aa <quorem+0xa4>
 80220dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80220e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80220e4:	b922      	cbnz	r2, 80220f0 <quorem+0xea>
 80220e6:	3b04      	subs	r3, #4
 80220e8:	429d      	cmp	r5, r3
 80220ea:	461a      	mov	r2, r3
 80220ec:	d30b      	bcc.n	8022106 <quorem+0x100>
 80220ee:	613c      	str	r4, [r7, #16]
 80220f0:	3601      	adds	r6, #1
 80220f2:	4630      	mov	r0, r6
 80220f4:	b003      	add	sp, #12
 80220f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220fa:	6812      	ldr	r2, [r2, #0]
 80220fc:	3b04      	subs	r3, #4
 80220fe:	2a00      	cmp	r2, #0
 8022100:	d1cb      	bne.n	802209a <quorem+0x94>
 8022102:	3c01      	subs	r4, #1
 8022104:	e7c6      	b.n	8022094 <quorem+0x8e>
 8022106:	6812      	ldr	r2, [r2, #0]
 8022108:	3b04      	subs	r3, #4
 802210a:	2a00      	cmp	r2, #0
 802210c:	d1ef      	bne.n	80220ee <quorem+0xe8>
 802210e:	3c01      	subs	r4, #1
 8022110:	e7ea      	b.n	80220e8 <quorem+0xe2>
 8022112:	2000      	movs	r0, #0
 8022114:	e7ee      	b.n	80220f4 <quorem+0xee>
	...

08022118 <_dtoa_r>:
 8022118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802211c:	ed2d 8b02 	vpush	{d8}
 8022120:	69c7      	ldr	r7, [r0, #28]
 8022122:	b091      	sub	sp, #68	@ 0x44
 8022124:	ed8d 0b02 	vstr	d0, [sp, #8]
 8022128:	ec55 4b10 	vmov	r4, r5, d0
 802212c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802212e:	9107      	str	r1, [sp, #28]
 8022130:	4681      	mov	r9, r0
 8022132:	9209      	str	r2, [sp, #36]	@ 0x24
 8022134:	930d      	str	r3, [sp, #52]	@ 0x34
 8022136:	b97f      	cbnz	r7, 8022158 <_dtoa_r+0x40>
 8022138:	2010      	movs	r0, #16
 802213a:	f7fe fbbd 	bl	80208b8 <malloc>
 802213e:	4602      	mov	r2, r0
 8022140:	f8c9 001c 	str.w	r0, [r9, #28]
 8022144:	b920      	cbnz	r0, 8022150 <_dtoa_r+0x38>
 8022146:	4ba0      	ldr	r3, [pc, #640]	@ (80223c8 <_dtoa_r+0x2b0>)
 8022148:	21ef      	movs	r1, #239	@ 0xef
 802214a:	48a0      	ldr	r0, [pc, #640]	@ (80223cc <_dtoa_r+0x2b4>)
 802214c:	f7fe fb76 	bl	802083c <__assert_func>
 8022150:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8022154:	6007      	str	r7, [r0, #0]
 8022156:	60c7      	str	r7, [r0, #12]
 8022158:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802215c:	6819      	ldr	r1, [r3, #0]
 802215e:	b159      	cbz	r1, 8022178 <_dtoa_r+0x60>
 8022160:	685a      	ldr	r2, [r3, #4]
 8022162:	604a      	str	r2, [r1, #4]
 8022164:	2301      	movs	r3, #1
 8022166:	4093      	lsls	r3, r2
 8022168:	608b      	str	r3, [r1, #8]
 802216a:	4648      	mov	r0, r9
 802216c:	f000 fdb4 	bl	8022cd8 <_Bfree>
 8022170:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8022174:	2200      	movs	r2, #0
 8022176:	601a      	str	r2, [r3, #0]
 8022178:	1e2b      	subs	r3, r5, #0
 802217a:	bfbb      	ittet	lt
 802217c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8022180:	9303      	strlt	r3, [sp, #12]
 8022182:	2300      	movge	r3, #0
 8022184:	2201      	movlt	r2, #1
 8022186:	bfac      	ite	ge
 8022188:	6033      	strge	r3, [r6, #0]
 802218a:	6032      	strlt	r2, [r6, #0]
 802218c:	4b90      	ldr	r3, [pc, #576]	@ (80223d0 <_dtoa_r+0x2b8>)
 802218e:	9e03      	ldr	r6, [sp, #12]
 8022190:	43b3      	bics	r3, r6
 8022192:	d110      	bne.n	80221b6 <_dtoa_r+0x9e>
 8022194:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022196:	f242 730f 	movw	r3, #9999	@ 0x270f
 802219a:	6013      	str	r3, [r2, #0]
 802219c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80221a0:	4323      	orrs	r3, r4
 80221a2:	f000 84de 	beq.w	8022b62 <_dtoa_r+0xa4a>
 80221a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80221a8:	4f8a      	ldr	r7, [pc, #552]	@ (80223d4 <_dtoa_r+0x2bc>)
 80221aa:	2b00      	cmp	r3, #0
 80221ac:	f000 84e0 	beq.w	8022b70 <_dtoa_r+0xa58>
 80221b0:	1cfb      	adds	r3, r7, #3
 80221b2:	f000 bcdb 	b.w	8022b6c <_dtoa_r+0xa54>
 80221b6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80221ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80221be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221c2:	d10a      	bne.n	80221da <_dtoa_r+0xc2>
 80221c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80221c6:	2301      	movs	r3, #1
 80221c8:	6013      	str	r3, [r2, #0]
 80221ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80221cc:	b113      	cbz	r3, 80221d4 <_dtoa_r+0xbc>
 80221ce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80221d0:	4b81      	ldr	r3, [pc, #516]	@ (80223d8 <_dtoa_r+0x2c0>)
 80221d2:	6013      	str	r3, [r2, #0]
 80221d4:	4f81      	ldr	r7, [pc, #516]	@ (80223dc <_dtoa_r+0x2c4>)
 80221d6:	f000 bccb 	b.w	8022b70 <_dtoa_r+0xa58>
 80221da:	aa0e      	add	r2, sp, #56	@ 0x38
 80221dc:	a90f      	add	r1, sp, #60	@ 0x3c
 80221de:	4648      	mov	r0, r9
 80221e0:	eeb0 0b48 	vmov.f64	d0, d8
 80221e4:	f001 f91c 	bl	8023420 <__d2b>
 80221e8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80221ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80221ee:	9001      	str	r0, [sp, #4]
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	d045      	beq.n	8022280 <_dtoa_r+0x168>
 80221f4:	eeb0 7b48 	vmov.f64	d7, d8
 80221f8:	ee18 1a90 	vmov	r1, s17
 80221fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8022200:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8022204:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8022208:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 802220c:	2500      	movs	r5, #0
 802220e:	ee07 1a90 	vmov	s15, r1
 8022212:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8022216:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80223b0 <_dtoa_r+0x298>
 802221a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802221e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80223b8 <_dtoa_r+0x2a0>
 8022222:	eea7 6b05 	vfma.f64	d6, d7, d5
 8022226:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80223c0 <_dtoa_r+0x2a8>
 802222a:	ee07 3a90 	vmov	s15, r3
 802222e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8022232:	eeb0 7b46 	vmov.f64	d7, d6
 8022236:	eea4 7b05 	vfma.f64	d7, d4, d5
 802223a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802223e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8022242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022246:	ee16 8a90 	vmov	r8, s13
 802224a:	d508      	bpl.n	802225e <_dtoa_r+0x146>
 802224c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8022250:	eeb4 6b47 	vcmp.f64	d6, d7
 8022254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022258:	bf18      	it	ne
 802225a:	f108 38ff 	addne.w	r8, r8, #4294967295
 802225e:	f1b8 0f16 	cmp.w	r8, #22
 8022262:	d82b      	bhi.n	80222bc <_dtoa_r+0x1a4>
 8022264:	495e      	ldr	r1, [pc, #376]	@ (80223e0 <_dtoa_r+0x2c8>)
 8022266:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 802226a:	ed91 7b00 	vldr	d7, [r1]
 802226e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8022272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022276:	d501      	bpl.n	802227c <_dtoa_r+0x164>
 8022278:	f108 38ff 	add.w	r8, r8, #4294967295
 802227c:	2100      	movs	r1, #0
 802227e:	e01e      	b.n	80222be <_dtoa_r+0x1a6>
 8022280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022282:	4413      	add	r3, r2
 8022284:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8022288:	2920      	cmp	r1, #32
 802228a:	bfc1      	itttt	gt
 802228c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8022290:	408e      	lslgt	r6, r1
 8022292:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8022296:	fa24 f101 	lsrgt.w	r1, r4, r1
 802229a:	bfd6      	itet	le
 802229c:	f1c1 0120 	rsble	r1, r1, #32
 80222a0:	4331      	orrgt	r1, r6
 80222a2:	fa04 f101 	lslle.w	r1, r4, r1
 80222a6:	ee07 1a90 	vmov	s15, r1
 80222aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80222ae:	3b01      	subs	r3, #1
 80222b0:	ee17 1a90 	vmov	r1, s15
 80222b4:	2501      	movs	r5, #1
 80222b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80222ba:	e7a8      	b.n	802220e <_dtoa_r+0xf6>
 80222bc:	2101      	movs	r1, #1
 80222be:	1ad2      	subs	r2, r2, r3
 80222c0:	1e53      	subs	r3, r2, #1
 80222c2:	9306      	str	r3, [sp, #24]
 80222c4:	bf45      	ittet	mi
 80222c6:	f1c2 0301 	rsbmi	r3, r2, #1
 80222ca:	9305      	strmi	r3, [sp, #20]
 80222cc:	2300      	movpl	r3, #0
 80222ce:	2300      	movmi	r3, #0
 80222d0:	bf4c      	ite	mi
 80222d2:	9306      	strmi	r3, [sp, #24]
 80222d4:	9305      	strpl	r3, [sp, #20]
 80222d6:	f1b8 0f00 	cmp.w	r8, #0
 80222da:	910c      	str	r1, [sp, #48]	@ 0x30
 80222dc:	db18      	blt.n	8022310 <_dtoa_r+0x1f8>
 80222de:	9b06      	ldr	r3, [sp, #24]
 80222e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80222e4:	4443      	add	r3, r8
 80222e6:	9306      	str	r3, [sp, #24]
 80222e8:	2300      	movs	r3, #0
 80222ea:	9a07      	ldr	r2, [sp, #28]
 80222ec:	2a09      	cmp	r2, #9
 80222ee:	d849      	bhi.n	8022384 <_dtoa_r+0x26c>
 80222f0:	2a05      	cmp	r2, #5
 80222f2:	bfc4      	itt	gt
 80222f4:	3a04      	subgt	r2, #4
 80222f6:	9207      	strgt	r2, [sp, #28]
 80222f8:	9a07      	ldr	r2, [sp, #28]
 80222fa:	f1a2 0202 	sub.w	r2, r2, #2
 80222fe:	bfcc      	ite	gt
 8022300:	2400      	movgt	r4, #0
 8022302:	2401      	movle	r4, #1
 8022304:	2a03      	cmp	r2, #3
 8022306:	d848      	bhi.n	802239a <_dtoa_r+0x282>
 8022308:	e8df f002 	tbb	[pc, r2]
 802230c:	3a2c2e0b 	.word	0x3a2c2e0b
 8022310:	9b05      	ldr	r3, [sp, #20]
 8022312:	2200      	movs	r2, #0
 8022314:	eba3 0308 	sub.w	r3, r3, r8
 8022318:	9305      	str	r3, [sp, #20]
 802231a:	920a      	str	r2, [sp, #40]	@ 0x28
 802231c:	f1c8 0300 	rsb	r3, r8, #0
 8022320:	e7e3      	b.n	80222ea <_dtoa_r+0x1d2>
 8022322:	2200      	movs	r2, #0
 8022324:	9208      	str	r2, [sp, #32]
 8022326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022328:	2a00      	cmp	r2, #0
 802232a:	dc39      	bgt.n	80223a0 <_dtoa_r+0x288>
 802232c:	f04f 0b01 	mov.w	fp, #1
 8022330:	46da      	mov	sl, fp
 8022332:	465a      	mov	r2, fp
 8022334:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8022338:	f8d9 701c 	ldr.w	r7, [r9, #28]
 802233c:	2100      	movs	r1, #0
 802233e:	2004      	movs	r0, #4
 8022340:	f100 0614 	add.w	r6, r0, #20
 8022344:	4296      	cmp	r6, r2
 8022346:	d930      	bls.n	80223aa <_dtoa_r+0x292>
 8022348:	6079      	str	r1, [r7, #4]
 802234a:	4648      	mov	r0, r9
 802234c:	9304      	str	r3, [sp, #16]
 802234e:	f000 fc83 	bl	8022c58 <_Balloc>
 8022352:	9b04      	ldr	r3, [sp, #16]
 8022354:	4607      	mov	r7, r0
 8022356:	2800      	cmp	r0, #0
 8022358:	d146      	bne.n	80223e8 <_dtoa_r+0x2d0>
 802235a:	4b22      	ldr	r3, [pc, #136]	@ (80223e4 <_dtoa_r+0x2cc>)
 802235c:	4602      	mov	r2, r0
 802235e:	f240 11af 	movw	r1, #431	@ 0x1af
 8022362:	e6f2      	b.n	802214a <_dtoa_r+0x32>
 8022364:	2201      	movs	r2, #1
 8022366:	e7dd      	b.n	8022324 <_dtoa_r+0x20c>
 8022368:	2200      	movs	r2, #0
 802236a:	9208      	str	r2, [sp, #32]
 802236c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802236e:	eb08 0b02 	add.w	fp, r8, r2
 8022372:	f10b 0a01 	add.w	sl, fp, #1
 8022376:	4652      	mov	r2, sl
 8022378:	2a01      	cmp	r2, #1
 802237a:	bfb8      	it	lt
 802237c:	2201      	movlt	r2, #1
 802237e:	e7db      	b.n	8022338 <_dtoa_r+0x220>
 8022380:	2201      	movs	r2, #1
 8022382:	e7f2      	b.n	802236a <_dtoa_r+0x252>
 8022384:	2401      	movs	r4, #1
 8022386:	2200      	movs	r2, #0
 8022388:	e9cd 2407 	strd	r2, r4, [sp, #28]
 802238c:	f04f 3bff 	mov.w	fp, #4294967295
 8022390:	2100      	movs	r1, #0
 8022392:	46da      	mov	sl, fp
 8022394:	2212      	movs	r2, #18
 8022396:	9109      	str	r1, [sp, #36]	@ 0x24
 8022398:	e7ce      	b.n	8022338 <_dtoa_r+0x220>
 802239a:	2201      	movs	r2, #1
 802239c:	9208      	str	r2, [sp, #32]
 802239e:	e7f5      	b.n	802238c <_dtoa_r+0x274>
 80223a0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80223a4:	46da      	mov	sl, fp
 80223a6:	465a      	mov	r2, fp
 80223a8:	e7c6      	b.n	8022338 <_dtoa_r+0x220>
 80223aa:	3101      	adds	r1, #1
 80223ac:	0040      	lsls	r0, r0, #1
 80223ae:	e7c7      	b.n	8022340 <_dtoa_r+0x228>
 80223b0:	636f4361 	.word	0x636f4361
 80223b4:	3fd287a7 	.word	0x3fd287a7
 80223b8:	8b60c8b3 	.word	0x8b60c8b3
 80223bc:	3fc68a28 	.word	0x3fc68a28
 80223c0:	509f79fb 	.word	0x509f79fb
 80223c4:	3fd34413 	.word	0x3fd34413
 80223c8:	080352d8 	.word	0x080352d8
 80223cc:	0803548e 	.word	0x0803548e
 80223d0:	7ff00000 	.word	0x7ff00000
 80223d4:	0803548a 	.word	0x0803548a
 80223d8:	08035459 	.word	0x08035459
 80223dc:	08035458 	.word	0x08035458
 80223e0:	08035588 	.word	0x08035588
 80223e4:	080354e6 	.word	0x080354e6
 80223e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80223ec:	f1ba 0f0e 	cmp.w	sl, #14
 80223f0:	6010      	str	r0, [r2, #0]
 80223f2:	d86f      	bhi.n	80224d4 <_dtoa_r+0x3bc>
 80223f4:	2c00      	cmp	r4, #0
 80223f6:	d06d      	beq.n	80224d4 <_dtoa_r+0x3bc>
 80223f8:	f1b8 0f00 	cmp.w	r8, #0
 80223fc:	f340 80c2 	ble.w	8022584 <_dtoa_r+0x46c>
 8022400:	4aca      	ldr	r2, [pc, #808]	@ (802272c <_dtoa_r+0x614>)
 8022402:	f008 010f 	and.w	r1, r8, #15
 8022406:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802240a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 802240e:	ed92 7b00 	vldr	d7, [r2]
 8022412:	ea4f 1128 	mov.w	r1, r8, asr #4
 8022416:	f000 80a9 	beq.w	802256c <_dtoa_r+0x454>
 802241a:	4ac5      	ldr	r2, [pc, #788]	@ (8022730 <_dtoa_r+0x618>)
 802241c:	ed92 6b08 	vldr	d6, [r2, #32]
 8022420:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8022424:	ed8d 6b02 	vstr	d6, [sp, #8]
 8022428:	f001 010f 	and.w	r1, r1, #15
 802242c:	2203      	movs	r2, #3
 802242e:	48c0      	ldr	r0, [pc, #768]	@ (8022730 <_dtoa_r+0x618>)
 8022430:	2900      	cmp	r1, #0
 8022432:	f040 809d 	bne.w	8022570 <_dtoa_r+0x458>
 8022436:	ed9d 6b02 	vldr	d6, [sp, #8]
 802243a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802243e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022442:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8022444:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022448:	2900      	cmp	r1, #0
 802244a:	f000 80c1 	beq.w	80225d0 <_dtoa_r+0x4b8>
 802244e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8022452:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802245a:	f140 80b9 	bpl.w	80225d0 <_dtoa_r+0x4b8>
 802245e:	f1ba 0f00 	cmp.w	sl, #0
 8022462:	f000 80b5 	beq.w	80225d0 <_dtoa_r+0x4b8>
 8022466:	f1bb 0f00 	cmp.w	fp, #0
 802246a:	dd31      	ble.n	80224d0 <_dtoa_r+0x3b8>
 802246c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8022470:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022474:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022478:	f108 31ff 	add.w	r1, r8, #4294967295
 802247c:	9104      	str	r1, [sp, #16]
 802247e:	3201      	adds	r2, #1
 8022480:	465c      	mov	r4, fp
 8022482:	ed9d 6b02 	vldr	d6, [sp, #8]
 8022486:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 802248a:	ee07 2a90 	vmov	s15, r2
 802248e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8022492:	eea7 5b06 	vfma.f64	d5, d7, d6
 8022496:	ee15 2a90 	vmov	r2, s11
 802249a:	ec51 0b15 	vmov	r0, r1, d5
 802249e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80224a2:	2c00      	cmp	r4, #0
 80224a4:	f040 8098 	bne.w	80225d8 <_dtoa_r+0x4c0>
 80224a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80224ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 80224b0:	ec41 0b17 	vmov	d7, r0, r1
 80224b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80224b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224bc:	f300 8261 	bgt.w	8022982 <_dtoa_r+0x86a>
 80224c0:	eeb1 7b47 	vneg.f64	d7, d7
 80224c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80224c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224cc:	f100 80f5 	bmi.w	80226ba <_dtoa_r+0x5a2>
 80224d0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80224d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80224d6:	2a00      	cmp	r2, #0
 80224d8:	f2c0 812c 	blt.w	8022734 <_dtoa_r+0x61c>
 80224dc:	f1b8 0f0e 	cmp.w	r8, #14
 80224e0:	f300 8128 	bgt.w	8022734 <_dtoa_r+0x61c>
 80224e4:	4b91      	ldr	r3, [pc, #580]	@ (802272c <_dtoa_r+0x614>)
 80224e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80224ea:	ed93 6b00 	vldr	d6, [r3]
 80224ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	da03      	bge.n	80224fc <_dtoa_r+0x3e4>
 80224f4:	f1ba 0f00 	cmp.w	sl, #0
 80224f8:	f340 80d2 	ble.w	80226a0 <_dtoa_r+0x588>
 80224fc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8022500:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022504:	463e      	mov	r6, r7
 8022506:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802250a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802250e:	ee15 3a10 	vmov	r3, s10
 8022512:	3330      	adds	r3, #48	@ 0x30
 8022514:	f806 3b01 	strb.w	r3, [r6], #1
 8022518:	1bf3      	subs	r3, r6, r7
 802251a:	459a      	cmp	sl, r3
 802251c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8022520:	eea3 7b46 	vfms.f64	d7, d3, d6
 8022524:	f040 80f8 	bne.w	8022718 <_dtoa_r+0x600>
 8022528:	ee37 7b07 	vadd.f64	d7, d7, d7
 802252c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022534:	f300 80dd 	bgt.w	80226f2 <_dtoa_r+0x5da>
 8022538:	eeb4 7b46 	vcmp.f64	d7, d6
 802253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022540:	d104      	bne.n	802254c <_dtoa_r+0x434>
 8022542:	ee15 3a10 	vmov	r3, s10
 8022546:	07db      	lsls	r3, r3, #31
 8022548:	f100 80d3 	bmi.w	80226f2 <_dtoa_r+0x5da>
 802254c:	9901      	ldr	r1, [sp, #4]
 802254e:	4648      	mov	r0, r9
 8022550:	f000 fbc2 	bl	8022cd8 <_Bfree>
 8022554:	2300      	movs	r3, #0
 8022556:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022558:	7033      	strb	r3, [r6, #0]
 802255a:	f108 0301 	add.w	r3, r8, #1
 802255e:	6013      	str	r3, [r2, #0]
 8022560:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022562:	2b00      	cmp	r3, #0
 8022564:	f000 8304 	beq.w	8022b70 <_dtoa_r+0xa58>
 8022568:	601e      	str	r6, [r3, #0]
 802256a:	e301      	b.n	8022b70 <_dtoa_r+0xa58>
 802256c:	2202      	movs	r2, #2
 802256e:	e75e      	b.n	802242e <_dtoa_r+0x316>
 8022570:	07cc      	lsls	r4, r1, #31
 8022572:	d504      	bpl.n	802257e <_dtoa_r+0x466>
 8022574:	ed90 6b00 	vldr	d6, [r0]
 8022578:	3201      	adds	r2, #1
 802257a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802257e:	1049      	asrs	r1, r1, #1
 8022580:	3008      	adds	r0, #8
 8022582:	e755      	b.n	8022430 <_dtoa_r+0x318>
 8022584:	d022      	beq.n	80225cc <_dtoa_r+0x4b4>
 8022586:	f1c8 0100 	rsb	r1, r8, #0
 802258a:	4a68      	ldr	r2, [pc, #416]	@ (802272c <_dtoa_r+0x614>)
 802258c:	f001 000f 	and.w	r0, r1, #15
 8022590:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8022594:	ed92 7b00 	vldr	d7, [r2]
 8022598:	ee28 7b07 	vmul.f64	d7, d8, d7
 802259c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80225a0:	4863      	ldr	r0, [pc, #396]	@ (8022730 <_dtoa_r+0x618>)
 80225a2:	1109      	asrs	r1, r1, #4
 80225a4:	2400      	movs	r4, #0
 80225a6:	2202      	movs	r2, #2
 80225a8:	b929      	cbnz	r1, 80225b6 <_dtoa_r+0x49e>
 80225aa:	2c00      	cmp	r4, #0
 80225ac:	f43f af49 	beq.w	8022442 <_dtoa_r+0x32a>
 80225b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80225b4:	e745      	b.n	8022442 <_dtoa_r+0x32a>
 80225b6:	07ce      	lsls	r6, r1, #31
 80225b8:	d505      	bpl.n	80225c6 <_dtoa_r+0x4ae>
 80225ba:	ed90 6b00 	vldr	d6, [r0]
 80225be:	3201      	adds	r2, #1
 80225c0:	2401      	movs	r4, #1
 80225c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80225c6:	1049      	asrs	r1, r1, #1
 80225c8:	3008      	adds	r0, #8
 80225ca:	e7ed      	b.n	80225a8 <_dtoa_r+0x490>
 80225cc:	2202      	movs	r2, #2
 80225ce:	e738      	b.n	8022442 <_dtoa_r+0x32a>
 80225d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80225d4:	4654      	mov	r4, sl
 80225d6:	e754      	b.n	8022482 <_dtoa_r+0x36a>
 80225d8:	4a54      	ldr	r2, [pc, #336]	@ (802272c <_dtoa_r+0x614>)
 80225da:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80225de:	ed12 4b02 	vldr	d4, [r2, #-8]
 80225e2:	9a08      	ldr	r2, [sp, #32]
 80225e4:	ec41 0b17 	vmov	d7, r0, r1
 80225e8:	443c      	add	r4, r7
 80225ea:	b34a      	cbz	r2, 8022640 <_dtoa_r+0x528>
 80225ec:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80225f0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80225f4:	463e      	mov	r6, r7
 80225f6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80225fa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80225fe:	ee35 7b47 	vsub.f64	d7, d5, d7
 8022602:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022606:	ee14 2a90 	vmov	r2, s9
 802260a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802260e:	3230      	adds	r2, #48	@ 0x30
 8022610:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022614:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802261c:	f806 2b01 	strb.w	r2, [r6], #1
 8022620:	d438      	bmi.n	8022694 <_dtoa_r+0x57c>
 8022622:	ee32 5b46 	vsub.f64	d5, d2, d6
 8022626:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802262e:	d462      	bmi.n	80226f6 <_dtoa_r+0x5de>
 8022630:	42a6      	cmp	r6, r4
 8022632:	f43f af4d 	beq.w	80224d0 <_dtoa_r+0x3b8>
 8022636:	ee27 7b03 	vmul.f64	d7, d7, d3
 802263a:	ee26 6b03 	vmul.f64	d6, d6, d3
 802263e:	e7e0      	b.n	8022602 <_dtoa_r+0x4ea>
 8022640:	4621      	mov	r1, r4
 8022642:	463e      	mov	r6, r7
 8022644:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022648:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802264c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022650:	ee14 2a90 	vmov	r2, s9
 8022654:	3230      	adds	r2, #48	@ 0x30
 8022656:	f806 2b01 	strb.w	r2, [r6], #1
 802265a:	42a6      	cmp	r6, r4
 802265c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022660:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022664:	d119      	bne.n	802269a <_dtoa_r+0x582>
 8022666:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 802266a:	ee37 4b05 	vadd.f64	d4, d7, d5
 802266e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8022672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022676:	dc3e      	bgt.n	80226f6 <_dtoa_r+0x5de>
 8022678:	ee35 5b47 	vsub.f64	d5, d5, d7
 802267c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8022680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022684:	f57f af24 	bpl.w	80224d0 <_dtoa_r+0x3b8>
 8022688:	460e      	mov	r6, r1
 802268a:	3901      	subs	r1, #1
 802268c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022690:	2b30      	cmp	r3, #48	@ 0x30
 8022692:	d0f9      	beq.n	8022688 <_dtoa_r+0x570>
 8022694:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8022698:	e758      	b.n	802254c <_dtoa_r+0x434>
 802269a:	ee26 6b03 	vmul.f64	d6, d6, d3
 802269e:	e7d5      	b.n	802264c <_dtoa_r+0x534>
 80226a0:	d10b      	bne.n	80226ba <_dtoa_r+0x5a2>
 80226a2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80226a6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80226aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80226ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80226b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226b6:	f2c0 8161 	blt.w	802297c <_dtoa_r+0x864>
 80226ba:	2400      	movs	r4, #0
 80226bc:	4625      	mov	r5, r4
 80226be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80226c0:	43db      	mvns	r3, r3
 80226c2:	9304      	str	r3, [sp, #16]
 80226c4:	463e      	mov	r6, r7
 80226c6:	f04f 0800 	mov.w	r8, #0
 80226ca:	4621      	mov	r1, r4
 80226cc:	4648      	mov	r0, r9
 80226ce:	f000 fb03 	bl	8022cd8 <_Bfree>
 80226d2:	2d00      	cmp	r5, #0
 80226d4:	d0de      	beq.n	8022694 <_dtoa_r+0x57c>
 80226d6:	f1b8 0f00 	cmp.w	r8, #0
 80226da:	d005      	beq.n	80226e8 <_dtoa_r+0x5d0>
 80226dc:	45a8      	cmp	r8, r5
 80226de:	d003      	beq.n	80226e8 <_dtoa_r+0x5d0>
 80226e0:	4641      	mov	r1, r8
 80226e2:	4648      	mov	r0, r9
 80226e4:	f000 faf8 	bl	8022cd8 <_Bfree>
 80226e8:	4629      	mov	r1, r5
 80226ea:	4648      	mov	r0, r9
 80226ec:	f000 faf4 	bl	8022cd8 <_Bfree>
 80226f0:	e7d0      	b.n	8022694 <_dtoa_r+0x57c>
 80226f2:	f8cd 8010 	str.w	r8, [sp, #16]
 80226f6:	4633      	mov	r3, r6
 80226f8:	461e      	mov	r6, r3
 80226fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80226fe:	2a39      	cmp	r2, #57	@ 0x39
 8022700:	d106      	bne.n	8022710 <_dtoa_r+0x5f8>
 8022702:	429f      	cmp	r7, r3
 8022704:	d1f8      	bne.n	80226f8 <_dtoa_r+0x5e0>
 8022706:	9a04      	ldr	r2, [sp, #16]
 8022708:	3201      	adds	r2, #1
 802270a:	9204      	str	r2, [sp, #16]
 802270c:	2230      	movs	r2, #48	@ 0x30
 802270e:	703a      	strb	r2, [r7, #0]
 8022710:	781a      	ldrb	r2, [r3, #0]
 8022712:	3201      	adds	r2, #1
 8022714:	701a      	strb	r2, [r3, #0]
 8022716:	e7bd      	b.n	8022694 <_dtoa_r+0x57c>
 8022718:	ee27 7b04 	vmul.f64	d7, d7, d4
 802271c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022724:	f47f aeef 	bne.w	8022506 <_dtoa_r+0x3ee>
 8022728:	e710      	b.n	802254c <_dtoa_r+0x434>
 802272a:	bf00      	nop
 802272c:	08035588 	.word	0x08035588
 8022730:	08035560 	.word	0x08035560
 8022734:	9908      	ldr	r1, [sp, #32]
 8022736:	2900      	cmp	r1, #0
 8022738:	f000 80e3 	beq.w	8022902 <_dtoa_r+0x7ea>
 802273c:	9907      	ldr	r1, [sp, #28]
 802273e:	2901      	cmp	r1, #1
 8022740:	f300 80c8 	bgt.w	80228d4 <_dtoa_r+0x7bc>
 8022744:	2d00      	cmp	r5, #0
 8022746:	f000 80c1 	beq.w	80228cc <_dtoa_r+0x7b4>
 802274a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802274e:	9e05      	ldr	r6, [sp, #20]
 8022750:	461c      	mov	r4, r3
 8022752:	9304      	str	r3, [sp, #16]
 8022754:	9b05      	ldr	r3, [sp, #20]
 8022756:	4413      	add	r3, r2
 8022758:	9305      	str	r3, [sp, #20]
 802275a:	9b06      	ldr	r3, [sp, #24]
 802275c:	2101      	movs	r1, #1
 802275e:	4413      	add	r3, r2
 8022760:	4648      	mov	r0, r9
 8022762:	9306      	str	r3, [sp, #24]
 8022764:	f000 fbb6 	bl	8022ed4 <__i2b>
 8022768:	9b04      	ldr	r3, [sp, #16]
 802276a:	4605      	mov	r5, r0
 802276c:	b166      	cbz	r6, 8022788 <_dtoa_r+0x670>
 802276e:	9a06      	ldr	r2, [sp, #24]
 8022770:	2a00      	cmp	r2, #0
 8022772:	dd09      	ble.n	8022788 <_dtoa_r+0x670>
 8022774:	42b2      	cmp	r2, r6
 8022776:	9905      	ldr	r1, [sp, #20]
 8022778:	bfa8      	it	ge
 802277a:	4632      	movge	r2, r6
 802277c:	1a89      	subs	r1, r1, r2
 802277e:	9105      	str	r1, [sp, #20]
 8022780:	9906      	ldr	r1, [sp, #24]
 8022782:	1ab6      	subs	r6, r6, r2
 8022784:	1a8a      	subs	r2, r1, r2
 8022786:	9206      	str	r2, [sp, #24]
 8022788:	b1fb      	cbz	r3, 80227ca <_dtoa_r+0x6b2>
 802278a:	9a08      	ldr	r2, [sp, #32]
 802278c:	2a00      	cmp	r2, #0
 802278e:	f000 80bc 	beq.w	802290a <_dtoa_r+0x7f2>
 8022792:	b19c      	cbz	r4, 80227bc <_dtoa_r+0x6a4>
 8022794:	4629      	mov	r1, r5
 8022796:	4622      	mov	r2, r4
 8022798:	4648      	mov	r0, r9
 802279a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802279c:	f000 fc5a 	bl	8023054 <__pow5mult>
 80227a0:	9a01      	ldr	r2, [sp, #4]
 80227a2:	4601      	mov	r1, r0
 80227a4:	4605      	mov	r5, r0
 80227a6:	4648      	mov	r0, r9
 80227a8:	f000 fbaa 	bl	8022f00 <__multiply>
 80227ac:	9901      	ldr	r1, [sp, #4]
 80227ae:	9004      	str	r0, [sp, #16]
 80227b0:	4648      	mov	r0, r9
 80227b2:	f000 fa91 	bl	8022cd8 <_Bfree>
 80227b6:	9a04      	ldr	r2, [sp, #16]
 80227b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80227ba:	9201      	str	r2, [sp, #4]
 80227bc:	1b1a      	subs	r2, r3, r4
 80227be:	d004      	beq.n	80227ca <_dtoa_r+0x6b2>
 80227c0:	9901      	ldr	r1, [sp, #4]
 80227c2:	4648      	mov	r0, r9
 80227c4:	f000 fc46 	bl	8023054 <__pow5mult>
 80227c8:	9001      	str	r0, [sp, #4]
 80227ca:	2101      	movs	r1, #1
 80227cc:	4648      	mov	r0, r9
 80227ce:	f000 fb81 	bl	8022ed4 <__i2b>
 80227d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80227d4:	4604      	mov	r4, r0
 80227d6:	2b00      	cmp	r3, #0
 80227d8:	f000 81d0 	beq.w	8022b7c <_dtoa_r+0xa64>
 80227dc:	461a      	mov	r2, r3
 80227de:	4601      	mov	r1, r0
 80227e0:	4648      	mov	r0, r9
 80227e2:	f000 fc37 	bl	8023054 <__pow5mult>
 80227e6:	9b07      	ldr	r3, [sp, #28]
 80227e8:	2b01      	cmp	r3, #1
 80227ea:	4604      	mov	r4, r0
 80227ec:	f300 8095 	bgt.w	802291a <_dtoa_r+0x802>
 80227f0:	9b02      	ldr	r3, [sp, #8]
 80227f2:	2b00      	cmp	r3, #0
 80227f4:	f040 808b 	bne.w	802290e <_dtoa_r+0x7f6>
 80227f8:	9b03      	ldr	r3, [sp, #12]
 80227fa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80227fe:	2a00      	cmp	r2, #0
 8022800:	f040 8087 	bne.w	8022912 <_dtoa_r+0x7fa>
 8022804:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8022808:	0d12      	lsrs	r2, r2, #20
 802280a:	0512      	lsls	r2, r2, #20
 802280c:	2a00      	cmp	r2, #0
 802280e:	f000 8082 	beq.w	8022916 <_dtoa_r+0x7fe>
 8022812:	9b05      	ldr	r3, [sp, #20]
 8022814:	3301      	adds	r3, #1
 8022816:	9305      	str	r3, [sp, #20]
 8022818:	9b06      	ldr	r3, [sp, #24]
 802281a:	3301      	adds	r3, #1
 802281c:	9306      	str	r3, [sp, #24]
 802281e:	2301      	movs	r3, #1
 8022820:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022824:	2b00      	cmp	r3, #0
 8022826:	f000 81af 	beq.w	8022b88 <_dtoa_r+0xa70>
 802282a:	6922      	ldr	r2, [r4, #16]
 802282c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8022830:	6910      	ldr	r0, [r2, #16]
 8022832:	f000 fb03 	bl	8022e3c <__hi0bits>
 8022836:	f1c0 0020 	rsb	r0, r0, #32
 802283a:	9b06      	ldr	r3, [sp, #24]
 802283c:	4418      	add	r0, r3
 802283e:	f010 001f 	ands.w	r0, r0, #31
 8022842:	d076      	beq.n	8022932 <_dtoa_r+0x81a>
 8022844:	f1c0 0220 	rsb	r2, r0, #32
 8022848:	2a04      	cmp	r2, #4
 802284a:	dd69      	ble.n	8022920 <_dtoa_r+0x808>
 802284c:	9b05      	ldr	r3, [sp, #20]
 802284e:	f1c0 001c 	rsb	r0, r0, #28
 8022852:	4403      	add	r3, r0
 8022854:	9305      	str	r3, [sp, #20]
 8022856:	9b06      	ldr	r3, [sp, #24]
 8022858:	4406      	add	r6, r0
 802285a:	4403      	add	r3, r0
 802285c:	9306      	str	r3, [sp, #24]
 802285e:	9b05      	ldr	r3, [sp, #20]
 8022860:	2b00      	cmp	r3, #0
 8022862:	dd05      	ble.n	8022870 <_dtoa_r+0x758>
 8022864:	9901      	ldr	r1, [sp, #4]
 8022866:	461a      	mov	r2, r3
 8022868:	4648      	mov	r0, r9
 802286a:	f000 fc4d 	bl	8023108 <__lshift>
 802286e:	9001      	str	r0, [sp, #4]
 8022870:	9b06      	ldr	r3, [sp, #24]
 8022872:	2b00      	cmp	r3, #0
 8022874:	dd05      	ble.n	8022882 <_dtoa_r+0x76a>
 8022876:	4621      	mov	r1, r4
 8022878:	461a      	mov	r2, r3
 802287a:	4648      	mov	r0, r9
 802287c:	f000 fc44 	bl	8023108 <__lshift>
 8022880:	4604      	mov	r4, r0
 8022882:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022884:	2b00      	cmp	r3, #0
 8022886:	d056      	beq.n	8022936 <_dtoa_r+0x81e>
 8022888:	9801      	ldr	r0, [sp, #4]
 802288a:	4621      	mov	r1, r4
 802288c:	f000 fca8 	bl	80231e0 <__mcmp>
 8022890:	2800      	cmp	r0, #0
 8022892:	da50      	bge.n	8022936 <_dtoa_r+0x81e>
 8022894:	f108 33ff 	add.w	r3, r8, #4294967295
 8022898:	9304      	str	r3, [sp, #16]
 802289a:	9901      	ldr	r1, [sp, #4]
 802289c:	2300      	movs	r3, #0
 802289e:	220a      	movs	r2, #10
 80228a0:	4648      	mov	r0, r9
 80228a2:	f000 fa3b 	bl	8022d1c <__multadd>
 80228a6:	9b08      	ldr	r3, [sp, #32]
 80228a8:	9001      	str	r0, [sp, #4]
 80228aa:	2b00      	cmp	r3, #0
 80228ac:	f000 816e 	beq.w	8022b8c <_dtoa_r+0xa74>
 80228b0:	4629      	mov	r1, r5
 80228b2:	2300      	movs	r3, #0
 80228b4:	220a      	movs	r2, #10
 80228b6:	4648      	mov	r0, r9
 80228b8:	f000 fa30 	bl	8022d1c <__multadd>
 80228bc:	f1bb 0f00 	cmp.w	fp, #0
 80228c0:	4605      	mov	r5, r0
 80228c2:	dc64      	bgt.n	802298e <_dtoa_r+0x876>
 80228c4:	9b07      	ldr	r3, [sp, #28]
 80228c6:	2b02      	cmp	r3, #2
 80228c8:	dc3e      	bgt.n	8022948 <_dtoa_r+0x830>
 80228ca:	e060      	b.n	802298e <_dtoa_r+0x876>
 80228cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80228ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80228d2:	e73c      	b.n	802274e <_dtoa_r+0x636>
 80228d4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80228d8:	42a3      	cmp	r3, r4
 80228da:	bfbf      	itttt	lt
 80228dc:	1ae2      	sublt	r2, r4, r3
 80228de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80228e0:	189b      	addlt	r3, r3, r2
 80228e2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80228e4:	bfae      	itee	ge
 80228e6:	1b1c      	subge	r4, r3, r4
 80228e8:	4623      	movlt	r3, r4
 80228ea:	2400      	movlt	r4, #0
 80228ec:	f1ba 0f00 	cmp.w	sl, #0
 80228f0:	bfb5      	itete	lt
 80228f2:	9a05      	ldrlt	r2, [sp, #20]
 80228f4:	9e05      	ldrge	r6, [sp, #20]
 80228f6:	eba2 060a 	sublt.w	r6, r2, sl
 80228fa:	4652      	movge	r2, sl
 80228fc:	bfb8      	it	lt
 80228fe:	2200      	movlt	r2, #0
 8022900:	e727      	b.n	8022752 <_dtoa_r+0x63a>
 8022902:	9e05      	ldr	r6, [sp, #20]
 8022904:	9d08      	ldr	r5, [sp, #32]
 8022906:	461c      	mov	r4, r3
 8022908:	e730      	b.n	802276c <_dtoa_r+0x654>
 802290a:	461a      	mov	r2, r3
 802290c:	e758      	b.n	80227c0 <_dtoa_r+0x6a8>
 802290e:	2300      	movs	r3, #0
 8022910:	e786      	b.n	8022820 <_dtoa_r+0x708>
 8022912:	9b02      	ldr	r3, [sp, #8]
 8022914:	e784      	b.n	8022820 <_dtoa_r+0x708>
 8022916:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022918:	e783      	b.n	8022822 <_dtoa_r+0x70a>
 802291a:	2300      	movs	r3, #0
 802291c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802291e:	e784      	b.n	802282a <_dtoa_r+0x712>
 8022920:	d09d      	beq.n	802285e <_dtoa_r+0x746>
 8022922:	9b05      	ldr	r3, [sp, #20]
 8022924:	321c      	adds	r2, #28
 8022926:	4413      	add	r3, r2
 8022928:	9305      	str	r3, [sp, #20]
 802292a:	9b06      	ldr	r3, [sp, #24]
 802292c:	4416      	add	r6, r2
 802292e:	4413      	add	r3, r2
 8022930:	e794      	b.n	802285c <_dtoa_r+0x744>
 8022932:	4602      	mov	r2, r0
 8022934:	e7f5      	b.n	8022922 <_dtoa_r+0x80a>
 8022936:	f1ba 0f00 	cmp.w	sl, #0
 802293a:	f8cd 8010 	str.w	r8, [sp, #16]
 802293e:	46d3      	mov	fp, sl
 8022940:	dc21      	bgt.n	8022986 <_dtoa_r+0x86e>
 8022942:	9b07      	ldr	r3, [sp, #28]
 8022944:	2b02      	cmp	r3, #2
 8022946:	dd1e      	ble.n	8022986 <_dtoa_r+0x86e>
 8022948:	f1bb 0f00 	cmp.w	fp, #0
 802294c:	f47f aeb7 	bne.w	80226be <_dtoa_r+0x5a6>
 8022950:	4621      	mov	r1, r4
 8022952:	465b      	mov	r3, fp
 8022954:	2205      	movs	r2, #5
 8022956:	4648      	mov	r0, r9
 8022958:	f000 f9e0 	bl	8022d1c <__multadd>
 802295c:	4601      	mov	r1, r0
 802295e:	4604      	mov	r4, r0
 8022960:	9801      	ldr	r0, [sp, #4]
 8022962:	f000 fc3d 	bl	80231e0 <__mcmp>
 8022966:	2800      	cmp	r0, #0
 8022968:	f77f aea9 	ble.w	80226be <_dtoa_r+0x5a6>
 802296c:	463e      	mov	r6, r7
 802296e:	2331      	movs	r3, #49	@ 0x31
 8022970:	f806 3b01 	strb.w	r3, [r6], #1
 8022974:	9b04      	ldr	r3, [sp, #16]
 8022976:	3301      	adds	r3, #1
 8022978:	9304      	str	r3, [sp, #16]
 802297a:	e6a4      	b.n	80226c6 <_dtoa_r+0x5ae>
 802297c:	f8cd 8010 	str.w	r8, [sp, #16]
 8022980:	4654      	mov	r4, sl
 8022982:	4625      	mov	r5, r4
 8022984:	e7f2      	b.n	802296c <_dtoa_r+0x854>
 8022986:	9b08      	ldr	r3, [sp, #32]
 8022988:	2b00      	cmp	r3, #0
 802298a:	f000 8103 	beq.w	8022b94 <_dtoa_r+0xa7c>
 802298e:	2e00      	cmp	r6, #0
 8022990:	dd05      	ble.n	802299e <_dtoa_r+0x886>
 8022992:	4629      	mov	r1, r5
 8022994:	4632      	mov	r2, r6
 8022996:	4648      	mov	r0, r9
 8022998:	f000 fbb6 	bl	8023108 <__lshift>
 802299c:	4605      	mov	r5, r0
 802299e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80229a0:	2b00      	cmp	r3, #0
 80229a2:	d058      	beq.n	8022a56 <_dtoa_r+0x93e>
 80229a4:	6869      	ldr	r1, [r5, #4]
 80229a6:	4648      	mov	r0, r9
 80229a8:	f000 f956 	bl	8022c58 <_Balloc>
 80229ac:	4606      	mov	r6, r0
 80229ae:	b928      	cbnz	r0, 80229bc <_dtoa_r+0x8a4>
 80229b0:	4b82      	ldr	r3, [pc, #520]	@ (8022bbc <_dtoa_r+0xaa4>)
 80229b2:	4602      	mov	r2, r0
 80229b4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80229b8:	f7ff bbc7 	b.w	802214a <_dtoa_r+0x32>
 80229bc:	692a      	ldr	r2, [r5, #16]
 80229be:	3202      	adds	r2, #2
 80229c0:	0092      	lsls	r2, r2, #2
 80229c2:	f105 010c 	add.w	r1, r5, #12
 80229c6:	300c      	adds	r0, #12
 80229c8:	f7ff fb01 	bl	8021fce <memcpy>
 80229cc:	2201      	movs	r2, #1
 80229ce:	4631      	mov	r1, r6
 80229d0:	4648      	mov	r0, r9
 80229d2:	f000 fb99 	bl	8023108 <__lshift>
 80229d6:	1c7b      	adds	r3, r7, #1
 80229d8:	9305      	str	r3, [sp, #20]
 80229da:	eb07 030b 	add.w	r3, r7, fp
 80229de:	9309      	str	r3, [sp, #36]	@ 0x24
 80229e0:	9b02      	ldr	r3, [sp, #8]
 80229e2:	f003 0301 	and.w	r3, r3, #1
 80229e6:	46a8      	mov	r8, r5
 80229e8:	9308      	str	r3, [sp, #32]
 80229ea:	4605      	mov	r5, r0
 80229ec:	9b05      	ldr	r3, [sp, #20]
 80229ee:	9801      	ldr	r0, [sp, #4]
 80229f0:	4621      	mov	r1, r4
 80229f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80229f6:	f7ff fb06 	bl	8022006 <quorem>
 80229fa:	4641      	mov	r1, r8
 80229fc:	9002      	str	r0, [sp, #8]
 80229fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8022a02:	9801      	ldr	r0, [sp, #4]
 8022a04:	f000 fbec 	bl	80231e0 <__mcmp>
 8022a08:	462a      	mov	r2, r5
 8022a0a:	9006      	str	r0, [sp, #24]
 8022a0c:	4621      	mov	r1, r4
 8022a0e:	4648      	mov	r0, r9
 8022a10:	f000 fc02 	bl	8023218 <__mdiff>
 8022a14:	68c2      	ldr	r2, [r0, #12]
 8022a16:	4606      	mov	r6, r0
 8022a18:	b9fa      	cbnz	r2, 8022a5a <_dtoa_r+0x942>
 8022a1a:	4601      	mov	r1, r0
 8022a1c:	9801      	ldr	r0, [sp, #4]
 8022a1e:	f000 fbdf 	bl	80231e0 <__mcmp>
 8022a22:	4602      	mov	r2, r0
 8022a24:	4631      	mov	r1, r6
 8022a26:	4648      	mov	r0, r9
 8022a28:	920a      	str	r2, [sp, #40]	@ 0x28
 8022a2a:	f000 f955 	bl	8022cd8 <_Bfree>
 8022a2e:	9b07      	ldr	r3, [sp, #28]
 8022a30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022a32:	9e05      	ldr	r6, [sp, #20]
 8022a34:	ea43 0102 	orr.w	r1, r3, r2
 8022a38:	9b08      	ldr	r3, [sp, #32]
 8022a3a:	4319      	orrs	r1, r3
 8022a3c:	d10f      	bne.n	8022a5e <_dtoa_r+0x946>
 8022a3e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8022a42:	d028      	beq.n	8022a96 <_dtoa_r+0x97e>
 8022a44:	9b06      	ldr	r3, [sp, #24]
 8022a46:	2b00      	cmp	r3, #0
 8022a48:	dd02      	ble.n	8022a50 <_dtoa_r+0x938>
 8022a4a:	9b02      	ldr	r3, [sp, #8]
 8022a4c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8022a50:	f88b a000 	strb.w	sl, [fp]
 8022a54:	e639      	b.n	80226ca <_dtoa_r+0x5b2>
 8022a56:	4628      	mov	r0, r5
 8022a58:	e7bd      	b.n	80229d6 <_dtoa_r+0x8be>
 8022a5a:	2201      	movs	r2, #1
 8022a5c:	e7e2      	b.n	8022a24 <_dtoa_r+0x90c>
 8022a5e:	9b06      	ldr	r3, [sp, #24]
 8022a60:	2b00      	cmp	r3, #0
 8022a62:	db04      	blt.n	8022a6e <_dtoa_r+0x956>
 8022a64:	9907      	ldr	r1, [sp, #28]
 8022a66:	430b      	orrs	r3, r1
 8022a68:	9908      	ldr	r1, [sp, #32]
 8022a6a:	430b      	orrs	r3, r1
 8022a6c:	d120      	bne.n	8022ab0 <_dtoa_r+0x998>
 8022a6e:	2a00      	cmp	r2, #0
 8022a70:	ddee      	ble.n	8022a50 <_dtoa_r+0x938>
 8022a72:	9901      	ldr	r1, [sp, #4]
 8022a74:	2201      	movs	r2, #1
 8022a76:	4648      	mov	r0, r9
 8022a78:	f000 fb46 	bl	8023108 <__lshift>
 8022a7c:	4621      	mov	r1, r4
 8022a7e:	9001      	str	r0, [sp, #4]
 8022a80:	f000 fbae 	bl	80231e0 <__mcmp>
 8022a84:	2800      	cmp	r0, #0
 8022a86:	dc03      	bgt.n	8022a90 <_dtoa_r+0x978>
 8022a88:	d1e2      	bne.n	8022a50 <_dtoa_r+0x938>
 8022a8a:	f01a 0f01 	tst.w	sl, #1
 8022a8e:	d0df      	beq.n	8022a50 <_dtoa_r+0x938>
 8022a90:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8022a94:	d1d9      	bne.n	8022a4a <_dtoa_r+0x932>
 8022a96:	2339      	movs	r3, #57	@ 0x39
 8022a98:	f88b 3000 	strb.w	r3, [fp]
 8022a9c:	4633      	mov	r3, r6
 8022a9e:	461e      	mov	r6, r3
 8022aa0:	3b01      	subs	r3, #1
 8022aa2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8022aa6:	2a39      	cmp	r2, #57	@ 0x39
 8022aa8:	d053      	beq.n	8022b52 <_dtoa_r+0xa3a>
 8022aaa:	3201      	adds	r2, #1
 8022aac:	701a      	strb	r2, [r3, #0]
 8022aae:	e60c      	b.n	80226ca <_dtoa_r+0x5b2>
 8022ab0:	2a00      	cmp	r2, #0
 8022ab2:	dd07      	ble.n	8022ac4 <_dtoa_r+0x9ac>
 8022ab4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8022ab8:	d0ed      	beq.n	8022a96 <_dtoa_r+0x97e>
 8022aba:	f10a 0301 	add.w	r3, sl, #1
 8022abe:	f88b 3000 	strb.w	r3, [fp]
 8022ac2:	e602      	b.n	80226ca <_dtoa_r+0x5b2>
 8022ac4:	9b05      	ldr	r3, [sp, #20]
 8022ac6:	9a05      	ldr	r2, [sp, #20]
 8022ac8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8022acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022ace:	4293      	cmp	r3, r2
 8022ad0:	d029      	beq.n	8022b26 <_dtoa_r+0xa0e>
 8022ad2:	9901      	ldr	r1, [sp, #4]
 8022ad4:	2300      	movs	r3, #0
 8022ad6:	220a      	movs	r2, #10
 8022ad8:	4648      	mov	r0, r9
 8022ada:	f000 f91f 	bl	8022d1c <__multadd>
 8022ade:	45a8      	cmp	r8, r5
 8022ae0:	9001      	str	r0, [sp, #4]
 8022ae2:	f04f 0300 	mov.w	r3, #0
 8022ae6:	f04f 020a 	mov.w	r2, #10
 8022aea:	4641      	mov	r1, r8
 8022aec:	4648      	mov	r0, r9
 8022aee:	d107      	bne.n	8022b00 <_dtoa_r+0x9e8>
 8022af0:	f000 f914 	bl	8022d1c <__multadd>
 8022af4:	4680      	mov	r8, r0
 8022af6:	4605      	mov	r5, r0
 8022af8:	9b05      	ldr	r3, [sp, #20]
 8022afa:	3301      	adds	r3, #1
 8022afc:	9305      	str	r3, [sp, #20]
 8022afe:	e775      	b.n	80229ec <_dtoa_r+0x8d4>
 8022b00:	f000 f90c 	bl	8022d1c <__multadd>
 8022b04:	4629      	mov	r1, r5
 8022b06:	4680      	mov	r8, r0
 8022b08:	2300      	movs	r3, #0
 8022b0a:	220a      	movs	r2, #10
 8022b0c:	4648      	mov	r0, r9
 8022b0e:	f000 f905 	bl	8022d1c <__multadd>
 8022b12:	4605      	mov	r5, r0
 8022b14:	e7f0      	b.n	8022af8 <_dtoa_r+0x9e0>
 8022b16:	f1bb 0f00 	cmp.w	fp, #0
 8022b1a:	bfcc      	ite	gt
 8022b1c:	465e      	movgt	r6, fp
 8022b1e:	2601      	movle	r6, #1
 8022b20:	443e      	add	r6, r7
 8022b22:	f04f 0800 	mov.w	r8, #0
 8022b26:	9901      	ldr	r1, [sp, #4]
 8022b28:	2201      	movs	r2, #1
 8022b2a:	4648      	mov	r0, r9
 8022b2c:	f000 faec 	bl	8023108 <__lshift>
 8022b30:	4621      	mov	r1, r4
 8022b32:	9001      	str	r0, [sp, #4]
 8022b34:	f000 fb54 	bl	80231e0 <__mcmp>
 8022b38:	2800      	cmp	r0, #0
 8022b3a:	dcaf      	bgt.n	8022a9c <_dtoa_r+0x984>
 8022b3c:	d102      	bne.n	8022b44 <_dtoa_r+0xa2c>
 8022b3e:	f01a 0f01 	tst.w	sl, #1
 8022b42:	d1ab      	bne.n	8022a9c <_dtoa_r+0x984>
 8022b44:	4633      	mov	r3, r6
 8022b46:	461e      	mov	r6, r3
 8022b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022b4c:	2a30      	cmp	r2, #48	@ 0x30
 8022b4e:	d0fa      	beq.n	8022b46 <_dtoa_r+0xa2e>
 8022b50:	e5bb      	b.n	80226ca <_dtoa_r+0x5b2>
 8022b52:	429f      	cmp	r7, r3
 8022b54:	d1a3      	bne.n	8022a9e <_dtoa_r+0x986>
 8022b56:	9b04      	ldr	r3, [sp, #16]
 8022b58:	3301      	adds	r3, #1
 8022b5a:	9304      	str	r3, [sp, #16]
 8022b5c:	2331      	movs	r3, #49	@ 0x31
 8022b5e:	703b      	strb	r3, [r7, #0]
 8022b60:	e5b3      	b.n	80226ca <_dtoa_r+0x5b2>
 8022b62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022b64:	4f16      	ldr	r7, [pc, #88]	@ (8022bc0 <_dtoa_r+0xaa8>)
 8022b66:	b11b      	cbz	r3, 8022b70 <_dtoa_r+0xa58>
 8022b68:	f107 0308 	add.w	r3, r7, #8
 8022b6c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8022b6e:	6013      	str	r3, [r2, #0]
 8022b70:	4638      	mov	r0, r7
 8022b72:	b011      	add	sp, #68	@ 0x44
 8022b74:	ecbd 8b02 	vpop	{d8}
 8022b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b7c:	9b07      	ldr	r3, [sp, #28]
 8022b7e:	2b01      	cmp	r3, #1
 8022b80:	f77f ae36 	ble.w	80227f0 <_dtoa_r+0x6d8>
 8022b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022b88:	2001      	movs	r0, #1
 8022b8a:	e656      	b.n	802283a <_dtoa_r+0x722>
 8022b8c:	f1bb 0f00 	cmp.w	fp, #0
 8022b90:	f77f aed7 	ble.w	8022942 <_dtoa_r+0x82a>
 8022b94:	463e      	mov	r6, r7
 8022b96:	9801      	ldr	r0, [sp, #4]
 8022b98:	4621      	mov	r1, r4
 8022b9a:	f7ff fa34 	bl	8022006 <quorem>
 8022b9e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8022ba2:	f806 ab01 	strb.w	sl, [r6], #1
 8022ba6:	1bf2      	subs	r2, r6, r7
 8022ba8:	4593      	cmp	fp, r2
 8022baa:	ddb4      	ble.n	8022b16 <_dtoa_r+0x9fe>
 8022bac:	9901      	ldr	r1, [sp, #4]
 8022bae:	2300      	movs	r3, #0
 8022bb0:	220a      	movs	r2, #10
 8022bb2:	4648      	mov	r0, r9
 8022bb4:	f000 f8b2 	bl	8022d1c <__multadd>
 8022bb8:	9001      	str	r0, [sp, #4]
 8022bba:	e7ec      	b.n	8022b96 <_dtoa_r+0xa7e>
 8022bbc:	080354e6 	.word	0x080354e6
 8022bc0:	08035481 	.word	0x08035481

08022bc4 <_free_r>:
 8022bc4:	b538      	push	{r3, r4, r5, lr}
 8022bc6:	4605      	mov	r5, r0
 8022bc8:	2900      	cmp	r1, #0
 8022bca:	d041      	beq.n	8022c50 <_free_r+0x8c>
 8022bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022bd0:	1f0c      	subs	r4, r1, #4
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	bfb8      	it	lt
 8022bd6:	18e4      	addlt	r4, r4, r3
 8022bd8:	f7fd ff20 	bl	8020a1c <__malloc_lock>
 8022bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8022c54 <_free_r+0x90>)
 8022bde:	6813      	ldr	r3, [r2, #0]
 8022be0:	b933      	cbnz	r3, 8022bf0 <_free_r+0x2c>
 8022be2:	6063      	str	r3, [r4, #4]
 8022be4:	6014      	str	r4, [r2, #0]
 8022be6:	4628      	mov	r0, r5
 8022be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022bec:	f7fd bf1c 	b.w	8020a28 <__malloc_unlock>
 8022bf0:	42a3      	cmp	r3, r4
 8022bf2:	d908      	bls.n	8022c06 <_free_r+0x42>
 8022bf4:	6820      	ldr	r0, [r4, #0]
 8022bf6:	1821      	adds	r1, r4, r0
 8022bf8:	428b      	cmp	r3, r1
 8022bfa:	bf01      	itttt	eq
 8022bfc:	6819      	ldreq	r1, [r3, #0]
 8022bfe:	685b      	ldreq	r3, [r3, #4]
 8022c00:	1809      	addeq	r1, r1, r0
 8022c02:	6021      	streq	r1, [r4, #0]
 8022c04:	e7ed      	b.n	8022be2 <_free_r+0x1e>
 8022c06:	461a      	mov	r2, r3
 8022c08:	685b      	ldr	r3, [r3, #4]
 8022c0a:	b10b      	cbz	r3, 8022c10 <_free_r+0x4c>
 8022c0c:	42a3      	cmp	r3, r4
 8022c0e:	d9fa      	bls.n	8022c06 <_free_r+0x42>
 8022c10:	6811      	ldr	r1, [r2, #0]
 8022c12:	1850      	adds	r0, r2, r1
 8022c14:	42a0      	cmp	r0, r4
 8022c16:	d10b      	bne.n	8022c30 <_free_r+0x6c>
 8022c18:	6820      	ldr	r0, [r4, #0]
 8022c1a:	4401      	add	r1, r0
 8022c1c:	1850      	adds	r0, r2, r1
 8022c1e:	4283      	cmp	r3, r0
 8022c20:	6011      	str	r1, [r2, #0]
 8022c22:	d1e0      	bne.n	8022be6 <_free_r+0x22>
 8022c24:	6818      	ldr	r0, [r3, #0]
 8022c26:	685b      	ldr	r3, [r3, #4]
 8022c28:	6053      	str	r3, [r2, #4]
 8022c2a:	4408      	add	r0, r1
 8022c2c:	6010      	str	r0, [r2, #0]
 8022c2e:	e7da      	b.n	8022be6 <_free_r+0x22>
 8022c30:	d902      	bls.n	8022c38 <_free_r+0x74>
 8022c32:	230c      	movs	r3, #12
 8022c34:	602b      	str	r3, [r5, #0]
 8022c36:	e7d6      	b.n	8022be6 <_free_r+0x22>
 8022c38:	6820      	ldr	r0, [r4, #0]
 8022c3a:	1821      	adds	r1, r4, r0
 8022c3c:	428b      	cmp	r3, r1
 8022c3e:	bf04      	itt	eq
 8022c40:	6819      	ldreq	r1, [r3, #0]
 8022c42:	685b      	ldreq	r3, [r3, #4]
 8022c44:	6063      	str	r3, [r4, #4]
 8022c46:	bf04      	itt	eq
 8022c48:	1809      	addeq	r1, r1, r0
 8022c4a:	6021      	streq	r1, [r4, #0]
 8022c4c:	6054      	str	r4, [r2, #4]
 8022c4e:	e7ca      	b.n	8022be6 <_free_r+0x22>
 8022c50:	bd38      	pop	{r3, r4, r5, pc}
 8022c52:	bf00      	nop
 8022c54:	24003f8c 	.word	0x24003f8c

08022c58 <_Balloc>:
 8022c58:	b570      	push	{r4, r5, r6, lr}
 8022c5a:	69c6      	ldr	r6, [r0, #28]
 8022c5c:	4604      	mov	r4, r0
 8022c5e:	460d      	mov	r5, r1
 8022c60:	b976      	cbnz	r6, 8022c80 <_Balloc+0x28>
 8022c62:	2010      	movs	r0, #16
 8022c64:	f7fd fe28 	bl	80208b8 <malloc>
 8022c68:	4602      	mov	r2, r0
 8022c6a:	61e0      	str	r0, [r4, #28]
 8022c6c:	b920      	cbnz	r0, 8022c78 <_Balloc+0x20>
 8022c6e:	4b18      	ldr	r3, [pc, #96]	@ (8022cd0 <_Balloc+0x78>)
 8022c70:	4818      	ldr	r0, [pc, #96]	@ (8022cd4 <_Balloc+0x7c>)
 8022c72:	216b      	movs	r1, #107	@ 0x6b
 8022c74:	f7fd fde2 	bl	802083c <__assert_func>
 8022c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022c7c:	6006      	str	r6, [r0, #0]
 8022c7e:	60c6      	str	r6, [r0, #12]
 8022c80:	69e6      	ldr	r6, [r4, #28]
 8022c82:	68f3      	ldr	r3, [r6, #12]
 8022c84:	b183      	cbz	r3, 8022ca8 <_Balloc+0x50>
 8022c86:	69e3      	ldr	r3, [r4, #28]
 8022c88:	68db      	ldr	r3, [r3, #12]
 8022c8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8022c8e:	b9b8      	cbnz	r0, 8022cc0 <_Balloc+0x68>
 8022c90:	2101      	movs	r1, #1
 8022c92:	fa01 f605 	lsl.w	r6, r1, r5
 8022c96:	1d72      	adds	r2, r6, #5
 8022c98:	0092      	lsls	r2, r2, #2
 8022c9a:	4620      	mov	r0, r4
 8022c9c:	f7fd fdf8 	bl	8020890 <_calloc_r>
 8022ca0:	b160      	cbz	r0, 8022cbc <_Balloc+0x64>
 8022ca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8022ca6:	e00e      	b.n	8022cc6 <_Balloc+0x6e>
 8022ca8:	2221      	movs	r2, #33	@ 0x21
 8022caa:	2104      	movs	r1, #4
 8022cac:	4620      	mov	r0, r4
 8022cae:	f7fd fdef 	bl	8020890 <_calloc_r>
 8022cb2:	69e3      	ldr	r3, [r4, #28]
 8022cb4:	60f0      	str	r0, [r6, #12]
 8022cb6:	68db      	ldr	r3, [r3, #12]
 8022cb8:	2b00      	cmp	r3, #0
 8022cba:	d1e4      	bne.n	8022c86 <_Balloc+0x2e>
 8022cbc:	2000      	movs	r0, #0
 8022cbe:	bd70      	pop	{r4, r5, r6, pc}
 8022cc0:	6802      	ldr	r2, [r0, #0]
 8022cc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8022cc6:	2300      	movs	r3, #0
 8022cc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022ccc:	e7f7      	b.n	8022cbe <_Balloc+0x66>
 8022cce:	bf00      	nop
 8022cd0:	080352d8 	.word	0x080352d8
 8022cd4:	080354f7 	.word	0x080354f7

08022cd8 <_Bfree>:
 8022cd8:	b570      	push	{r4, r5, r6, lr}
 8022cda:	69c6      	ldr	r6, [r0, #28]
 8022cdc:	4605      	mov	r5, r0
 8022cde:	460c      	mov	r4, r1
 8022ce0:	b976      	cbnz	r6, 8022d00 <_Bfree+0x28>
 8022ce2:	2010      	movs	r0, #16
 8022ce4:	f7fd fde8 	bl	80208b8 <malloc>
 8022ce8:	4602      	mov	r2, r0
 8022cea:	61e8      	str	r0, [r5, #28]
 8022cec:	b920      	cbnz	r0, 8022cf8 <_Bfree+0x20>
 8022cee:	4b09      	ldr	r3, [pc, #36]	@ (8022d14 <_Bfree+0x3c>)
 8022cf0:	4809      	ldr	r0, [pc, #36]	@ (8022d18 <_Bfree+0x40>)
 8022cf2:	218f      	movs	r1, #143	@ 0x8f
 8022cf4:	f7fd fda2 	bl	802083c <__assert_func>
 8022cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022cfc:	6006      	str	r6, [r0, #0]
 8022cfe:	60c6      	str	r6, [r0, #12]
 8022d00:	b13c      	cbz	r4, 8022d12 <_Bfree+0x3a>
 8022d02:	69eb      	ldr	r3, [r5, #28]
 8022d04:	6862      	ldr	r2, [r4, #4]
 8022d06:	68db      	ldr	r3, [r3, #12]
 8022d08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022d0c:	6021      	str	r1, [r4, #0]
 8022d0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8022d12:	bd70      	pop	{r4, r5, r6, pc}
 8022d14:	080352d8 	.word	0x080352d8
 8022d18:	080354f7 	.word	0x080354f7

08022d1c <__multadd>:
 8022d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022d20:	690d      	ldr	r5, [r1, #16]
 8022d22:	4607      	mov	r7, r0
 8022d24:	460c      	mov	r4, r1
 8022d26:	461e      	mov	r6, r3
 8022d28:	f101 0c14 	add.w	ip, r1, #20
 8022d2c:	2000      	movs	r0, #0
 8022d2e:	f8dc 3000 	ldr.w	r3, [ip]
 8022d32:	b299      	uxth	r1, r3
 8022d34:	fb02 6101 	mla	r1, r2, r1, r6
 8022d38:	0c1e      	lsrs	r6, r3, #16
 8022d3a:	0c0b      	lsrs	r3, r1, #16
 8022d3c:	fb02 3306 	mla	r3, r2, r6, r3
 8022d40:	b289      	uxth	r1, r1
 8022d42:	3001      	adds	r0, #1
 8022d44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8022d48:	4285      	cmp	r5, r0
 8022d4a:	f84c 1b04 	str.w	r1, [ip], #4
 8022d4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8022d52:	dcec      	bgt.n	8022d2e <__multadd+0x12>
 8022d54:	b30e      	cbz	r6, 8022d9a <__multadd+0x7e>
 8022d56:	68a3      	ldr	r3, [r4, #8]
 8022d58:	42ab      	cmp	r3, r5
 8022d5a:	dc19      	bgt.n	8022d90 <__multadd+0x74>
 8022d5c:	6861      	ldr	r1, [r4, #4]
 8022d5e:	4638      	mov	r0, r7
 8022d60:	3101      	adds	r1, #1
 8022d62:	f7ff ff79 	bl	8022c58 <_Balloc>
 8022d66:	4680      	mov	r8, r0
 8022d68:	b928      	cbnz	r0, 8022d76 <__multadd+0x5a>
 8022d6a:	4602      	mov	r2, r0
 8022d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8022da0 <__multadd+0x84>)
 8022d6e:	480d      	ldr	r0, [pc, #52]	@ (8022da4 <__multadd+0x88>)
 8022d70:	21ba      	movs	r1, #186	@ 0xba
 8022d72:	f7fd fd63 	bl	802083c <__assert_func>
 8022d76:	6922      	ldr	r2, [r4, #16]
 8022d78:	3202      	adds	r2, #2
 8022d7a:	f104 010c 	add.w	r1, r4, #12
 8022d7e:	0092      	lsls	r2, r2, #2
 8022d80:	300c      	adds	r0, #12
 8022d82:	f7ff f924 	bl	8021fce <memcpy>
 8022d86:	4621      	mov	r1, r4
 8022d88:	4638      	mov	r0, r7
 8022d8a:	f7ff ffa5 	bl	8022cd8 <_Bfree>
 8022d8e:	4644      	mov	r4, r8
 8022d90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022d94:	3501      	adds	r5, #1
 8022d96:	615e      	str	r6, [r3, #20]
 8022d98:	6125      	str	r5, [r4, #16]
 8022d9a:	4620      	mov	r0, r4
 8022d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022da0:	080354e6 	.word	0x080354e6
 8022da4:	080354f7 	.word	0x080354f7

08022da8 <__s2b>:
 8022da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022dac:	460c      	mov	r4, r1
 8022dae:	4615      	mov	r5, r2
 8022db0:	461f      	mov	r7, r3
 8022db2:	2209      	movs	r2, #9
 8022db4:	3308      	adds	r3, #8
 8022db6:	4606      	mov	r6, r0
 8022db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8022dbc:	2100      	movs	r1, #0
 8022dbe:	2201      	movs	r2, #1
 8022dc0:	429a      	cmp	r2, r3
 8022dc2:	db09      	blt.n	8022dd8 <__s2b+0x30>
 8022dc4:	4630      	mov	r0, r6
 8022dc6:	f7ff ff47 	bl	8022c58 <_Balloc>
 8022dca:	b940      	cbnz	r0, 8022dde <__s2b+0x36>
 8022dcc:	4602      	mov	r2, r0
 8022dce:	4b19      	ldr	r3, [pc, #100]	@ (8022e34 <__s2b+0x8c>)
 8022dd0:	4819      	ldr	r0, [pc, #100]	@ (8022e38 <__s2b+0x90>)
 8022dd2:	21d3      	movs	r1, #211	@ 0xd3
 8022dd4:	f7fd fd32 	bl	802083c <__assert_func>
 8022dd8:	0052      	lsls	r2, r2, #1
 8022dda:	3101      	adds	r1, #1
 8022ddc:	e7f0      	b.n	8022dc0 <__s2b+0x18>
 8022dde:	9b08      	ldr	r3, [sp, #32]
 8022de0:	6143      	str	r3, [r0, #20]
 8022de2:	2d09      	cmp	r5, #9
 8022de4:	f04f 0301 	mov.w	r3, #1
 8022de8:	6103      	str	r3, [r0, #16]
 8022dea:	dd16      	ble.n	8022e1a <__s2b+0x72>
 8022dec:	f104 0909 	add.w	r9, r4, #9
 8022df0:	46c8      	mov	r8, r9
 8022df2:	442c      	add	r4, r5
 8022df4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8022df8:	4601      	mov	r1, r0
 8022dfa:	3b30      	subs	r3, #48	@ 0x30
 8022dfc:	220a      	movs	r2, #10
 8022dfe:	4630      	mov	r0, r6
 8022e00:	f7ff ff8c 	bl	8022d1c <__multadd>
 8022e04:	45a0      	cmp	r8, r4
 8022e06:	d1f5      	bne.n	8022df4 <__s2b+0x4c>
 8022e08:	f1a5 0408 	sub.w	r4, r5, #8
 8022e0c:	444c      	add	r4, r9
 8022e0e:	1b2d      	subs	r5, r5, r4
 8022e10:	1963      	adds	r3, r4, r5
 8022e12:	42bb      	cmp	r3, r7
 8022e14:	db04      	blt.n	8022e20 <__s2b+0x78>
 8022e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022e1a:	340a      	adds	r4, #10
 8022e1c:	2509      	movs	r5, #9
 8022e1e:	e7f6      	b.n	8022e0e <__s2b+0x66>
 8022e20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022e24:	4601      	mov	r1, r0
 8022e26:	3b30      	subs	r3, #48	@ 0x30
 8022e28:	220a      	movs	r2, #10
 8022e2a:	4630      	mov	r0, r6
 8022e2c:	f7ff ff76 	bl	8022d1c <__multadd>
 8022e30:	e7ee      	b.n	8022e10 <__s2b+0x68>
 8022e32:	bf00      	nop
 8022e34:	080354e6 	.word	0x080354e6
 8022e38:	080354f7 	.word	0x080354f7

08022e3c <__hi0bits>:
 8022e3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8022e40:	4603      	mov	r3, r0
 8022e42:	bf36      	itet	cc
 8022e44:	0403      	lslcc	r3, r0, #16
 8022e46:	2000      	movcs	r0, #0
 8022e48:	2010      	movcc	r0, #16
 8022e4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8022e4e:	bf3c      	itt	cc
 8022e50:	021b      	lslcc	r3, r3, #8
 8022e52:	3008      	addcc	r0, #8
 8022e54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8022e58:	bf3c      	itt	cc
 8022e5a:	011b      	lslcc	r3, r3, #4
 8022e5c:	3004      	addcc	r0, #4
 8022e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8022e62:	bf3c      	itt	cc
 8022e64:	009b      	lslcc	r3, r3, #2
 8022e66:	3002      	addcc	r0, #2
 8022e68:	2b00      	cmp	r3, #0
 8022e6a:	db05      	blt.n	8022e78 <__hi0bits+0x3c>
 8022e6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8022e70:	f100 0001 	add.w	r0, r0, #1
 8022e74:	bf08      	it	eq
 8022e76:	2020      	moveq	r0, #32
 8022e78:	4770      	bx	lr

08022e7a <__lo0bits>:
 8022e7a:	6803      	ldr	r3, [r0, #0]
 8022e7c:	4602      	mov	r2, r0
 8022e7e:	f013 0007 	ands.w	r0, r3, #7
 8022e82:	d00b      	beq.n	8022e9c <__lo0bits+0x22>
 8022e84:	07d9      	lsls	r1, r3, #31
 8022e86:	d421      	bmi.n	8022ecc <__lo0bits+0x52>
 8022e88:	0798      	lsls	r0, r3, #30
 8022e8a:	bf49      	itett	mi
 8022e8c:	085b      	lsrmi	r3, r3, #1
 8022e8e:	089b      	lsrpl	r3, r3, #2
 8022e90:	2001      	movmi	r0, #1
 8022e92:	6013      	strmi	r3, [r2, #0]
 8022e94:	bf5c      	itt	pl
 8022e96:	6013      	strpl	r3, [r2, #0]
 8022e98:	2002      	movpl	r0, #2
 8022e9a:	4770      	bx	lr
 8022e9c:	b299      	uxth	r1, r3
 8022e9e:	b909      	cbnz	r1, 8022ea4 <__lo0bits+0x2a>
 8022ea0:	0c1b      	lsrs	r3, r3, #16
 8022ea2:	2010      	movs	r0, #16
 8022ea4:	b2d9      	uxtb	r1, r3
 8022ea6:	b909      	cbnz	r1, 8022eac <__lo0bits+0x32>
 8022ea8:	3008      	adds	r0, #8
 8022eaa:	0a1b      	lsrs	r3, r3, #8
 8022eac:	0719      	lsls	r1, r3, #28
 8022eae:	bf04      	itt	eq
 8022eb0:	091b      	lsreq	r3, r3, #4
 8022eb2:	3004      	addeq	r0, #4
 8022eb4:	0799      	lsls	r1, r3, #30
 8022eb6:	bf04      	itt	eq
 8022eb8:	089b      	lsreq	r3, r3, #2
 8022eba:	3002      	addeq	r0, #2
 8022ebc:	07d9      	lsls	r1, r3, #31
 8022ebe:	d403      	bmi.n	8022ec8 <__lo0bits+0x4e>
 8022ec0:	085b      	lsrs	r3, r3, #1
 8022ec2:	f100 0001 	add.w	r0, r0, #1
 8022ec6:	d003      	beq.n	8022ed0 <__lo0bits+0x56>
 8022ec8:	6013      	str	r3, [r2, #0]
 8022eca:	4770      	bx	lr
 8022ecc:	2000      	movs	r0, #0
 8022ece:	4770      	bx	lr
 8022ed0:	2020      	movs	r0, #32
 8022ed2:	4770      	bx	lr

08022ed4 <__i2b>:
 8022ed4:	b510      	push	{r4, lr}
 8022ed6:	460c      	mov	r4, r1
 8022ed8:	2101      	movs	r1, #1
 8022eda:	f7ff febd 	bl	8022c58 <_Balloc>
 8022ede:	4602      	mov	r2, r0
 8022ee0:	b928      	cbnz	r0, 8022eee <__i2b+0x1a>
 8022ee2:	4b05      	ldr	r3, [pc, #20]	@ (8022ef8 <__i2b+0x24>)
 8022ee4:	4805      	ldr	r0, [pc, #20]	@ (8022efc <__i2b+0x28>)
 8022ee6:	f240 1145 	movw	r1, #325	@ 0x145
 8022eea:	f7fd fca7 	bl	802083c <__assert_func>
 8022eee:	2301      	movs	r3, #1
 8022ef0:	6144      	str	r4, [r0, #20]
 8022ef2:	6103      	str	r3, [r0, #16]
 8022ef4:	bd10      	pop	{r4, pc}
 8022ef6:	bf00      	nop
 8022ef8:	080354e6 	.word	0x080354e6
 8022efc:	080354f7 	.word	0x080354f7

08022f00 <__multiply>:
 8022f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f04:	4614      	mov	r4, r2
 8022f06:	690a      	ldr	r2, [r1, #16]
 8022f08:	6923      	ldr	r3, [r4, #16]
 8022f0a:	429a      	cmp	r2, r3
 8022f0c:	bfa8      	it	ge
 8022f0e:	4623      	movge	r3, r4
 8022f10:	460f      	mov	r7, r1
 8022f12:	bfa4      	itt	ge
 8022f14:	460c      	movge	r4, r1
 8022f16:	461f      	movge	r7, r3
 8022f18:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8022f1c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8022f20:	68a3      	ldr	r3, [r4, #8]
 8022f22:	6861      	ldr	r1, [r4, #4]
 8022f24:	eb0a 0609 	add.w	r6, sl, r9
 8022f28:	42b3      	cmp	r3, r6
 8022f2a:	b085      	sub	sp, #20
 8022f2c:	bfb8      	it	lt
 8022f2e:	3101      	addlt	r1, #1
 8022f30:	f7ff fe92 	bl	8022c58 <_Balloc>
 8022f34:	b930      	cbnz	r0, 8022f44 <__multiply+0x44>
 8022f36:	4602      	mov	r2, r0
 8022f38:	4b44      	ldr	r3, [pc, #272]	@ (802304c <__multiply+0x14c>)
 8022f3a:	4845      	ldr	r0, [pc, #276]	@ (8023050 <__multiply+0x150>)
 8022f3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8022f40:	f7fd fc7c 	bl	802083c <__assert_func>
 8022f44:	f100 0514 	add.w	r5, r0, #20
 8022f48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8022f4c:	462b      	mov	r3, r5
 8022f4e:	2200      	movs	r2, #0
 8022f50:	4543      	cmp	r3, r8
 8022f52:	d321      	bcc.n	8022f98 <__multiply+0x98>
 8022f54:	f107 0114 	add.w	r1, r7, #20
 8022f58:	f104 0214 	add.w	r2, r4, #20
 8022f5c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8022f60:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8022f64:	9302      	str	r3, [sp, #8]
 8022f66:	1b13      	subs	r3, r2, r4
 8022f68:	3b15      	subs	r3, #21
 8022f6a:	f023 0303 	bic.w	r3, r3, #3
 8022f6e:	3304      	adds	r3, #4
 8022f70:	f104 0715 	add.w	r7, r4, #21
 8022f74:	42ba      	cmp	r2, r7
 8022f76:	bf38      	it	cc
 8022f78:	2304      	movcc	r3, #4
 8022f7a:	9301      	str	r3, [sp, #4]
 8022f7c:	9b02      	ldr	r3, [sp, #8]
 8022f7e:	9103      	str	r1, [sp, #12]
 8022f80:	428b      	cmp	r3, r1
 8022f82:	d80c      	bhi.n	8022f9e <__multiply+0x9e>
 8022f84:	2e00      	cmp	r6, #0
 8022f86:	dd03      	ble.n	8022f90 <__multiply+0x90>
 8022f88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022f8c:	2b00      	cmp	r3, #0
 8022f8e:	d05b      	beq.n	8023048 <__multiply+0x148>
 8022f90:	6106      	str	r6, [r0, #16]
 8022f92:	b005      	add	sp, #20
 8022f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f98:	f843 2b04 	str.w	r2, [r3], #4
 8022f9c:	e7d8      	b.n	8022f50 <__multiply+0x50>
 8022f9e:	f8b1 a000 	ldrh.w	sl, [r1]
 8022fa2:	f1ba 0f00 	cmp.w	sl, #0
 8022fa6:	d024      	beq.n	8022ff2 <__multiply+0xf2>
 8022fa8:	f104 0e14 	add.w	lr, r4, #20
 8022fac:	46a9      	mov	r9, r5
 8022fae:	f04f 0c00 	mov.w	ip, #0
 8022fb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8022fb6:	f8d9 3000 	ldr.w	r3, [r9]
 8022fba:	fa1f fb87 	uxth.w	fp, r7
 8022fbe:	b29b      	uxth	r3, r3
 8022fc0:	fb0a 330b 	mla	r3, sl, fp, r3
 8022fc4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8022fc8:	f8d9 7000 	ldr.w	r7, [r9]
 8022fcc:	4463      	add	r3, ip
 8022fce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8022fd2:	fb0a c70b 	mla	r7, sl, fp, ip
 8022fd6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8022fda:	b29b      	uxth	r3, r3
 8022fdc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8022fe0:	4572      	cmp	r2, lr
 8022fe2:	f849 3b04 	str.w	r3, [r9], #4
 8022fe6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8022fea:	d8e2      	bhi.n	8022fb2 <__multiply+0xb2>
 8022fec:	9b01      	ldr	r3, [sp, #4]
 8022fee:	f845 c003 	str.w	ip, [r5, r3]
 8022ff2:	9b03      	ldr	r3, [sp, #12]
 8022ff4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8022ff8:	3104      	adds	r1, #4
 8022ffa:	f1b9 0f00 	cmp.w	r9, #0
 8022ffe:	d021      	beq.n	8023044 <__multiply+0x144>
 8023000:	682b      	ldr	r3, [r5, #0]
 8023002:	f104 0c14 	add.w	ip, r4, #20
 8023006:	46ae      	mov	lr, r5
 8023008:	f04f 0a00 	mov.w	sl, #0
 802300c:	f8bc b000 	ldrh.w	fp, [ip]
 8023010:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8023014:	fb09 770b 	mla	r7, r9, fp, r7
 8023018:	4457      	add	r7, sl
 802301a:	b29b      	uxth	r3, r3
 802301c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8023020:	f84e 3b04 	str.w	r3, [lr], #4
 8023024:	f85c 3b04 	ldr.w	r3, [ip], #4
 8023028:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802302c:	f8be 3000 	ldrh.w	r3, [lr]
 8023030:	fb09 330a 	mla	r3, r9, sl, r3
 8023034:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8023038:	4562      	cmp	r2, ip
 802303a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802303e:	d8e5      	bhi.n	802300c <__multiply+0x10c>
 8023040:	9f01      	ldr	r7, [sp, #4]
 8023042:	51eb      	str	r3, [r5, r7]
 8023044:	3504      	adds	r5, #4
 8023046:	e799      	b.n	8022f7c <__multiply+0x7c>
 8023048:	3e01      	subs	r6, #1
 802304a:	e79b      	b.n	8022f84 <__multiply+0x84>
 802304c:	080354e6 	.word	0x080354e6
 8023050:	080354f7 	.word	0x080354f7

08023054 <__pow5mult>:
 8023054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023058:	4615      	mov	r5, r2
 802305a:	f012 0203 	ands.w	r2, r2, #3
 802305e:	4607      	mov	r7, r0
 8023060:	460e      	mov	r6, r1
 8023062:	d007      	beq.n	8023074 <__pow5mult+0x20>
 8023064:	4c25      	ldr	r4, [pc, #148]	@ (80230fc <__pow5mult+0xa8>)
 8023066:	3a01      	subs	r2, #1
 8023068:	2300      	movs	r3, #0
 802306a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802306e:	f7ff fe55 	bl	8022d1c <__multadd>
 8023072:	4606      	mov	r6, r0
 8023074:	10ad      	asrs	r5, r5, #2
 8023076:	d03d      	beq.n	80230f4 <__pow5mult+0xa0>
 8023078:	69fc      	ldr	r4, [r7, #28]
 802307a:	b97c      	cbnz	r4, 802309c <__pow5mult+0x48>
 802307c:	2010      	movs	r0, #16
 802307e:	f7fd fc1b 	bl	80208b8 <malloc>
 8023082:	4602      	mov	r2, r0
 8023084:	61f8      	str	r0, [r7, #28]
 8023086:	b928      	cbnz	r0, 8023094 <__pow5mult+0x40>
 8023088:	4b1d      	ldr	r3, [pc, #116]	@ (8023100 <__pow5mult+0xac>)
 802308a:	481e      	ldr	r0, [pc, #120]	@ (8023104 <__pow5mult+0xb0>)
 802308c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8023090:	f7fd fbd4 	bl	802083c <__assert_func>
 8023094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023098:	6004      	str	r4, [r0, #0]
 802309a:	60c4      	str	r4, [r0, #12]
 802309c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80230a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80230a4:	b94c      	cbnz	r4, 80230ba <__pow5mult+0x66>
 80230a6:	f240 2171 	movw	r1, #625	@ 0x271
 80230aa:	4638      	mov	r0, r7
 80230ac:	f7ff ff12 	bl	8022ed4 <__i2b>
 80230b0:	2300      	movs	r3, #0
 80230b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80230b6:	4604      	mov	r4, r0
 80230b8:	6003      	str	r3, [r0, #0]
 80230ba:	f04f 0900 	mov.w	r9, #0
 80230be:	07eb      	lsls	r3, r5, #31
 80230c0:	d50a      	bpl.n	80230d8 <__pow5mult+0x84>
 80230c2:	4631      	mov	r1, r6
 80230c4:	4622      	mov	r2, r4
 80230c6:	4638      	mov	r0, r7
 80230c8:	f7ff ff1a 	bl	8022f00 <__multiply>
 80230cc:	4631      	mov	r1, r6
 80230ce:	4680      	mov	r8, r0
 80230d0:	4638      	mov	r0, r7
 80230d2:	f7ff fe01 	bl	8022cd8 <_Bfree>
 80230d6:	4646      	mov	r6, r8
 80230d8:	106d      	asrs	r5, r5, #1
 80230da:	d00b      	beq.n	80230f4 <__pow5mult+0xa0>
 80230dc:	6820      	ldr	r0, [r4, #0]
 80230de:	b938      	cbnz	r0, 80230f0 <__pow5mult+0x9c>
 80230e0:	4622      	mov	r2, r4
 80230e2:	4621      	mov	r1, r4
 80230e4:	4638      	mov	r0, r7
 80230e6:	f7ff ff0b 	bl	8022f00 <__multiply>
 80230ea:	6020      	str	r0, [r4, #0]
 80230ec:	f8c0 9000 	str.w	r9, [r0]
 80230f0:	4604      	mov	r4, r0
 80230f2:	e7e4      	b.n	80230be <__pow5mult+0x6a>
 80230f4:	4630      	mov	r0, r6
 80230f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80230fa:	bf00      	nop
 80230fc:	08035550 	.word	0x08035550
 8023100:	080352d8 	.word	0x080352d8
 8023104:	080354f7 	.word	0x080354f7

08023108 <__lshift>:
 8023108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802310c:	460c      	mov	r4, r1
 802310e:	6849      	ldr	r1, [r1, #4]
 8023110:	6923      	ldr	r3, [r4, #16]
 8023112:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8023116:	68a3      	ldr	r3, [r4, #8]
 8023118:	4607      	mov	r7, r0
 802311a:	4691      	mov	r9, r2
 802311c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023120:	f108 0601 	add.w	r6, r8, #1
 8023124:	42b3      	cmp	r3, r6
 8023126:	db0b      	blt.n	8023140 <__lshift+0x38>
 8023128:	4638      	mov	r0, r7
 802312a:	f7ff fd95 	bl	8022c58 <_Balloc>
 802312e:	4605      	mov	r5, r0
 8023130:	b948      	cbnz	r0, 8023146 <__lshift+0x3e>
 8023132:	4602      	mov	r2, r0
 8023134:	4b28      	ldr	r3, [pc, #160]	@ (80231d8 <__lshift+0xd0>)
 8023136:	4829      	ldr	r0, [pc, #164]	@ (80231dc <__lshift+0xd4>)
 8023138:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802313c:	f7fd fb7e 	bl	802083c <__assert_func>
 8023140:	3101      	adds	r1, #1
 8023142:	005b      	lsls	r3, r3, #1
 8023144:	e7ee      	b.n	8023124 <__lshift+0x1c>
 8023146:	2300      	movs	r3, #0
 8023148:	f100 0114 	add.w	r1, r0, #20
 802314c:	f100 0210 	add.w	r2, r0, #16
 8023150:	4618      	mov	r0, r3
 8023152:	4553      	cmp	r3, sl
 8023154:	db33      	blt.n	80231be <__lshift+0xb6>
 8023156:	6920      	ldr	r0, [r4, #16]
 8023158:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802315c:	f104 0314 	add.w	r3, r4, #20
 8023160:	f019 091f 	ands.w	r9, r9, #31
 8023164:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023168:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802316c:	d02b      	beq.n	80231c6 <__lshift+0xbe>
 802316e:	f1c9 0e20 	rsb	lr, r9, #32
 8023172:	468a      	mov	sl, r1
 8023174:	2200      	movs	r2, #0
 8023176:	6818      	ldr	r0, [r3, #0]
 8023178:	fa00 f009 	lsl.w	r0, r0, r9
 802317c:	4310      	orrs	r0, r2
 802317e:	f84a 0b04 	str.w	r0, [sl], #4
 8023182:	f853 2b04 	ldr.w	r2, [r3], #4
 8023186:	459c      	cmp	ip, r3
 8023188:	fa22 f20e 	lsr.w	r2, r2, lr
 802318c:	d8f3      	bhi.n	8023176 <__lshift+0x6e>
 802318e:	ebac 0304 	sub.w	r3, ip, r4
 8023192:	3b15      	subs	r3, #21
 8023194:	f023 0303 	bic.w	r3, r3, #3
 8023198:	3304      	adds	r3, #4
 802319a:	f104 0015 	add.w	r0, r4, #21
 802319e:	4584      	cmp	ip, r0
 80231a0:	bf38      	it	cc
 80231a2:	2304      	movcc	r3, #4
 80231a4:	50ca      	str	r2, [r1, r3]
 80231a6:	b10a      	cbz	r2, 80231ac <__lshift+0xa4>
 80231a8:	f108 0602 	add.w	r6, r8, #2
 80231ac:	3e01      	subs	r6, #1
 80231ae:	4638      	mov	r0, r7
 80231b0:	612e      	str	r6, [r5, #16]
 80231b2:	4621      	mov	r1, r4
 80231b4:	f7ff fd90 	bl	8022cd8 <_Bfree>
 80231b8:	4628      	mov	r0, r5
 80231ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80231be:	f842 0f04 	str.w	r0, [r2, #4]!
 80231c2:	3301      	adds	r3, #1
 80231c4:	e7c5      	b.n	8023152 <__lshift+0x4a>
 80231c6:	3904      	subs	r1, #4
 80231c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80231cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80231d0:	459c      	cmp	ip, r3
 80231d2:	d8f9      	bhi.n	80231c8 <__lshift+0xc0>
 80231d4:	e7ea      	b.n	80231ac <__lshift+0xa4>
 80231d6:	bf00      	nop
 80231d8:	080354e6 	.word	0x080354e6
 80231dc:	080354f7 	.word	0x080354f7

080231e0 <__mcmp>:
 80231e0:	690a      	ldr	r2, [r1, #16]
 80231e2:	4603      	mov	r3, r0
 80231e4:	6900      	ldr	r0, [r0, #16]
 80231e6:	1a80      	subs	r0, r0, r2
 80231e8:	b530      	push	{r4, r5, lr}
 80231ea:	d10e      	bne.n	802320a <__mcmp+0x2a>
 80231ec:	3314      	adds	r3, #20
 80231ee:	3114      	adds	r1, #20
 80231f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80231f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80231f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80231fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8023200:	4295      	cmp	r5, r2
 8023202:	d003      	beq.n	802320c <__mcmp+0x2c>
 8023204:	d205      	bcs.n	8023212 <__mcmp+0x32>
 8023206:	f04f 30ff 	mov.w	r0, #4294967295
 802320a:	bd30      	pop	{r4, r5, pc}
 802320c:	42a3      	cmp	r3, r4
 802320e:	d3f3      	bcc.n	80231f8 <__mcmp+0x18>
 8023210:	e7fb      	b.n	802320a <__mcmp+0x2a>
 8023212:	2001      	movs	r0, #1
 8023214:	e7f9      	b.n	802320a <__mcmp+0x2a>
	...

08023218 <__mdiff>:
 8023218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802321c:	4689      	mov	r9, r1
 802321e:	4606      	mov	r6, r0
 8023220:	4611      	mov	r1, r2
 8023222:	4648      	mov	r0, r9
 8023224:	4614      	mov	r4, r2
 8023226:	f7ff ffdb 	bl	80231e0 <__mcmp>
 802322a:	1e05      	subs	r5, r0, #0
 802322c:	d112      	bne.n	8023254 <__mdiff+0x3c>
 802322e:	4629      	mov	r1, r5
 8023230:	4630      	mov	r0, r6
 8023232:	f7ff fd11 	bl	8022c58 <_Balloc>
 8023236:	4602      	mov	r2, r0
 8023238:	b928      	cbnz	r0, 8023246 <__mdiff+0x2e>
 802323a:	4b3f      	ldr	r3, [pc, #252]	@ (8023338 <__mdiff+0x120>)
 802323c:	f240 2137 	movw	r1, #567	@ 0x237
 8023240:	483e      	ldr	r0, [pc, #248]	@ (802333c <__mdiff+0x124>)
 8023242:	f7fd fafb 	bl	802083c <__assert_func>
 8023246:	2301      	movs	r3, #1
 8023248:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802324c:	4610      	mov	r0, r2
 802324e:	b003      	add	sp, #12
 8023250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023254:	bfbc      	itt	lt
 8023256:	464b      	movlt	r3, r9
 8023258:	46a1      	movlt	r9, r4
 802325a:	4630      	mov	r0, r6
 802325c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8023260:	bfba      	itte	lt
 8023262:	461c      	movlt	r4, r3
 8023264:	2501      	movlt	r5, #1
 8023266:	2500      	movge	r5, #0
 8023268:	f7ff fcf6 	bl	8022c58 <_Balloc>
 802326c:	4602      	mov	r2, r0
 802326e:	b918      	cbnz	r0, 8023278 <__mdiff+0x60>
 8023270:	4b31      	ldr	r3, [pc, #196]	@ (8023338 <__mdiff+0x120>)
 8023272:	f240 2145 	movw	r1, #581	@ 0x245
 8023276:	e7e3      	b.n	8023240 <__mdiff+0x28>
 8023278:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802327c:	6926      	ldr	r6, [r4, #16]
 802327e:	60c5      	str	r5, [r0, #12]
 8023280:	f109 0310 	add.w	r3, r9, #16
 8023284:	f109 0514 	add.w	r5, r9, #20
 8023288:	f104 0e14 	add.w	lr, r4, #20
 802328c:	f100 0b14 	add.w	fp, r0, #20
 8023290:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8023294:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8023298:	9301      	str	r3, [sp, #4]
 802329a:	46d9      	mov	r9, fp
 802329c:	f04f 0c00 	mov.w	ip, #0
 80232a0:	9b01      	ldr	r3, [sp, #4]
 80232a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80232a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80232aa:	9301      	str	r3, [sp, #4]
 80232ac:	fa1f f38a 	uxth.w	r3, sl
 80232b0:	4619      	mov	r1, r3
 80232b2:	b283      	uxth	r3, r0
 80232b4:	1acb      	subs	r3, r1, r3
 80232b6:	0c00      	lsrs	r0, r0, #16
 80232b8:	4463      	add	r3, ip
 80232ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80232be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80232c2:	b29b      	uxth	r3, r3
 80232c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80232c8:	4576      	cmp	r6, lr
 80232ca:	f849 3b04 	str.w	r3, [r9], #4
 80232ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80232d2:	d8e5      	bhi.n	80232a0 <__mdiff+0x88>
 80232d4:	1b33      	subs	r3, r6, r4
 80232d6:	3b15      	subs	r3, #21
 80232d8:	f023 0303 	bic.w	r3, r3, #3
 80232dc:	3415      	adds	r4, #21
 80232de:	3304      	adds	r3, #4
 80232e0:	42a6      	cmp	r6, r4
 80232e2:	bf38      	it	cc
 80232e4:	2304      	movcc	r3, #4
 80232e6:	441d      	add	r5, r3
 80232e8:	445b      	add	r3, fp
 80232ea:	461e      	mov	r6, r3
 80232ec:	462c      	mov	r4, r5
 80232ee:	4544      	cmp	r4, r8
 80232f0:	d30e      	bcc.n	8023310 <__mdiff+0xf8>
 80232f2:	f108 0103 	add.w	r1, r8, #3
 80232f6:	1b49      	subs	r1, r1, r5
 80232f8:	f021 0103 	bic.w	r1, r1, #3
 80232fc:	3d03      	subs	r5, #3
 80232fe:	45a8      	cmp	r8, r5
 8023300:	bf38      	it	cc
 8023302:	2100      	movcc	r1, #0
 8023304:	440b      	add	r3, r1
 8023306:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802330a:	b191      	cbz	r1, 8023332 <__mdiff+0x11a>
 802330c:	6117      	str	r7, [r2, #16]
 802330e:	e79d      	b.n	802324c <__mdiff+0x34>
 8023310:	f854 1b04 	ldr.w	r1, [r4], #4
 8023314:	46e6      	mov	lr, ip
 8023316:	0c08      	lsrs	r0, r1, #16
 8023318:	fa1c fc81 	uxtah	ip, ip, r1
 802331c:	4471      	add	r1, lr
 802331e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8023322:	b289      	uxth	r1, r1
 8023324:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8023328:	f846 1b04 	str.w	r1, [r6], #4
 802332c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8023330:	e7dd      	b.n	80232ee <__mdiff+0xd6>
 8023332:	3f01      	subs	r7, #1
 8023334:	e7e7      	b.n	8023306 <__mdiff+0xee>
 8023336:	bf00      	nop
 8023338:	080354e6 	.word	0x080354e6
 802333c:	080354f7 	.word	0x080354f7

08023340 <__ulp>:
 8023340:	b082      	sub	sp, #8
 8023342:	ed8d 0b00 	vstr	d0, [sp]
 8023346:	9a01      	ldr	r2, [sp, #4]
 8023348:	4b0f      	ldr	r3, [pc, #60]	@ (8023388 <__ulp+0x48>)
 802334a:	4013      	ands	r3, r2
 802334c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8023350:	2b00      	cmp	r3, #0
 8023352:	dc08      	bgt.n	8023366 <__ulp+0x26>
 8023354:	425b      	negs	r3, r3
 8023356:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802335a:	ea4f 5223 	mov.w	r2, r3, asr #20
 802335e:	da04      	bge.n	802336a <__ulp+0x2a>
 8023360:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8023364:	4113      	asrs	r3, r2
 8023366:	2200      	movs	r2, #0
 8023368:	e008      	b.n	802337c <__ulp+0x3c>
 802336a:	f1a2 0314 	sub.w	r3, r2, #20
 802336e:	2b1e      	cmp	r3, #30
 8023370:	bfda      	itte	le
 8023372:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8023376:	40da      	lsrle	r2, r3
 8023378:	2201      	movgt	r2, #1
 802337a:	2300      	movs	r3, #0
 802337c:	4619      	mov	r1, r3
 802337e:	4610      	mov	r0, r2
 8023380:	ec41 0b10 	vmov	d0, r0, r1
 8023384:	b002      	add	sp, #8
 8023386:	4770      	bx	lr
 8023388:	7ff00000 	.word	0x7ff00000

0802338c <__b2d>:
 802338c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023390:	6906      	ldr	r6, [r0, #16]
 8023392:	f100 0814 	add.w	r8, r0, #20
 8023396:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802339a:	1f37      	subs	r7, r6, #4
 802339c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80233a0:	4610      	mov	r0, r2
 80233a2:	f7ff fd4b 	bl	8022e3c <__hi0bits>
 80233a6:	f1c0 0320 	rsb	r3, r0, #32
 80233aa:	280a      	cmp	r0, #10
 80233ac:	600b      	str	r3, [r1, #0]
 80233ae:	491b      	ldr	r1, [pc, #108]	@ (802341c <__b2d+0x90>)
 80233b0:	dc15      	bgt.n	80233de <__b2d+0x52>
 80233b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80233b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80233ba:	45b8      	cmp	r8, r7
 80233bc:	ea43 0501 	orr.w	r5, r3, r1
 80233c0:	bf34      	ite	cc
 80233c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80233c6:	2300      	movcs	r3, #0
 80233c8:	3015      	adds	r0, #21
 80233ca:	fa02 f000 	lsl.w	r0, r2, r0
 80233ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80233d2:	4303      	orrs	r3, r0
 80233d4:	461c      	mov	r4, r3
 80233d6:	ec45 4b10 	vmov	d0, r4, r5
 80233da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80233de:	45b8      	cmp	r8, r7
 80233e0:	bf3a      	itte	cc
 80233e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80233e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80233ea:	2300      	movcs	r3, #0
 80233ec:	380b      	subs	r0, #11
 80233ee:	d012      	beq.n	8023416 <__b2d+0x8a>
 80233f0:	f1c0 0120 	rsb	r1, r0, #32
 80233f4:	fa23 f401 	lsr.w	r4, r3, r1
 80233f8:	4082      	lsls	r2, r0
 80233fa:	4322      	orrs	r2, r4
 80233fc:	4547      	cmp	r7, r8
 80233fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8023402:	bf8c      	ite	hi
 8023404:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8023408:	2200      	movls	r2, #0
 802340a:	4083      	lsls	r3, r0
 802340c:	40ca      	lsrs	r2, r1
 802340e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8023412:	4313      	orrs	r3, r2
 8023414:	e7de      	b.n	80233d4 <__b2d+0x48>
 8023416:	ea42 0501 	orr.w	r5, r2, r1
 802341a:	e7db      	b.n	80233d4 <__b2d+0x48>
 802341c:	3ff00000 	.word	0x3ff00000

08023420 <__d2b>:
 8023420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023424:	460f      	mov	r7, r1
 8023426:	2101      	movs	r1, #1
 8023428:	ec59 8b10 	vmov	r8, r9, d0
 802342c:	4616      	mov	r6, r2
 802342e:	f7ff fc13 	bl	8022c58 <_Balloc>
 8023432:	4604      	mov	r4, r0
 8023434:	b930      	cbnz	r0, 8023444 <__d2b+0x24>
 8023436:	4602      	mov	r2, r0
 8023438:	4b23      	ldr	r3, [pc, #140]	@ (80234c8 <__d2b+0xa8>)
 802343a:	4824      	ldr	r0, [pc, #144]	@ (80234cc <__d2b+0xac>)
 802343c:	f240 310f 	movw	r1, #783	@ 0x30f
 8023440:	f7fd f9fc 	bl	802083c <__assert_func>
 8023444:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8023448:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802344c:	b10d      	cbz	r5, 8023452 <__d2b+0x32>
 802344e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8023452:	9301      	str	r3, [sp, #4]
 8023454:	f1b8 0300 	subs.w	r3, r8, #0
 8023458:	d023      	beq.n	80234a2 <__d2b+0x82>
 802345a:	4668      	mov	r0, sp
 802345c:	9300      	str	r3, [sp, #0]
 802345e:	f7ff fd0c 	bl	8022e7a <__lo0bits>
 8023462:	e9dd 1200 	ldrd	r1, r2, [sp]
 8023466:	b1d0      	cbz	r0, 802349e <__d2b+0x7e>
 8023468:	f1c0 0320 	rsb	r3, r0, #32
 802346c:	fa02 f303 	lsl.w	r3, r2, r3
 8023470:	430b      	orrs	r3, r1
 8023472:	40c2      	lsrs	r2, r0
 8023474:	6163      	str	r3, [r4, #20]
 8023476:	9201      	str	r2, [sp, #4]
 8023478:	9b01      	ldr	r3, [sp, #4]
 802347a:	61a3      	str	r3, [r4, #24]
 802347c:	2b00      	cmp	r3, #0
 802347e:	bf0c      	ite	eq
 8023480:	2201      	moveq	r2, #1
 8023482:	2202      	movne	r2, #2
 8023484:	6122      	str	r2, [r4, #16]
 8023486:	b1a5      	cbz	r5, 80234b2 <__d2b+0x92>
 8023488:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802348c:	4405      	add	r5, r0
 802348e:	603d      	str	r5, [r7, #0]
 8023490:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8023494:	6030      	str	r0, [r6, #0]
 8023496:	4620      	mov	r0, r4
 8023498:	b003      	add	sp, #12
 802349a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802349e:	6161      	str	r1, [r4, #20]
 80234a0:	e7ea      	b.n	8023478 <__d2b+0x58>
 80234a2:	a801      	add	r0, sp, #4
 80234a4:	f7ff fce9 	bl	8022e7a <__lo0bits>
 80234a8:	9b01      	ldr	r3, [sp, #4]
 80234aa:	6163      	str	r3, [r4, #20]
 80234ac:	3020      	adds	r0, #32
 80234ae:	2201      	movs	r2, #1
 80234b0:	e7e8      	b.n	8023484 <__d2b+0x64>
 80234b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80234b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80234ba:	6038      	str	r0, [r7, #0]
 80234bc:	6918      	ldr	r0, [r3, #16]
 80234be:	f7ff fcbd 	bl	8022e3c <__hi0bits>
 80234c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80234c6:	e7e5      	b.n	8023494 <__d2b+0x74>
 80234c8:	080354e6 	.word	0x080354e6
 80234cc:	080354f7 	.word	0x080354f7

080234d0 <__ratio>:
 80234d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234d4:	4688      	mov	r8, r1
 80234d6:	4669      	mov	r1, sp
 80234d8:	4681      	mov	r9, r0
 80234da:	f7ff ff57 	bl	802338c <__b2d>
 80234de:	a901      	add	r1, sp, #4
 80234e0:	4640      	mov	r0, r8
 80234e2:	ec55 4b10 	vmov	r4, r5, d0
 80234e6:	f7ff ff51 	bl	802338c <__b2d>
 80234ea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80234ee:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80234f2:	1ad2      	subs	r2, r2, r3
 80234f4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80234f8:	1a5b      	subs	r3, r3, r1
 80234fa:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80234fe:	ec57 6b10 	vmov	r6, r7, d0
 8023502:	2b00      	cmp	r3, #0
 8023504:	bfd6      	itet	le
 8023506:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802350a:	462a      	movgt	r2, r5
 802350c:	463a      	movle	r2, r7
 802350e:	46ab      	mov	fp, r5
 8023510:	46a2      	mov	sl, r4
 8023512:	bfce      	itee	gt
 8023514:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8023518:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 802351c:	ee00 3a90 	vmovle	s1, r3
 8023520:	ec4b ab17 	vmov	d7, sl, fp
 8023524:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8023528:	b003      	add	sp, #12
 802352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802352e <__copybits>:
 802352e:	3901      	subs	r1, #1
 8023530:	b570      	push	{r4, r5, r6, lr}
 8023532:	1149      	asrs	r1, r1, #5
 8023534:	6914      	ldr	r4, [r2, #16]
 8023536:	3101      	adds	r1, #1
 8023538:	f102 0314 	add.w	r3, r2, #20
 802353c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8023540:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8023544:	1f05      	subs	r5, r0, #4
 8023546:	42a3      	cmp	r3, r4
 8023548:	d30c      	bcc.n	8023564 <__copybits+0x36>
 802354a:	1aa3      	subs	r3, r4, r2
 802354c:	3b11      	subs	r3, #17
 802354e:	f023 0303 	bic.w	r3, r3, #3
 8023552:	3211      	adds	r2, #17
 8023554:	42a2      	cmp	r2, r4
 8023556:	bf88      	it	hi
 8023558:	2300      	movhi	r3, #0
 802355a:	4418      	add	r0, r3
 802355c:	2300      	movs	r3, #0
 802355e:	4288      	cmp	r0, r1
 8023560:	d305      	bcc.n	802356e <__copybits+0x40>
 8023562:	bd70      	pop	{r4, r5, r6, pc}
 8023564:	f853 6b04 	ldr.w	r6, [r3], #4
 8023568:	f845 6f04 	str.w	r6, [r5, #4]!
 802356c:	e7eb      	b.n	8023546 <__copybits+0x18>
 802356e:	f840 3b04 	str.w	r3, [r0], #4
 8023572:	e7f4      	b.n	802355e <__copybits+0x30>

08023574 <__any_on>:
 8023574:	f100 0214 	add.w	r2, r0, #20
 8023578:	6900      	ldr	r0, [r0, #16]
 802357a:	114b      	asrs	r3, r1, #5
 802357c:	4298      	cmp	r0, r3
 802357e:	b510      	push	{r4, lr}
 8023580:	db11      	blt.n	80235a6 <__any_on+0x32>
 8023582:	dd0a      	ble.n	802359a <__any_on+0x26>
 8023584:	f011 011f 	ands.w	r1, r1, #31
 8023588:	d007      	beq.n	802359a <__any_on+0x26>
 802358a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802358e:	fa24 f001 	lsr.w	r0, r4, r1
 8023592:	fa00 f101 	lsl.w	r1, r0, r1
 8023596:	428c      	cmp	r4, r1
 8023598:	d10b      	bne.n	80235b2 <__any_on+0x3e>
 802359a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802359e:	4293      	cmp	r3, r2
 80235a0:	d803      	bhi.n	80235aa <__any_on+0x36>
 80235a2:	2000      	movs	r0, #0
 80235a4:	bd10      	pop	{r4, pc}
 80235a6:	4603      	mov	r3, r0
 80235a8:	e7f7      	b.n	802359a <__any_on+0x26>
 80235aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80235ae:	2900      	cmp	r1, #0
 80235b0:	d0f5      	beq.n	802359e <__any_on+0x2a>
 80235b2:	2001      	movs	r0, #1
 80235b4:	e7f6      	b.n	80235a4 <__any_on+0x30>

080235b6 <sulp>:
 80235b6:	b570      	push	{r4, r5, r6, lr}
 80235b8:	4604      	mov	r4, r0
 80235ba:	460d      	mov	r5, r1
 80235bc:	4616      	mov	r6, r2
 80235be:	ec45 4b10 	vmov	d0, r4, r5
 80235c2:	f7ff febd 	bl	8023340 <__ulp>
 80235c6:	b17e      	cbz	r6, 80235e8 <sulp+0x32>
 80235c8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80235cc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80235d0:	2b00      	cmp	r3, #0
 80235d2:	dd09      	ble.n	80235e8 <sulp+0x32>
 80235d4:	051b      	lsls	r3, r3, #20
 80235d6:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80235da:	2000      	movs	r0, #0
 80235dc:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80235e0:	ec41 0b17 	vmov	d7, r0, r1
 80235e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80235e8:	bd70      	pop	{r4, r5, r6, pc}
 80235ea:	0000      	movs	r0, r0
 80235ec:	0000      	movs	r0, r0
	...

080235f0 <_strtod_l>:
 80235f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235f4:	ed2d 8b0a 	vpush	{d8-d12}
 80235f8:	b097      	sub	sp, #92	@ 0x5c
 80235fa:	4688      	mov	r8, r1
 80235fc:	920e      	str	r2, [sp, #56]	@ 0x38
 80235fe:	2200      	movs	r2, #0
 8023600:	9212      	str	r2, [sp, #72]	@ 0x48
 8023602:	9005      	str	r0, [sp, #20]
 8023604:	f04f 0a00 	mov.w	sl, #0
 8023608:	f04f 0b00 	mov.w	fp, #0
 802360c:	460a      	mov	r2, r1
 802360e:	9211      	str	r2, [sp, #68]	@ 0x44
 8023610:	7811      	ldrb	r1, [r2, #0]
 8023612:	292b      	cmp	r1, #43	@ 0x2b
 8023614:	d04c      	beq.n	80236b0 <_strtod_l+0xc0>
 8023616:	d839      	bhi.n	802368c <_strtod_l+0x9c>
 8023618:	290d      	cmp	r1, #13
 802361a:	d833      	bhi.n	8023684 <_strtod_l+0x94>
 802361c:	2908      	cmp	r1, #8
 802361e:	d833      	bhi.n	8023688 <_strtod_l+0x98>
 8023620:	2900      	cmp	r1, #0
 8023622:	d03c      	beq.n	802369e <_strtod_l+0xae>
 8023624:	2200      	movs	r2, #0
 8023626:	9208      	str	r2, [sp, #32]
 8023628:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802362a:	782a      	ldrb	r2, [r5, #0]
 802362c:	2a30      	cmp	r2, #48	@ 0x30
 802362e:	f040 80b5 	bne.w	802379c <_strtod_l+0x1ac>
 8023632:	786a      	ldrb	r2, [r5, #1]
 8023634:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8023638:	2a58      	cmp	r2, #88	@ 0x58
 802363a:	d170      	bne.n	802371e <_strtod_l+0x12e>
 802363c:	9302      	str	r3, [sp, #8]
 802363e:	9b08      	ldr	r3, [sp, #32]
 8023640:	9301      	str	r3, [sp, #4]
 8023642:	ab12      	add	r3, sp, #72	@ 0x48
 8023644:	9300      	str	r3, [sp, #0]
 8023646:	4a8b      	ldr	r2, [pc, #556]	@ (8023874 <_strtod_l+0x284>)
 8023648:	9805      	ldr	r0, [sp, #20]
 802364a:	ab13      	add	r3, sp, #76	@ 0x4c
 802364c:	a911      	add	r1, sp, #68	@ 0x44
 802364e:	f001 fa1f 	bl	8024a90 <__gethex>
 8023652:	f010 060f 	ands.w	r6, r0, #15
 8023656:	4604      	mov	r4, r0
 8023658:	d005      	beq.n	8023666 <_strtod_l+0x76>
 802365a:	2e06      	cmp	r6, #6
 802365c:	d12a      	bne.n	80236b4 <_strtod_l+0xc4>
 802365e:	3501      	adds	r5, #1
 8023660:	2300      	movs	r3, #0
 8023662:	9511      	str	r5, [sp, #68]	@ 0x44
 8023664:	9308      	str	r3, [sp, #32]
 8023666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023668:	2b00      	cmp	r3, #0
 802366a:	f040 852f 	bne.w	80240cc <_strtod_l+0xadc>
 802366e:	9b08      	ldr	r3, [sp, #32]
 8023670:	ec4b ab10 	vmov	d0, sl, fp
 8023674:	b1cb      	cbz	r3, 80236aa <_strtod_l+0xba>
 8023676:	eeb1 0b40 	vneg.f64	d0, d0
 802367a:	b017      	add	sp, #92	@ 0x5c
 802367c:	ecbd 8b0a 	vpop	{d8-d12}
 8023680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023684:	2920      	cmp	r1, #32
 8023686:	d1cd      	bne.n	8023624 <_strtod_l+0x34>
 8023688:	3201      	adds	r2, #1
 802368a:	e7c0      	b.n	802360e <_strtod_l+0x1e>
 802368c:	292d      	cmp	r1, #45	@ 0x2d
 802368e:	d1c9      	bne.n	8023624 <_strtod_l+0x34>
 8023690:	2101      	movs	r1, #1
 8023692:	9108      	str	r1, [sp, #32]
 8023694:	1c51      	adds	r1, r2, #1
 8023696:	9111      	str	r1, [sp, #68]	@ 0x44
 8023698:	7852      	ldrb	r2, [r2, #1]
 802369a:	2a00      	cmp	r2, #0
 802369c:	d1c4      	bne.n	8023628 <_strtod_l+0x38>
 802369e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80236a0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80236a4:	2b00      	cmp	r3, #0
 80236a6:	f040 850f 	bne.w	80240c8 <_strtod_l+0xad8>
 80236aa:	ec4b ab10 	vmov	d0, sl, fp
 80236ae:	e7e4      	b.n	802367a <_strtod_l+0x8a>
 80236b0:	2100      	movs	r1, #0
 80236b2:	e7ee      	b.n	8023692 <_strtod_l+0xa2>
 80236b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80236b6:	b13a      	cbz	r2, 80236c8 <_strtod_l+0xd8>
 80236b8:	2135      	movs	r1, #53	@ 0x35
 80236ba:	a814      	add	r0, sp, #80	@ 0x50
 80236bc:	f7ff ff37 	bl	802352e <__copybits>
 80236c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80236c2:	9805      	ldr	r0, [sp, #20]
 80236c4:	f7ff fb08 	bl	8022cd8 <_Bfree>
 80236c8:	1e73      	subs	r3, r6, #1
 80236ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80236cc:	2b04      	cmp	r3, #4
 80236ce:	d806      	bhi.n	80236de <_strtod_l+0xee>
 80236d0:	e8df f003 	tbb	[pc, r3]
 80236d4:	201d0314 	.word	0x201d0314
 80236d8:	14          	.byte	0x14
 80236d9:	00          	.byte	0x00
 80236da:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80236de:	05e3      	lsls	r3, r4, #23
 80236e0:	bf48      	it	mi
 80236e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80236e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80236ea:	0d1b      	lsrs	r3, r3, #20
 80236ec:	051b      	lsls	r3, r3, #20
 80236ee:	2b00      	cmp	r3, #0
 80236f0:	d1b9      	bne.n	8023666 <_strtod_l+0x76>
 80236f2:	f7fe fc37 	bl	8021f64 <__errno>
 80236f6:	2322      	movs	r3, #34	@ 0x22
 80236f8:	6003      	str	r3, [r0, #0]
 80236fa:	e7b4      	b.n	8023666 <_strtod_l+0x76>
 80236fc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8023700:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8023704:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8023708:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802370c:	e7e7      	b.n	80236de <_strtod_l+0xee>
 802370e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 802387c <_strtod_l+0x28c>
 8023712:	e7e4      	b.n	80236de <_strtod_l+0xee>
 8023714:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8023718:	f04f 3aff 	mov.w	sl, #4294967295
 802371c:	e7df      	b.n	80236de <_strtod_l+0xee>
 802371e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023720:	1c5a      	adds	r2, r3, #1
 8023722:	9211      	str	r2, [sp, #68]	@ 0x44
 8023724:	785b      	ldrb	r3, [r3, #1]
 8023726:	2b30      	cmp	r3, #48	@ 0x30
 8023728:	d0f9      	beq.n	802371e <_strtod_l+0x12e>
 802372a:	2b00      	cmp	r3, #0
 802372c:	d09b      	beq.n	8023666 <_strtod_l+0x76>
 802372e:	2301      	movs	r3, #1
 8023730:	2600      	movs	r6, #0
 8023732:	9307      	str	r3, [sp, #28]
 8023734:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023736:	930a      	str	r3, [sp, #40]	@ 0x28
 8023738:	46b1      	mov	r9, r6
 802373a:	4635      	mov	r5, r6
 802373c:	220a      	movs	r2, #10
 802373e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8023740:	7804      	ldrb	r4, [r0, #0]
 8023742:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8023746:	b2d9      	uxtb	r1, r3
 8023748:	2909      	cmp	r1, #9
 802374a:	d929      	bls.n	80237a0 <_strtod_l+0x1b0>
 802374c:	494a      	ldr	r1, [pc, #296]	@ (8023878 <_strtod_l+0x288>)
 802374e:	2201      	movs	r2, #1
 8023750:	f7fe fb5d 	bl	8021e0e <strncmp>
 8023754:	b378      	cbz	r0, 80237b6 <_strtod_l+0x1c6>
 8023756:	2000      	movs	r0, #0
 8023758:	4622      	mov	r2, r4
 802375a:	462b      	mov	r3, r5
 802375c:	4607      	mov	r7, r0
 802375e:	9006      	str	r0, [sp, #24]
 8023760:	2a65      	cmp	r2, #101	@ 0x65
 8023762:	d001      	beq.n	8023768 <_strtod_l+0x178>
 8023764:	2a45      	cmp	r2, #69	@ 0x45
 8023766:	d117      	bne.n	8023798 <_strtod_l+0x1a8>
 8023768:	b91b      	cbnz	r3, 8023772 <_strtod_l+0x182>
 802376a:	9b07      	ldr	r3, [sp, #28]
 802376c:	4303      	orrs	r3, r0
 802376e:	d096      	beq.n	802369e <_strtod_l+0xae>
 8023770:	2300      	movs	r3, #0
 8023772:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8023776:	f108 0201 	add.w	r2, r8, #1
 802377a:	9211      	str	r2, [sp, #68]	@ 0x44
 802377c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023780:	2a2b      	cmp	r2, #43	@ 0x2b
 8023782:	d06b      	beq.n	802385c <_strtod_l+0x26c>
 8023784:	2a2d      	cmp	r2, #45	@ 0x2d
 8023786:	d071      	beq.n	802386c <_strtod_l+0x27c>
 8023788:	f04f 0e00 	mov.w	lr, #0
 802378c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8023790:	2c09      	cmp	r4, #9
 8023792:	d979      	bls.n	8023888 <_strtod_l+0x298>
 8023794:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8023798:	2400      	movs	r4, #0
 802379a:	e094      	b.n	80238c6 <_strtod_l+0x2d6>
 802379c:	2300      	movs	r3, #0
 802379e:	e7c7      	b.n	8023730 <_strtod_l+0x140>
 80237a0:	2d08      	cmp	r5, #8
 80237a2:	f100 0001 	add.w	r0, r0, #1
 80237a6:	bfd4      	ite	le
 80237a8:	fb02 3909 	mlale	r9, r2, r9, r3
 80237ac:	fb02 3606 	mlagt	r6, r2, r6, r3
 80237b0:	3501      	adds	r5, #1
 80237b2:	9011      	str	r0, [sp, #68]	@ 0x44
 80237b4:	e7c3      	b.n	802373e <_strtod_l+0x14e>
 80237b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80237b8:	1c5a      	adds	r2, r3, #1
 80237ba:	9211      	str	r2, [sp, #68]	@ 0x44
 80237bc:	785a      	ldrb	r2, [r3, #1]
 80237be:	b375      	cbz	r5, 802381e <_strtod_l+0x22e>
 80237c0:	4607      	mov	r7, r0
 80237c2:	462b      	mov	r3, r5
 80237c4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80237c8:	2909      	cmp	r1, #9
 80237ca:	d913      	bls.n	80237f4 <_strtod_l+0x204>
 80237cc:	2101      	movs	r1, #1
 80237ce:	9106      	str	r1, [sp, #24]
 80237d0:	e7c6      	b.n	8023760 <_strtod_l+0x170>
 80237d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80237d4:	1c5a      	adds	r2, r3, #1
 80237d6:	9211      	str	r2, [sp, #68]	@ 0x44
 80237d8:	785a      	ldrb	r2, [r3, #1]
 80237da:	3001      	adds	r0, #1
 80237dc:	2a30      	cmp	r2, #48	@ 0x30
 80237de:	d0f8      	beq.n	80237d2 <_strtod_l+0x1e2>
 80237e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80237e4:	2b08      	cmp	r3, #8
 80237e6:	f200 8476 	bhi.w	80240d6 <_strtod_l+0xae6>
 80237ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80237ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80237ee:	4607      	mov	r7, r0
 80237f0:	2000      	movs	r0, #0
 80237f2:	4603      	mov	r3, r0
 80237f4:	3a30      	subs	r2, #48	@ 0x30
 80237f6:	f100 0101 	add.w	r1, r0, #1
 80237fa:	d023      	beq.n	8023844 <_strtod_l+0x254>
 80237fc:	440f      	add	r7, r1
 80237fe:	eb00 0c03 	add.w	ip, r0, r3
 8023802:	4619      	mov	r1, r3
 8023804:	240a      	movs	r4, #10
 8023806:	4561      	cmp	r1, ip
 8023808:	d10b      	bne.n	8023822 <_strtod_l+0x232>
 802380a:	1c5c      	adds	r4, r3, #1
 802380c:	4403      	add	r3, r0
 802380e:	2b08      	cmp	r3, #8
 8023810:	4404      	add	r4, r0
 8023812:	dc11      	bgt.n	8023838 <_strtod_l+0x248>
 8023814:	230a      	movs	r3, #10
 8023816:	fb03 2909 	mla	r9, r3, r9, r2
 802381a:	2100      	movs	r1, #0
 802381c:	e013      	b.n	8023846 <_strtod_l+0x256>
 802381e:	4628      	mov	r0, r5
 8023820:	e7dc      	b.n	80237dc <_strtod_l+0x1ec>
 8023822:	2908      	cmp	r1, #8
 8023824:	f101 0101 	add.w	r1, r1, #1
 8023828:	dc02      	bgt.n	8023830 <_strtod_l+0x240>
 802382a:	fb04 f909 	mul.w	r9, r4, r9
 802382e:	e7ea      	b.n	8023806 <_strtod_l+0x216>
 8023830:	2910      	cmp	r1, #16
 8023832:	bfd8      	it	le
 8023834:	4366      	mulle	r6, r4
 8023836:	e7e6      	b.n	8023806 <_strtod_l+0x216>
 8023838:	2b0f      	cmp	r3, #15
 802383a:	dcee      	bgt.n	802381a <_strtod_l+0x22a>
 802383c:	230a      	movs	r3, #10
 802383e:	fb03 2606 	mla	r6, r3, r6, r2
 8023842:	e7ea      	b.n	802381a <_strtod_l+0x22a>
 8023844:	461c      	mov	r4, r3
 8023846:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023848:	1c5a      	adds	r2, r3, #1
 802384a:	9211      	str	r2, [sp, #68]	@ 0x44
 802384c:	785a      	ldrb	r2, [r3, #1]
 802384e:	4608      	mov	r0, r1
 8023850:	4623      	mov	r3, r4
 8023852:	e7b7      	b.n	80237c4 <_strtod_l+0x1d4>
 8023854:	2301      	movs	r3, #1
 8023856:	2700      	movs	r7, #0
 8023858:	9306      	str	r3, [sp, #24]
 802385a:	e786      	b.n	802376a <_strtod_l+0x17a>
 802385c:	f04f 0e00 	mov.w	lr, #0
 8023860:	f108 0202 	add.w	r2, r8, #2
 8023864:	9211      	str	r2, [sp, #68]	@ 0x44
 8023866:	f898 2002 	ldrb.w	r2, [r8, #2]
 802386a:	e78f      	b.n	802378c <_strtod_l+0x19c>
 802386c:	f04f 0e01 	mov.w	lr, #1
 8023870:	e7f6      	b.n	8023860 <_strtod_l+0x270>
 8023872:	bf00      	nop
 8023874:	08035668 	.word	0x08035668
 8023878:	08035650 	.word	0x08035650
 802387c:	7ff00000 	.word	0x7ff00000
 8023880:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023882:	1c54      	adds	r4, r2, #1
 8023884:	9411      	str	r4, [sp, #68]	@ 0x44
 8023886:	7852      	ldrb	r2, [r2, #1]
 8023888:	2a30      	cmp	r2, #48	@ 0x30
 802388a:	d0f9      	beq.n	8023880 <_strtod_l+0x290>
 802388c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8023890:	2c08      	cmp	r4, #8
 8023892:	d881      	bhi.n	8023798 <_strtod_l+0x1a8>
 8023894:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8023898:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802389a:	9209      	str	r2, [sp, #36]	@ 0x24
 802389c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802389e:	1c51      	adds	r1, r2, #1
 80238a0:	9111      	str	r1, [sp, #68]	@ 0x44
 80238a2:	7852      	ldrb	r2, [r2, #1]
 80238a4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80238a8:	2c09      	cmp	r4, #9
 80238aa:	d938      	bls.n	802391e <_strtod_l+0x32e>
 80238ac:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80238ae:	1b0c      	subs	r4, r1, r4
 80238b0:	2c08      	cmp	r4, #8
 80238b2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80238b6:	dc02      	bgt.n	80238be <_strtod_l+0x2ce>
 80238b8:	4564      	cmp	r4, ip
 80238ba:	bfa8      	it	ge
 80238bc:	4664      	movge	r4, ip
 80238be:	f1be 0f00 	cmp.w	lr, #0
 80238c2:	d000      	beq.n	80238c6 <_strtod_l+0x2d6>
 80238c4:	4264      	negs	r4, r4
 80238c6:	2b00      	cmp	r3, #0
 80238c8:	d14e      	bne.n	8023968 <_strtod_l+0x378>
 80238ca:	9b07      	ldr	r3, [sp, #28]
 80238cc:	4318      	orrs	r0, r3
 80238ce:	f47f aeca 	bne.w	8023666 <_strtod_l+0x76>
 80238d2:	9b06      	ldr	r3, [sp, #24]
 80238d4:	2b00      	cmp	r3, #0
 80238d6:	f47f aee2 	bne.w	802369e <_strtod_l+0xae>
 80238da:	2a69      	cmp	r2, #105	@ 0x69
 80238dc:	d027      	beq.n	802392e <_strtod_l+0x33e>
 80238de:	dc24      	bgt.n	802392a <_strtod_l+0x33a>
 80238e0:	2a49      	cmp	r2, #73	@ 0x49
 80238e2:	d024      	beq.n	802392e <_strtod_l+0x33e>
 80238e4:	2a4e      	cmp	r2, #78	@ 0x4e
 80238e6:	f47f aeda 	bne.w	802369e <_strtod_l+0xae>
 80238ea:	4997      	ldr	r1, [pc, #604]	@ (8023b48 <_strtod_l+0x558>)
 80238ec:	a811      	add	r0, sp, #68	@ 0x44
 80238ee:	f001 faf1 	bl	8024ed4 <__match>
 80238f2:	2800      	cmp	r0, #0
 80238f4:	f43f aed3 	beq.w	802369e <_strtod_l+0xae>
 80238f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80238fa:	781b      	ldrb	r3, [r3, #0]
 80238fc:	2b28      	cmp	r3, #40	@ 0x28
 80238fe:	d12d      	bne.n	802395c <_strtod_l+0x36c>
 8023900:	4992      	ldr	r1, [pc, #584]	@ (8023b4c <_strtod_l+0x55c>)
 8023902:	aa14      	add	r2, sp, #80	@ 0x50
 8023904:	a811      	add	r0, sp, #68	@ 0x44
 8023906:	f001 faf9 	bl	8024efc <__hexnan>
 802390a:	2805      	cmp	r0, #5
 802390c:	d126      	bne.n	802395c <_strtod_l+0x36c>
 802390e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023910:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8023914:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8023918:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 802391c:	e6a3      	b.n	8023666 <_strtod_l+0x76>
 802391e:	240a      	movs	r4, #10
 8023920:	fb04 2c0c 	mla	ip, r4, ip, r2
 8023924:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8023928:	e7b8      	b.n	802389c <_strtod_l+0x2ac>
 802392a:	2a6e      	cmp	r2, #110	@ 0x6e
 802392c:	e7db      	b.n	80238e6 <_strtod_l+0x2f6>
 802392e:	4988      	ldr	r1, [pc, #544]	@ (8023b50 <_strtod_l+0x560>)
 8023930:	a811      	add	r0, sp, #68	@ 0x44
 8023932:	f001 facf 	bl	8024ed4 <__match>
 8023936:	2800      	cmp	r0, #0
 8023938:	f43f aeb1 	beq.w	802369e <_strtod_l+0xae>
 802393c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802393e:	4985      	ldr	r1, [pc, #532]	@ (8023b54 <_strtod_l+0x564>)
 8023940:	3b01      	subs	r3, #1
 8023942:	a811      	add	r0, sp, #68	@ 0x44
 8023944:	9311      	str	r3, [sp, #68]	@ 0x44
 8023946:	f001 fac5 	bl	8024ed4 <__match>
 802394a:	b910      	cbnz	r0, 8023952 <_strtod_l+0x362>
 802394c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802394e:	3301      	adds	r3, #1
 8023950:	9311      	str	r3, [sp, #68]	@ 0x44
 8023952:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8023b68 <_strtod_l+0x578>
 8023956:	f04f 0a00 	mov.w	sl, #0
 802395a:	e684      	b.n	8023666 <_strtod_l+0x76>
 802395c:	487e      	ldr	r0, [pc, #504]	@ (8023b58 <_strtod_l+0x568>)
 802395e:	f001 f827 	bl	80249b0 <nan>
 8023962:	ec5b ab10 	vmov	sl, fp, d0
 8023966:	e67e      	b.n	8023666 <_strtod_l+0x76>
 8023968:	ee07 9a90 	vmov	s15, r9
 802396c:	1be2      	subs	r2, r4, r7
 802396e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8023972:	2d00      	cmp	r5, #0
 8023974:	bf08      	it	eq
 8023976:	461d      	moveq	r5, r3
 8023978:	2b10      	cmp	r3, #16
 802397a:	9209      	str	r2, [sp, #36]	@ 0x24
 802397c:	461a      	mov	r2, r3
 802397e:	bfa8      	it	ge
 8023980:	2210      	movge	r2, #16
 8023982:	2b09      	cmp	r3, #9
 8023984:	ec5b ab17 	vmov	sl, fp, d7
 8023988:	dc15      	bgt.n	80239b6 <_strtod_l+0x3c6>
 802398a:	1be1      	subs	r1, r4, r7
 802398c:	2900      	cmp	r1, #0
 802398e:	f43f ae6a 	beq.w	8023666 <_strtod_l+0x76>
 8023992:	eba4 0107 	sub.w	r1, r4, r7
 8023996:	dd72      	ble.n	8023a7e <_strtod_l+0x48e>
 8023998:	2916      	cmp	r1, #22
 802399a:	dc59      	bgt.n	8023a50 <_strtod_l+0x460>
 802399c:	4b6f      	ldr	r3, [pc, #444]	@ (8023b5c <_strtod_l+0x56c>)
 802399e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80239a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80239a4:	ed93 7b00 	vldr	d7, [r3]
 80239a8:	ec4b ab16 	vmov	d6, sl, fp
 80239ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80239b0:	ec5b ab17 	vmov	sl, fp, d7
 80239b4:	e657      	b.n	8023666 <_strtod_l+0x76>
 80239b6:	4969      	ldr	r1, [pc, #420]	@ (8023b5c <_strtod_l+0x56c>)
 80239b8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80239bc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80239c0:	ee06 6a90 	vmov	s13, r6
 80239c4:	2b0f      	cmp	r3, #15
 80239c6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80239ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80239ce:	ec5b ab16 	vmov	sl, fp, d6
 80239d2:	ddda      	ble.n	802398a <_strtod_l+0x39a>
 80239d4:	1a9a      	subs	r2, r3, r2
 80239d6:	1be1      	subs	r1, r4, r7
 80239d8:	440a      	add	r2, r1
 80239da:	2a00      	cmp	r2, #0
 80239dc:	f340 8094 	ble.w	8023b08 <_strtod_l+0x518>
 80239e0:	f012 000f 	ands.w	r0, r2, #15
 80239e4:	d00a      	beq.n	80239fc <_strtod_l+0x40c>
 80239e6:	495d      	ldr	r1, [pc, #372]	@ (8023b5c <_strtod_l+0x56c>)
 80239e8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80239ec:	ed91 7b00 	vldr	d7, [r1]
 80239f0:	ec4b ab16 	vmov	d6, sl, fp
 80239f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80239f8:	ec5b ab17 	vmov	sl, fp, d7
 80239fc:	f032 020f 	bics.w	r2, r2, #15
 8023a00:	d073      	beq.n	8023aea <_strtod_l+0x4fa>
 8023a02:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8023a06:	dd47      	ble.n	8023a98 <_strtod_l+0x4a8>
 8023a08:	2400      	movs	r4, #0
 8023a0a:	4625      	mov	r5, r4
 8023a0c:	9407      	str	r4, [sp, #28]
 8023a0e:	4626      	mov	r6, r4
 8023a10:	9a05      	ldr	r2, [sp, #20]
 8023a12:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8023b68 <_strtod_l+0x578>
 8023a16:	2322      	movs	r3, #34	@ 0x22
 8023a18:	6013      	str	r3, [r2, #0]
 8023a1a:	f04f 0a00 	mov.w	sl, #0
 8023a1e:	9b07      	ldr	r3, [sp, #28]
 8023a20:	2b00      	cmp	r3, #0
 8023a22:	f43f ae20 	beq.w	8023666 <_strtod_l+0x76>
 8023a26:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023a28:	9805      	ldr	r0, [sp, #20]
 8023a2a:	f7ff f955 	bl	8022cd8 <_Bfree>
 8023a2e:	9805      	ldr	r0, [sp, #20]
 8023a30:	4631      	mov	r1, r6
 8023a32:	f7ff f951 	bl	8022cd8 <_Bfree>
 8023a36:	9805      	ldr	r0, [sp, #20]
 8023a38:	4629      	mov	r1, r5
 8023a3a:	f7ff f94d 	bl	8022cd8 <_Bfree>
 8023a3e:	9907      	ldr	r1, [sp, #28]
 8023a40:	9805      	ldr	r0, [sp, #20]
 8023a42:	f7ff f949 	bl	8022cd8 <_Bfree>
 8023a46:	9805      	ldr	r0, [sp, #20]
 8023a48:	4621      	mov	r1, r4
 8023a4a:	f7ff f945 	bl	8022cd8 <_Bfree>
 8023a4e:	e60a      	b.n	8023666 <_strtod_l+0x76>
 8023a50:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8023a54:	1be0      	subs	r0, r4, r7
 8023a56:	4281      	cmp	r1, r0
 8023a58:	dbbc      	blt.n	80239d4 <_strtod_l+0x3e4>
 8023a5a:	4a40      	ldr	r2, [pc, #256]	@ (8023b5c <_strtod_l+0x56c>)
 8023a5c:	f1c3 030f 	rsb	r3, r3, #15
 8023a60:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8023a64:	ed91 7b00 	vldr	d7, [r1]
 8023a68:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023a6a:	ec4b ab16 	vmov	d6, sl, fp
 8023a6e:	1acb      	subs	r3, r1, r3
 8023a70:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8023a74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023a78:	ed92 6b00 	vldr	d6, [r2]
 8023a7c:	e796      	b.n	80239ac <_strtod_l+0x3bc>
 8023a7e:	3116      	adds	r1, #22
 8023a80:	dba8      	blt.n	80239d4 <_strtod_l+0x3e4>
 8023a82:	4b36      	ldr	r3, [pc, #216]	@ (8023b5c <_strtod_l+0x56c>)
 8023a84:	1b3c      	subs	r4, r7, r4
 8023a86:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8023a8a:	ed94 7b00 	vldr	d7, [r4]
 8023a8e:	ec4b ab16 	vmov	d6, sl, fp
 8023a92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8023a96:	e78b      	b.n	80239b0 <_strtod_l+0x3c0>
 8023a98:	2000      	movs	r0, #0
 8023a9a:	ec4b ab17 	vmov	d7, sl, fp
 8023a9e:	4e30      	ldr	r6, [pc, #192]	@ (8023b60 <_strtod_l+0x570>)
 8023aa0:	1112      	asrs	r2, r2, #4
 8023aa2:	4601      	mov	r1, r0
 8023aa4:	2a01      	cmp	r2, #1
 8023aa6:	dc23      	bgt.n	8023af0 <_strtod_l+0x500>
 8023aa8:	b108      	cbz	r0, 8023aae <_strtod_l+0x4be>
 8023aaa:	ec5b ab17 	vmov	sl, fp, d7
 8023aae:	4a2c      	ldr	r2, [pc, #176]	@ (8023b60 <_strtod_l+0x570>)
 8023ab0:	482c      	ldr	r0, [pc, #176]	@ (8023b64 <_strtod_l+0x574>)
 8023ab2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8023ab6:	ed92 7b00 	vldr	d7, [r2]
 8023aba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8023abe:	ec4b ab16 	vmov	d6, sl, fp
 8023ac2:	4a29      	ldr	r2, [pc, #164]	@ (8023b68 <_strtod_l+0x578>)
 8023ac4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023ac8:	ee17 1a90 	vmov	r1, s15
 8023acc:	400a      	ands	r2, r1
 8023ace:	4282      	cmp	r2, r0
 8023ad0:	ec5b ab17 	vmov	sl, fp, d7
 8023ad4:	d898      	bhi.n	8023a08 <_strtod_l+0x418>
 8023ad6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8023ada:	4282      	cmp	r2, r0
 8023adc:	bf86      	itte	hi
 8023ade:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8023b6c <_strtod_l+0x57c>
 8023ae2:	f04f 3aff 	movhi.w	sl, #4294967295
 8023ae6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8023aea:	2200      	movs	r2, #0
 8023aec:	9206      	str	r2, [sp, #24]
 8023aee:	e076      	b.n	8023bde <_strtod_l+0x5ee>
 8023af0:	f012 0f01 	tst.w	r2, #1
 8023af4:	d004      	beq.n	8023b00 <_strtod_l+0x510>
 8023af6:	ed96 6b00 	vldr	d6, [r6]
 8023afa:	2001      	movs	r0, #1
 8023afc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023b00:	3101      	adds	r1, #1
 8023b02:	1052      	asrs	r2, r2, #1
 8023b04:	3608      	adds	r6, #8
 8023b06:	e7cd      	b.n	8023aa4 <_strtod_l+0x4b4>
 8023b08:	d0ef      	beq.n	8023aea <_strtod_l+0x4fa>
 8023b0a:	4252      	negs	r2, r2
 8023b0c:	f012 000f 	ands.w	r0, r2, #15
 8023b10:	d00a      	beq.n	8023b28 <_strtod_l+0x538>
 8023b12:	4912      	ldr	r1, [pc, #72]	@ (8023b5c <_strtod_l+0x56c>)
 8023b14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8023b18:	ed91 7b00 	vldr	d7, [r1]
 8023b1c:	ec4b ab16 	vmov	d6, sl, fp
 8023b20:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8023b24:	ec5b ab17 	vmov	sl, fp, d7
 8023b28:	1112      	asrs	r2, r2, #4
 8023b2a:	d0de      	beq.n	8023aea <_strtod_l+0x4fa>
 8023b2c:	2a1f      	cmp	r2, #31
 8023b2e:	dd1f      	ble.n	8023b70 <_strtod_l+0x580>
 8023b30:	2400      	movs	r4, #0
 8023b32:	4625      	mov	r5, r4
 8023b34:	9407      	str	r4, [sp, #28]
 8023b36:	4626      	mov	r6, r4
 8023b38:	9a05      	ldr	r2, [sp, #20]
 8023b3a:	2322      	movs	r3, #34	@ 0x22
 8023b3c:	f04f 0a00 	mov.w	sl, #0
 8023b40:	f04f 0b00 	mov.w	fp, #0
 8023b44:	6013      	str	r3, [r2, #0]
 8023b46:	e76a      	b.n	8023a1e <_strtod_l+0x42e>
 8023b48:	08035455 	.word	0x08035455
 8023b4c:	08035654 	.word	0x08035654
 8023b50:	0803544d 	.word	0x0803544d
 8023b54:	08035484 	.word	0x08035484
 8023b58:	080352d7 	.word	0x080352d7
 8023b5c:	08035588 	.word	0x08035588
 8023b60:	08035560 	.word	0x08035560
 8023b64:	7ca00000 	.word	0x7ca00000
 8023b68:	7ff00000 	.word	0x7ff00000
 8023b6c:	7fefffff 	.word	0x7fefffff
 8023b70:	f012 0110 	ands.w	r1, r2, #16
 8023b74:	bf18      	it	ne
 8023b76:	216a      	movne	r1, #106	@ 0x6a
 8023b78:	9106      	str	r1, [sp, #24]
 8023b7a:	ec4b ab17 	vmov	d7, sl, fp
 8023b7e:	49b0      	ldr	r1, [pc, #704]	@ (8023e40 <_strtod_l+0x850>)
 8023b80:	2000      	movs	r0, #0
 8023b82:	07d6      	lsls	r6, r2, #31
 8023b84:	d504      	bpl.n	8023b90 <_strtod_l+0x5a0>
 8023b86:	ed91 6b00 	vldr	d6, [r1]
 8023b8a:	2001      	movs	r0, #1
 8023b8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023b90:	1052      	asrs	r2, r2, #1
 8023b92:	f101 0108 	add.w	r1, r1, #8
 8023b96:	d1f4      	bne.n	8023b82 <_strtod_l+0x592>
 8023b98:	b108      	cbz	r0, 8023b9e <_strtod_l+0x5ae>
 8023b9a:	ec5b ab17 	vmov	sl, fp, d7
 8023b9e:	9a06      	ldr	r2, [sp, #24]
 8023ba0:	b1b2      	cbz	r2, 8023bd0 <_strtod_l+0x5e0>
 8023ba2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8023ba6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8023baa:	2a00      	cmp	r2, #0
 8023bac:	4658      	mov	r0, fp
 8023bae:	dd0f      	ble.n	8023bd0 <_strtod_l+0x5e0>
 8023bb0:	2a1f      	cmp	r2, #31
 8023bb2:	dd55      	ble.n	8023c60 <_strtod_l+0x670>
 8023bb4:	2a34      	cmp	r2, #52	@ 0x34
 8023bb6:	bfde      	ittt	le
 8023bb8:	f04f 32ff 	movle.w	r2, #4294967295
 8023bbc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8023bc0:	408a      	lslle	r2, r1
 8023bc2:	f04f 0a00 	mov.w	sl, #0
 8023bc6:	bfcc      	ite	gt
 8023bc8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8023bcc:	ea02 0b00 	andle.w	fp, r2, r0
 8023bd0:	ec4b ab17 	vmov	d7, sl, fp
 8023bd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023bdc:	d0a8      	beq.n	8023b30 <_strtod_l+0x540>
 8023bde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023be0:	9805      	ldr	r0, [sp, #20]
 8023be2:	f8cd 9000 	str.w	r9, [sp]
 8023be6:	462a      	mov	r2, r5
 8023be8:	f7ff f8de 	bl	8022da8 <__s2b>
 8023bec:	9007      	str	r0, [sp, #28]
 8023bee:	2800      	cmp	r0, #0
 8023bf0:	f43f af0a 	beq.w	8023a08 <_strtod_l+0x418>
 8023bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023bf6:	1b3f      	subs	r7, r7, r4
 8023bf8:	2b00      	cmp	r3, #0
 8023bfa:	bfb4      	ite	lt
 8023bfc:	463b      	movlt	r3, r7
 8023bfe:	2300      	movge	r3, #0
 8023c00:	930a      	str	r3, [sp, #40]	@ 0x28
 8023c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023c04:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8023e30 <_strtod_l+0x840>
 8023c08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023c0c:	2400      	movs	r4, #0
 8023c0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023c10:	4625      	mov	r5, r4
 8023c12:	9b07      	ldr	r3, [sp, #28]
 8023c14:	9805      	ldr	r0, [sp, #20]
 8023c16:	6859      	ldr	r1, [r3, #4]
 8023c18:	f7ff f81e 	bl	8022c58 <_Balloc>
 8023c1c:	4606      	mov	r6, r0
 8023c1e:	2800      	cmp	r0, #0
 8023c20:	f43f aef6 	beq.w	8023a10 <_strtod_l+0x420>
 8023c24:	9b07      	ldr	r3, [sp, #28]
 8023c26:	691a      	ldr	r2, [r3, #16]
 8023c28:	ec4b ab19 	vmov	d9, sl, fp
 8023c2c:	3202      	adds	r2, #2
 8023c2e:	f103 010c 	add.w	r1, r3, #12
 8023c32:	0092      	lsls	r2, r2, #2
 8023c34:	300c      	adds	r0, #12
 8023c36:	f7fe f9ca 	bl	8021fce <memcpy>
 8023c3a:	eeb0 0b49 	vmov.f64	d0, d9
 8023c3e:	9805      	ldr	r0, [sp, #20]
 8023c40:	aa14      	add	r2, sp, #80	@ 0x50
 8023c42:	a913      	add	r1, sp, #76	@ 0x4c
 8023c44:	f7ff fbec 	bl	8023420 <__d2b>
 8023c48:	9012      	str	r0, [sp, #72]	@ 0x48
 8023c4a:	2800      	cmp	r0, #0
 8023c4c:	f43f aee0 	beq.w	8023a10 <_strtod_l+0x420>
 8023c50:	9805      	ldr	r0, [sp, #20]
 8023c52:	2101      	movs	r1, #1
 8023c54:	f7ff f93e 	bl	8022ed4 <__i2b>
 8023c58:	4605      	mov	r5, r0
 8023c5a:	b940      	cbnz	r0, 8023c6e <_strtod_l+0x67e>
 8023c5c:	2500      	movs	r5, #0
 8023c5e:	e6d7      	b.n	8023a10 <_strtod_l+0x420>
 8023c60:	f04f 31ff 	mov.w	r1, #4294967295
 8023c64:	fa01 f202 	lsl.w	r2, r1, r2
 8023c68:	ea02 0a0a 	and.w	sl, r2, sl
 8023c6c:	e7b0      	b.n	8023bd0 <_strtod_l+0x5e0>
 8023c6e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8023c70:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023c72:	2f00      	cmp	r7, #0
 8023c74:	bfab      	itete	ge
 8023c76:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8023c78:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8023c7a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8023c7e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8023c82:	bfac      	ite	ge
 8023c84:	eb07 0903 	addge.w	r9, r7, r3
 8023c88:	eba3 0807 	sublt.w	r8, r3, r7
 8023c8c:	9b06      	ldr	r3, [sp, #24]
 8023c8e:	1aff      	subs	r7, r7, r3
 8023c90:	4417      	add	r7, r2
 8023c92:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8023c96:	4a6b      	ldr	r2, [pc, #428]	@ (8023e44 <_strtod_l+0x854>)
 8023c98:	3f01      	subs	r7, #1
 8023c9a:	4297      	cmp	r7, r2
 8023c9c:	da51      	bge.n	8023d42 <_strtod_l+0x752>
 8023c9e:	1bd1      	subs	r1, r2, r7
 8023ca0:	291f      	cmp	r1, #31
 8023ca2:	eba3 0301 	sub.w	r3, r3, r1
 8023ca6:	f04f 0201 	mov.w	r2, #1
 8023caa:	dc3e      	bgt.n	8023d2a <_strtod_l+0x73a>
 8023cac:	408a      	lsls	r2, r1
 8023cae:	920c      	str	r2, [sp, #48]	@ 0x30
 8023cb0:	2200      	movs	r2, #0
 8023cb2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023cb4:	eb09 0703 	add.w	r7, r9, r3
 8023cb8:	4498      	add	r8, r3
 8023cba:	9b06      	ldr	r3, [sp, #24]
 8023cbc:	45b9      	cmp	r9, r7
 8023cbe:	4498      	add	r8, r3
 8023cc0:	464b      	mov	r3, r9
 8023cc2:	bfa8      	it	ge
 8023cc4:	463b      	movge	r3, r7
 8023cc6:	4543      	cmp	r3, r8
 8023cc8:	bfa8      	it	ge
 8023cca:	4643      	movge	r3, r8
 8023ccc:	2b00      	cmp	r3, #0
 8023cce:	bfc2      	ittt	gt
 8023cd0:	1aff      	subgt	r7, r7, r3
 8023cd2:	eba8 0803 	subgt.w	r8, r8, r3
 8023cd6:	eba9 0903 	subgt.w	r9, r9, r3
 8023cda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023cdc:	2b00      	cmp	r3, #0
 8023cde:	dd16      	ble.n	8023d0e <_strtod_l+0x71e>
 8023ce0:	4629      	mov	r1, r5
 8023ce2:	9805      	ldr	r0, [sp, #20]
 8023ce4:	461a      	mov	r2, r3
 8023ce6:	f7ff f9b5 	bl	8023054 <__pow5mult>
 8023cea:	4605      	mov	r5, r0
 8023cec:	2800      	cmp	r0, #0
 8023cee:	d0b5      	beq.n	8023c5c <_strtod_l+0x66c>
 8023cf0:	4601      	mov	r1, r0
 8023cf2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023cf4:	9805      	ldr	r0, [sp, #20]
 8023cf6:	f7ff f903 	bl	8022f00 <__multiply>
 8023cfa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8023cfc:	2800      	cmp	r0, #0
 8023cfe:	f43f ae87 	beq.w	8023a10 <_strtod_l+0x420>
 8023d02:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023d04:	9805      	ldr	r0, [sp, #20]
 8023d06:	f7fe ffe7 	bl	8022cd8 <_Bfree>
 8023d0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023d0c:	9312      	str	r3, [sp, #72]	@ 0x48
 8023d0e:	2f00      	cmp	r7, #0
 8023d10:	dc1b      	bgt.n	8023d4a <_strtod_l+0x75a>
 8023d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d14:	2b00      	cmp	r3, #0
 8023d16:	dd21      	ble.n	8023d5c <_strtod_l+0x76c>
 8023d18:	4631      	mov	r1, r6
 8023d1a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023d1c:	9805      	ldr	r0, [sp, #20]
 8023d1e:	f7ff f999 	bl	8023054 <__pow5mult>
 8023d22:	4606      	mov	r6, r0
 8023d24:	b9d0      	cbnz	r0, 8023d5c <_strtod_l+0x76c>
 8023d26:	2600      	movs	r6, #0
 8023d28:	e672      	b.n	8023a10 <_strtod_l+0x420>
 8023d2a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8023d2e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8023d32:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8023d36:	37e2      	adds	r7, #226	@ 0xe2
 8023d38:	fa02 f107 	lsl.w	r1, r2, r7
 8023d3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023d3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8023d40:	e7b8      	b.n	8023cb4 <_strtod_l+0x6c4>
 8023d42:	2200      	movs	r2, #0
 8023d44:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023d46:	2201      	movs	r2, #1
 8023d48:	e7f9      	b.n	8023d3e <_strtod_l+0x74e>
 8023d4a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023d4c:	9805      	ldr	r0, [sp, #20]
 8023d4e:	463a      	mov	r2, r7
 8023d50:	f7ff f9da 	bl	8023108 <__lshift>
 8023d54:	9012      	str	r0, [sp, #72]	@ 0x48
 8023d56:	2800      	cmp	r0, #0
 8023d58:	d1db      	bne.n	8023d12 <_strtod_l+0x722>
 8023d5a:	e659      	b.n	8023a10 <_strtod_l+0x420>
 8023d5c:	f1b8 0f00 	cmp.w	r8, #0
 8023d60:	dd07      	ble.n	8023d72 <_strtod_l+0x782>
 8023d62:	4631      	mov	r1, r6
 8023d64:	9805      	ldr	r0, [sp, #20]
 8023d66:	4642      	mov	r2, r8
 8023d68:	f7ff f9ce 	bl	8023108 <__lshift>
 8023d6c:	4606      	mov	r6, r0
 8023d6e:	2800      	cmp	r0, #0
 8023d70:	d0d9      	beq.n	8023d26 <_strtod_l+0x736>
 8023d72:	f1b9 0f00 	cmp.w	r9, #0
 8023d76:	dd08      	ble.n	8023d8a <_strtod_l+0x79a>
 8023d78:	4629      	mov	r1, r5
 8023d7a:	9805      	ldr	r0, [sp, #20]
 8023d7c:	464a      	mov	r2, r9
 8023d7e:	f7ff f9c3 	bl	8023108 <__lshift>
 8023d82:	4605      	mov	r5, r0
 8023d84:	2800      	cmp	r0, #0
 8023d86:	f43f ae43 	beq.w	8023a10 <_strtod_l+0x420>
 8023d8a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023d8c:	9805      	ldr	r0, [sp, #20]
 8023d8e:	4632      	mov	r2, r6
 8023d90:	f7ff fa42 	bl	8023218 <__mdiff>
 8023d94:	4604      	mov	r4, r0
 8023d96:	2800      	cmp	r0, #0
 8023d98:	f43f ae3a 	beq.w	8023a10 <_strtod_l+0x420>
 8023d9c:	2300      	movs	r3, #0
 8023d9e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8023da2:	60c3      	str	r3, [r0, #12]
 8023da4:	4629      	mov	r1, r5
 8023da6:	f7ff fa1b 	bl	80231e0 <__mcmp>
 8023daa:	2800      	cmp	r0, #0
 8023dac:	da4e      	bge.n	8023e4c <_strtod_l+0x85c>
 8023dae:	ea58 080a 	orrs.w	r8, r8, sl
 8023db2:	d174      	bne.n	8023e9e <_strtod_l+0x8ae>
 8023db4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8023db8:	2b00      	cmp	r3, #0
 8023dba:	d170      	bne.n	8023e9e <_strtod_l+0x8ae>
 8023dbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8023dc0:	0d1b      	lsrs	r3, r3, #20
 8023dc2:	051b      	lsls	r3, r3, #20
 8023dc4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8023dc8:	d969      	bls.n	8023e9e <_strtod_l+0x8ae>
 8023dca:	6963      	ldr	r3, [r4, #20]
 8023dcc:	b913      	cbnz	r3, 8023dd4 <_strtod_l+0x7e4>
 8023dce:	6923      	ldr	r3, [r4, #16]
 8023dd0:	2b01      	cmp	r3, #1
 8023dd2:	dd64      	ble.n	8023e9e <_strtod_l+0x8ae>
 8023dd4:	4621      	mov	r1, r4
 8023dd6:	2201      	movs	r2, #1
 8023dd8:	9805      	ldr	r0, [sp, #20]
 8023dda:	f7ff f995 	bl	8023108 <__lshift>
 8023dde:	4629      	mov	r1, r5
 8023de0:	4604      	mov	r4, r0
 8023de2:	f7ff f9fd 	bl	80231e0 <__mcmp>
 8023de6:	2800      	cmp	r0, #0
 8023de8:	dd59      	ble.n	8023e9e <_strtod_l+0x8ae>
 8023dea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8023dee:	9a06      	ldr	r2, [sp, #24]
 8023df0:	0d1b      	lsrs	r3, r3, #20
 8023df2:	051b      	lsls	r3, r3, #20
 8023df4:	2a00      	cmp	r2, #0
 8023df6:	d070      	beq.n	8023eda <_strtod_l+0x8ea>
 8023df8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8023dfc:	d86d      	bhi.n	8023eda <_strtod_l+0x8ea>
 8023dfe:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8023e02:	f67f ae99 	bls.w	8023b38 <_strtod_l+0x548>
 8023e06:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8023e38 <_strtod_l+0x848>
 8023e0a:	ec4b ab16 	vmov	d6, sl, fp
 8023e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8023e48 <_strtod_l+0x858>)
 8023e10:	ee26 7b07 	vmul.f64	d7, d6, d7
 8023e14:	ee17 2a90 	vmov	r2, s15
 8023e18:	4013      	ands	r3, r2
 8023e1a:	ec5b ab17 	vmov	sl, fp, d7
 8023e1e:	2b00      	cmp	r3, #0
 8023e20:	f47f ae01 	bne.w	8023a26 <_strtod_l+0x436>
 8023e24:	9a05      	ldr	r2, [sp, #20]
 8023e26:	2322      	movs	r3, #34	@ 0x22
 8023e28:	6013      	str	r3, [r2, #0]
 8023e2a:	e5fc      	b.n	8023a26 <_strtod_l+0x436>
 8023e2c:	f3af 8000 	nop.w
 8023e30:	ffc00000 	.word	0xffc00000
 8023e34:	41dfffff 	.word	0x41dfffff
 8023e38:	00000000 	.word	0x00000000
 8023e3c:	39500000 	.word	0x39500000
 8023e40:	08035680 	.word	0x08035680
 8023e44:	fffffc02 	.word	0xfffffc02
 8023e48:	7ff00000 	.word	0x7ff00000
 8023e4c:	46d9      	mov	r9, fp
 8023e4e:	d15d      	bne.n	8023f0c <_strtod_l+0x91c>
 8023e50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8023e54:	f1b8 0f00 	cmp.w	r8, #0
 8023e58:	d02a      	beq.n	8023eb0 <_strtod_l+0x8c0>
 8023e5a:	4aab      	ldr	r2, [pc, #684]	@ (8024108 <_strtod_l+0xb18>)
 8023e5c:	4293      	cmp	r3, r2
 8023e5e:	d12a      	bne.n	8023eb6 <_strtod_l+0x8c6>
 8023e60:	9b06      	ldr	r3, [sp, #24]
 8023e62:	4652      	mov	r2, sl
 8023e64:	b1fb      	cbz	r3, 8023ea6 <_strtod_l+0x8b6>
 8023e66:	4ba9      	ldr	r3, [pc, #676]	@ (802410c <_strtod_l+0xb1c>)
 8023e68:	ea0b 0303 	and.w	r3, fp, r3
 8023e6c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8023e70:	f04f 31ff 	mov.w	r1, #4294967295
 8023e74:	d81a      	bhi.n	8023eac <_strtod_l+0x8bc>
 8023e76:	0d1b      	lsrs	r3, r3, #20
 8023e78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8023e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8023e80:	429a      	cmp	r2, r3
 8023e82:	d118      	bne.n	8023eb6 <_strtod_l+0x8c6>
 8023e84:	4ba2      	ldr	r3, [pc, #648]	@ (8024110 <_strtod_l+0xb20>)
 8023e86:	4599      	cmp	r9, r3
 8023e88:	d102      	bne.n	8023e90 <_strtod_l+0x8a0>
 8023e8a:	3201      	adds	r2, #1
 8023e8c:	f43f adc0 	beq.w	8023a10 <_strtod_l+0x420>
 8023e90:	4b9e      	ldr	r3, [pc, #632]	@ (802410c <_strtod_l+0xb1c>)
 8023e92:	ea09 0303 	and.w	r3, r9, r3
 8023e96:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8023e9a:	f04f 0a00 	mov.w	sl, #0
 8023e9e:	9b06      	ldr	r3, [sp, #24]
 8023ea0:	2b00      	cmp	r3, #0
 8023ea2:	d1b0      	bne.n	8023e06 <_strtod_l+0x816>
 8023ea4:	e5bf      	b.n	8023a26 <_strtod_l+0x436>
 8023ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8023eaa:	e7e9      	b.n	8023e80 <_strtod_l+0x890>
 8023eac:	460b      	mov	r3, r1
 8023eae:	e7e7      	b.n	8023e80 <_strtod_l+0x890>
 8023eb0:	ea53 030a 	orrs.w	r3, r3, sl
 8023eb4:	d099      	beq.n	8023dea <_strtod_l+0x7fa>
 8023eb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023eb8:	b1c3      	cbz	r3, 8023eec <_strtod_l+0x8fc>
 8023eba:	ea13 0f09 	tst.w	r3, r9
 8023ebe:	d0ee      	beq.n	8023e9e <_strtod_l+0x8ae>
 8023ec0:	9a06      	ldr	r2, [sp, #24]
 8023ec2:	4650      	mov	r0, sl
 8023ec4:	4659      	mov	r1, fp
 8023ec6:	f1b8 0f00 	cmp.w	r8, #0
 8023eca:	d013      	beq.n	8023ef4 <_strtod_l+0x904>
 8023ecc:	f7ff fb73 	bl	80235b6 <sulp>
 8023ed0:	ee39 7b00 	vadd.f64	d7, d9, d0
 8023ed4:	ec5b ab17 	vmov	sl, fp, d7
 8023ed8:	e7e1      	b.n	8023e9e <_strtod_l+0x8ae>
 8023eda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8023ede:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8023ee2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8023ee6:	f04f 3aff 	mov.w	sl, #4294967295
 8023eea:	e7d8      	b.n	8023e9e <_strtod_l+0x8ae>
 8023eec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023eee:	ea13 0f0a 	tst.w	r3, sl
 8023ef2:	e7e4      	b.n	8023ebe <_strtod_l+0x8ce>
 8023ef4:	f7ff fb5f 	bl	80235b6 <sulp>
 8023ef8:	ee39 0b40 	vsub.f64	d0, d9, d0
 8023efc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8023f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f04:	ec5b ab10 	vmov	sl, fp, d0
 8023f08:	d1c9      	bne.n	8023e9e <_strtod_l+0x8ae>
 8023f0a:	e615      	b.n	8023b38 <_strtod_l+0x548>
 8023f0c:	4629      	mov	r1, r5
 8023f0e:	4620      	mov	r0, r4
 8023f10:	f7ff fade 	bl	80234d0 <__ratio>
 8023f14:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8023f18:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8023f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f20:	d85d      	bhi.n	8023fde <_strtod_l+0x9ee>
 8023f22:	f1b8 0f00 	cmp.w	r8, #0
 8023f26:	d164      	bne.n	8023ff2 <_strtod_l+0xa02>
 8023f28:	f1ba 0f00 	cmp.w	sl, #0
 8023f2c:	d14b      	bne.n	8023fc6 <_strtod_l+0x9d6>
 8023f2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8023f32:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8023f36:	2b00      	cmp	r3, #0
 8023f38:	d160      	bne.n	8023ffc <_strtod_l+0xa0c>
 8023f3a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8023f3e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8023f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f46:	d401      	bmi.n	8023f4c <_strtod_l+0x95c>
 8023f48:	ee20 8b08 	vmul.f64	d8, d0, d8
 8023f4c:	eeb1 ab48 	vneg.f64	d10, d8
 8023f50:	486e      	ldr	r0, [pc, #440]	@ (802410c <_strtod_l+0xb1c>)
 8023f52:	4970      	ldr	r1, [pc, #448]	@ (8024114 <_strtod_l+0xb24>)
 8023f54:	ea09 0700 	and.w	r7, r9, r0
 8023f58:	428f      	cmp	r7, r1
 8023f5a:	ec53 2b1a 	vmov	r2, r3, d10
 8023f5e:	d17d      	bne.n	802405c <_strtod_l+0xa6c>
 8023f60:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8023f64:	ec4b ab1c 	vmov	d12, sl, fp
 8023f68:	eeb0 0b4c 	vmov.f64	d0, d12
 8023f6c:	f7ff f9e8 	bl	8023340 <__ulp>
 8023f70:	4866      	ldr	r0, [pc, #408]	@ (802410c <_strtod_l+0xb1c>)
 8023f72:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8023f76:	ee1c 3a90 	vmov	r3, s25
 8023f7a:	4a67      	ldr	r2, [pc, #412]	@ (8024118 <_strtod_l+0xb28>)
 8023f7c:	ea03 0100 	and.w	r1, r3, r0
 8023f80:	4291      	cmp	r1, r2
 8023f82:	ec5b ab1c 	vmov	sl, fp, d12
 8023f86:	d93c      	bls.n	8024002 <_strtod_l+0xa12>
 8023f88:	ee19 2a90 	vmov	r2, s19
 8023f8c:	4b60      	ldr	r3, [pc, #384]	@ (8024110 <_strtod_l+0xb20>)
 8023f8e:	429a      	cmp	r2, r3
 8023f90:	d104      	bne.n	8023f9c <_strtod_l+0x9ac>
 8023f92:	ee19 3a10 	vmov	r3, s18
 8023f96:	3301      	adds	r3, #1
 8023f98:	f43f ad3a 	beq.w	8023a10 <_strtod_l+0x420>
 8023f9c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8024110 <_strtod_l+0xb20>
 8023fa0:	f04f 3aff 	mov.w	sl, #4294967295
 8023fa4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023fa6:	9805      	ldr	r0, [sp, #20]
 8023fa8:	f7fe fe96 	bl	8022cd8 <_Bfree>
 8023fac:	9805      	ldr	r0, [sp, #20]
 8023fae:	4631      	mov	r1, r6
 8023fb0:	f7fe fe92 	bl	8022cd8 <_Bfree>
 8023fb4:	9805      	ldr	r0, [sp, #20]
 8023fb6:	4629      	mov	r1, r5
 8023fb8:	f7fe fe8e 	bl	8022cd8 <_Bfree>
 8023fbc:	9805      	ldr	r0, [sp, #20]
 8023fbe:	4621      	mov	r1, r4
 8023fc0:	f7fe fe8a 	bl	8022cd8 <_Bfree>
 8023fc4:	e625      	b.n	8023c12 <_strtod_l+0x622>
 8023fc6:	f1ba 0f01 	cmp.w	sl, #1
 8023fca:	d103      	bne.n	8023fd4 <_strtod_l+0x9e4>
 8023fcc:	f1bb 0f00 	cmp.w	fp, #0
 8023fd0:	f43f adb2 	beq.w	8023b38 <_strtod_l+0x548>
 8023fd4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8023fd8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8023fdc:	e7b8      	b.n	8023f50 <_strtod_l+0x960>
 8023fde:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8023fe2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8023fe6:	f1b8 0f00 	cmp.w	r8, #0
 8023fea:	d0af      	beq.n	8023f4c <_strtod_l+0x95c>
 8023fec:	eeb0 ab48 	vmov.f64	d10, d8
 8023ff0:	e7ae      	b.n	8023f50 <_strtod_l+0x960>
 8023ff2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8023ff6:	eeb0 8b4a 	vmov.f64	d8, d10
 8023ffa:	e7a9      	b.n	8023f50 <_strtod_l+0x960>
 8023ffc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8024000:	e7a6      	b.n	8023f50 <_strtod_l+0x960>
 8024002:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8024006:	9b06      	ldr	r3, [sp, #24]
 8024008:	46d9      	mov	r9, fp
 802400a:	2b00      	cmp	r3, #0
 802400c:	d1ca      	bne.n	8023fa4 <_strtod_l+0x9b4>
 802400e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8024012:	0d1b      	lsrs	r3, r3, #20
 8024014:	051b      	lsls	r3, r3, #20
 8024016:	429f      	cmp	r7, r3
 8024018:	d1c4      	bne.n	8023fa4 <_strtod_l+0x9b4>
 802401a:	ec51 0b18 	vmov	r0, r1, d8
 802401e:	f7dc fbeb 	bl	80007f8 <__aeabi_d2lz>
 8024022:	f7dc fb53 	bl	80006cc <__aeabi_l2d>
 8024026:	f3cb 0913 	ubfx	r9, fp, #0, #20
 802402a:	ec41 0b17 	vmov	d7, r0, r1
 802402e:	ea49 090a 	orr.w	r9, r9, sl
 8024032:	ea59 0908 	orrs.w	r9, r9, r8
 8024036:	ee38 8b47 	vsub.f64	d8, d8, d7
 802403a:	d03c      	beq.n	80240b6 <_strtod_l+0xac6>
 802403c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80240f0 <_strtod_l+0xb00>
 8024040:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8024044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024048:	f53f aced 	bmi.w	8023a26 <_strtod_l+0x436>
 802404c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80240f8 <_strtod_l+0xb08>
 8024050:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8024054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024058:	dda4      	ble.n	8023fa4 <_strtod_l+0x9b4>
 802405a:	e4e4      	b.n	8023a26 <_strtod_l+0x436>
 802405c:	9906      	ldr	r1, [sp, #24]
 802405e:	b1e1      	cbz	r1, 802409a <_strtod_l+0xaaa>
 8024060:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8024064:	d819      	bhi.n	802409a <_strtod_l+0xaaa>
 8024066:	eeb4 8bcb 	vcmpe.f64	d8, d11
 802406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802406e:	d811      	bhi.n	8024094 <_strtod_l+0xaa4>
 8024070:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8024074:	ee18 3a10 	vmov	r3, s16
 8024078:	2b01      	cmp	r3, #1
 802407a:	bf38      	it	cc
 802407c:	2301      	movcc	r3, #1
 802407e:	ee08 3a10 	vmov	s16, r3
 8024082:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8024086:	f1b8 0f00 	cmp.w	r8, #0
 802408a:	d111      	bne.n	80240b0 <_strtod_l+0xac0>
 802408c:	eeb1 7b48 	vneg.f64	d7, d8
 8024090:	ec53 2b17 	vmov	r2, r3, d7
 8024094:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8024098:	1bcb      	subs	r3, r1, r7
 802409a:	eeb0 0b49 	vmov.f64	d0, d9
 802409e:	ec43 2b1a 	vmov	d10, r2, r3
 80240a2:	f7ff f94d 	bl	8023340 <__ulp>
 80240a6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80240aa:	ec5b ab19 	vmov	sl, fp, d9
 80240ae:	e7aa      	b.n	8024006 <_strtod_l+0xa16>
 80240b0:	eeb0 7b48 	vmov.f64	d7, d8
 80240b4:	e7ec      	b.n	8024090 <_strtod_l+0xaa0>
 80240b6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8024100 <_strtod_l+0xb10>
 80240ba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80240be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240c2:	f57f af6f 	bpl.w	8023fa4 <_strtod_l+0x9b4>
 80240c6:	e4ae      	b.n	8023a26 <_strtod_l+0x436>
 80240c8:	2300      	movs	r3, #0
 80240ca:	9308      	str	r3, [sp, #32]
 80240cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80240ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80240d0:	6013      	str	r3, [r2, #0]
 80240d2:	f7ff bacc 	b.w	802366e <_strtod_l+0x7e>
 80240d6:	2a65      	cmp	r2, #101	@ 0x65
 80240d8:	f43f abbc 	beq.w	8023854 <_strtod_l+0x264>
 80240dc:	2a45      	cmp	r2, #69	@ 0x45
 80240de:	f43f abb9 	beq.w	8023854 <_strtod_l+0x264>
 80240e2:	2301      	movs	r3, #1
 80240e4:	9306      	str	r3, [sp, #24]
 80240e6:	f7ff bbf0 	b.w	80238ca <_strtod_l+0x2da>
 80240ea:	bf00      	nop
 80240ec:	f3af 8000 	nop.w
 80240f0:	94a03595 	.word	0x94a03595
 80240f4:	3fdfffff 	.word	0x3fdfffff
 80240f8:	35afe535 	.word	0x35afe535
 80240fc:	3fe00000 	.word	0x3fe00000
 8024100:	94a03595 	.word	0x94a03595
 8024104:	3fcfffff 	.word	0x3fcfffff
 8024108:	000fffff 	.word	0x000fffff
 802410c:	7ff00000 	.word	0x7ff00000
 8024110:	7fefffff 	.word	0x7fefffff
 8024114:	7fe00000 	.word	0x7fe00000
 8024118:	7c9fffff 	.word	0x7c9fffff

0802411c <_strtod_r>:
 802411c:	4b01      	ldr	r3, [pc, #4]	@ (8024124 <_strtod_r+0x8>)
 802411e:	f7ff ba67 	b.w	80235f0 <_strtod_l>
 8024122:	bf00      	nop
 8024124:	24000800 	.word	0x24000800

08024128 <__ssputs_r>:
 8024128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802412c:	688e      	ldr	r6, [r1, #8]
 802412e:	461f      	mov	r7, r3
 8024130:	42be      	cmp	r6, r7
 8024132:	680b      	ldr	r3, [r1, #0]
 8024134:	4682      	mov	sl, r0
 8024136:	460c      	mov	r4, r1
 8024138:	4690      	mov	r8, r2
 802413a:	d82d      	bhi.n	8024198 <__ssputs_r+0x70>
 802413c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8024140:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8024144:	d026      	beq.n	8024194 <__ssputs_r+0x6c>
 8024146:	6965      	ldr	r5, [r4, #20]
 8024148:	6909      	ldr	r1, [r1, #16]
 802414a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802414e:	eba3 0901 	sub.w	r9, r3, r1
 8024152:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024156:	1c7b      	adds	r3, r7, #1
 8024158:	444b      	add	r3, r9
 802415a:	106d      	asrs	r5, r5, #1
 802415c:	429d      	cmp	r5, r3
 802415e:	bf38      	it	cc
 8024160:	461d      	movcc	r5, r3
 8024162:	0553      	lsls	r3, r2, #21
 8024164:	d527      	bpl.n	80241b6 <__ssputs_r+0x8e>
 8024166:	4629      	mov	r1, r5
 8024168:	f7fc fbd8 	bl	802091c <_malloc_r>
 802416c:	4606      	mov	r6, r0
 802416e:	b360      	cbz	r0, 80241ca <__ssputs_r+0xa2>
 8024170:	6921      	ldr	r1, [r4, #16]
 8024172:	464a      	mov	r2, r9
 8024174:	f7fd ff2b 	bl	8021fce <memcpy>
 8024178:	89a3      	ldrh	r3, [r4, #12]
 802417a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802417e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024182:	81a3      	strh	r3, [r4, #12]
 8024184:	6126      	str	r6, [r4, #16]
 8024186:	6165      	str	r5, [r4, #20]
 8024188:	444e      	add	r6, r9
 802418a:	eba5 0509 	sub.w	r5, r5, r9
 802418e:	6026      	str	r6, [r4, #0]
 8024190:	60a5      	str	r5, [r4, #8]
 8024192:	463e      	mov	r6, r7
 8024194:	42be      	cmp	r6, r7
 8024196:	d900      	bls.n	802419a <__ssputs_r+0x72>
 8024198:	463e      	mov	r6, r7
 802419a:	6820      	ldr	r0, [r4, #0]
 802419c:	4632      	mov	r2, r6
 802419e:	4641      	mov	r1, r8
 80241a0:	f7fd fe06 	bl	8021db0 <memmove>
 80241a4:	68a3      	ldr	r3, [r4, #8]
 80241a6:	1b9b      	subs	r3, r3, r6
 80241a8:	60a3      	str	r3, [r4, #8]
 80241aa:	6823      	ldr	r3, [r4, #0]
 80241ac:	4433      	add	r3, r6
 80241ae:	6023      	str	r3, [r4, #0]
 80241b0:	2000      	movs	r0, #0
 80241b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80241b6:	462a      	mov	r2, r5
 80241b8:	f000 ff4d 	bl	8025056 <_realloc_r>
 80241bc:	4606      	mov	r6, r0
 80241be:	2800      	cmp	r0, #0
 80241c0:	d1e0      	bne.n	8024184 <__ssputs_r+0x5c>
 80241c2:	6921      	ldr	r1, [r4, #16]
 80241c4:	4650      	mov	r0, sl
 80241c6:	f7fe fcfd 	bl	8022bc4 <_free_r>
 80241ca:	230c      	movs	r3, #12
 80241cc:	f8ca 3000 	str.w	r3, [sl]
 80241d0:	89a3      	ldrh	r3, [r4, #12]
 80241d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80241d6:	81a3      	strh	r3, [r4, #12]
 80241d8:	f04f 30ff 	mov.w	r0, #4294967295
 80241dc:	e7e9      	b.n	80241b2 <__ssputs_r+0x8a>
	...

080241e0 <_svfiprintf_r>:
 80241e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241e4:	4698      	mov	r8, r3
 80241e6:	898b      	ldrh	r3, [r1, #12]
 80241e8:	061b      	lsls	r3, r3, #24
 80241ea:	b09d      	sub	sp, #116	@ 0x74
 80241ec:	4607      	mov	r7, r0
 80241ee:	460d      	mov	r5, r1
 80241f0:	4614      	mov	r4, r2
 80241f2:	d510      	bpl.n	8024216 <_svfiprintf_r+0x36>
 80241f4:	690b      	ldr	r3, [r1, #16]
 80241f6:	b973      	cbnz	r3, 8024216 <_svfiprintf_r+0x36>
 80241f8:	2140      	movs	r1, #64	@ 0x40
 80241fa:	f7fc fb8f 	bl	802091c <_malloc_r>
 80241fe:	6028      	str	r0, [r5, #0]
 8024200:	6128      	str	r0, [r5, #16]
 8024202:	b930      	cbnz	r0, 8024212 <_svfiprintf_r+0x32>
 8024204:	230c      	movs	r3, #12
 8024206:	603b      	str	r3, [r7, #0]
 8024208:	f04f 30ff 	mov.w	r0, #4294967295
 802420c:	b01d      	add	sp, #116	@ 0x74
 802420e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024212:	2340      	movs	r3, #64	@ 0x40
 8024214:	616b      	str	r3, [r5, #20]
 8024216:	2300      	movs	r3, #0
 8024218:	9309      	str	r3, [sp, #36]	@ 0x24
 802421a:	2320      	movs	r3, #32
 802421c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8024220:	f8cd 800c 	str.w	r8, [sp, #12]
 8024224:	2330      	movs	r3, #48	@ 0x30
 8024226:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80243c4 <_svfiprintf_r+0x1e4>
 802422a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802422e:	f04f 0901 	mov.w	r9, #1
 8024232:	4623      	mov	r3, r4
 8024234:	469a      	mov	sl, r3
 8024236:	f813 2b01 	ldrb.w	r2, [r3], #1
 802423a:	b10a      	cbz	r2, 8024240 <_svfiprintf_r+0x60>
 802423c:	2a25      	cmp	r2, #37	@ 0x25
 802423e:	d1f9      	bne.n	8024234 <_svfiprintf_r+0x54>
 8024240:	ebba 0b04 	subs.w	fp, sl, r4
 8024244:	d00b      	beq.n	802425e <_svfiprintf_r+0x7e>
 8024246:	465b      	mov	r3, fp
 8024248:	4622      	mov	r2, r4
 802424a:	4629      	mov	r1, r5
 802424c:	4638      	mov	r0, r7
 802424e:	f7ff ff6b 	bl	8024128 <__ssputs_r>
 8024252:	3001      	adds	r0, #1
 8024254:	f000 80a7 	beq.w	80243a6 <_svfiprintf_r+0x1c6>
 8024258:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802425a:	445a      	add	r2, fp
 802425c:	9209      	str	r2, [sp, #36]	@ 0x24
 802425e:	f89a 3000 	ldrb.w	r3, [sl]
 8024262:	2b00      	cmp	r3, #0
 8024264:	f000 809f 	beq.w	80243a6 <_svfiprintf_r+0x1c6>
 8024268:	2300      	movs	r3, #0
 802426a:	f04f 32ff 	mov.w	r2, #4294967295
 802426e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024272:	f10a 0a01 	add.w	sl, sl, #1
 8024276:	9304      	str	r3, [sp, #16]
 8024278:	9307      	str	r3, [sp, #28]
 802427a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802427e:	931a      	str	r3, [sp, #104]	@ 0x68
 8024280:	4654      	mov	r4, sl
 8024282:	2205      	movs	r2, #5
 8024284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024288:	484e      	ldr	r0, [pc, #312]	@ (80243c4 <_svfiprintf_r+0x1e4>)
 802428a:	f7dc f839 	bl	8000300 <memchr>
 802428e:	9a04      	ldr	r2, [sp, #16]
 8024290:	b9d8      	cbnz	r0, 80242ca <_svfiprintf_r+0xea>
 8024292:	06d0      	lsls	r0, r2, #27
 8024294:	bf44      	itt	mi
 8024296:	2320      	movmi	r3, #32
 8024298:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802429c:	0711      	lsls	r1, r2, #28
 802429e:	bf44      	itt	mi
 80242a0:	232b      	movmi	r3, #43	@ 0x2b
 80242a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80242a6:	f89a 3000 	ldrb.w	r3, [sl]
 80242aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80242ac:	d015      	beq.n	80242da <_svfiprintf_r+0xfa>
 80242ae:	9a07      	ldr	r2, [sp, #28]
 80242b0:	4654      	mov	r4, sl
 80242b2:	2000      	movs	r0, #0
 80242b4:	f04f 0c0a 	mov.w	ip, #10
 80242b8:	4621      	mov	r1, r4
 80242ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80242be:	3b30      	subs	r3, #48	@ 0x30
 80242c0:	2b09      	cmp	r3, #9
 80242c2:	d94b      	bls.n	802435c <_svfiprintf_r+0x17c>
 80242c4:	b1b0      	cbz	r0, 80242f4 <_svfiprintf_r+0x114>
 80242c6:	9207      	str	r2, [sp, #28]
 80242c8:	e014      	b.n	80242f4 <_svfiprintf_r+0x114>
 80242ca:	eba0 0308 	sub.w	r3, r0, r8
 80242ce:	fa09 f303 	lsl.w	r3, r9, r3
 80242d2:	4313      	orrs	r3, r2
 80242d4:	9304      	str	r3, [sp, #16]
 80242d6:	46a2      	mov	sl, r4
 80242d8:	e7d2      	b.n	8024280 <_svfiprintf_r+0xa0>
 80242da:	9b03      	ldr	r3, [sp, #12]
 80242dc:	1d19      	adds	r1, r3, #4
 80242de:	681b      	ldr	r3, [r3, #0]
 80242e0:	9103      	str	r1, [sp, #12]
 80242e2:	2b00      	cmp	r3, #0
 80242e4:	bfbb      	ittet	lt
 80242e6:	425b      	neglt	r3, r3
 80242e8:	f042 0202 	orrlt.w	r2, r2, #2
 80242ec:	9307      	strge	r3, [sp, #28]
 80242ee:	9307      	strlt	r3, [sp, #28]
 80242f0:	bfb8      	it	lt
 80242f2:	9204      	strlt	r2, [sp, #16]
 80242f4:	7823      	ldrb	r3, [r4, #0]
 80242f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80242f8:	d10a      	bne.n	8024310 <_svfiprintf_r+0x130>
 80242fa:	7863      	ldrb	r3, [r4, #1]
 80242fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80242fe:	d132      	bne.n	8024366 <_svfiprintf_r+0x186>
 8024300:	9b03      	ldr	r3, [sp, #12]
 8024302:	1d1a      	adds	r2, r3, #4
 8024304:	681b      	ldr	r3, [r3, #0]
 8024306:	9203      	str	r2, [sp, #12]
 8024308:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802430c:	3402      	adds	r4, #2
 802430e:	9305      	str	r3, [sp, #20]
 8024310:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80243d4 <_svfiprintf_r+0x1f4>
 8024314:	7821      	ldrb	r1, [r4, #0]
 8024316:	2203      	movs	r2, #3
 8024318:	4650      	mov	r0, sl
 802431a:	f7db fff1 	bl	8000300 <memchr>
 802431e:	b138      	cbz	r0, 8024330 <_svfiprintf_r+0x150>
 8024320:	9b04      	ldr	r3, [sp, #16]
 8024322:	eba0 000a 	sub.w	r0, r0, sl
 8024326:	2240      	movs	r2, #64	@ 0x40
 8024328:	4082      	lsls	r2, r0
 802432a:	4313      	orrs	r3, r2
 802432c:	3401      	adds	r4, #1
 802432e:	9304      	str	r3, [sp, #16]
 8024330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024334:	4824      	ldr	r0, [pc, #144]	@ (80243c8 <_svfiprintf_r+0x1e8>)
 8024336:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802433a:	2206      	movs	r2, #6
 802433c:	f7db ffe0 	bl	8000300 <memchr>
 8024340:	2800      	cmp	r0, #0
 8024342:	d036      	beq.n	80243b2 <_svfiprintf_r+0x1d2>
 8024344:	4b21      	ldr	r3, [pc, #132]	@ (80243cc <_svfiprintf_r+0x1ec>)
 8024346:	bb1b      	cbnz	r3, 8024390 <_svfiprintf_r+0x1b0>
 8024348:	9b03      	ldr	r3, [sp, #12]
 802434a:	3307      	adds	r3, #7
 802434c:	f023 0307 	bic.w	r3, r3, #7
 8024350:	3308      	adds	r3, #8
 8024352:	9303      	str	r3, [sp, #12]
 8024354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024356:	4433      	add	r3, r6
 8024358:	9309      	str	r3, [sp, #36]	@ 0x24
 802435a:	e76a      	b.n	8024232 <_svfiprintf_r+0x52>
 802435c:	fb0c 3202 	mla	r2, ip, r2, r3
 8024360:	460c      	mov	r4, r1
 8024362:	2001      	movs	r0, #1
 8024364:	e7a8      	b.n	80242b8 <_svfiprintf_r+0xd8>
 8024366:	2300      	movs	r3, #0
 8024368:	3401      	adds	r4, #1
 802436a:	9305      	str	r3, [sp, #20]
 802436c:	4619      	mov	r1, r3
 802436e:	f04f 0c0a 	mov.w	ip, #10
 8024372:	4620      	mov	r0, r4
 8024374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024378:	3a30      	subs	r2, #48	@ 0x30
 802437a:	2a09      	cmp	r2, #9
 802437c:	d903      	bls.n	8024386 <_svfiprintf_r+0x1a6>
 802437e:	2b00      	cmp	r3, #0
 8024380:	d0c6      	beq.n	8024310 <_svfiprintf_r+0x130>
 8024382:	9105      	str	r1, [sp, #20]
 8024384:	e7c4      	b.n	8024310 <_svfiprintf_r+0x130>
 8024386:	fb0c 2101 	mla	r1, ip, r1, r2
 802438a:	4604      	mov	r4, r0
 802438c:	2301      	movs	r3, #1
 802438e:	e7f0      	b.n	8024372 <_svfiprintf_r+0x192>
 8024390:	ab03      	add	r3, sp, #12
 8024392:	9300      	str	r3, [sp, #0]
 8024394:	462a      	mov	r2, r5
 8024396:	4b0e      	ldr	r3, [pc, #56]	@ (80243d0 <_svfiprintf_r+0x1f0>)
 8024398:	a904      	add	r1, sp, #16
 802439a:	4638      	mov	r0, r7
 802439c:	f7fc fccc 	bl	8020d38 <_printf_float>
 80243a0:	1c42      	adds	r2, r0, #1
 80243a2:	4606      	mov	r6, r0
 80243a4:	d1d6      	bne.n	8024354 <_svfiprintf_r+0x174>
 80243a6:	89ab      	ldrh	r3, [r5, #12]
 80243a8:	065b      	lsls	r3, r3, #25
 80243aa:	f53f af2d 	bmi.w	8024208 <_svfiprintf_r+0x28>
 80243ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80243b0:	e72c      	b.n	802420c <_svfiprintf_r+0x2c>
 80243b2:	ab03      	add	r3, sp, #12
 80243b4:	9300      	str	r3, [sp, #0]
 80243b6:	462a      	mov	r2, r5
 80243b8:	4b05      	ldr	r3, [pc, #20]	@ (80243d0 <_svfiprintf_r+0x1f0>)
 80243ba:	a904      	add	r1, sp, #16
 80243bc:	4638      	mov	r0, r7
 80243be:	f7fc ff43 	bl	8021248 <_printf_i>
 80243c2:	e7ed      	b.n	80243a0 <_svfiprintf_r+0x1c0>
 80243c4:	080356a8 	.word	0x080356a8
 80243c8:	080356b2 	.word	0x080356b2
 80243cc:	08020d39 	.word	0x08020d39
 80243d0:	08024129 	.word	0x08024129
 80243d4:	080356ae 	.word	0x080356ae

080243d8 <__sfputc_r>:
 80243d8:	6893      	ldr	r3, [r2, #8]
 80243da:	3b01      	subs	r3, #1
 80243dc:	2b00      	cmp	r3, #0
 80243de:	b410      	push	{r4}
 80243e0:	6093      	str	r3, [r2, #8]
 80243e2:	da08      	bge.n	80243f6 <__sfputc_r+0x1e>
 80243e4:	6994      	ldr	r4, [r2, #24]
 80243e6:	42a3      	cmp	r3, r4
 80243e8:	db01      	blt.n	80243ee <__sfputc_r+0x16>
 80243ea:	290a      	cmp	r1, #10
 80243ec:	d103      	bne.n	80243f6 <__sfputc_r+0x1e>
 80243ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80243f2:	f7fd bc38 	b.w	8021c66 <__swbuf_r>
 80243f6:	6813      	ldr	r3, [r2, #0]
 80243f8:	1c58      	adds	r0, r3, #1
 80243fa:	6010      	str	r0, [r2, #0]
 80243fc:	7019      	strb	r1, [r3, #0]
 80243fe:	4608      	mov	r0, r1
 8024400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024404:	4770      	bx	lr

08024406 <__sfputs_r>:
 8024406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024408:	4606      	mov	r6, r0
 802440a:	460f      	mov	r7, r1
 802440c:	4614      	mov	r4, r2
 802440e:	18d5      	adds	r5, r2, r3
 8024410:	42ac      	cmp	r4, r5
 8024412:	d101      	bne.n	8024418 <__sfputs_r+0x12>
 8024414:	2000      	movs	r0, #0
 8024416:	e007      	b.n	8024428 <__sfputs_r+0x22>
 8024418:	f814 1b01 	ldrb.w	r1, [r4], #1
 802441c:	463a      	mov	r2, r7
 802441e:	4630      	mov	r0, r6
 8024420:	f7ff ffda 	bl	80243d8 <__sfputc_r>
 8024424:	1c43      	adds	r3, r0, #1
 8024426:	d1f3      	bne.n	8024410 <__sfputs_r+0xa>
 8024428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802442c <_vfiprintf_r>:
 802442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024430:	460d      	mov	r5, r1
 8024432:	b09d      	sub	sp, #116	@ 0x74
 8024434:	4614      	mov	r4, r2
 8024436:	4698      	mov	r8, r3
 8024438:	4606      	mov	r6, r0
 802443a:	b118      	cbz	r0, 8024444 <_vfiprintf_r+0x18>
 802443c:	6a03      	ldr	r3, [r0, #32]
 802443e:	b90b      	cbnz	r3, 8024444 <_vfiprintf_r+0x18>
 8024440:	f7fd faba 	bl	80219b8 <__sinit>
 8024444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024446:	07d9      	lsls	r1, r3, #31
 8024448:	d405      	bmi.n	8024456 <_vfiprintf_r+0x2a>
 802444a:	89ab      	ldrh	r3, [r5, #12]
 802444c:	059a      	lsls	r2, r3, #22
 802444e:	d402      	bmi.n	8024456 <_vfiprintf_r+0x2a>
 8024450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024452:	f7fd fdb2 	bl	8021fba <__retarget_lock_acquire_recursive>
 8024456:	89ab      	ldrh	r3, [r5, #12]
 8024458:	071b      	lsls	r3, r3, #28
 802445a:	d501      	bpl.n	8024460 <_vfiprintf_r+0x34>
 802445c:	692b      	ldr	r3, [r5, #16]
 802445e:	b99b      	cbnz	r3, 8024488 <_vfiprintf_r+0x5c>
 8024460:	4629      	mov	r1, r5
 8024462:	4630      	mov	r0, r6
 8024464:	f7fd fc3e 	bl	8021ce4 <__swsetup_r>
 8024468:	b170      	cbz	r0, 8024488 <_vfiprintf_r+0x5c>
 802446a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802446c:	07dc      	lsls	r4, r3, #31
 802446e:	d504      	bpl.n	802447a <_vfiprintf_r+0x4e>
 8024470:	f04f 30ff 	mov.w	r0, #4294967295
 8024474:	b01d      	add	sp, #116	@ 0x74
 8024476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802447a:	89ab      	ldrh	r3, [r5, #12]
 802447c:	0598      	lsls	r0, r3, #22
 802447e:	d4f7      	bmi.n	8024470 <_vfiprintf_r+0x44>
 8024480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024482:	f7fd fd9b 	bl	8021fbc <__retarget_lock_release_recursive>
 8024486:	e7f3      	b.n	8024470 <_vfiprintf_r+0x44>
 8024488:	2300      	movs	r3, #0
 802448a:	9309      	str	r3, [sp, #36]	@ 0x24
 802448c:	2320      	movs	r3, #32
 802448e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8024492:	f8cd 800c 	str.w	r8, [sp, #12]
 8024496:	2330      	movs	r3, #48	@ 0x30
 8024498:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8024648 <_vfiprintf_r+0x21c>
 802449c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80244a0:	f04f 0901 	mov.w	r9, #1
 80244a4:	4623      	mov	r3, r4
 80244a6:	469a      	mov	sl, r3
 80244a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80244ac:	b10a      	cbz	r2, 80244b2 <_vfiprintf_r+0x86>
 80244ae:	2a25      	cmp	r2, #37	@ 0x25
 80244b0:	d1f9      	bne.n	80244a6 <_vfiprintf_r+0x7a>
 80244b2:	ebba 0b04 	subs.w	fp, sl, r4
 80244b6:	d00b      	beq.n	80244d0 <_vfiprintf_r+0xa4>
 80244b8:	465b      	mov	r3, fp
 80244ba:	4622      	mov	r2, r4
 80244bc:	4629      	mov	r1, r5
 80244be:	4630      	mov	r0, r6
 80244c0:	f7ff ffa1 	bl	8024406 <__sfputs_r>
 80244c4:	3001      	adds	r0, #1
 80244c6:	f000 80a7 	beq.w	8024618 <_vfiprintf_r+0x1ec>
 80244ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80244cc:	445a      	add	r2, fp
 80244ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80244d0:	f89a 3000 	ldrb.w	r3, [sl]
 80244d4:	2b00      	cmp	r3, #0
 80244d6:	f000 809f 	beq.w	8024618 <_vfiprintf_r+0x1ec>
 80244da:	2300      	movs	r3, #0
 80244dc:	f04f 32ff 	mov.w	r2, #4294967295
 80244e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80244e4:	f10a 0a01 	add.w	sl, sl, #1
 80244e8:	9304      	str	r3, [sp, #16]
 80244ea:	9307      	str	r3, [sp, #28]
 80244ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80244f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80244f2:	4654      	mov	r4, sl
 80244f4:	2205      	movs	r2, #5
 80244f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80244fa:	4853      	ldr	r0, [pc, #332]	@ (8024648 <_vfiprintf_r+0x21c>)
 80244fc:	f7db ff00 	bl	8000300 <memchr>
 8024500:	9a04      	ldr	r2, [sp, #16]
 8024502:	b9d8      	cbnz	r0, 802453c <_vfiprintf_r+0x110>
 8024504:	06d1      	lsls	r1, r2, #27
 8024506:	bf44      	itt	mi
 8024508:	2320      	movmi	r3, #32
 802450a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802450e:	0713      	lsls	r3, r2, #28
 8024510:	bf44      	itt	mi
 8024512:	232b      	movmi	r3, #43	@ 0x2b
 8024514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024518:	f89a 3000 	ldrb.w	r3, [sl]
 802451c:	2b2a      	cmp	r3, #42	@ 0x2a
 802451e:	d015      	beq.n	802454c <_vfiprintf_r+0x120>
 8024520:	9a07      	ldr	r2, [sp, #28]
 8024522:	4654      	mov	r4, sl
 8024524:	2000      	movs	r0, #0
 8024526:	f04f 0c0a 	mov.w	ip, #10
 802452a:	4621      	mov	r1, r4
 802452c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024530:	3b30      	subs	r3, #48	@ 0x30
 8024532:	2b09      	cmp	r3, #9
 8024534:	d94b      	bls.n	80245ce <_vfiprintf_r+0x1a2>
 8024536:	b1b0      	cbz	r0, 8024566 <_vfiprintf_r+0x13a>
 8024538:	9207      	str	r2, [sp, #28]
 802453a:	e014      	b.n	8024566 <_vfiprintf_r+0x13a>
 802453c:	eba0 0308 	sub.w	r3, r0, r8
 8024540:	fa09 f303 	lsl.w	r3, r9, r3
 8024544:	4313      	orrs	r3, r2
 8024546:	9304      	str	r3, [sp, #16]
 8024548:	46a2      	mov	sl, r4
 802454a:	e7d2      	b.n	80244f2 <_vfiprintf_r+0xc6>
 802454c:	9b03      	ldr	r3, [sp, #12]
 802454e:	1d19      	adds	r1, r3, #4
 8024550:	681b      	ldr	r3, [r3, #0]
 8024552:	9103      	str	r1, [sp, #12]
 8024554:	2b00      	cmp	r3, #0
 8024556:	bfbb      	ittet	lt
 8024558:	425b      	neglt	r3, r3
 802455a:	f042 0202 	orrlt.w	r2, r2, #2
 802455e:	9307      	strge	r3, [sp, #28]
 8024560:	9307      	strlt	r3, [sp, #28]
 8024562:	bfb8      	it	lt
 8024564:	9204      	strlt	r2, [sp, #16]
 8024566:	7823      	ldrb	r3, [r4, #0]
 8024568:	2b2e      	cmp	r3, #46	@ 0x2e
 802456a:	d10a      	bne.n	8024582 <_vfiprintf_r+0x156>
 802456c:	7863      	ldrb	r3, [r4, #1]
 802456e:	2b2a      	cmp	r3, #42	@ 0x2a
 8024570:	d132      	bne.n	80245d8 <_vfiprintf_r+0x1ac>
 8024572:	9b03      	ldr	r3, [sp, #12]
 8024574:	1d1a      	adds	r2, r3, #4
 8024576:	681b      	ldr	r3, [r3, #0]
 8024578:	9203      	str	r2, [sp, #12]
 802457a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802457e:	3402      	adds	r4, #2
 8024580:	9305      	str	r3, [sp, #20]
 8024582:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8024658 <_vfiprintf_r+0x22c>
 8024586:	7821      	ldrb	r1, [r4, #0]
 8024588:	2203      	movs	r2, #3
 802458a:	4650      	mov	r0, sl
 802458c:	f7db feb8 	bl	8000300 <memchr>
 8024590:	b138      	cbz	r0, 80245a2 <_vfiprintf_r+0x176>
 8024592:	9b04      	ldr	r3, [sp, #16]
 8024594:	eba0 000a 	sub.w	r0, r0, sl
 8024598:	2240      	movs	r2, #64	@ 0x40
 802459a:	4082      	lsls	r2, r0
 802459c:	4313      	orrs	r3, r2
 802459e:	3401      	adds	r4, #1
 80245a0:	9304      	str	r3, [sp, #16]
 80245a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80245a6:	4829      	ldr	r0, [pc, #164]	@ (802464c <_vfiprintf_r+0x220>)
 80245a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80245ac:	2206      	movs	r2, #6
 80245ae:	f7db fea7 	bl	8000300 <memchr>
 80245b2:	2800      	cmp	r0, #0
 80245b4:	d03f      	beq.n	8024636 <_vfiprintf_r+0x20a>
 80245b6:	4b26      	ldr	r3, [pc, #152]	@ (8024650 <_vfiprintf_r+0x224>)
 80245b8:	bb1b      	cbnz	r3, 8024602 <_vfiprintf_r+0x1d6>
 80245ba:	9b03      	ldr	r3, [sp, #12]
 80245bc:	3307      	adds	r3, #7
 80245be:	f023 0307 	bic.w	r3, r3, #7
 80245c2:	3308      	adds	r3, #8
 80245c4:	9303      	str	r3, [sp, #12]
 80245c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80245c8:	443b      	add	r3, r7
 80245ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80245cc:	e76a      	b.n	80244a4 <_vfiprintf_r+0x78>
 80245ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80245d2:	460c      	mov	r4, r1
 80245d4:	2001      	movs	r0, #1
 80245d6:	e7a8      	b.n	802452a <_vfiprintf_r+0xfe>
 80245d8:	2300      	movs	r3, #0
 80245da:	3401      	adds	r4, #1
 80245dc:	9305      	str	r3, [sp, #20]
 80245de:	4619      	mov	r1, r3
 80245e0:	f04f 0c0a 	mov.w	ip, #10
 80245e4:	4620      	mov	r0, r4
 80245e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80245ea:	3a30      	subs	r2, #48	@ 0x30
 80245ec:	2a09      	cmp	r2, #9
 80245ee:	d903      	bls.n	80245f8 <_vfiprintf_r+0x1cc>
 80245f0:	2b00      	cmp	r3, #0
 80245f2:	d0c6      	beq.n	8024582 <_vfiprintf_r+0x156>
 80245f4:	9105      	str	r1, [sp, #20]
 80245f6:	e7c4      	b.n	8024582 <_vfiprintf_r+0x156>
 80245f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80245fc:	4604      	mov	r4, r0
 80245fe:	2301      	movs	r3, #1
 8024600:	e7f0      	b.n	80245e4 <_vfiprintf_r+0x1b8>
 8024602:	ab03      	add	r3, sp, #12
 8024604:	9300      	str	r3, [sp, #0]
 8024606:	462a      	mov	r2, r5
 8024608:	4b12      	ldr	r3, [pc, #72]	@ (8024654 <_vfiprintf_r+0x228>)
 802460a:	a904      	add	r1, sp, #16
 802460c:	4630      	mov	r0, r6
 802460e:	f7fc fb93 	bl	8020d38 <_printf_float>
 8024612:	4607      	mov	r7, r0
 8024614:	1c78      	adds	r0, r7, #1
 8024616:	d1d6      	bne.n	80245c6 <_vfiprintf_r+0x19a>
 8024618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802461a:	07d9      	lsls	r1, r3, #31
 802461c:	d405      	bmi.n	802462a <_vfiprintf_r+0x1fe>
 802461e:	89ab      	ldrh	r3, [r5, #12]
 8024620:	059a      	lsls	r2, r3, #22
 8024622:	d402      	bmi.n	802462a <_vfiprintf_r+0x1fe>
 8024624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024626:	f7fd fcc9 	bl	8021fbc <__retarget_lock_release_recursive>
 802462a:	89ab      	ldrh	r3, [r5, #12]
 802462c:	065b      	lsls	r3, r3, #25
 802462e:	f53f af1f 	bmi.w	8024470 <_vfiprintf_r+0x44>
 8024632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024634:	e71e      	b.n	8024474 <_vfiprintf_r+0x48>
 8024636:	ab03      	add	r3, sp, #12
 8024638:	9300      	str	r3, [sp, #0]
 802463a:	462a      	mov	r2, r5
 802463c:	4b05      	ldr	r3, [pc, #20]	@ (8024654 <_vfiprintf_r+0x228>)
 802463e:	a904      	add	r1, sp, #16
 8024640:	4630      	mov	r0, r6
 8024642:	f7fc fe01 	bl	8021248 <_printf_i>
 8024646:	e7e4      	b.n	8024612 <_vfiprintf_r+0x1e6>
 8024648:	080356a8 	.word	0x080356a8
 802464c:	080356b2 	.word	0x080356b2
 8024650:	08020d39 	.word	0x08020d39
 8024654:	08024407 	.word	0x08024407
 8024658:	080356ae 	.word	0x080356ae

0802465c <__sflush_r>:
 802465c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8024660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024664:	0716      	lsls	r6, r2, #28
 8024666:	4605      	mov	r5, r0
 8024668:	460c      	mov	r4, r1
 802466a:	d454      	bmi.n	8024716 <__sflush_r+0xba>
 802466c:	684b      	ldr	r3, [r1, #4]
 802466e:	2b00      	cmp	r3, #0
 8024670:	dc02      	bgt.n	8024678 <__sflush_r+0x1c>
 8024672:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8024674:	2b00      	cmp	r3, #0
 8024676:	dd48      	ble.n	802470a <__sflush_r+0xae>
 8024678:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802467a:	2e00      	cmp	r6, #0
 802467c:	d045      	beq.n	802470a <__sflush_r+0xae>
 802467e:	2300      	movs	r3, #0
 8024680:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8024684:	682f      	ldr	r7, [r5, #0]
 8024686:	6a21      	ldr	r1, [r4, #32]
 8024688:	602b      	str	r3, [r5, #0]
 802468a:	d030      	beq.n	80246ee <__sflush_r+0x92>
 802468c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802468e:	89a3      	ldrh	r3, [r4, #12]
 8024690:	0759      	lsls	r1, r3, #29
 8024692:	d505      	bpl.n	80246a0 <__sflush_r+0x44>
 8024694:	6863      	ldr	r3, [r4, #4]
 8024696:	1ad2      	subs	r2, r2, r3
 8024698:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802469a:	b10b      	cbz	r3, 80246a0 <__sflush_r+0x44>
 802469c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802469e:	1ad2      	subs	r2, r2, r3
 80246a0:	2300      	movs	r3, #0
 80246a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80246a4:	6a21      	ldr	r1, [r4, #32]
 80246a6:	4628      	mov	r0, r5
 80246a8:	47b0      	blx	r6
 80246aa:	1c43      	adds	r3, r0, #1
 80246ac:	89a3      	ldrh	r3, [r4, #12]
 80246ae:	d106      	bne.n	80246be <__sflush_r+0x62>
 80246b0:	6829      	ldr	r1, [r5, #0]
 80246b2:	291d      	cmp	r1, #29
 80246b4:	d82b      	bhi.n	802470e <__sflush_r+0xb2>
 80246b6:	4a2a      	ldr	r2, [pc, #168]	@ (8024760 <__sflush_r+0x104>)
 80246b8:	410a      	asrs	r2, r1
 80246ba:	07d6      	lsls	r6, r2, #31
 80246bc:	d427      	bmi.n	802470e <__sflush_r+0xb2>
 80246be:	2200      	movs	r2, #0
 80246c0:	6062      	str	r2, [r4, #4]
 80246c2:	04d9      	lsls	r1, r3, #19
 80246c4:	6922      	ldr	r2, [r4, #16]
 80246c6:	6022      	str	r2, [r4, #0]
 80246c8:	d504      	bpl.n	80246d4 <__sflush_r+0x78>
 80246ca:	1c42      	adds	r2, r0, #1
 80246cc:	d101      	bne.n	80246d2 <__sflush_r+0x76>
 80246ce:	682b      	ldr	r3, [r5, #0]
 80246d0:	b903      	cbnz	r3, 80246d4 <__sflush_r+0x78>
 80246d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80246d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80246d6:	602f      	str	r7, [r5, #0]
 80246d8:	b1b9      	cbz	r1, 802470a <__sflush_r+0xae>
 80246da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80246de:	4299      	cmp	r1, r3
 80246e0:	d002      	beq.n	80246e8 <__sflush_r+0x8c>
 80246e2:	4628      	mov	r0, r5
 80246e4:	f7fe fa6e 	bl	8022bc4 <_free_r>
 80246e8:	2300      	movs	r3, #0
 80246ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80246ec:	e00d      	b.n	802470a <__sflush_r+0xae>
 80246ee:	2301      	movs	r3, #1
 80246f0:	4628      	mov	r0, r5
 80246f2:	47b0      	blx	r6
 80246f4:	4602      	mov	r2, r0
 80246f6:	1c50      	adds	r0, r2, #1
 80246f8:	d1c9      	bne.n	802468e <__sflush_r+0x32>
 80246fa:	682b      	ldr	r3, [r5, #0]
 80246fc:	2b00      	cmp	r3, #0
 80246fe:	d0c6      	beq.n	802468e <__sflush_r+0x32>
 8024700:	2b1d      	cmp	r3, #29
 8024702:	d001      	beq.n	8024708 <__sflush_r+0xac>
 8024704:	2b16      	cmp	r3, #22
 8024706:	d11e      	bne.n	8024746 <__sflush_r+0xea>
 8024708:	602f      	str	r7, [r5, #0]
 802470a:	2000      	movs	r0, #0
 802470c:	e022      	b.n	8024754 <__sflush_r+0xf8>
 802470e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024712:	b21b      	sxth	r3, r3
 8024714:	e01b      	b.n	802474e <__sflush_r+0xf2>
 8024716:	690f      	ldr	r7, [r1, #16]
 8024718:	2f00      	cmp	r7, #0
 802471a:	d0f6      	beq.n	802470a <__sflush_r+0xae>
 802471c:	0793      	lsls	r3, r2, #30
 802471e:	680e      	ldr	r6, [r1, #0]
 8024720:	bf08      	it	eq
 8024722:	694b      	ldreq	r3, [r1, #20]
 8024724:	600f      	str	r7, [r1, #0]
 8024726:	bf18      	it	ne
 8024728:	2300      	movne	r3, #0
 802472a:	eba6 0807 	sub.w	r8, r6, r7
 802472e:	608b      	str	r3, [r1, #8]
 8024730:	f1b8 0f00 	cmp.w	r8, #0
 8024734:	dde9      	ble.n	802470a <__sflush_r+0xae>
 8024736:	6a21      	ldr	r1, [r4, #32]
 8024738:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802473a:	4643      	mov	r3, r8
 802473c:	463a      	mov	r2, r7
 802473e:	4628      	mov	r0, r5
 8024740:	47b0      	blx	r6
 8024742:	2800      	cmp	r0, #0
 8024744:	dc08      	bgt.n	8024758 <__sflush_r+0xfc>
 8024746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802474a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802474e:	81a3      	strh	r3, [r4, #12]
 8024750:	f04f 30ff 	mov.w	r0, #4294967295
 8024754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024758:	4407      	add	r7, r0
 802475a:	eba8 0800 	sub.w	r8, r8, r0
 802475e:	e7e7      	b.n	8024730 <__sflush_r+0xd4>
 8024760:	dfbffffe 	.word	0xdfbffffe

08024764 <_fflush_r>:
 8024764:	b538      	push	{r3, r4, r5, lr}
 8024766:	690b      	ldr	r3, [r1, #16]
 8024768:	4605      	mov	r5, r0
 802476a:	460c      	mov	r4, r1
 802476c:	b913      	cbnz	r3, 8024774 <_fflush_r+0x10>
 802476e:	2500      	movs	r5, #0
 8024770:	4628      	mov	r0, r5
 8024772:	bd38      	pop	{r3, r4, r5, pc}
 8024774:	b118      	cbz	r0, 802477e <_fflush_r+0x1a>
 8024776:	6a03      	ldr	r3, [r0, #32]
 8024778:	b90b      	cbnz	r3, 802477e <_fflush_r+0x1a>
 802477a:	f7fd f91d 	bl	80219b8 <__sinit>
 802477e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024782:	2b00      	cmp	r3, #0
 8024784:	d0f3      	beq.n	802476e <_fflush_r+0xa>
 8024786:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8024788:	07d0      	lsls	r0, r2, #31
 802478a:	d404      	bmi.n	8024796 <_fflush_r+0x32>
 802478c:	0599      	lsls	r1, r3, #22
 802478e:	d402      	bmi.n	8024796 <_fflush_r+0x32>
 8024790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024792:	f7fd fc12 	bl	8021fba <__retarget_lock_acquire_recursive>
 8024796:	4628      	mov	r0, r5
 8024798:	4621      	mov	r1, r4
 802479a:	f7ff ff5f 	bl	802465c <__sflush_r>
 802479e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80247a0:	07da      	lsls	r2, r3, #31
 80247a2:	4605      	mov	r5, r0
 80247a4:	d4e4      	bmi.n	8024770 <_fflush_r+0xc>
 80247a6:	89a3      	ldrh	r3, [r4, #12]
 80247a8:	059b      	lsls	r3, r3, #22
 80247aa:	d4e1      	bmi.n	8024770 <_fflush_r+0xc>
 80247ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80247ae:	f7fd fc05 	bl	8021fbc <__retarget_lock_release_recursive>
 80247b2:	e7dd      	b.n	8024770 <_fflush_r+0xc>

080247b4 <__swhatbuf_r>:
 80247b4:	b570      	push	{r4, r5, r6, lr}
 80247b6:	460c      	mov	r4, r1
 80247b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80247bc:	2900      	cmp	r1, #0
 80247be:	b096      	sub	sp, #88	@ 0x58
 80247c0:	4615      	mov	r5, r2
 80247c2:	461e      	mov	r6, r3
 80247c4:	da0d      	bge.n	80247e2 <__swhatbuf_r+0x2e>
 80247c6:	89a3      	ldrh	r3, [r4, #12]
 80247c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80247cc:	f04f 0100 	mov.w	r1, #0
 80247d0:	bf14      	ite	ne
 80247d2:	2340      	movne	r3, #64	@ 0x40
 80247d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80247d8:	2000      	movs	r0, #0
 80247da:	6031      	str	r1, [r6, #0]
 80247dc:	602b      	str	r3, [r5, #0]
 80247de:	b016      	add	sp, #88	@ 0x58
 80247e0:	bd70      	pop	{r4, r5, r6, pc}
 80247e2:	466a      	mov	r2, sp
 80247e4:	f000 f8ac 	bl	8024940 <_fstat_r>
 80247e8:	2800      	cmp	r0, #0
 80247ea:	dbec      	blt.n	80247c6 <__swhatbuf_r+0x12>
 80247ec:	9901      	ldr	r1, [sp, #4]
 80247ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80247f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80247f6:	4259      	negs	r1, r3
 80247f8:	4159      	adcs	r1, r3
 80247fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80247fe:	e7eb      	b.n	80247d8 <__swhatbuf_r+0x24>

08024800 <__smakebuf_r>:
 8024800:	898b      	ldrh	r3, [r1, #12]
 8024802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024804:	079d      	lsls	r5, r3, #30
 8024806:	4606      	mov	r6, r0
 8024808:	460c      	mov	r4, r1
 802480a:	d507      	bpl.n	802481c <__smakebuf_r+0x1c>
 802480c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024810:	6023      	str	r3, [r4, #0]
 8024812:	6123      	str	r3, [r4, #16]
 8024814:	2301      	movs	r3, #1
 8024816:	6163      	str	r3, [r4, #20]
 8024818:	b003      	add	sp, #12
 802481a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802481c:	ab01      	add	r3, sp, #4
 802481e:	466a      	mov	r2, sp
 8024820:	f7ff ffc8 	bl	80247b4 <__swhatbuf_r>
 8024824:	9f00      	ldr	r7, [sp, #0]
 8024826:	4605      	mov	r5, r0
 8024828:	4639      	mov	r1, r7
 802482a:	4630      	mov	r0, r6
 802482c:	f7fc f876 	bl	802091c <_malloc_r>
 8024830:	b948      	cbnz	r0, 8024846 <__smakebuf_r+0x46>
 8024832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024836:	059a      	lsls	r2, r3, #22
 8024838:	d4ee      	bmi.n	8024818 <__smakebuf_r+0x18>
 802483a:	f023 0303 	bic.w	r3, r3, #3
 802483e:	f043 0302 	orr.w	r3, r3, #2
 8024842:	81a3      	strh	r3, [r4, #12]
 8024844:	e7e2      	b.n	802480c <__smakebuf_r+0xc>
 8024846:	89a3      	ldrh	r3, [r4, #12]
 8024848:	6020      	str	r0, [r4, #0]
 802484a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802484e:	81a3      	strh	r3, [r4, #12]
 8024850:	9b01      	ldr	r3, [sp, #4]
 8024852:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8024856:	b15b      	cbz	r3, 8024870 <__smakebuf_r+0x70>
 8024858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802485c:	4630      	mov	r0, r6
 802485e:	f000 f881 	bl	8024964 <_isatty_r>
 8024862:	b128      	cbz	r0, 8024870 <__smakebuf_r+0x70>
 8024864:	89a3      	ldrh	r3, [r4, #12]
 8024866:	f023 0303 	bic.w	r3, r3, #3
 802486a:	f043 0301 	orr.w	r3, r3, #1
 802486e:	81a3      	strh	r3, [r4, #12]
 8024870:	89a3      	ldrh	r3, [r4, #12]
 8024872:	431d      	orrs	r5, r3
 8024874:	81a5      	strh	r5, [r4, #12]
 8024876:	e7cf      	b.n	8024818 <__smakebuf_r+0x18>

08024878 <_putc_r>:
 8024878:	b570      	push	{r4, r5, r6, lr}
 802487a:	460d      	mov	r5, r1
 802487c:	4614      	mov	r4, r2
 802487e:	4606      	mov	r6, r0
 8024880:	b118      	cbz	r0, 802488a <_putc_r+0x12>
 8024882:	6a03      	ldr	r3, [r0, #32]
 8024884:	b90b      	cbnz	r3, 802488a <_putc_r+0x12>
 8024886:	f7fd f897 	bl	80219b8 <__sinit>
 802488a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802488c:	07d8      	lsls	r0, r3, #31
 802488e:	d405      	bmi.n	802489c <_putc_r+0x24>
 8024890:	89a3      	ldrh	r3, [r4, #12]
 8024892:	0599      	lsls	r1, r3, #22
 8024894:	d402      	bmi.n	802489c <_putc_r+0x24>
 8024896:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024898:	f7fd fb8f 	bl	8021fba <__retarget_lock_acquire_recursive>
 802489c:	68a3      	ldr	r3, [r4, #8]
 802489e:	3b01      	subs	r3, #1
 80248a0:	2b00      	cmp	r3, #0
 80248a2:	60a3      	str	r3, [r4, #8]
 80248a4:	da05      	bge.n	80248b2 <_putc_r+0x3a>
 80248a6:	69a2      	ldr	r2, [r4, #24]
 80248a8:	4293      	cmp	r3, r2
 80248aa:	db12      	blt.n	80248d2 <_putc_r+0x5a>
 80248ac:	b2eb      	uxtb	r3, r5
 80248ae:	2b0a      	cmp	r3, #10
 80248b0:	d00f      	beq.n	80248d2 <_putc_r+0x5a>
 80248b2:	6823      	ldr	r3, [r4, #0]
 80248b4:	1c5a      	adds	r2, r3, #1
 80248b6:	6022      	str	r2, [r4, #0]
 80248b8:	701d      	strb	r5, [r3, #0]
 80248ba:	b2ed      	uxtb	r5, r5
 80248bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80248be:	07da      	lsls	r2, r3, #31
 80248c0:	d405      	bmi.n	80248ce <_putc_r+0x56>
 80248c2:	89a3      	ldrh	r3, [r4, #12]
 80248c4:	059b      	lsls	r3, r3, #22
 80248c6:	d402      	bmi.n	80248ce <_putc_r+0x56>
 80248c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80248ca:	f7fd fb77 	bl	8021fbc <__retarget_lock_release_recursive>
 80248ce:	4628      	mov	r0, r5
 80248d0:	bd70      	pop	{r4, r5, r6, pc}
 80248d2:	4629      	mov	r1, r5
 80248d4:	4622      	mov	r2, r4
 80248d6:	4630      	mov	r0, r6
 80248d8:	f7fd f9c5 	bl	8021c66 <__swbuf_r>
 80248dc:	4605      	mov	r5, r0
 80248de:	e7ed      	b.n	80248bc <_putc_r+0x44>

080248e0 <_raise_r>:
 80248e0:	291f      	cmp	r1, #31
 80248e2:	b538      	push	{r3, r4, r5, lr}
 80248e4:	4605      	mov	r5, r0
 80248e6:	460c      	mov	r4, r1
 80248e8:	d904      	bls.n	80248f4 <_raise_r+0x14>
 80248ea:	2316      	movs	r3, #22
 80248ec:	6003      	str	r3, [r0, #0]
 80248ee:	f04f 30ff 	mov.w	r0, #4294967295
 80248f2:	bd38      	pop	{r3, r4, r5, pc}
 80248f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80248f6:	b112      	cbz	r2, 80248fe <_raise_r+0x1e>
 80248f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80248fc:	b94b      	cbnz	r3, 8024912 <_raise_r+0x32>
 80248fe:	4628      	mov	r0, r5
 8024900:	f000 f852 	bl	80249a8 <_getpid_r>
 8024904:	4622      	mov	r2, r4
 8024906:	4601      	mov	r1, r0
 8024908:	4628      	mov	r0, r5
 802490a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802490e:	f000 b839 	b.w	8024984 <_kill_r>
 8024912:	2b01      	cmp	r3, #1
 8024914:	d00a      	beq.n	802492c <_raise_r+0x4c>
 8024916:	1c59      	adds	r1, r3, #1
 8024918:	d103      	bne.n	8024922 <_raise_r+0x42>
 802491a:	2316      	movs	r3, #22
 802491c:	6003      	str	r3, [r0, #0]
 802491e:	2001      	movs	r0, #1
 8024920:	e7e7      	b.n	80248f2 <_raise_r+0x12>
 8024922:	2100      	movs	r1, #0
 8024924:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024928:	4620      	mov	r0, r4
 802492a:	4798      	blx	r3
 802492c:	2000      	movs	r0, #0
 802492e:	e7e0      	b.n	80248f2 <_raise_r+0x12>

08024930 <raise>:
 8024930:	4b02      	ldr	r3, [pc, #8]	@ (802493c <raise+0xc>)
 8024932:	4601      	mov	r1, r0
 8024934:	6818      	ldr	r0, [r3, #0]
 8024936:	f7ff bfd3 	b.w	80248e0 <_raise_r>
 802493a:	bf00      	nop
 802493c:	240007b0 	.word	0x240007b0

08024940 <_fstat_r>:
 8024940:	b538      	push	{r3, r4, r5, lr}
 8024942:	4d07      	ldr	r5, [pc, #28]	@ (8024960 <_fstat_r+0x20>)
 8024944:	2300      	movs	r3, #0
 8024946:	4604      	mov	r4, r0
 8024948:	4608      	mov	r0, r1
 802494a:	4611      	mov	r1, r2
 802494c:	602b      	str	r3, [r5, #0]
 802494e:	f7f6 fd6c 	bl	801b42a <_fstat>
 8024952:	1c43      	adds	r3, r0, #1
 8024954:	d102      	bne.n	802495c <_fstat_r+0x1c>
 8024956:	682b      	ldr	r3, [r5, #0]
 8024958:	b103      	cbz	r3, 802495c <_fstat_r+0x1c>
 802495a:	6023      	str	r3, [r4, #0]
 802495c:	bd38      	pop	{r3, r4, r5, pc}
 802495e:	bf00      	nop
 8024960:	240040cc 	.word	0x240040cc

08024964 <_isatty_r>:
 8024964:	b538      	push	{r3, r4, r5, lr}
 8024966:	4d06      	ldr	r5, [pc, #24]	@ (8024980 <_isatty_r+0x1c>)
 8024968:	2300      	movs	r3, #0
 802496a:	4604      	mov	r4, r0
 802496c:	4608      	mov	r0, r1
 802496e:	602b      	str	r3, [r5, #0]
 8024970:	f7f6 fd6b 	bl	801b44a <_isatty>
 8024974:	1c43      	adds	r3, r0, #1
 8024976:	d102      	bne.n	802497e <_isatty_r+0x1a>
 8024978:	682b      	ldr	r3, [r5, #0]
 802497a:	b103      	cbz	r3, 802497e <_isatty_r+0x1a>
 802497c:	6023      	str	r3, [r4, #0]
 802497e:	bd38      	pop	{r3, r4, r5, pc}
 8024980:	240040cc 	.word	0x240040cc

08024984 <_kill_r>:
 8024984:	b538      	push	{r3, r4, r5, lr}
 8024986:	4d07      	ldr	r5, [pc, #28]	@ (80249a4 <_kill_r+0x20>)
 8024988:	2300      	movs	r3, #0
 802498a:	4604      	mov	r4, r0
 802498c:	4608      	mov	r0, r1
 802498e:	4611      	mov	r1, r2
 8024990:	602b      	str	r3, [r5, #0]
 8024992:	f7f6 fd06 	bl	801b3a2 <_kill>
 8024996:	1c43      	adds	r3, r0, #1
 8024998:	d102      	bne.n	80249a0 <_kill_r+0x1c>
 802499a:	682b      	ldr	r3, [r5, #0]
 802499c:	b103      	cbz	r3, 80249a0 <_kill_r+0x1c>
 802499e:	6023      	str	r3, [r4, #0]
 80249a0:	bd38      	pop	{r3, r4, r5, pc}
 80249a2:	bf00      	nop
 80249a4:	240040cc 	.word	0x240040cc

080249a8 <_getpid_r>:
 80249a8:	f7f6 bcf3 	b.w	801b392 <_getpid>
 80249ac:	0000      	movs	r0, r0
	...

080249b0 <nan>:
 80249b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80249b8 <nan+0x8>
 80249b4:	4770      	bx	lr
 80249b6:	bf00      	nop
 80249b8:	00000000 	.word	0x00000000
 80249bc:	7ff80000 	.word	0x7ff80000

080249c0 <rshift>:
 80249c0:	6903      	ldr	r3, [r0, #16]
 80249c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80249c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80249ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 80249ce:	f100 0414 	add.w	r4, r0, #20
 80249d2:	dd45      	ble.n	8024a60 <rshift+0xa0>
 80249d4:	f011 011f 	ands.w	r1, r1, #31
 80249d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80249dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80249e0:	d10c      	bne.n	80249fc <rshift+0x3c>
 80249e2:	f100 0710 	add.w	r7, r0, #16
 80249e6:	4629      	mov	r1, r5
 80249e8:	42b1      	cmp	r1, r6
 80249ea:	d334      	bcc.n	8024a56 <rshift+0x96>
 80249ec:	1a9b      	subs	r3, r3, r2
 80249ee:	009b      	lsls	r3, r3, #2
 80249f0:	1eea      	subs	r2, r5, #3
 80249f2:	4296      	cmp	r6, r2
 80249f4:	bf38      	it	cc
 80249f6:	2300      	movcc	r3, #0
 80249f8:	4423      	add	r3, r4
 80249fa:	e015      	b.n	8024a28 <rshift+0x68>
 80249fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8024a00:	f1c1 0820 	rsb	r8, r1, #32
 8024a04:	40cf      	lsrs	r7, r1
 8024a06:	f105 0e04 	add.w	lr, r5, #4
 8024a0a:	46a1      	mov	r9, r4
 8024a0c:	4576      	cmp	r6, lr
 8024a0e:	46f4      	mov	ip, lr
 8024a10:	d815      	bhi.n	8024a3e <rshift+0x7e>
 8024a12:	1a9a      	subs	r2, r3, r2
 8024a14:	0092      	lsls	r2, r2, #2
 8024a16:	3a04      	subs	r2, #4
 8024a18:	3501      	adds	r5, #1
 8024a1a:	42ae      	cmp	r6, r5
 8024a1c:	bf38      	it	cc
 8024a1e:	2200      	movcc	r2, #0
 8024a20:	18a3      	adds	r3, r4, r2
 8024a22:	50a7      	str	r7, [r4, r2]
 8024a24:	b107      	cbz	r7, 8024a28 <rshift+0x68>
 8024a26:	3304      	adds	r3, #4
 8024a28:	1b1a      	subs	r2, r3, r4
 8024a2a:	42a3      	cmp	r3, r4
 8024a2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8024a30:	bf08      	it	eq
 8024a32:	2300      	moveq	r3, #0
 8024a34:	6102      	str	r2, [r0, #16]
 8024a36:	bf08      	it	eq
 8024a38:	6143      	streq	r3, [r0, #20]
 8024a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024a3e:	f8dc c000 	ldr.w	ip, [ip]
 8024a42:	fa0c fc08 	lsl.w	ip, ip, r8
 8024a46:	ea4c 0707 	orr.w	r7, ip, r7
 8024a4a:	f849 7b04 	str.w	r7, [r9], #4
 8024a4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8024a52:	40cf      	lsrs	r7, r1
 8024a54:	e7da      	b.n	8024a0c <rshift+0x4c>
 8024a56:	f851 cb04 	ldr.w	ip, [r1], #4
 8024a5a:	f847 cf04 	str.w	ip, [r7, #4]!
 8024a5e:	e7c3      	b.n	80249e8 <rshift+0x28>
 8024a60:	4623      	mov	r3, r4
 8024a62:	e7e1      	b.n	8024a28 <rshift+0x68>

08024a64 <__hexdig_fun>:
 8024a64:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8024a68:	2b09      	cmp	r3, #9
 8024a6a:	d802      	bhi.n	8024a72 <__hexdig_fun+0xe>
 8024a6c:	3820      	subs	r0, #32
 8024a6e:	b2c0      	uxtb	r0, r0
 8024a70:	4770      	bx	lr
 8024a72:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8024a76:	2b05      	cmp	r3, #5
 8024a78:	d801      	bhi.n	8024a7e <__hexdig_fun+0x1a>
 8024a7a:	3847      	subs	r0, #71	@ 0x47
 8024a7c:	e7f7      	b.n	8024a6e <__hexdig_fun+0xa>
 8024a7e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8024a82:	2b05      	cmp	r3, #5
 8024a84:	d801      	bhi.n	8024a8a <__hexdig_fun+0x26>
 8024a86:	3827      	subs	r0, #39	@ 0x27
 8024a88:	e7f1      	b.n	8024a6e <__hexdig_fun+0xa>
 8024a8a:	2000      	movs	r0, #0
 8024a8c:	4770      	bx	lr
	...

08024a90 <__gethex>:
 8024a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a94:	b085      	sub	sp, #20
 8024a96:	468a      	mov	sl, r1
 8024a98:	9302      	str	r3, [sp, #8]
 8024a9a:	680b      	ldr	r3, [r1, #0]
 8024a9c:	9001      	str	r0, [sp, #4]
 8024a9e:	4690      	mov	r8, r2
 8024aa0:	1c9c      	adds	r4, r3, #2
 8024aa2:	46a1      	mov	r9, r4
 8024aa4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8024aa8:	2830      	cmp	r0, #48	@ 0x30
 8024aaa:	d0fa      	beq.n	8024aa2 <__gethex+0x12>
 8024aac:	eba9 0303 	sub.w	r3, r9, r3
 8024ab0:	f1a3 0b02 	sub.w	fp, r3, #2
 8024ab4:	f7ff ffd6 	bl	8024a64 <__hexdig_fun>
 8024ab8:	4605      	mov	r5, r0
 8024aba:	2800      	cmp	r0, #0
 8024abc:	d168      	bne.n	8024b90 <__gethex+0x100>
 8024abe:	49a0      	ldr	r1, [pc, #640]	@ (8024d40 <__gethex+0x2b0>)
 8024ac0:	2201      	movs	r2, #1
 8024ac2:	4648      	mov	r0, r9
 8024ac4:	f7fd f9a3 	bl	8021e0e <strncmp>
 8024ac8:	4607      	mov	r7, r0
 8024aca:	2800      	cmp	r0, #0
 8024acc:	d167      	bne.n	8024b9e <__gethex+0x10e>
 8024ace:	f899 0001 	ldrb.w	r0, [r9, #1]
 8024ad2:	4626      	mov	r6, r4
 8024ad4:	f7ff ffc6 	bl	8024a64 <__hexdig_fun>
 8024ad8:	2800      	cmp	r0, #0
 8024ada:	d062      	beq.n	8024ba2 <__gethex+0x112>
 8024adc:	4623      	mov	r3, r4
 8024ade:	7818      	ldrb	r0, [r3, #0]
 8024ae0:	2830      	cmp	r0, #48	@ 0x30
 8024ae2:	4699      	mov	r9, r3
 8024ae4:	f103 0301 	add.w	r3, r3, #1
 8024ae8:	d0f9      	beq.n	8024ade <__gethex+0x4e>
 8024aea:	f7ff ffbb 	bl	8024a64 <__hexdig_fun>
 8024aee:	fab0 f580 	clz	r5, r0
 8024af2:	096d      	lsrs	r5, r5, #5
 8024af4:	f04f 0b01 	mov.w	fp, #1
 8024af8:	464a      	mov	r2, r9
 8024afa:	4616      	mov	r6, r2
 8024afc:	3201      	adds	r2, #1
 8024afe:	7830      	ldrb	r0, [r6, #0]
 8024b00:	f7ff ffb0 	bl	8024a64 <__hexdig_fun>
 8024b04:	2800      	cmp	r0, #0
 8024b06:	d1f8      	bne.n	8024afa <__gethex+0x6a>
 8024b08:	498d      	ldr	r1, [pc, #564]	@ (8024d40 <__gethex+0x2b0>)
 8024b0a:	2201      	movs	r2, #1
 8024b0c:	4630      	mov	r0, r6
 8024b0e:	f7fd f97e 	bl	8021e0e <strncmp>
 8024b12:	2800      	cmp	r0, #0
 8024b14:	d13f      	bne.n	8024b96 <__gethex+0x106>
 8024b16:	b944      	cbnz	r4, 8024b2a <__gethex+0x9a>
 8024b18:	1c74      	adds	r4, r6, #1
 8024b1a:	4622      	mov	r2, r4
 8024b1c:	4616      	mov	r6, r2
 8024b1e:	3201      	adds	r2, #1
 8024b20:	7830      	ldrb	r0, [r6, #0]
 8024b22:	f7ff ff9f 	bl	8024a64 <__hexdig_fun>
 8024b26:	2800      	cmp	r0, #0
 8024b28:	d1f8      	bne.n	8024b1c <__gethex+0x8c>
 8024b2a:	1ba4      	subs	r4, r4, r6
 8024b2c:	00a7      	lsls	r7, r4, #2
 8024b2e:	7833      	ldrb	r3, [r6, #0]
 8024b30:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8024b34:	2b50      	cmp	r3, #80	@ 0x50
 8024b36:	d13e      	bne.n	8024bb6 <__gethex+0x126>
 8024b38:	7873      	ldrb	r3, [r6, #1]
 8024b3a:	2b2b      	cmp	r3, #43	@ 0x2b
 8024b3c:	d033      	beq.n	8024ba6 <__gethex+0x116>
 8024b3e:	2b2d      	cmp	r3, #45	@ 0x2d
 8024b40:	d034      	beq.n	8024bac <__gethex+0x11c>
 8024b42:	1c71      	adds	r1, r6, #1
 8024b44:	2400      	movs	r4, #0
 8024b46:	7808      	ldrb	r0, [r1, #0]
 8024b48:	f7ff ff8c 	bl	8024a64 <__hexdig_fun>
 8024b4c:	1e43      	subs	r3, r0, #1
 8024b4e:	b2db      	uxtb	r3, r3
 8024b50:	2b18      	cmp	r3, #24
 8024b52:	d830      	bhi.n	8024bb6 <__gethex+0x126>
 8024b54:	f1a0 0210 	sub.w	r2, r0, #16
 8024b58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8024b5c:	f7ff ff82 	bl	8024a64 <__hexdig_fun>
 8024b60:	f100 3cff 	add.w	ip, r0, #4294967295
 8024b64:	fa5f fc8c 	uxtb.w	ip, ip
 8024b68:	f1bc 0f18 	cmp.w	ip, #24
 8024b6c:	f04f 030a 	mov.w	r3, #10
 8024b70:	d91e      	bls.n	8024bb0 <__gethex+0x120>
 8024b72:	b104      	cbz	r4, 8024b76 <__gethex+0xe6>
 8024b74:	4252      	negs	r2, r2
 8024b76:	4417      	add	r7, r2
 8024b78:	f8ca 1000 	str.w	r1, [sl]
 8024b7c:	b1ed      	cbz	r5, 8024bba <__gethex+0x12a>
 8024b7e:	f1bb 0f00 	cmp.w	fp, #0
 8024b82:	bf0c      	ite	eq
 8024b84:	2506      	moveq	r5, #6
 8024b86:	2500      	movne	r5, #0
 8024b88:	4628      	mov	r0, r5
 8024b8a:	b005      	add	sp, #20
 8024b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b90:	2500      	movs	r5, #0
 8024b92:	462c      	mov	r4, r5
 8024b94:	e7b0      	b.n	8024af8 <__gethex+0x68>
 8024b96:	2c00      	cmp	r4, #0
 8024b98:	d1c7      	bne.n	8024b2a <__gethex+0x9a>
 8024b9a:	4627      	mov	r7, r4
 8024b9c:	e7c7      	b.n	8024b2e <__gethex+0x9e>
 8024b9e:	464e      	mov	r6, r9
 8024ba0:	462f      	mov	r7, r5
 8024ba2:	2501      	movs	r5, #1
 8024ba4:	e7c3      	b.n	8024b2e <__gethex+0x9e>
 8024ba6:	2400      	movs	r4, #0
 8024ba8:	1cb1      	adds	r1, r6, #2
 8024baa:	e7cc      	b.n	8024b46 <__gethex+0xb6>
 8024bac:	2401      	movs	r4, #1
 8024bae:	e7fb      	b.n	8024ba8 <__gethex+0x118>
 8024bb0:	fb03 0002 	mla	r0, r3, r2, r0
 8024bb4:	e7ce      	b.n	8024b54 <__gethex+0xc4>
 8024bb6:	4631      	mov	r1, r6
 8024bb8:	e7de      	b.n	8024b78 <__gethex+0xe8>
 8024bba:	eba6 0309 	sub.w	r3, r6, r9
 8024bbe:	3b01      	subs	r3, #1
 8024bc0:	4629      	mov	r1, r5
 8024bc2:	2b07      	cmp	r3, #7
 8024bc4:	dc0a      	bgt.n	8024bdc <__gethex+0x14c>
 8024bc6:	9801      	ldr	r0, [sp, #4]
 8024bc8:	f7fe f846 	bl	8022c58 <_Balloc>
 8024bcc:	4604      	mov	r4, r0
 8024bce:	b940      	cbnz	r0, 8024be2 <__gethex+0x152>
 8024bd0:	4b5c      	ldr	r3, [pc, #368]	@ (8024d44 <__gethex+0x2b4>)
 8024bd2:	4602      	mov	r2, r0
 8024bd4:	21e4      	movs	r1, #228	@ 0xe4
 8024bd6:	485c      	ldr	r0, [pc, #368]	@ (8024d48 <__gethex+0x2b8>)
 8024bd8:	f7fb fe30 	bl	802083c <__assert_func>
 8024bdc:	3101      	adds	r1, #1
 8024bde:	105b      	asrs	r3, r3, #1
 8024be0:	e7ef      	b.n	8024bc2 <__gethex+0x132>
 8024be2:	f100 0a14 	add.w	sl, r0, #20
 8024be6:	2300      	movs	r3, #0
 8024be8:	4655      	mov	r5, sl
 8024bea:	469b      	mov	fp, r3
 8024bec:	45b1      	cmp	r9, r6
 8024bee:	d337      	bcc.n	8024c60 <__gethex+0x1d0>
 8024bf0:	f845 bb04 	str.w	fp, [r5], #4
 8024bf4:	eba5 050a 	sub.w	r5, r5, sl
 8024bf8:	10ad      	asrs	r5, r5, #2
 8024bfa:	6125      	str	r5, [r4, #16]
 8024bfc:	4658      	mov	r0, fp
 8024bfe:	f7fe f91d 	bl	8022e3c <__hi0bits>
 8024c02:	016d      	lsls	r5, r5, #5
 8024c04:	f8d8 6000 	ldr.w	r6, [r8]
 8024c08:	1a2d      	subs	r5, r5, r0
 8024c0a:	42b5      	cmp	r5, r6
 8024c0c:	dd54      	ble.n	8024cb8 <__gethex+0x228>
 8024c0e:	1bad      	subs	r5, r5, r6
 8024c10:	4629      	mov	r1, r5
 8024c12:	4620      	mov	r0, r4
 8024c14:	f7fe fcae 	bl	8023574 <__any_on>
 8024c18:	4681      	mov	r9, r0
 8024c1a:	b178      	cbz	r0, 8024c3c <__gethex+0x1ac>
 8024c1c:	1e6b      	subs	r3, r5, #1
 8024c1e:	1159      	asrs	r1, r3, #5
 8024c20:	f003 021f 	and.w	r2, r3, #31
 8024c24:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8024c28:	f04f 0901 	mov.w	r9, #1
 8024c2c:	fa09 f202 	lsl.w	r2, r9, r2
 8024c30:	420a      	tst	r2, r1
 8024c32:	d003      	beq.n	8024c3c <__gethex+0x1ac>
 8024c34:	454b      	cmp	r3, r9
 8024c36:	dc36      	bgt.n	8024ca6 <__gethex+0x216>
 8024c38:	f04f 0902 	mov.w	r9, #2
 8024c3c:	4629      	mov	r1, r5
 8024c3e:	4620      	mov	r0, r4
 8024c40:	f7ff febe 	bl	80249c0 <rshift>
 8024c44:	442f      	add	r7, r5
 8024c46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8024c4a:	42bb      	cmp	r3, r7
 8024c4c:	da42      	bge.n	8024cd4 <__gethex+0x244>
 8024c4e:	9801      	ldr	r0, [sp, #4]
 8024c50:	4621      	mov	r1, r4
 8024c52:	f7fe f841 	bl	8022cd8 <_Bfree>
 8024c56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024c58:	2300      	movs	r3, #0
 8024c5a:	6013      	str	r3, [r2, #0]
 8024c5c:	25a3      	movs	r5, #163	@ 0xa3
 8024c5e:	e793      	b.n	8024b88 <__gethex+0xf8>
 8024c60:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8024c64:	2a2e      	cmp	r2, #46	@ 0x2e
 8024c66:	d012      	beq.n	8024c8e <__gethex+0x1fe>
 8024c68:	2b20      	cmp	r3, #32
 8024c6a:	d104      	bne.n	8024c76 <__gethex+0x1e6>
 8024c6c:	f845 bb04 	str.w	fp, [r5], #4
 8024c70:	f04f 0b00 	mov.w	fp, #0
 8024c74:	465b      	mov	r3, fp
 8024c76:	7830      	ldrb	r0, [r6, #0]
 8024c78:	9303      	str	r3, [sp, #12]
 8024c7a:	f7ff fef3 	bl	8024a64 <__hexdig_fun>
 8024c7e:	9b03      	ldr	r3, [sp, #12]
 8024c80:	f000 000f 	and.w	r0, r0, #15
 8024c84:	4098      	lsls	r0, r3
 8024c86:	ea4b 0b00 	orr.w	fp, fp, r0
 8024c8a:	3304      	adds	r3, #4
 8024c8c:	e7ae      	b.n	8024bec <__gethex+0x15c>
 8024c8e:	45b1      	cmp	r9, r6
 8024c90:	d8ea      	bhi.n	8024c68 <__gethex+0x1d8>
 8024c92:	492b      	ldr	r1, [pc, #172]	@ (8024d40 <__gethex+0x2b0>)
 8024c94:	9303      	str	r3, [sp, #12]
 8024c96:	2201      	movs	r2, #1
 8024c98:	4630      	mov	r0, r6
 8024c9a:	f7fd f8b8 	bl	8021e0e <strncmp>
 8024c9e:	9b03      	ldr	r3, [sp, #12]
 8024ca0:	2800      	cmp	r0, #0
 8024ca2:	d1e1      	bne.n	8024c68 <__gethex+0x1d8>
 8024ca4:	e7a2      	b.n	8024bec <__gethex+0x15c>
 8024ca6:	1ea9      	subs	r1, r5, #2
 8024ca8:	4620      	mov	r0, r4
 8024caa:	f7fe fc63 	bl	8023574 <__any_on>
 8024cae:	2800      	cmp	r0, #0
 8024cb0:	d0c2      	beq.n	8024c38 <__gethex+0x1a8>
 8024cb2:	f04f 0903 	mov.w	r9, #3
 8024cb6:	e7c1      	b.n	8024c3c <__gethex+0x1ac>
 8024cb8:	da09      	bge.n	8024cce <__gethex+0x23e>
 8024cba:	1b75      	subs	r5, r6, r5
 8024cbc:	4621      	mov	r1, r4
 8024cbe:	9801      	ldr	r0, [sp, #4]
 8024cc0:	462a      	mov	r2, r5
 8024cc2:	f7fe fa21 	bl	8023108 <__lshift>
 8024cc6:	1b7f      	subs	r7, r7, r5
 8024cc8:	4604      	mov	r4, r0
 8024cca:	f100 0a14 	add.w	sl, r0, #20
 8024cce:	f04f 0900 	mov.w	r9, #0
 8024cd2:	e7b8      	b.n	8024c46 <__gethex+0x1b6>
 8024cd4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8024cd8:	42bd      	cmp	r5, r7
 8024cda:	dd6f      	ble.n	8024dbc <__gethex+0x32c>
 8024cdc:	1bed      	subs	r5, r5, r7
 8024cde:	42ae      	cmp	r6, r5
 8024ce0:	dc34      	bgt.n	8024d4c <__gethex+0x2bc>
 8024ce2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8024ce6:	2b02      	cmp	r3, #2
 8024ce8:	d022      	beq.n	8024d30 <__gethex+0x2a0>
 8024cea:	2b03      	cmp	r3, #3
 8024cec:	d024      	beq.n	8024d38 <__gethex+0x2a8>
 8024cee:	2b01      	cmp	r3, #1
 8024cf0:	d115      	bne.n	8024d1e <__gethex+0x28e>
 8024cf2:	42ae      	cmp	r6, r5
 8024cf4:	d113      	bne.n	8024d1e <__gethex+0x28e>
 8024cf6:	2e01      	cmp	r6, #1
 8024cf8:	d10b      	bne.n	8024d12 <__gethex+0x282>
 8024cfa:	9a02      	ldr	r2, [sp, #8]
 8024cfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8024d00:	6013      	str	r3, [r2, #0]
 8024d02:	2301      	movs	r3, #1
 8024d04:	6123      	str	r3, [r4, #16]
 8024d06:	f8ca 3000 	str.w	r3, [sl]
 8024d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024d0c:	2562      	movs	r5, #98	@ 0x62
 8024d0e:	601c      	str	r4, [r3, #0]
 8024d10:	e73a      	b.n	8024b88 <__gethex+0xf8>
 8024d12:	1e71      	subs	r1, r6, #1
 8024d14:	4620      	mov	r0, r4
 8024d16:	f7fe fc2d 	bl	8023574 <__any_on>
 8024d1a:	2800      	cmp	r0, #0
 8024d1c:	d1ed      	bne.n	8024cfa <__gethex+0x26a>
 8024d1e:	9801      	ldr	r0, [sp, #4]
 8024d20:	4621      	mov	r1, r4
 8024d22:	f7fd ffd9 	bl	8022cd8 <_Bfree>
 8024d26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024d28:	2300      	movs	r3, #0
 8024d2a:	6013      	str	r3, [r2, #0]
 8024d2c:	2550      	movs	r5, #80	@ 0x50
 8024d2e:	e72b      	b.n	8024b88 <__gethex+0xf8>
 8024d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024d32:	2b00      	cmp	r3, #0
 8024d34:	d1f3      	bne.n	8024d1e <__gethex+0x28e>
 8024d36:	e7e0      	b.n	8024cfa <__gethex+0x26a>
 8024d38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024d3a:	2b00      	cmp	r3, #0
 8024d3c:	d1dd      	bne.n	8024cfa <__gethex+0x26a>
 8024d3e:	e7ee      	b.n	8024d1e <__gethex+0x28e>
 8024d40:	08035650 	.word	0x08035650
 8024d44:	080354e6 	.word	0x080354e6
 8024d48:	080356c1 	.word	0x080356c1
 8024d4c:	1e6f      	subs	r7, r5, #1
 8024d4e:	f1b9 0f00 	cmp.w	r9, #0
 8024d52:	d130      	bne.n	8024db6 <__gethex+0x326>
 8024d54:	b127      	cbz	r7, 8024d60 <__gethex+0x2d0>
 8024d56:	4639      	mov	r1, r7
 8024d58:	4620      	mov	r0, r4
 8024d5a:	f7fe fc0b 	bl	8023574 <__any_on>
 8024d5e:	4681      	mov	r9, r0
 8024d60:	117a      	asrs	r2, r7, #5
 8024d62:	2301      	movs	r3, #1
 8024d64:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8024d68:	f007 071f 	and.w	r7, r7, #31
 8024d6c:	40bb      	lsls	r3, r7
 8024d6e:	4213      	tst	r3, r2
 8024d70:	4629      	mov	r1, r5
 8024d72:	4620      	mov	r0, r4
 8024d74:	bf18      	it	ne
 8024d76:	f049 0902 	orrne.w	r9, r9, #2
 8024d7a:	f7ff fe21 	bl	80249c0 <rshift>
 8024d7e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8024d82:	1b76      	subs	r6, r6, r5
 8024d84:	2502      	movs	r5, #2
 8024d86:	f1b9 0f00 	cmp.w	r9, #0
 8024d8a:	d047      	beq.n	8024e1c <__gethex+0x38c>
 8024d8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8024d90:	2b02      	cmp	r3, #2
 8024d92:	d015      	beq.n	8024dc0 <__gethex+0x330>
 8024d94:	2b03      	cmp	r3, #3
 8024d96:	d017      	beq.n	8024dc8 <__gethex+0x338>
 8024d98:	2b01      	cmp	r3, #1
 8024d9a:	d109      	bne.n	8024db0 <__gethex+0x320>
 8024d9c:	f019 0f02 	tst.w	r9, #2
 8024da0:	d006      	beq.n	8024db0 <__gethex+0x320>
 8024da2:	f8da 3000 	ldr.w	r3, [sl]
 8024da6:	ea49 0903 	orr.w	r9, r9, r3
 8024daa:	f019 0f01 	tst.w	r9, #1
 8024dae:	d10e      	bne.n	8024dce <__gethex+0x33e>
 8024db0:	f045 0510 	orr.w	r5, r5, #16
 8024db4:	e032      	b.n	8024e1c <__gethex+0x38c>
 8024db6:	f04f 0901 	mov.w	r9, #1
 8024dba:	e7d1      	b.n	8024d60 <__gethex+0x2d0>
 8024dbc:	2501      	movs	r5, #1
 8024dbe:	e7e2      	b.n	8024d86 <__gethex+0x2f6>
 8024dc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024dc2:	f1c3 0301 	rsb	r3, r3, #1
 8024dc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024dc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024dca:	2b00      	cmp	r3, #0
 8024dcc:	d0f0      	beq.n	8024db0 <__gethex+0x320>
 8024dce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8024dd2:	f104 0314 	add.w	r3, r4, #20
 8024dd6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8024dda:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8024dde:	f04f 0c00 	mov.w	ip, #0
 8024de2:	4618      	mov	r0, r3
 8024de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8024de8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8024dec:	d01b      	beq.n	8024e26 <__gethex+0x396>
 8024dee:	3201      	adds	r2, #1
 8024df0:	6002      	str	r2, [r0, #0]
 8024df2:	2d02      	cmp	r5, #2
 8024df4:	f104 0314 	add.w	r3, r4, #20
 8024df8:	d13c      	bne.n	8024e74 <__gethex+0x3e4>
 8024dfa:	f8d8 2000 	ldr.w	r2, [r8]
 8024dfe:	3a01      	subs	r2, #1
 8024e00:	42b2      	cmp	r2, r6
 8024e02:	d109      	bne.n	8024e18 <__gethex+0x388>
 8024e04:	1171      	asrs	r1, r6, #5
 8024e06:	2201      	movs	r2, #1
 8024e08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8024e0c:	f006 061f 	and.w	r6, r6, #31
 8024e10:	fa02 f606 	lsl.w	r6, r2, r6
 8024e14:	421e      	tst	r6, r3
 8024e16:	d13a      	bne.n	8024e8e <__gethex+0x3fe>
 8024e18:	f045 0520 	orr.w	r5, r5, #32
 8024e1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024e1e:	601c      	str	r4, [r3, #0]
 8024e20:	9b02      	ldr	r3, [sp, #8]
 8024e22:	601f      	str	r7, [r3, #0]
 8024e24:	e6b0      	b.n	8024b88 <__gethex+0xf8>
 8024e26:	4299      	cmp	r1, r3
 8024e28:	f843 cc04 	str.w	ip, [r3, #-4]
 8024e2c:	d8d9      	bhi.n	8024de2 <__gethex+0x352>
 8024e2e:	68a3      	ldr	r3, [r4, #8]
 8024e30:	459b      	cmp	fp, r3
 8024e32:	db17      	blt.n	8024e64 <__gethex+0x3d4>
 8024e34:	6861      	ldr	r1, [r4, #4]
 8024e36:	9801      	ldr	r0, [sp, #4]
 8024e38:	3101      	adds	r1, #1
 8024e3a:	f7fd ff0d 	bl	8022c58 <_Balloc>
 8024e3e:	4681      	mov	r9, r0
 8024e40:	b918      	cbnz	r0, 8024e4a <__gethex+0x3ba>
 8024e42:	4b1a      	ldr	r3, [pc, #104]	@ (8024eac <__gethex+0x41c>)
 8024e44:	4602      	mov	r2, r0
 8024e46:	2184      	movs	r1, #132	@ 0x84
 8024e48:	e6c5      	b.n	8024bd6 <__gethex+0x146>
 8024e4a:	6922      	ldr	r2, [r4, #16]
 8024e4c:	3202      	adds	r2, #2
 8024e4e:	f104 010c 	add.w	r1, r4, #12
 8024e52:	0092      	lsls	r2, r2, #2
 8024e54:	300c      	adds	r0, #12
 8024e56:	f7fd f8ba 	bl	8021fce <memcpy>
 8024e5a:	4621      	mov	r1, r4
 8024e5c:	9801      	ldr	r0, [sp, #4]
 8024e5e:	f7fd ff3b 	bl	8022cd8 <_Bfree>
 8024e62:	464c      	mov	r4, r9
 8024e64:	6923      	ldr	r3, [r4, #16]
 8024e66:	1c5a      	adds	r2, r3, #1
 8024e68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8024e6c:	6122      	str	r2, [r4, #16]
 8024e6e:	2201      	movs	r2, #1
 8024e70:	615a      	str	r2, [r3, #20]
 8024e72:	e7be      	b.n	8024df2 <__gethex+0x362>
 8024e74:	6922      	ldr	r2, [r4, #16]
 8024e76:	455a      	cmp	r2, fp
 8024e78:	dd0b      	ble.n	8024e92 <__gethex+0x402>
 8024e7a:	2101      	movs	r1, #1
 8024e7c:	4620      	mov	r0, r4
 8024e7e:	f7ff fd9f 	bl	80249c0 <rshift>
 8024e82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8024e86:	3701      	adds	r7, #1
 8024e88:	42bb      	cmp	r3, r7
 8024e8a:	f6ff aee0 	blt.w	8024c4e <__gethex+0x1be>
 8024e8e:	2501      	movs	r5, #1
 8024e90:	e7c2      	b.n	8024e18 <__gethex+0x388>
 8024e92:	f016 061f 	ands.w	r6, r6, #31
 8024e96:	d0fa      	beq.n	8024e8e <__gethex+0x3fe>
 8024e98:	4453      	add	r3, sl
 8024e9a:	f1c6 0620 	rsb	r6, r6, #32
 8024e9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8024ea2:	f7fd ffcb 	bl	8022e3c <__hi0bits>
 8024ea6:	42b0      	cmp	r0, r6
 8024ea8:	dbe7      	blt.n	8024e7a <__gethex+0x3ea>
 8024eaa:	e7f0      	b.n	8024e8e <__gethex+0x3fe>
 8024eac:	080354e6 	.word	0x080354e6

08024eb0 <L_shift>:
 8024eb0:	f1c2 0208 	rsb	r2, r2, #8
 8024eb4:	0092      	lsls	r2, r2, #2
 8024eb6:	b570      	push	{r4, r5, r6, lr}
 8024eb8:	f1c2 0620 	rsb	r6, r2, #32
 8024ebc:	6843      	ldr	r3, [r0, #4]
 8024ebe:	6804      	ldr	r4, [r0, #0]
 8024ec0:	fa03 f506 	lsl.w	r5, r3, r6
 8024ec4:	432c      	orrs	r4, r5
 8024ec6:	40d3      	lsrs	r3, r2
 8024ec8:	6004      	str	r4, [r0, #0]
 8024eca:	f840 3f04 	str.w	r3, [r0, #4]!
 8024ece:	4288      	cmp	r0, r1
 8024ed0:	d3f4      	bcc.n	8024ebc <L_shift+0xc>
 8024ed2:	bd70      	pop	{r4, r5, r6, pc}

08024ed4 <__match>:
 8024ed4:	b530      	push	{r4, r5, lr}
 8024ed6:	6803      	ldr	r3, [r0, #0]
 8024ed8:	3301      	adds	r3, #1
 8024eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024ede:	b914      	cbnz	r4, 8024ee6 <__match+0x12>
 8024ee0:	6003      	str	r3, [r0, #0]
 8024ee2:	2001      	movs	r0, #1
 8024ee4:	bd30      	pop	{r4, r5, pc}
 8024ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024eea:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8024eee:	2d19      	cmp	r5, #25
 8024ef0:	bf98      	it	ls
 8024ef2:	3220      	addls	r2, #32
 8024ef4:	42a2      	cmp	r2, r4
 8024ef6:	d0f0      	beq.n	8024eda <__match+0x6>
 8024ef8:	2000      	movs	r0, #0
 8024efa:	e7f3      	b.n	8024ee4 <__match+0x10>

08024efc <__hexnan>:
 8024efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f00:	680b      	ldr	r3, [r1, #0]
 8024f02:	6801      	ldr	r1, [r0, #0]
 8024f04:	115e      	asrs	r6, r3, #5
 8024f06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8024f0a:	f013 031f 	ands.w	r3, r3, #31
 8024f0e:	b087      	sub	sp, #28
 8024f10:	bf18      	it	ne
 8024f12:	3604      	addne	r6, #4
 8024f14:	2500      	movs	r5, #0
 8024f16:	1f37      	subs	r7, r6, #4
 8024f18:	4682      	mov	sl, r0
 8024f1a:	4690      	mov	r8, r2
 8024f1c:	9301      	str	r3, [sp, #4]
 8024f1e:	f846 5c04 	str.w	r5, [r6, #-4]
 8024f22:	46b9      	mov	r9, r7
 8024f24:	463c      	mov	r4, r7
 8024f26:	9502      	str	r5, [sp, #8]
 8024f28:	46ab      	mov	fp, r5
 8024f2a:	784a      	ldrb	r2, [r1, #1]
 8024f2c:	1c4b      	adds	r3, r1, #1
 8024f2e:	9303      	str	r3, [sp, #12]
 8024f30:	b342      	cbz	r2, 8024f84 <__hexnan+0x88>
 8024f32:	4610      	mov	r0, r2
 8024f34:	9105      	str	r1, [sp, #20]
 8024f36:	9204      	str	r2, [sp, #16]
 8024f38:	f7ff fd94 	bl	8024a64 <__hexdig_fun>
 8024f3c:	2800      	cmp	r0, #0
 8024f3e:	d151      	bne.n	8024fe4 <__hexnan+0xe8>
 8024f40:	9a04      	ldr	r2, [sp, #16]
 8024f42:	9905      	ldr	r1, [sp, #20]
 8024f44:	2a20      	cmp	r2, #32
 8024f46:	d818      	bhi.n	8024f7a <__hexnan+0x7e>
 8024f48:	9b02      	ldr	r3, [sp, #8]
 8024f4a:	459b      	cmp	fp, r3
 8024f4c:	dd13      	ble.n	8024f76 <__hexnan+0x7a>
 8024f4e:	454c      	cmp	r4, r9
 8024f50:	d206      	bcs.n	8024f60 <__hexnan+0x64>
 8024f52:	2d07      	cmp	r5, #7
 8024f54:	dc04      	bgt.n	8024f60 <__hexnan+0x64>
 8024f56:	462a      	mov	r2, r5
 8024f58:	4649      	mov	r1, r9
 8024f5a:	4620      	mov	r0, r4
 8024f5c:	f7ff ffa8 	bl	8024eb0 <L_shift>
 8024f60:	4544      	cmp	r4, r8
 8024f62:	d952      	bls.n	802500a <__hexnan+0x10e>
 8024f64:	2300      	movs	r3, #0
 8024f66:	f1a4 0904 	sub.w	r9, r4, #4
 8024f6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8024f6e:	f8cd b008 	str.w	fp, [sp, #8]
 8024f72:	464c      	mov	r4, r9
 8024f74:	461d      	mov	r5, r3
 8024f76:	9903      	ldr	r1, [sp, #12]
 8024f78:	e7d7      	b.n	8024f2a <__hexnan+0x2e>
 8024f7a:	2a29      	cmp	r2, #41	@ 0x29
 8024f7c:	d157      	bne.n	802502e <__hexnan+0x132>
 8024f7e:	3102      	adds	r1, #2
 8024f80:	f8ca 1000 	str.w	r1, [sl]
 8024f84:	f1bb 0f00 	cmp.w	fp, #0
 8024f88:	d051      	beq.n	802502e <__hexnan+0x132>
 8024f8a:	454c      	cmp	r4, r9
 8024f8c:	d206      	bcs.n	8024f9c <__hexnan+0xa0>
 8024f8e:	2d07      	cmp	r5, #7
 8024f90:	dc04      	bgt.n	8024f9c <__hexnan+0xa0>
 8024f92:	462a      	mov	r2, r5
 8024f94:	4649      	mov	r1, r9
 8024f96:	4620      	mov	r0, r4
 8024f98:	f7ff ff8a 	bl	8024eb0 <L_shift>
 8024f9c:	4544      	cmp	r4, r8
 8024f9e:	d936      	bls.n	802500e <__hexnan+0x112>
 8024fa0:	f1a8 0204 	sub.w	r2, r8, #4
 8024fa4:	4623      	mov	r3, r4
 8024fa6:	f853 1b04 	ldr.w	r1, [r3], #4
 8024faa:	f842 1f04 	str.w	r1, [r2, #4]!
 8024fae:	429f      	cmp	r7, r3
 8024fb0:	d2f9      	bcs.n	8024fa6 <__hexnan+0xaa>
 8024fb2:	1b3b      	subs	r3, r7, r4
 8024fb4:	f023 0303 	bic.w	r3, r3, #3
 8024fb8:	3304      	adds	r3, #4
 8024fba:	3401      	adds	r4, #1
 8024fbc:	3e03      	subs	r6, #3
 8024fbe:	42b4      	cmp	r4, r6
 8024fc0:	bf88      	it	hi
 8024fc2:	2304      	movhi	r3, #4
 8024fc4:	4443      	add	r3, r8
 8024fc6:	2200      	movs	r2, #0
 8024fc8:	f843 2b04 	str.w	r2, [r3], #4
 8024fcc:	429f      	cmp	r7, r3
 8024fce:	d2fb      	bcs.n	8024fc8 <__hexnan+0xcc>
 8024fd0:	683b      	ldr	r3, [r7, #0]
 8024fd2:	b91b      	cbnz	r3, 8024fdc <__hexnan+0xe0>
 8024fd4:	4547      	cmp	r7, r8
 8024fd6:	d128      	bne.n	802502a <__hexnan+0x12e>
 8024fd8:	2301      	movs	r3, #1
 8024fda:	603b      	str	r3, [r7, #0]
 8024fdc:	2005      	movs	r0, #5
 8024fde:	b007      	add	sp, #28
 8024fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fe4:	3501      	adds	r5, #1
 8024fe6:	2d08      	cmp	r5, #8
 8024fe8:	f10b 0b01 	add.w	fp, fp, #1
 8024fec:	dd06      	ble.n	8024ffc <__hexnan+0x100>
 8024fee:	4544      	cmp	r4, r8
 8024ff0:	d9c1      	bls.n	8024f76 <__hexnan+0x7a>
 8024ff2:	2300      	movs	r3, #0
 8024ff4:	f844 3c04 	str.w	r3, [r4, #-4]
 8024ff8:	2501      	movs	r5, #1
 8024ffa:	3c04      	subs	r4, #4
 8024ffc:	6822      	ldr	r2, [r4, #0]
 8024ffe:	f000 000f 	and.w	r0, r0, #15
 8025002:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8025006:	6020      	str	r0, [r4, #0]
 8025008:	e7b5      	b.n	8024f76 <__hexnan+0x7a>
 802500a:	2508      	movs	r5, #8
 802500c:	e7b3      	b.n	8024f76 <__hexnan+0x7a>
 802500e:	9b01      	ldr	r3, [sp, #4]
 8025010:	2b00      	cmp	r3, #0
 8025012:	d0dd      	beq.n	8024fd0 <__hexnan+0xd4>
 8025014:	f1c3 0320 	rsb	r3, r3, #32
 8025018:	f04f 32ff 	mov.w	r2, #4294967295
 802501c:	40da      	lsrs	r2, r3
 802501e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8025022:	4013      	ands	r3, r2
 8025024:	f846 3c04 	str.w	r3, [r6, #-4]
 8025028:	e7d2      	b.n	8024fd0 <__hexnan+0xd4>
 802502a:	3f04      	subs	r7, #4
 802502c:	e7d0      	b.n	8024fd0 <__hexnan+0xd4>
 802502e:	2004      	movs	r0, #4
 8025030:	e7d5      	b.n	8024fde <__hexnan+0xe2>

08025032 <__ascii_mbtowc>:
 8025032:	b082      	sub	sp, #8
 8025034:	b901      	cbnz	r1, 8025038 <__ascii_mbtowc+0x6>
 8025036:	a901      	add	r1, sp, #4
 8025038:	b142      	cbz	r2, 802504c <__ascii_mbtowc+0x1a>
 802503a:	b14b      	cbz	r3, 8025050 <__ascii_mbtowc+0x1e>
 802503c:	7813      	ldrb	r3, [r2, #0]
 802503e:	600b      	str	r3, [r1, #0]
 8025040:	7812      	ldrb	r2, [r2, #0]
 8025042:	1e10      	subs	r0, r2, #0
 8025044:	bf18      	it	ne
 8025046:	2001      	movne	r0, #1
 8025048:	b002      	add	sp, #8
 802504a:	4770      	bx	lr
 802504c:	4610      	mov	r0, r2
 802504e:	e7fb      	b.n	8025048 <__ascii_mbtowc+0x16>
 8025050:	f06f 0001 	mvn.w	r0, #1
 8025054:	e7f8      	b.n	8025048 <__ascii_mbtowc+0x16>

08025056 <_realloc_r>:
 8025056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802505a:	4680      	mov	r8, r0
 802505c:	4615      	mov	r5, r2
 802505e:	460c      	mov	r4, r1
 8025060:	b921      	cbnz	r1, 802506c <_realloc_r+0x16>
 8025062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025066:	4611      	mov	r1, r2
 8025068:	f7fb bc58 	b.w	802091c <_malloc_r>
 802506c:	b92a      	cbnz	r2, 802507a <_realloc_r+0x24>
 802506e:	f7fd fda9 	bl	8022bc4 <_free_r>
 8025072:	2400      	movs	r4, #0
 8025074:	4620      	mov	r0, r4
 8025076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802507a:	f000 f827 	bl	80250cc <_malloc_usable_size_r>
 802507e:	4285      	cmp	r5, r0
 8025080:	4606      	mov	r6, r0
 8025082:	d802      	bhi.n	802508a <_realloc_r+0x34>
 8025084:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8025088:	d8f4      	bhi.n	8025074 <_realloc_r+0x1e>
 802508a:	4629      	mov	r1, r5
 802508c:	4640      	mov	r0, r8
 802508e:	f7fb fc45 	bl	802091c <_malloc_r>
 8025092:	4607      	mov	r7, r0
 8025094:	2800      	cmp	r0, #0
 8025096:	d0ec      	beq.n	8025072 <_realloc_r+0x1c>
 8025098:	42b5      	cmp	r5, r6
 802509a:	462a      	mov	r2, r5
 802509c:	4621      	mov	r1, r4
 802509e:	bf28      	it	cs
 80250a0:	4632      	movcs	r2, r6
 80250a2:	f7fc ff94 	bl	8021fce <memcpy>
 80250a6:	4621      	mov	r1, r4
 80250a8:	4640      	mov	r0, r8
 80250aa:	f7fd fd8b 	bl	8022bc4 <_free_r>
 80250ae:	463c      	mov	r4, r7
 80250b0:	e7e0      	b.n	8025074 <_realloc_r+0x1e>

080250b2 <__ascii_wctomb>:
 80250b2:	4603      	mov	r3, r0
 80250b4:	4608      	mov	r0, r1
 80250b6:	b141      	cbz	r1, 80250ca <__ascii_wctomb+0x18>
 80250b8:	2aff      	cmp	r2, #255	@ 0xff
 80250ba:	d904      	bls.n	80250c6 <__ascii_wctomb+0x14>
 80250bc:	228a      	movs	r2, #138	@ 0x8a
 80250be:	601a      	str	r2, [r3, #0]
 80250c0:	f04f 30ff 	mov.w	r0, #4294967295
 80250c4:	4770      	bx	lr
 80250c6:	700a      	strb	r2, [r1, #0]
 80250c8:	2001      	movs	r0, #1
 80250ca:	4770      	bx	lr

080250cc <_malloc_usable_size_r>:
 80250cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80250d0:	1f18      	subs	r0, r3, #4
 80250d2:	2b00      	cmp	r3, #0
 80250d4:	bfbc      	itt	lt
 80250d6:	580b      	ldrlt	r3, [r1, r0]
 80250d8:	18c0      	addlt	r0, r0, r3
 80250da:	4770      	bx	lr

080250dc <_init>:
 80250dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250de:	bf00      	nop
 80250e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80250e2:	bc08      	pop	{r3}
 80250e4:	469e      	mov	lr, r3
 80250e6:	4770      	bx	lr

080250e8 <_fini>:
 80250e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80250ea:	bf00      	nop
 80250ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80250ee:	bc08      	pop	{r3}
 80250f0:	469e      	mov	lr, r3
 80250f2:	4770      	bx	lr

Disassembly of section .iram:

080250f4 <mg_ota_boot>:
MG_IRAM void mg_ota_boot(void) {
 80250f4:	b580      	push	{r7, lr}
 80250f6:	b088      	sub	sp, #32
 80250f8:	af00      	add	r7, sp, #0
  MG_INFO(("Booting. Flash bank: %d", mg_flash_bank()));
 80250fa:	4b2d      	ldr	r3, [pc, #180]	@ (80251b0 <mg_ota_boot+0xbc>)
 80250fc:	681b      	ldr	r3, [r3, #0]
 80250fe:	2b01      	cmp	r3, #1
 8025100:	dd0d      	ble.n	802511e <mg_ota_boot+0x2a>
 8025102:	4b2c      	ldr	r3, [pc, #176]	@ (80251b4 <mg_ota_boot+0xc0>)
 8025104:	f641 12ac 	movw	r2, #6572	@ 0x19ac
 8025108:	492b      	ldr	r1, [pc, #172]	@ (80251b8 <mg_ota_boot+0xc4>)
 802510a:	2002      	movs	r0, #2
 802510c:	f7e2 ff10 	bl	8007f30 <mg_log_prefix>
 8025110:	f000 f881 	bl	8025216 <mg_flash_bank>
 8025114:	4603      	mov	r3, r0
 8025116:	4619      	mov	r1, r3
 8025118:	4828      	ldr	r0, [pc, #160]	@ (80251bc <mg_ota_boot+0xc8>)
 802511a:	f7e2 ff59 	bl	8007fd0 <mg_log>
  struct mg_otadata curr = mg_otadata(MG_FIRMWARE_CURRENT);
 802511e:	f107 0310 	add.w	r3, r7, #16
 8025122:	2100      	movs	r1, #0
 8025124:	4618      	mov	r0, r3
 8025126:	f000 fb41 	bl	80257ac <mg_otadata>
  struct mg_otadata prev = mg_otadata(MG_FIRMWARE_PREVIOUS);
 802512a:	463b      	mov	r3, r7
 802512c:	2101      	movs	r1, #1
 802512e:	4618      	mov	r0, r3
 8025130:	f000 fb3c 	bl	80257ac <mg_otadata>
  if (curr.status == MG_OTA_FIRST_BOOT) {
 8025134:	69fb      	ldr	r3, [r7, #28]
 8025136:	2b01      	cmp	r3, #1
 8025138:	d135      	bne.n	80251a6 <mg_ota_boot+0xb2>
    if (prev.status == MG_OTA_UNAVAILABLE) {
 802513a:	68fb      	ldr	r3, [r7, #12]
 802513c:	2b00      	cmp	r3, #0
 802513e:	d118      	bne.n	8025172 <mg_ota_boot+0x7e>
      MG_INFO(("Setting previous firmware state to committed"));
 8025140:	4b1b      	ldr	r3, [pc, #108]	@ (80251b0 <mg_ota_boot+0xbc>)
 8025142:	681b      	ldr	r3, [r3, #0]
 8025144:	2b01      	cmp	r3, #1
 8025146:	dd09      	ble.n	802515c <mg_ota_boot+0x68>
 8025148:	4b1a      	ldr	r3, [pc, #104]	@ (80251b4 <mg_ota_boot+0xc0>)
 802514a:	f641 12b2 	movw	r2, #6578	@ 0x19b2
 802514e:	491a      	ldr	r1, [pc, #104]	@ (80251b8 <mg_ota_boot+0xc4>)
 8025150:	2002      	movs	r0, #2
 8025152:	f7e2 feed 	bl	8007f30 <mg_log_prefix>
 8025156:	481a      	ldr	r0, [pc, #104]	@ (80251c0 <mg_ota_boot+0xcc>)
 8025158:	f7e2 ff3a 	bl	8007fd0 <mg_log>
      prev.status = MG_OTA_COMMITTED;
 802515c:	2303      	movs	r3, #3
 802515e:	60fb      	str	r3, [r7, #12]
      mg_flash_save(NULL, mg_fwkey(MG_FIRMWARE_PREVIOUS), &prev, sizeof(prev));
 8025160:	2001      	movs	r0, #1
 8025162:	f000 faff 	bl	8025764 <mg_fwkey>
 8025166:	4601      	mov	r1, r0
 8025168:	463a      	mov	r2, r7
 802516a:	2310      	movs	r3, #16
 802516c:	2000      	movs	r0, #0
 802516e:	f7dc fc21 	bl	80019b4 <mg_flash_save>
    curr.status = MG_OTA_UNCOMMITTED;
 8025172:	2302      	movs	r3, #2
 8025174:	61fb      	str	r3, [r7, #28]
    MG_INFO(("First boot, setting status to UNCOMMITTED"));
 8025176:	4b0e      	ldr	r3, [pc, #56]	@ (80251b0 <mg_ota_boot+0xbc>)
 8025178:	681b      	ldr	r3, [r3, #0]
 802517a:	2b01      	cmp	r3, #1
 802517c:	dd09      	ble.n	8025192 <mg_ota_boot+0x9e>
 802517e:	4b0d      	ldr	r3, [pc, #52]	@ (80251b4 <mg_ota_boot+0xc0>)
 8025180:	f641 12b7 	movw	r2, #6583	@ 0x19b7
 8025184:	490c      	ldr	r1, [pc, #48]	@ (80251b8 <mg_ota_boot+0xc4>)
 8025186:	2002      	movs	r0, #2
 8025188:	f7e2 fed2 	bl	8007f30 <mg_log_prefix>
 802518c:	480d      	ldr	r0, [pc, #52]	@ (80251c4 <mg_ota_boot+0xd0>)
 802518e:	f7e2 ff1f 	bl	8007fd0 <mg_log>
    mg_flash_save(NULL, mg_fwkey(MG_FIRMWARE_CURRENT), &curr, sizeof(curr));
 8025192:	2000      	movs	r0, #0
 8025194:	f000 fae6 	bl	8025764 <mg_fwkey>
 8025198:	4601      	mov	r1, r0
 802519a:	f107 0210 	add.w	r2, r7, #16
 802519e:	2310      	movs	r3, #16
 80251a0:	2000      	movs	r0, #0
 80251a2:	f7dc fc07 	bl	80019b4 <mg_flash_save>
}
 80251a6:	bf00      	nop
 80251a8:	3720      	adds	r7, #32
 80251aa:	46bd      	mov	sp, r7
 80251ac:	bd80      	pop	{r7, pc}
 80251ae:	bf00      	nop
 80251b0:	24000240 	.word	0x24000240
 80251b4:	08028e8c 	.word	0x08028e8c
 80251b8:	0802597c 	.word	0x0802597c
 80251bc:	08025994 	.word	0x08025994
 80251c0:	080259ac 	.word	0x080259ac
 80251c4:	080259dc 	.word	0x080259dc

080251c8 <mg_flash_start>:
MG_IRAM void *mg_flash_start(void) {
 80251c8:	b480      	push	{r7}
 80251ca:	af00      	add	r7, sp, #0
  return (void *) 0x08000000;
 80251cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
}
 80251d0:	4618      	mov	r0, r3
 80251d2:	46bd      	mov	sp, r7
 80251d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251d8:	4770      	bx	lr

080251da <mg_flash_size>:
MG_IRAM size_t mg_flash_size(void) {
 80251da:	b480      	push	{r7}
 80251dc:	af00      	add	r7, sp, #0
  return MG_REG(FLASH_SIZE_REG) * 1024;
 80251de:	4b04      	ldr	r3, [pc, #16]	@ (80251f0 <mg_flash_size+0x16>)
 80251e0:	681b      	ldr	r3, [r3, #0]
 80251e2:	029b      	lsls	r3, r3, #10
}
 80251e4:	4618      	mov	r0, r3
 80251e6:	46bd      	mov	sp, r7
 80251e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251ec:	4770      	bx	lr
 80251ee:	bf00      	nop
 80251f0:	1ff1e880 	.word	0x1ff1e880

080251f4 <mg_flash_sector_size>:
MG_IRAM size_t mg_flash_sector_size(void) {
 80251f4:	b480      	push	{r7}
 80251f6:	af00      	add	r7, sp, #0
  return 128 * 1024;  // 128k
 80251f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
}
 80251fc:	4618      	mov	r0, r3
 80251fe:	46bd      	mov	sp, r7
 8025200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025204:	4770      	bx	lr

08025206 <mg_flash_write_align>:
MG_IRAM size_t mg_flash_write_align(void) {
 8025206:	b480      	push	{r7}
 8025208:	af00      	add	r7, sp, #0
  return 32;  // 256 bit
 802520a:	2320      	movs	r3, #32
}
 802520c:	4618      	mov	r0, r3
 802520e:	46bd      	mov	sp, r7
 8025210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025214:	4770      	bx	lr

08025216 <mg_flash_bank>:
MG_IRAM int mg_flash_bank(void) {
 8025216:	b580      	push	{r7, lr}
 8025218:	af00      	add	r7, sp, #0
  if (mg_flash_size() < 2 * 1024 * 1024) return 0;  // No dual bank support
 802521a:	f7ff ffde 	bl	80251da <mg_flash_size>
 802521e:	4603      	mov	r3, r0
 8025220:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8025224:	d201      	bcs.n	802522a <mg_flash_bank+0x14>
 8025226:	2300      	movs	r3, #0
 8025228:	e006      	b.n	8025238 <mg_flash_bank+0x22>
  return MG_REG(FLASH_BASE1 + FLASH_OPTCR) & MG_BIT(31) ? 2 : 1;
 802522a:	4b04      	ldr	r3, [pc, #16]	@ (802523c <mg_flash_bank+0x26>)
 802522c:	681b      	ldr	r3, [r3, #0]
 802522e:	2b00      	cmp	r3, #0
 8025230:	da01      	bge.n	8025236 <mg_flash_bank+0x20>
 8025232:	2302      	movs	r3, #2
 8025234:	e000      	b.n	8025238 <mg_flash_bank+0x22>
 8025236:	2301      	movs	r3, #1
}
 8025238:	4618      	mov	r0, r3
 802523a:	bd80      	pop	{r7, pc}
 802523c:	52002018 	.word	0x52002018

08025240 <flash_unlock>:
MG_IRAM static void flash_unlock(void) {
 8025240:	b580      	push	{r7, lr}
 8025242:	af00      	add	r7, sp, #0
  if (unlocked == false) {
 8025244:	4b11      	ldr	r3, [pc, #68]	@ (802528c <flash_unlock+0x4c>)
 8025246:	781b      	ldrb	r3, [r3, #0]
 8025248:	f083 0301 	eor.w	r3, r3, #1
 802524c:	b2db      	uxtb	r3, r3
 802524e:	2b00      	cmp	r3, #0
 8025250:	d019      	beq.n	8025286 <flash_unlock+0x46>
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0x45670123;
 8025252:	4b0f      	ldr	r3, [pc, #60]	@ (8025290 <flash_unlock+0x50>)
 8025254:	4a0f      	ldr	r2, [pc, #60]	@ (8025294 <flash_unlock+0x54>)
 8025256:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0xcdef89ab;
 8025258:	4b0d      	ldr	r3, [pc, #52]	@ (8025290 <flash_unlock+0x50>)
 802525a:	4a0f      	ldr	r2, [pc, #60]	@ (8025298 <flash_unlock+0x58>)
 802525c:	601a      	str	r2, [r3, #0]
    if (mg_flash_bank() > 0) {
 802525e:	f7ff ffda 	bl	8025216 <mg_flash_bank>
 8025262:	4603      	mov	r3, r0
 8025264:	2b00      	cmp	r3, #0
 8025266:	dd05      	ble.n	8025274 <flash_unlock+0x34>
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0x45670123;
 8025268:	4b0c      	ldr	r3, [pc, #48]	@ (802529c <flash_unlock+0x5c>)
 802526a:	4a0a      	ldr	r2, [pc, #40]	@ (8025294 <flash_unlock+0x54>)
 802526c:	601a      	str	r2, [r3, #0]
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0xcdef89ab;
 802526e:	4b0b      	ldr	r3, [pc, #44]	@ (802529c <flash_unlock+0x5c>)
 8025270:	4a09      	ldr	r2, [pc, #36]	@ (8025298 <flash_unlock+0x58>)
 8025272:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x08192a3b;  // opt reg is "shared"
 8025274:	4b0a      	ldr	r3, [pc, #40]	@ (80252a0 <flash_unlock+0x60>)
 8025276:	4a0b      	ldr	r2, [pc, #44]	@ (80252a4 <flash_unlock+0x64>)
 8025278:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x4c5d6e7f;  // thus unlock once
 802527a:	4b09      	ldr	r3, [pc, #36]	@ (80252a0 <flash_unlock+0x60>)
 802527c:	4a0a      	ldr	r2, [pc, #40]	@ (80252a8 <flash_unlock+0x68>)
 802527e:	601a      	str	r2, [r3, #0]
    unlocked = true;
 8025280:	4b02      	ldr	r3, [pc, #8]	@ (802528c <flash_unlock+0x4c>)
 8025282:	2201      	movs	r2, #1
 8025284:	701a      	strb	r2, [r3, #0]
}
 8025286:	bf00      	nop
 8025288:	bd80      	pop	{r7, pc}
 802528a:	bf00      	nop
 802528c:	24003e80 	.word	0x24003e80
 8025290:	52002004 	.word	0x52002004
 8025294:	45670123 	.word	0x45670123
 8025298:	cdef89ab 	.word	0xcdef89ab
 802529c:	52002104 	.word	0x52002104
 80252a0:	52002008 	.word	0x52002008
 80252a4:	08192a3b 	.word	0x08192a3b
 80252a8:	4c5d6e7f 	.word	0x4c5d6e7f

080252ac <flash_page_start>:
MG_IRAM static bool flash_page_start(volatile uint32_t *dst) {
 80252ac:	b590      	push	{r4, r7, lr}
 80252ae:	b087      	sub	sp, #28
 80252b0:	af00      	add	r7, sp, #0
 80252b2:	6078      	str	r0, [r7, #4]
  char *base = (char *) mg_flash_start(), *end = base + mg_flash_size();
 80252b4:	f7ff ff88 	bl	80251c8 <mg_flash_start>
 80252b8:	6178      	str	r0, [r7, #20]
 80252ba:	f7ff ff8e 	bl	80251da <mg_flash_size>
 80252be:	4602      	mov	r2, r0
 80252c0:	697b      	ldr	r3, [r7, #20]
 80252c2:	4413      	add	r3, r2
 80252c4:	613b      	str	r3, [r7, #16]
  volatile char *p = (char *) dst;
 80252c6:	687b      	ldr	r3, [r7, #4]
 80252c8:	60fb      	str	r3, [r7, #12]
  return p >= base && p < end && ((p - base) % mg_flash_sector_size()) == 0;
 80252ca:	68fa      	ldr	r2, [r7, #12]
 80252cc:	697b      	ldr	r3, [r7, #20]
 80252ce:	429a      	cmp	r2, r3
 80252d0:	d313      	bcc.n	80252fa <flash_page_start+0x4e>
 80252d2:	68fa      	ldr	r2, [r7, #12]
 80252d4:	693b      	ldr	r3, [r7, #16]
 80252d6:	429a      	cmp	r2, r3
 80252d8:	d20f      	bcs.n	80252fa <flash_page_start+0x4e>
 80252da:	68fa      	ldr	r2, [r7, #12]
 80252dc:	697b      	ldr	r3, [r7, #20]
 80252de:	1ad3      	subs	r3, r2, r3
 80252e0:	461c      	mov	r4, r3
 80252e2:	f7ff ff87 	bl	80251f4 <mg_flash_sector_size>
 80252e6:	4603      	mov	r3, r0
 80252e8:	fbb4 f2f3 	udiv	r2, r4, r3
 80252ec:	fb02 f303 	mul.w	r3, r2, r3
 80252f0:	1ae3      	subs	r3, r4, r3
 80252f2:	2b00      	cmp	r3, #0
 80252f4:	d101      	bne.n	80252fa <flash_page_start+0x4e>
 80252f6:	2301      	movs	r3, #1
 80252f8:	e000      	b.n	80252fc <flash_page_start+0x50>
 80252fa:	2300      	movs	r3, #0
 80252fc:	f003 0301 	and.w	r3, r3, #1
 8025300:	b2db      	uxtb	r3, r3
}
 8025302:	4618      	mov	r0, r3
 8025304:	371c      	adds	r7, #28
 8025306:	46bd      	mov	sp, r7
 8025308:	bd90      	pop	{r4, r7, pc}

0802530a <flash_is_err>:
MG_IRAM static bool flash_is_err(uint32_t bank) {
 802530a:	b480      	push	{r7}
 802530c:	b083      	sub	sp, #12
 802530e:	af00      	add	r7, sp, #0
 8025310:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_SR) & ((MG_BIT(11) - 1) << 17);  // RM0433 4.9.5
 8025312:	687b      	ldr	r3, [r7, #4]
 8025314:	3310      	adds	r3, #16
 8025316:	681a      	ldr	r2, [r3, #0]
 8025318:	4b06      	ldr	r3, [pc, #24]	@ (8025334 <flash_is_err+0x2a>)
 802531a:	4013      	ands	r3, r2
 802531c:	2b00      	cmp	r3, #0
 802531e:	bf14      	ite	ne
 8025320:	2301      	movne	r3, #1
 8025322:	2300      	moveq	r3, #0
 8025324:	b2db      	uxtb	r3, r3
}
 8025326:	4618      	mov	r0, r3
 8025328:	370c      	adds	r7, #12
 802532a:	46bd      	mov	sp, r7
 802532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025330:	4770      	bx	lr
 8025332:	bf00      	nop
 8025334:	0ffe0000 	.word	0x0ffe0000

08025338 <flash_wait>:
MG_IRAM static void flash_wait(uint32_t bank) {
 8025338:	b480      	push	{r7}
 802533a:	b083      	sub	sp, #12
 802533c:	af00      	add	r7, sp, #0
 802533e:	6078      	str	r0, [r7, #4]
  while (MG_REG(bank + FLASH_SR) & (MG_BIT(0) | MG_BIT(2))) (void) 0;
 8025340:	bf00      	nop
 8025342:	687b      	ldr	r3, [r7, #4]
 8025344:	3310      	adds	r3, #16
 8025346:	681b      	ldr	r3, [r3, #0]
 8025348:	f003 0305 	and.w	r3, r3, #5
 802534c:	2b00      	cmp	r3, #0
 802534e:	d1f8      	bne.n	8025342 <flash_wait+0xa>
}
 8025350:	bf00      	nop
 8025352:	bf00      	nop
 8025354:	370c      	adds	r7, #12
 8025356:	46bd      	mov	sp, r7
 8025358:	f85d 7b04 	ldr.w	r7, [sp], #4
 802535c:	4770      	bx	lr

0802535e <flash_clear_err>:
MG_IRAM static void flash_clear_err(uint32_t bank) {
 802535e:	b580      	push	{r7, lr}
 8025360:	b082      	sub	sp, #8
 8025362:	af00      	add	r7, sp, #0
 8025364:	6078      	str	r0, [r7, #4]
  flash_wait(bank);                                      // Wait until ready
 8025366:	6878      	ldr	r0, [r7, #4]
 8025368:	f7ff ffe6 	bl	8025338 <flash_wait>
  MG_REG(bank + FLASH_CCR) = ((MG_BIT(11) - 1) << 16U);  // Clear all errors
 802536c:	687b      	ldr	r3, [r7, #4]
 802536e:	3314      	adds	r3, #20
 8025370:	461a      	mov	r2, r3
 8025372:	4b03      	ldr	r3, [pc, #12]	@ (8025380 <flash_clear_err+0x22>)
 8025374:	6013      	str	r3, [r2, #0]
}
 8025376:	bf00      	nop
 8025378:	3708      	adds	r7, #8
 802537a:	46bd      	mov	sp, r7
 802537c:	bd80      	pop	{r7, pc}
 802537e:	bf00      	nop
 8025380:	07ff0000 	.word	0x07ff0000

08025384 <flash_bank_is_swapped>:
MG_IRAM static bool flash_bank_is_swapped(uint32_t bank) {
 8025384:	b480      	push	{r7}
 8025386:	b083      	sub	sp, #12
 8025388:	af00      	add	r7, sp, #0
 802538a:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_OPTCR) & MG_BIT(31);  // RM0433 4.9.7
 802538c:	687b      	ldr	r3, [r7, #4]
 802538e:	3318      	adds	r3, #24
 8025390:	681b      	ldr	r3, [r3, #0]
 8025392:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8025396:	2b00      	cmp	r3, #0
 8025398:	bf14      	ite	ne
 802539a:	2301      	movne	r3, #1
 802539c:	2300      	moveq	r3, #0
 802539e:	b2db      	uxtb	r3, r3
}
 80253a0:	4618      	mov	r0, r3
 80253a2:	370c      	adds	r7, #12
 80253a4:	46bd      	mov	sp, r7
 80253a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253aa:	4770      	bx	lr

080253ac <flash_bank>:
MG_IRAM static uint32_t flash_bank(void *addr) {
 80253ac:	b580      	push	{r7, lr}
 80253ae:	b084      	sub	sp, #16
 80253b0:	af00      	add	r7, sp, #0
 80253b2:	6078      	str	r0, [r7, #4]
  size_t ofs = (char *) addr - (char *) mg_flash_start();
 80253b4:	f7ff ff08 	bl	80251c8 <mg_flash_start>
 80253b8:	4602      	mov	r2, r0
 80253ba:	687b      	ldr	r3, [r7, #4]
 80253bc:	1a9b      	subs	r3, r3, r2
 80253be:	60fb      	str	r3, [r7, #12]
  if (mg_flash_bank() == 0) return FLASH_BASE1;
 80253c0:	f7ff ff29 	bl	8025216 <mg_flash_bank>
 80253c4:	4603      	mov	r3, r0
 80253c6:	2b00      	cmp	r3, #0
 80253c8:	d101      	bne.n	80253ce <flash_bank+0x22>
 80253ca:	4b08      	ldr	r3, [pc, #32]	@ (80253ec <flash_bank+0x40>)
 80253cc:	e009      	b.n	80253e2 <flash_bank+0x36>
  return ofs < mg_flash_size() / 2 ? FLASH_BASE1 : FLASH_BASE2;
 80253ce:	f7ff ff04 	bl	80251da <mg_flash_size>
 80253d2:	4603      	mov	r3, r0
 80253d4:	085b      	lsrs	r3, r3, #1
 80253d6:	68fa      	ldr	r2, [r7, #12]
 80253d8:	429a      	cmp	r2, r3
 80253da:	d201      	bcs.n	80253e0 <flash_bank+0x34>
 80253dc:	4b03      	ldr	r3, [pc, #12]	@ (80253ec <flash_bank+0x40>)
 80253de:	e000      	b.n	80253e2 <flash_bank+0x36>
 80253e0:	4b03      	ldr	r3, [pc, #12]	@ (80253f0 <flash_bank+0x44>)
}
 80253e2:	4618      	mov	r0, r3
 80253e4:	3710      	adds	r7, #16
 80253e6:	46bd      	mov	sp, r7
 80253e8:	bd80      	pop	{r7, pc}
 80253ea:	bf00      	nop
 80253ec:	52002000 	.word	0x52002000
 80253f0:	52002100 	.word	0x52002100

080253f4 <mg_flash_erase>:
MG_IRAM bool mg_flash_erase(void *addr) {
 80253f4:	b580      	push	{r7, lr}
 80253f6:	b08a      	sub	sp, #40	@ 0x28
 80253f8:	af02      	add	r7, sp, #8
 80253fa:	6078      	str	r0, [r7, #4]
  bool ok = false;
 80253fc:	2300      	movs	r3, #0
 80253fe:	77fb      	strb	r3, [r7, #31]
  if (flash_page_start(addr) == false) {
 8025400:	6878      	ldr	r0, [r7, #4]
 8025402:	f7ff ff53 	bl	80252ac <flash_page_start>
 8025406:	4603      	mov	r3, r0
 8025408:	f083 0301 	eor.w	r3, r3, #1
 802540c:	b2db      	uxtb	r3, r3
 802540e:	2b00      	cmp	r3, #0
 8025410:	d010      	beq.n	8025434 <mg_flash_erase+0x40>
    MG_ERROR(("%p is not on a sector boundary", addr));
 8025412:	4b45      	ldr	r3, [pc, #276]	@ (8025528 <mg_flash_erase+0x134>)
 8025414:	681b      	ldr	r3, [r3, #0]
 8025416:	2b00      	cmp	r3, #0
 8025418:	f340 8081 	ble.w	802551e <mg_flash_erase+0x12a>
 802541c:	4b43      	ldr	r3, [pc, #268]	@ (802552c <mg_flash_erase+0x138>)
 802541e:	f240 428e 	movw	r2, #1166	@ 0x48e
 8025422:	4943      	ldr	r1, [pc, #268]	@ (8025530 <mg_flash_erase+0x13c>)
 8025424:	2001      	movs	r0, #1
 8025426:	f7e2 fd83 	bl	8007f30 <mg_log_prefix>
 802542a:	6879      	ldr	r1, [r7, #4]
 802542c:	4841      	ldr	r0, [pc, #260]	@ (8025534 <mg_flash_erase+0x140>)
 802542e:	f7e2 fdcf 	bl	8007fd0 <mg_log>
 8025432:	e074      	b.n	802551e <mg_flash_erase+0x12a>
    uintptr_t diff = (char *) addr - (char *) mg_flash_start();
 8025434:	f7ff fec8 	bl	80251c8 <mg_flash_start>
 8025438:	4602      	mov	r2, r0
 802543a:	687b      	ldr	r3, [r7, #4]
 802543c:	1a9b      	subs	r3, r3, r2
 802543e:	617b      	str	r3, [r7, #20]
    uint32_t sector = diff / mg_flash_sector_size();
 8025440:	f7ff fed8 	bl	80251f4 <mg_flash_sector_size>
 8025444:	4602      	mov	r2, r0
 8025446:	697b      	ldr	r3, [r7, #20]
 8025448:	fbb3 f3f2 	udiv	r3, r3, r2
 802544c:	61bb      	str	r3, [r7, #24]
    uint32_t bank = flash_bank(addr);
 802544e:	6878      	ldr	r0, [r7, #4]
 8025450:	f7ff ffac 	bl	80253ac <flash_bank>
 8025454:	6138      	str	r0, [r7, #16]
    uint32_t saved_cr = MG_REG(bank + FLASH_CR);  // Save CR value
 8025456:	693b      	ldr	r3, [r7, #16]
 8025458:	330c      	adds	r3, #12
 802545a:	681b      	ldr	r3, [r3, #0]
 802545c:	60fb      	str	r3, [r7, #12]
    flash_unlock();
 802545e:	f7ff feef 	bl	8025240 <flash_unlock>
    if (sector > 7) sector -= 8;
 8025462:	69bb      	ldr	r3, [r7, #24]
 8025464:	2b07      	cmp	r3, #7
 8025466:	d902      	bls.n	802546e <mg_flash_erase+0x7a>
 8025468:	69bb      	ldr	r3, [r7, #24]
 802546a:	3b08      	subs	r3, #8
 802546c:	61bb      	str	r3, [r7, #24]
    flash_clear_err(bank);
 802546e:	6938      	ldr	r0, [r7, #16]
 8025470:	f7ff ff75 	bl	802535e <flash_clear_err>
    MG_REG(bank + FLASH_CR) = MG_BIT(5);             // 32-bit write parallelism
 8025474:	693b      	ldr	r3, [r7, #16]
 8025476:	330c      	adds	r3, #12
 8025478:	461a      	mov	r2, r3
 802547a:	2320      	movs	r3, #32
 802547c:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= (sector & 7U) << 8U;  // Sector to erase
 802547e:	693b      	ldr	r3, [r7, #16]
 8025480:	330c      	adds	r3, #12
 8025482:	681a      	ldr	r2, [r3, #0]
 8025484:	69bb      	ldr	r3, [r7, #24]
 8025486:	021b      	lsls	r3, r3, #8
 8025488:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 802548c:	6939      	ldr	r1, [r7, #16]
 802548e:	310c      	adds	r1, #12
 8025490:	4313      	orrs	r3, r2
 8025492:	600b      	str	r3, [r1, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(2);            // Sector erase bit
 8025494:	693b      	ldr	r3, [r7, #16]
 8025496:	330c      	adds	r3, #12
 8025498:	681b      	ldr	r3, [r3, #0]
 802549a:	693a      	ldr	r2, [r7, #16]
 802549c:	320c      	adds	r2, #12
 802549e:	f043 0304 	orr.w	r3, r3, #4
 80254a2:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(7);            // Start erasing
 80254a4:	693b      	ldr	r3, [r7, #16]
 80254a6:	330c      	adds	r3, #12
 80254a8:	681b      	ldr	r3, [r3, #0]
 80254aa:	693a      	ldr	r2, [r7, #16]
 80254ac:	320c      	adds	r2, #12
 80254ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80254b2:	6013      	str	r3, [r2, #0]
    ok = !flash_is_err(bank);
 80254b4:	6938      	ldr	r0, [r7, #16]
 80254b6:	f7ff ff28 	bl	802530a <flash_is_err>
 80254ba:	4603      	mov	r3, r0
 80254bc:	2b00      	cmp	r3, #0
 80254be:	bf14      	ite	ne
 80254c0:	2301      	movne	r3, #1
 80254c2:	2300      	moveq	r3, #0
 80254c4:	b2db      	uxtb	r3, r3
 80254c6:	f083 0301 	eor.w	r3, r3, #1
 80254ca:	b2db      	uxtb	r3, r3
 80254cc:	77fb      	strb	r3, [r7, #31]
 80254ce:	7ffb      	ldrb	r3, [r7, #31]
 80254d0:	f003 0301 	and.w	r3, r3, #1
 80254d4:	77fb      	strb	r3, [r7, #31]
    MG_DEBUG(("Erase sector %lu @ %p %s. CR %#lx SR %#lx", sector, addr,
 80254d6:	4b14      	ldr	r3, [pc, #80]	@ (8025528 <mg_flash_erase+0x134>)
 80254d8:	681b      	ldr	r3, [r3, #0]
 80254da:	2b02      	cmp	r3, #2
 80254dc:	dd1a      	ble.n	8025514 <mg_flash_erase+0x120>
 80254de:	4b13      	ldr	r3, [pc, #76]	@ (802552c <mg_flash_erase+0x138>)
 80254e0:	f240 429e 	movw	r2, #1182	@ 0x49e
 80254e4:	4912      	ldr	r1, [pc, #72]	@ (8025530 <mg_flash_erase+0x13c>)
 80254e6:	2003      	movs	r0, #3
 80254e8:	f7e2 fd22 	bl	8007f30 <mg_log_prefix>
 80254ec:	7ffb      	ldrb	r3, [r7, #31]
 80254ee:	2b00      	cmp	r3, #0
 80254f0:	d001      	beq.n	80254f6 <mg_flash_erase+0x102>
 80254f2:	4911      	ldr	r1, [pc, #68]	@ (8025538 <mg_flash_erase+0x144>)
 80254f4:	e000      	b.n	80254f8 <mg_flash_erase+0x104>
 80254f6:	4911      	ldr	r1, [pc, #68]	@ (802553c <mg_flash_erase+0x148>)
 80254f8:	693b      	ldr	r3, [r7, #16]
 80254fa:	330c      	adds	r3, #12
 80254fc:	681b      	ldr	r3, [r3, #0]
 80254fe:	693a      	ldr	r2, [r7, #16]
 8025500:	3210      	adds	r2, #16
 8025502:	6812      	ldr	r2, [r2, #0]
 8025504:	9201      	str	r2, [sp, #4]
 8025506:	9300      	str	r3, [sp, #0]
 8025508:	460b      	mov	r3, r1
 802550a:	687a      	ldr	r2, [r7, #4]
 802550c:	69b9      	ldr	r1, [r7, #24]
 802550e:	480c      	ldr	r0, [pc, #48]	@ (8025540 <mg_flash_erase+0x14c>)
 8025510:	f7e2 fd5e 	bl	8007fd0 <mg_log>
    MG_REG(bank + FLASH_CR) = saved_cr;  // Restore CR
 8025514:	693b      	ldr	r3, [r7, #16]
 8025516:	330c      	adds	r3, #12
 8025518:	461a      	mov	r2, r3
 802551a:	68fb      	ldr	r3, [r7, #12]
 802551c:	6013      	str	r3, [r2, #0]
  return ok;
 802551e:	7ffb      	ldrb	r3, [r7, #31]
}
 8025520:	4618      	mov	r0, r3
 8025522:	3720      	adds	r7, #32
 8025524:	46bd      	mov	sp, r7
 8025526:	bd80      	pop	{r7, pc}
 8025528:	24000240 	.word	0x24000240
 802552c:	08028ed0 	.word	0x08028ed0
 8025530:	0802597c 	.word	0x0802597c
 8025534:	08025b14 	.word	0x08025b14
 8025538:	08025b34 	.word	0x08025b34
 802553c:	08025b38 	.word	0x08025b38
 8025540:	08025b40 	.word	0x08025b40

08025544 <mg_flash_swap_bank>:
MG_IRAM bool mg_flash_swap_bank(size_t size) {
 8025544:	b580      	push	{r7, lr}
 8025546:	b084      	sub	sp, #16
 8025548:	af00      	add	r7, sp, #0
 802554a:	6078      	str	r0, [r7, #4]
  if (mg_flash_bank() == 0) return true;
 802554c:	f7ff fe63 	bl	8025216 <mg_flash_bank>
 8025550:	4603      	mov	r3, r0
 8025552:	2b00      	cmp	r3, #0
 8025554:	d101      	bne.n	802555a <mg_flash_swap_bank+0x16>
 8025556:	2301      	movs	r3, #1
 8025558:	e02e      	b.n	80255b8 <mg_flash_swap_bank+0x74>
  uint32_t bank = FLASH_BASE1;
 802555a:	4b19      	ldr	r3, [pc, #100]	@ (80255c0 <mg_flash_swap_bank+0x7c>)
 802555c:	60fb      	str	r3, [r7, #12]
  uint32_t desired = flash_bank_is_swapped(bank) ? 0 : MG_BIT(31);
 802555e:	68f8      	ldr	r0, [r7, #12]
 8025560:	f7ff ff10 	bl	8025384 <flash_bank_is_swapped>
 8025564:	4603      	mov	r3, r0
 8025566:	2b00      	cmp	r3, #0
 8025568:	d001      	beq.n	802556e <mg_flash_swap_bank+0x2a>
 802556a:	2300      	movs	r3, #0
 802556c:	e001      	b.n	8025572 <mg_flash_swap_bank+0x2e>
 802556e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025572:	60bb      	str	r3, [r7, #8]
  flash_unlock();
 8025574:	f7ff fe64 	bl	8025240 <flash_unlock>
  flash_clear_err(bank);
 8025578:	68f8      	ldr	r0, [r7, #12]
 802557a:	f7ff fef0 	bl	802535e <flash_clear_err>
  MG_SET_BITS(MG_REG(bank + FLASH_OPTSR_PRG), MG_BIT(31), desired);
 802557e:	68fb      	ldr	r3, [r7, #12]
 8025580:	3320      	adds	r3, #32
 8025582:	681b      	ldr	r3, [r3, #0]
 8025584:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8025588:	68fb      	ldr	r3, [r7, #12]
 802558a:	3320      	adds	r3, #32
 802558c:	4619      	mov	r1, r3
 802558e:	68bb      	ldr	r3, [r7, #8]
 8025590:	4313      	orrs	r3, r2
 8025592:	600b      	str	r3, [r1, #0]
  MG_REG(bank + FLASH_OPTCR) |= MG_BIT(1);  // OPTSTART
 8025594:	68fb      	ldr	r3, [r7, #12]
 8025596:	3318      	adds	r3, #24
 8025598:	681b      	ldr	r3, [r3, #0]
 802559a:	68fa      	ldr	r2, [r7, #12]
 802559c:	3218      	adds	r2, #24
 802559e:	f043 0302 	orr.w	r3, r3, #2
 80255a2:	6013      	str	r3, [r2, #0]
  while ((MG_REG(bank + FLASH_OPTSR_CUR) & MG_BIT(31)) != desired) (void) 0;
 80255a4:	bf00      	nop
 80255a6:	68fb      	ldr	r3, [r7, #12]
 80255a8:	331c      	adds	r3, #28
 80255aa:	681b      	ldr	r3, [r3, #0]
 80255ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80255b0:	68ba      	ldr	r2, [r7, #8]
 80255b2:	429a      	cmp	r2, r3
 80255b4:	d1f7      	bne.n	80255a6 <mg_flash_swap_bank+0x62>
  return true;
 80255b6:	2301      	movs	r3, #1
}
 80255b8:	4618      	mov	r0, r3
 80255ba:	3710      	adds	r7, #16
 80255bc:	46bd      	mov	sp, r7
 80255be:	bd80      	pop	{r7, pc}
 80255c0:	52002000 	.word	0x52002000

080255c4 <mg_flash_write>:
MG_IRAM bool mg_flash_write(void *addr, const void *buf, size_t len) {
 80255c4:	b580      	push	{r7, lr}
 80255c6:	b08c      	sub	sp, #48	@ 0x30
 80255c8:	af02      	add	r7, sp, #8
 80255ca:	60f8      	str	r0, [r7, #12]
 80255cc:	60b9      	str	r1, [r7, #8]
 80255ce:	607a      	str	r2, [r7, #4]
  if ((len % mg_flash_write_align()) != 0) {
 80255d0:	f7ff fe19 	bl	8025206 <mg_flash_write_align>
 80255d4:	4602      	mov	r2, r0
 80255d6:	687b      	ldr	r3, [r7, #4]
 80255d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80255dc:	fb01 f202 	mul.w	r2, r1, r2
 80255e0:	1a9b      	subs	r3, r3, r2
 80255e2:	2b00      	cmp	r3, #0
 80255e4:	d014      	beq.n	8025610 <mg_flash_write+0x4c>
    MG_ERROR(("%lu is not aligned to %lu", len, mg_flash_write_align()));
 80255e6:	4b50      	ldr	r3, [pc, #320]	@ (8025728 <mg_flash_write+0x164>)
 80255e8:	681b      	ldr	r3, [r3, #0]
 80255ea:	2b00      	cmp	r3, #0
 80255ec:	dd0e      	ble.n	802560c <mg_flash_write+0x48>
 80255ee:	4b4f      	ldr	r3, [pc, #316]	@ (802572c <mg_flash_write+0x168>)
 80255f0:	f240 42b7 	movw	r2, #1207	@ 0x4b7
 80255f4:	494e      	ldr	r1, [pc, #312]	@ (8025730 <mg_flash_write+0x16c>)
 80255f6:	2001      	movs	r0, #1
 80255f8:	f7e2 fc9a 	bl	8007f30 <mg_log_prefix>
 80255fc:	f7ff fe03 	bl	8025206 <mg_flash_write_align>
 8025600:	4603      	mov	r3, r0
 8025602:	461a      	mov	r2, r3
 8025604:	6879      	ldr	r1, [r7, #4]
 8025606:	484b      	ldr	r0, [pc, #300]	@ (8025734 <mg_flash_write+0x170>)
 8025608:	f7e2 fce2 	bl	8007fd0 <mg_log>
    return false;
 802560c:	2300      	movs	r3, #0
 802560e:	e086      	b.n	802571e <mg_flash_write+0x15a>
  uint32_t bank = flash_bank(addr);
 8025610:	68f8      	ldr	r0, [r7, #12]
 8025612:	f7ff fecb 	bl	80253ac <flash_bank>
 8025616:	61b8      	str	r0, [r7, #24]
  uint32_t *dst = (uint32_t *) addr;
 8025618:	68fb      	ldr	r3, [r7, #12]
 802561a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t *src = (uint32_t *) buf;
 802561c:	68bb      	ldr	r3, [r7, #8]
 802561e:	623b      	str	r3, [r7, #32]
  uint32_t *end = (uint32_t *) ((char *) buf + len);
 8025620:	68ba      	ldr	r2, [r7, #8]
 8025622:	687b      	ldr	r3, [r7, #4]
 8025624:	4413      	add	r3, r2
 8025626:	617b      	str	r3, [r7, #20]
  bool ok = true;
 8025628:	2301      	movs	r3, #1
 802562a:	77fb      	strb	r3, [r7, #31]
  flash_unlock();
 802562c:	f7ff fe08 	bl	8025240 <flash_unlock>
  flash_clear_err(bank);
 8025630:	69b8      	ldr	r0, [r7, #24]
 8025632:	f7ff fe94 	bl	802535e <flash_clear_err>
  MG_REG(bank + FLASH_CR) = MG_BIT(1);   // Set programming flag
 8025636:	69bb      	ldr	r3, [r7, #24]
 8025638:	330c      	adds	r3, #12
 802563a:	461a      	mov	r2, r3
 802563c:	2302      	movs	r3, #2
 802563e:	6013      	str	r3, [r2, #0]
  MG_REG(bank + FLASH_CR) |= MG_BIT(5);  // 32-bit write parallelism
 8025640:	69bb      	ldr	r3, [r7, #24]
 8025642:	330c      	adds	r3, #12
 8025644:	681b      	ldr	r3, [r3, #0]
 8025646:	69ba      	ldr	r2, [r7, #24]
 8025648:	320c      	adds	r2, #12
 802564a:	f043 0320 	orr.w	r3, r3, #32
 802564e:	6013      	str	r3, [r2, #0]
  MG_DEBUG(("Writing flash @ %p, %lu bytes", addr, len));
 8025650:	4b35      	ldr	r3, [pc, #212]	@ (8025728 <mg_flash_write+0x164>)
 8025652:	681b      	ldr	r3, [r3, #0]
 8025654:	2b02      	cmp	r3, #2
 8025656:	dd0b      	ble.n	8025670 <mg_flash_write+0xac>
 8025658:	4b34      	ldr	r3, [pc, #208]	@ (802572c <mg_flash_write+0x168>)
 802565a:	f240 42c3 	movw	r2, #1219	@ 0x4c3
 802565e:	4934      	ldr	r1, [pc, #208]	@ (8025730 <mg_flash_write+0x16c>)
 8025660:	2003      	movs	r0, #3
 8025662:	f7e2 fc65 	bl	8007f30 <mg_log_prefix>
 8025666:	687a      	ldr	r2, [r7, #4]
 8025668:	68f9      	ldr	r1, [r7, #12]
 802566a:	4833      	ldr	r0, [pc, #204]	@ (8025738 <mg_flash_write+0x174>)
 802566c:	f7e2 fcb0 	bl	8007fd0 <mg_log>
  MG_ARM_DISABLE_IRQ();
 8025670:	b672      	cpsid	i
  while (ok && src < end) {
 8025672:	e024      	b.n	80256be <mg_flash_write+0xfa>
    if (flash_page_start(dst) && mg_flash_erase(dst) == false) {
 8025674:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8025676:	f7ff fe19 	bl	80252ac <flash_page_start>
 802567a:	4603      	mov	r3, r0
 802567c:	2b00      	cmp	r3, #0
 802567e:	d00b      	beq.n	8025698 <mg_flash_write+0xd4>
 8025680:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8025682:	f7ff feb7 	bl	80253f4 <mg_flash_erase>
 8025686:	4603      	mov	r3, r0
 8025688:	f083 0301 	eor.w	r3, r3, #1
 802568c:	b2db      	uxtb	r3, r3
 802568e:	2b00      	cmp	r3, #0
 8025690:	d002      	beq.n	8025698 <mg_flash_write+0xd4>
      ok = false;
 8025692:	2300      	movs	r3, #0
 8025694:	77fb      	strb	r3, [r7, #31]
      break;
 8025696:	e019      	b.n	80256cc <mg_flash_write+0x108>
    *(volatile uint32_t *) dst++ = *src++;
 8025698:	6a3a      	ldr	r2, [r7, #32]
 802569a:	1d13      	adds	r3, r2, #4
 802569c:	623b      	str	r3, [r7, #32]
 802569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80256a0:	1d19      	adds	r1, r3, #4
 80256a2:	6279      	str	r1, [r7, #36]	@ 0x24
 80256a4:	6812      	ldr	r2, [r2, #0]
 80256a6:	601a      	str	r2, [r3, #0]
    flash_wait(bank);
 80256a8:	69b8      	ldr	r0, [r7, #24]
 80256aa:	f7ff fe45 	bl	8025338 <flash_wait>
    if (flash_is_err(bank)) ok = false;
 80256ae:	69b8      	ldr	r0, [r7, #24]
 80256b0:	f7ff fe2b 	bl	802530a <flash_is_err>
 80256b4:	4603      	mov	r3, r0
 80256b6:	2b00      	cmp	r3, #0
 80256b8:	d001      	beq.n	80256be <mg_flash_write+0xfa>
 80256ba:	2300      	movs	r3, #0
 80256bc:	77fb      	strb	r3, [r7, #31]
  while (ok && src < end) {
 80256be:	7ffb      	ldrb	r3, [r7, #31]
 80256c0:	2b00      	cmp	r3, #0
 80256c2:	d003      	beq.n	80256cc <mg_flash_write+0x108>
 80256c4:	6a3a      	ldr	r2, [r7, #32]
 80256c6:	697b      	ldr	r3, [r7, #20]
 80256c8:	429a      	cmp	r2, r3
 80256ca:	d3d3      	bcc.n	8025674 <mg_flash_write+0xb0>
  MG_ARM_ENABLE_IRQ();
 80256cc:	b662      	cpsie	i
  MG_DEBUG(("Flash write %lu bytes @ %p: %s. CR %#lx SR %#lx", len, dst,
 80256ce:	4b16      	ldr	r3, [pc, #88]	@ (8025728 <mg_flash_write+0x164>)
 80256d0:	681b      	ldr	r3, [r3, #0]
 80256d2:	2b02      	cmp	r3, #2
 80256d4:	dd1a      	ble.n	802570c <mg_flash_write+0x148>
 80256d6:	4b15      	ldr	r3, [pc, #84]	@ (802572c <mg_flash_write+0x168>)
 80256d8:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 80256dc:	4914      	ldr	r1, [pc, #80]	@ (8025730 <mg_flash_write+0x16c>)
 80256de:	2003      	movs	r0, #3
 80256e0:	f7e2 fc26 	bl	8007f30 <mg_log_prefix>
 80256e4:	7ffb      	ldrb	r3, [r7, #31]
 80256e6:	2b00      	cmp	r3, #0
 80256e8:	d001      	beq.n	80256ee <mg_flash_write+0x12a>
 80256ea:	4914      	ldr	r1, [pc, #80]	@ (802573c <mg_flash_write+0x178>)
 80256ec:	e000      	b.n	80256f0 <mg_flash_write+0x12c>
 80256ee:	4914      	ldr	r1, [pc, #80]	@ (8025740 <mg_flash_write+0x17c>)
 80256f0:	69bb      	ldr	r3, [r7, #24]
 80256f2:	330c      	adds	r3, #12
 80256f4:	681b      	ldr	r3, [r3, #0]
 80256f6:	69ba      	ldr	r2, [r7, #24]
 80256f8:	3210      	adds	r2, #16
 80256fa:	6812      	ldr	r2, [r2, #0]
 80256fc:	9201      	str	r2, [sp, #4]
 80256fe:	9300      	str	r3, [sp, #0]
 8025700:	460b      	mov	r3, r1
 8025702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025704:	6879      	ldr	r1, [r7, #4]
 8025706:	480f      	ldr	r0, [pc, #60]	@ (8025744 <mg_flash_write+0x180>)
 8025708:	f7e2 fc62 	bl	8007fd0 <mg_log>
  MG_REG(bank + FLASH_CR) &= ~MG_BIT(1);  // Clear programming flag
 802570c:	69bb      	ldr	r3, [r7, #24]
 802570e:	330c      	adds	r3, #12
 8025710:	681b      	ldr	r3, [r3, #0]
 8025712:	69ba      	ldr	r2, [r7, #24]
 8025714:	320c      	adds	r2, #12
 8025716:	f023 0302 	bic.w	r3, r3, #2
 802571a:	6013      	str	r3, [r2, #0]
  return ok;
 802571c:	7ffb      	ldrb	r3, [r7, #31]
}
 802571e:	4618      	mov	r0, r3
 8025720:	3728      	adds	r7, #40	@ 0x28
 8025722:	46bd      	mov	sp, r7
 8025724:	bd80      	pop	{r7, pc}
 8025726:	bf00      	nop
 8025728:	24000240 	.word	0x24000240
 802572c:	08028ee0 	.word	0x08028ee0
 8025730:	0802597c 	.word	0x0802597c
 8025734:	08025b6c 	.word	0x08025b6c
 8025738:	08025b88 	.word	0x08025b88
 802573c:	08025b34 	.word	0x08025b34
 8025740:	08025b38 	.word	0x08025b38
 8025744:	08025ba8 	.word	0x08025ba8

08025748 <mg_device_reset>:
MG_IRAM void mg_device_reset(void) {
 8025748:	b480      	push	{r7}
 802574a:	af00      	add	r7, sp, #0
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
 802574c:	4b03      	ldr	r3, [pc, #12]	@ (802575c <mg_device_reset+0x14>)
 802574e:	4a04      	ldr	r2, [pc, #16]	@ (8025760 <mg_device_reset+0x18>)
 8025750:	601a      	str	r2, [r3, #0]
}
 8025752:	bf00      	nop
 8025754:	46bd      	mov	sp, r7
 8025756:	f85d 7b04 	ldr.w	r7, [sp], #4
 802575a:	4770      	bx	lr
 802575c:	e000ed0c 	.word	0xe000ed0c
 8025760:	05fa0004 	.word	0x05fa0004

08025764 <mg_fwkey>:
MG_IRAM static uint32_t mg_fwkey(int fw) {
 8025764:	b580      	push	{r7, lr}
 8025766:	b084      	sub	sp, #16
 8025768:	af00      	add	r7, sp, #0
 802576a:	6078      	str	r0, [r7, #4]
  uint32_t key = MG_OTADATA_KEY + fw;
 802576c:	687a      	ldr	r2, [r7, #4]
 802576e:	4b0e      	ldr	r3, [pc, #56]	@ (80257a8 <mg_fwkey+0x44>)
 8025770:	4413      	add	r3, r2
 8025772:	60fb      	str	r3, [r7, #12]
  int bank = mg_flash_bank();
 8025774:	f7ff fd4f 	bl	8025216 <mg_flash_bank>
 8025778:	60b8      	str	r0, [r7, #8]
  if (bank == 2 && fw == MG_FIRMWARE_PREVIOUS) key--;
 802577a:	68bb      	ldr	r3, [r7, #8]
 802577c:	2b02      	cmp	r3, #2
 802577e:	d105      	bne.n	802578c <mg_fwkey+0x28>
 8025780:	687b      	ldr	r3, [r7, #4]
 8025782:	2b01      	cmp	r3, #1
 8025784:	d102      	bne.n	802578c <mg_fwkey+0x28>
 8025786:	68fb      	ldr	r3, [r7, #12]
 8025788:	3b01      	subs	r3, #1
 802578a:	60fb      	str	r3, [r7, #12]
  if (bank == 2 && fw == MG_FIRMWARE_CURRENT) key++;
 802578c:	68bb      	ldr	r3, [r7, #8]
 802578e:	2b02      	cmp	r3, #2
 8025790:	d105      	bne.n	802579e <mg_fwkey+0x3a>
 8025792:	687b      	ldr	r3, [r7, #4]
 8025794:	2b00      	cmp	r3, #0
 8025796:	d102      	bne.n	802579e <mg_fwkey+0x3a>
 8025798:	68fb      	ldr	r3, [r7, #12]
 802579a:	3301      	adds	r3, #1
 802579c:	60fb      	str	r3, [r7, #12]
  return key;
 802579e:	68fb      	ldr	r3, [r7, #12]
}
 80257a0:	4618      	mov	r0, r3
 80257a2:	3710      	adds	r7, #16
 80257a4:	46bd      	mov	sp, r7
 80257a6:	bd80      	pop	{r7, pc}
 80257a8:	b07afed0 	.word	0xb07afed0

080257ac <mg_otadata>:
MG_IRAM static struct mg_otadata mg_otadata(int fw) {
 80257ac:	b590      	push	{r4, r7, lr}
 80257ae:	b089      	sub	sp, #36	@ 0x24
 80257b0:	af00      	add	r7, sp, #0
 80257b2:	6078      	str	r0, [r7, #4]
 80257b4:	6039      	str	r1, [r7, #0]
  uint32_t key = mg_fwkey(fw);
 80257b6:	6838      	ldr	r0, [r7, #0]
 80257b8:	f7ff ffd4 	bl	8025764 <mg_fwkey>
 80257bc:	61f8      	str	r0, [r7, #28]
  struct mg_otadata od = {};
 80257be:	f107 030c 	add.w	r3, r7, #12
 80257c2:	2200      	movs	r2, #0
 80257c4:	601a      	str	r2, [r3, #0]
 80257c6:	605a      	str	r2, [r3, #4]
 80257c8:	609a      	str	r2, [r3, #8]
 80257ca:	60da      	str	r2, [r3, #12]
  MG_INFO(("Loading %s OTA data", fw == MG_FIRMWARE_CURRENT ? "curr" : "prev"));
 80257cc:	4b13      	ldr	r3, [pc, #76]	@ (802581c <mg_otadata+0x70>)
 80257ce:	681b      	ldr	r3, [r3, #0]
 80257d0:	2b01      	cmp	r3, #1
 80257d2:	dd10      	ble.n	80257f6 <mg_otadata+0x4a>
 80257d4:	4b12      	ldr	r3, [pc, #72]	@ (8025820 <mg_otadata+0x74>)
 80257d6:	f641 1273 	movw	r2, #6515	@ 0x1973
 80257da:	4912      	ldr	r1, [pc, #72]	@ (8025824 <mg_otadata+0x78>)
 80257dc:	2002      	movs	r0, #2
 80257de:	f7e2 fba7 	bl	8007f30 <mg_log_prefix>
 80257e2:	683b      	ldr	r3, [r7, #0]
 80257e4:	2b00      	cmp	r3, #0
 80257e6:	d101      	bne.n	80257ec <mg_otadata+0x40>
 80257e8:	4b0f      	ldr	r3, [pc, #60]	@ (8025828 <mg_otadata+0x7c>)
 80257ea:	e000      	b.n	80257ee <mg_otadata+0x42>
 80257ec:	4b0f      	ldr	r3, [pc, #60]	@ (802582c <mg_otadata+0x80>)
 80257ee:	4619      	mov	r1, r3
 80257f0:	480f      	ldr	r0, [pc, #60]	@ (8025830 <mg_otadata+0x84>)
 80257f2:	f7e2 fbed 	bl	8007fd0 <mg_log>
  mg_flash_load(NULL, key, &od, sizeof(od));
 80257f6:	f107 020c 	add.w	r2, r7, #12
 80257fa:	2310      	movs	r3, #16
 80257fc:	69f9      	ldr	r1, [r7, #28]
 80257fe:	2000      	movs	r0, #0
 8025800:	f7db ff8e 	bl	8001720 <mg_flash_load>
  return od;
 8025804:	687b      	ldr	r3, [r7, #4]
 8025806:	461c      	mov	r4, r3
 8025808:	f107 030c 	add.w	r3, r7, #12
 802580c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802580e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8025812:	6878      	ldr	r0, [r7, #4]
 8025814:	3724      	adds	r7, #36	@ 0x24
 8025816:	46bd      	mov	sp, r7
 8025818:	bd90      	pop	{r4, r7, pc}
 802581a:	bf00      	nop
 802581c:	24000240 	.word	0x24000240
 8025820:	080290b8 	.word	0x080290b8
 8025824:	0802597c 	.word	0x0802597c
 8025828:	08027104 	.word	0x08027104
 802582c:	0802710c 	.word	0x0802710c
 8025830:	08027114 	.word	0x08027114

08025834 <mg_ota_commit>:
MG_IRAM bool mg_ota_commit(void) {
 8025834:	b580      	push	{r7, lr}
 8025836:	b086      	sub	sp, #24
 8025838:	af00      	add	r7, sp, #0
  bool ok = true;
 802583a:	2301      	movs	r3, #1
 802583c:	75fb      	strb	r3, [r7, #23]
  struct mg_otadata od = mg_otadata(MG_FIRMWARE_CURRENT);
 802583e:	1d3b      	adds	r3, r7, #4
 8025840:	2100      	movs	r1, #0
 8025842:	4618      	mov	r0, r3
 8025844:	f7ff ffb2 	bl	80257ac <mg_otadata>
  if (od.status != MG_OTA_COMMITTED) {
 8025848:	693b      	ldr	r3, [r7, #16]
 802584a:	2b03      	cmp	r3, #3
 802584c:	d01b      	beq.n	8025886 <mg_ota_commit+0x52>
    od.status = MG_OTA_COMMITTED;
 802584e:	2303      	movs	r3, #3
 8025850:	613b      	str	r3, [r7, #16]
    MG_INFO(("Committing current firmware, OD size %lu", sizeof(od)));
 8025852:	4b0f      	ldr	r3, [pc, #60]	@ (8025890 <mg_ota_commit+0x5c>)
 8025854:	681b      	ldr	r3, [r3, #0]
 8025856:	2b01      	cmp	r3, #1
 8025858:	dd0a      	ble.n	8025870 <mg_ota_commit+0x3c>
 802585a:	4b0e      	ldr	r3, [pc, #56]	@ (8025894 <mg_ota_commit+0x60>)
 802585c:	f641 129b 	movw	r2, #6555	@ 0x199b
 8025860:	490d      	ldr	r1, [pc, #52]	@ (8025898 <mg_ota_commit+0x64>)
 8025862:	2002      	movs	r0, #2
 8025864:	f7e2 fb64 	bl	8007f30 <mg_log_prefix>
 8025868:	2110      	movs	r1, #16
 802586a:	480c      	ldr	r0, [pc, #48]	@ (802589c <mg_ota_commit+0x68>)
 802586c:	f7e2 fbb0 	bl	8007fd0 <mg_log>
    ok = mg_flash_save(NULL, mg_fwkey(MG_FIRMWARE_CURRENT), &od, sizeof(od));
 8025870:	2000      	movs	r0, #0
 8025872:	f7ff ff77 	bl	8025764 <mg_fwkey>
 8025876:	4601      	mov	r1, r0
 8025878:	1d3a      	adds	r2, r7, #4
 802587a:	2310      	movs	r3, #16
 802587c:	2000      	movs	r0, #0
 802587e:	f7dc f899 	bl	80019b4 <mg_flash_save>
 8025882:	4603      	mov	r3, r0
 8025884:	75fb      	strb	r3, [r7, #23]
  return ok;
 8025886:	7dfb      	ldrb	r3, [r7, #23]
}
 8025888:	4618      	mov	r0, r3
 802588a:	3718      	adds	r7, #24
 802588c:	46bd      	mov	sp, r7
 802588e:	bd80      	pop	{r7, pc}
 8025890:	24000240 	.word	0x24000240
 8025894:	080290c4 	.word	0x080290c4
 8025898:	0802597c 	.word	0x0802597c
 802589c:	08027128 	.word	0x08027128
